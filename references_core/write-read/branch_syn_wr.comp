#version 460
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
#extension GLSL_EXT_shader_quad_control : enable

layout(set = 0, binding = 0)  buffer Buf {
	uint buf[];
};

layout(set = 0, binding = 2) buffer Checker {
    uint checker[];
};


layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void main() {
	uint subgroup_id = gl_SubgroupID;
	uint subgroup_size = gl_SubgroupSize;
    uint subgroup_local_id = gl_SubgroupInvocationID;
    uint num_workgroup = gl_NumWorkGroups.x;
    uint workgroup_size = gl_WorkGroupSize.x;
    uint workgroup_id = gl_WorkGroupID.x;
    uint workgroup_base = workgroup_size * workgroup_id;
    uint virtual_gid = workgroup_base + subgroup_id * subgroup_size +subgroup_local_id;
    uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
    uint read = 0;
    atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4); // write, should all write 1
    if (subgroup_local_id + 1 < subgroup_size) {
        // scope: invocation, storage: buffer, memory semantics: release
        // for memory semantics spec, see: https://registry.khronos.org/SPIR-V/specs/unified1/SPIRV.html#Memory_Semantics_-id-
        read = atomicLoad(buf[virtual_gid], 4, 64, 2); // read
    } else{
        read = atomicLoad(buf[virtual_gid], 4, 64, 2); // read
    }
    subgroupBarrier();
    atomicStore(checker[virtual_gid], read, 4, 64, 4);

}