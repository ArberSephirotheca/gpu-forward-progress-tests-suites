#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(((false) && true));
 for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if(false)
    {
    }
   else
    {
     if(((((bool(bvec4(bool(bool((! (! ((false) || false))))), false, false, true)))))))
      {
       if(false)
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              break;
             return;
            }
           else
            {
            }
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false || (((injectionSwitch.x > injectionSwitch.y)))))
          {
          }
         else
          {
           if((bool(bvec4(true, false, true, true))))
            {
             for(int _injected_loop_counter = ((1 << (((((int(2)) * 1)) - 0))) >> (int(2))); _injected_loop_counter > ((((0 | 0) | (1 ^ 1))) >> (int(3))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (1 & (int((injectionSwitch.x)) | ((int(ivec4(((((1) ^ 0)) | (1)), 0, 0, 1)))))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 do
                  {
                   if((false))
                    break;
                   if(((((vec2((injectionSwitch.x), (injectionSwitch.x)) + (injectionSwitch)).x > injectionSwitch.y))))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    break;
                   if((false))
                    continue;
                   for(int _injected_loop_counter = 0; ((((_injected_loop_counter)) >> 0) | (_injected_loop_counter)) < ((((true ? 1 : (_injected_loop_counter)))) * 1); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if((((mix(float((- 419.350)), float(injectionSwitch.x), (bool(bvec4(bool(true), true, false, (! (! (false)))))))) > injectionSwitch.y)))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          break;
                         break;
                        }
                       if((false))
                        return;
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       do
                        {
                         return;
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       if(((bool(bool(((true && ((injectionSwitch.x > injectionSwitch.y)))))))))
                        continue;
                      }
                     if((false))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                         return;
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if((((false) || false)))
                    continue;
                   if((false))
                    break;
                  }
                 while(((false) || ((injectionSwitch.x > injectionSwitch.y))));
                 if(((true && (false))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((((injectionSwitch.x > (((vec2(injectionSwitch[0], injectionSwitch[1])).y) - 0.0)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                   if((false))
                    continue;
                  }
                }
              }
            }
           else
            {
            }
          }
        }
      }
     if((false))
      break;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(true)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((false))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   do
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
    }
   while(false);
   if((false))
    return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if((false))
          break;
         return;
        }
       do
        {
         return;
        }
       while(false);
      }
    }
   else
    {
     if((false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > (0.0 + (injectionSwitch.y))))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      return;
    }
  }
 if((((false)) && true))
  {
   if((false))
    return;
   if(((bool(bvec3(false, false, false)))))
    {
     for(int _injected_loop_counter = ((1 << ((int(ivec3(int(4), 1, 0))))) >> (int(4))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 uint workgroup_base = ((((max(((clamp(workgroup_size, ((workgroup_size) * 1u), (~ (((~ (((workgroup_size) / 1u)))) + 0u)))) * workgroup_id), ((max(((1u ^ 1u) ^ (((min(uint(uvec3(workgroup_size, 1u, 0u)), uint(uvec3(workgroup_size, 1u, 0u))))))), workgroup_size)) * workgroup_id)))) << 0u) << 0u);
 do
  {
   if((false))
    continue;
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if((false))
    return;
  }
 while(((false) || false));
 if((! (! (false))))
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = ((1) >> 0); _injected_loop_counter != ((0 & (90280)) >> (int(5))); _injected_loop_counter --)
    {
     if(((((bool((bvec3(bvec4((bvec3(bvec4(bvec3((false || ((! ((! (! (false || (((bool(bvec2((bool(bvec2(((! (((((((bool(bvec2(bool(bvec3((true), false, true)), false)))) || false)) && true))))) && true, false))), true)))))))))))), true, true), false))), false))))) || false)) && true))
      {
       if(((((! (((true && (! (! (((false || (bool(bvec4(! ((false || ((clamp(injectionSwitch.x, ((true ? injectionSwitch.x : (- 38.03))), injectionSwitch.x)) > injectionSwitch.y))), false, false, true))))))))))))))))
        {
         if(((true && (((false)) && ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if(true)
          {
           if((false))
            return;
           if((false))
            return;
          }
         else
          {
          }
         if((((! (! ((bool(bool(true))))))) && true))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                continue;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                return;
              }
             else
              {
              }
            }
           if((false))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 do
                  {
                   if(false)
                    {
                     if(true)
                      {
                       if((false))
                        return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       return;
                      }
                     else
                      {
                       if((false))
                        continue;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if((false))
                    {
                     if((false))
                      break;
                     if(((injectionSwitch.x < (vec2(1.0, 1.0) * (injectionSwitch)).y)))
                      {
                       if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
                        return;
                       do
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           return;
                          }
                         if(((! (! (((false) || false))))))
                          continue;
                        }
                       while(false);
                      }
                     else
                      {
                      }
                     if((false))
                      continue;
                    }
                  }
                 while(false);
                }
               else
                {
                }
               if((false || ((false))))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
           if((false))
            {
             do
              {
               if((false))
                return;
              }
             while(false);
             if(((! (! (false)))))
              break;
             if(((bool(bool(false)))))
              continue;
             if(true)
              {
               if((false))
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   for(int _injected_loop_counter = ((0 ^ 0) | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 while(false);
                }
               do
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(false);
              }
             else
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((false))
              continue;
            }
           if(((((max((((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)) - vec2(0.0, 0.0))) - vec2(0.0, 0.0))), (((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)) - vec2(0.0, 0.0))) - vec2(0.0, 0.0))))).x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                return;
               for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             return;
             if((false))
              {
               if((((false) || false)))
                continue;
               break;
              }
             if(((! (! (false)))))
              break;
            }
           if((bool((bvec2(bvec4(bvec2(false, true), false, true))))))
            {
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            continue;
          }
         else
          {
           if((false))
            continue;
          }
        }
       if((false))
        continue;
      }
     else
      {
       if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
        {
         if((false))
          return;
         return;
        }
       if((false))
        continue;
      }
    }
   if((false))
    continue;
  }
 uint virtual_gid = (max(workgroup_base + ((((((subgroup_id) | (subgroup_id)) ^ 0u)) ^ (0u | uint((injectionSwitch.x))))) * subgroup_size, workgroup_base + ((((((subgroup_id) | (subgroup_id)) ^ 0u)) ^ (0u | uint((injectionSwitch.x))))) * subgroup_size)) + subgroup_local_id;
 if((false))
  return;
 if(((false || (false))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
    }
  }
 if(((((! (! (bool(bvec3((false) && true, true, false)))))))))
  {
   do
    {
     do
      {
       do
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(false);
       if((false))
        return;
      }
     while(false);
    }
   while(false);
  }
 uint next_virtual_gid = ((true ? workgroup_base : (clamp(subgroup_id, workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + ((((((false || (false)) ? (atomicExchange(num_workgroup, virtual_gid)) : ((true ? (subgroup_local_id + 1) : (((uint(((false ? (uvec3(129642u, 182192u, 155164u)) : (((false ? (uvec3(179928u, 828u, 75795u)) : uvec3(uvec4(uvec3(((workgroup_base % workgroup_base)), 1u, 0u), (9679u & 0u))))))))))) << (max(uint((injectionSwitch.x)), uint((injectionSwitch.x))))))))) * 1u)) % subgroup_size);
 if((false))
  return;
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     buf[virtual_gid] = 1;
    }
  }
 else
  {
   if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       return;
      }
    }
  }
 do
  {
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        break;
       continue;
      }
     for(int _injected_loop_counter = (int((injectionSwitch.x)) << ((max(int(6), int(6))))); _injected_loop_counter < (0 ^ (0 | 1)); _injected_loop_counter ++)
      {
       if(((! (! (((! ((! (false)))) || false))))))
        return;
      }
     if((false))
      break;
     if((((injectionSwitch.x > (vec2(mat3(injectionSwitch, 1.0, (injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 1.0))).y))))
      return;
     continue;
     if((false))
      break;
    }
   if((false))
    {
     if((((false) && true)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if(((((bool(bvec3(((false) || false), false, false)))) && true)))
        continue;
       if(((((((! (! ((bool(bool(injectionSwitch.x > injectionSwitch.y))))))) && true)))))
        {
         if((false))
          return;
         continue;
        }
       if((false))
        return;
       if(((! (! (false)))))
        {
         if(((bool(bvec3(false, false, true)))))
          break;
         continue;
        }
       do
        {
         return;
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if(((true && (false))))
          break;
        }
       else
        {
         return;
         if((false))
          return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       if((false || ((true && (true)))))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((bool(bvec4((min(((true ? injectionSwitch : (injectionSwitch))), injectionSwitch)).x < injectionSwitch.y, true, false, false))))))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
       if((false))
        continue;
      }
     continue;
    }
   if((false))
    break;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if((false))
      {
       if((((((injectionSwitch.x) + 0.0) > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = ((1 << ((((((max(int(1), int(1))))) + 0)) >> 0)) >> (int(1))); (false || (_injected_loop_counter > 0)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(((true && (false))))
          continue;
        }
       if((((bool(bool((false))))) || false))
        {
         if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
          continue;
         if((false))
          break;
         break;
        }
       continue;
       if((false))
        continue;
       if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((((false) && true)))
          continue;
         continue;
        }
      }
     int i = 0;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      break;
     if((((! (! (injectionSwitch.x < injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
          {
           if(((((1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             break;
             if((false))
              continue;
            }
           if(false)
            {
            }
           else
            {
             if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             if((false))
              return;
            }
           if((false))
            {
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if((false))
              {
               do
                {
                 return;
                 if((false))
                  continue;
                }
               while(false);
              }
             break;
             if((false))
              return;
             if(((! (! (false)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              continue;
            }
           if((false))
            break;
           if((! (! (false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 do
                  {
                   return;
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        break;
                       break;
                      }
                     if((false))
                      continue;
                     if((false))
                      return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                    }
                  }
                 while(false);
                }
               if(true)
                {
                 if((! (! ((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, true)))))))
                  return;
                }
               else
                {
                }
               break;
              }
             if((((false) || false)))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 break;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > int(((min(injectionSwitch.x, ((float((transpose(transpose(mat3(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, ((0.0) / 1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, (min(1.0, 1.0)), (mix(float(abs(1.0)), float((- 7205.6224)), bool(false))))), log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))))))))); _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             do
                              {
                               return;
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(false)
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = (0 ^ (1 ^ 0)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((! (! (true))))
                              {
                               return;
                              }
                             else
                              {
                              }
                             if((false))
                              continue;
                            }
                          }
                        }
                       if((false))
                        continue;
                       break;
                      }
                     if((((injectionSwitch.x > (clamp(injectionSwitch, (mat2(1.0) * (injectionSwitch)), (mix(vec2((20.23), (- 82.73)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
                      break;
                     if((false))
                      return;
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if((false))
                        return;
                      }
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         return;
                         if((false))
                          continue;
                        }
                      }
                     if(((! (((false || (bool(((bvec3(bvec4(bvec3(bvec4(bvec3(((! (false)) || false), false, true), false)), true))))))))))))
                      continue;
                     if((false))
                      {
                       if(((injectionSwitch.x < (max(injectionSwitch.y, injectionSwitch.y)))))
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           return;
                           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                            {
                             do
                              {
                               return;
                               if((false))
                                return;
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                          }
                         if((false))
                          return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if((((false) && true)))
                          {
                           if((((injectionSwitch.x > (0.0 + (injectionSwitch.y))))))
                            continue;
                           continue;
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 if((((((mix(float(((false ? (2.2) : (injectionSwitch.x)))), float((5.9)), bool(false))) / 1.0) > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   return;
                  }
                }
               else
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if(((((((bool(bvec2(false, true)))) && true)) || false)))
                    {
                     if(true)
                      {
                       if((false))
                        continue;
                       do
                        {
                         return;
                        }
                       while((bool((bvec3(bvec3((bvec3(bvec3(bvec3(false, false, false))))))))));
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    {
                     if((false))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     continue;
                     if((false))
                      break;
                    }
                   if((false))
                    continue;
                   break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(((((float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, (injectionSwitch.x), 1.0))) > injectionSwitch.y))))
                  continue;
                 if((false))
                  return;
                }
               if((false))
                return;
               if(((bool((! (! (true && ((bool(false))))))))))
                {
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    return;
                   continue;
                  }
                 if((true && ((false))))
                  break;
                 if((false))
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
                    return;
                   if((false))
                    return;
                   if((false))
                    break;
                   if((false))
                    continue;
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   else
                    {
                     if(((! (! (false)))))
                      continue;
                    }
                  }
                 break;
                 if((false))
                  return;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
               if((! (! (false))))
                {
                }
               else
                {
                 do
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         if((false))
                          return;
                        }
                      }
                    }
                   if((false))
                    return;
                   if(true)
                    {
                     for(int _injected_loop_counter = (((int((injectionSwitch.x)) & (~ - 43460))) / ((int((injectionSwitch.y)) << (int(2))) >> (int(2)))); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((false))
                        return;
                       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                              {
                               do
                                {
                                 do
                                  {
                                   return;
                                  }
                                 while(false);
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                               while(false);
                              }
                            }
                           while(false);
                           if((false))
                            continue;
                          }
                         do
                          {
                           do
                            {
                             if((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
                              return;
                             if((false))
                              {
                               if((false))
                                break;
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                 return;
                                }
                               if(true)
                                {
                                 if((false))
                                  break;
                                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                                    {
                                     return;
                                     if((false))
                                      {
                                       if((false))
                                        return;
                                       continue;
                                      }
                                    }
                                  }
                                 if((false))
                                  break;
                                }
                               else
                                {
                                }
                               if((false))
                                break;
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              break;
                             if((false))
                              break;
                            }
                           while(false);
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                         if((false))
                          return;
                         if(((((vec2(injectionSwitch[0], (float(mat2x3(injectionSwitch[1], 1.0, 0.0, 0.0, 0.0, length(0.0)))))).x > injectionSwitch.y))))
                          return;
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             return;
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                              }
                             else
                              {
                               if((false))
                                return;
                              }
                            }
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if((false))
                      break;
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                   if((false))
                    {
                     if((false))
                      continue;
                     if((false))
                      continue;
                     if((((false)) && true))
                      continue;
                     break;
                     if((false))
                      break;
                     if((false))
                      continue;
                    }
                  }
                 while(false);
                }
              }
            }
           if(((((((mix(float((- 8.1)), float(injectionSwitch.x), bool(true)))) / 1.0) > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            break;
           if((((! ((bool(bool(! ((((bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true))))))))))
            {
             if(((! (! (bool(bool(true)))))))
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            continue;
          }
        }
       while(false);
       if((! (! ((false)))))
        return;
       if((false))
        continue;
       if((false || ((false))))
        break;
       if(false)
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if((false))
          continue;
         do
          {
           if((((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true)))
            return;
          }
         while((! ((bool(bvec2(! (false), false))))));
        }
       if((false))
        break;
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
          }
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if((((((((injectionSwitch.x > (max(injectionSwitch.y, ((true ? injectionSwitch.y : (4169.5443)))))) && ((injectionSwitch.x < injectionSwitch.y)))) && (((vec2(mat4x2((mix(vec2((- 500.728), (- 2.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 1.0, (dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 1.0))).x < injectionSwitch.y)))))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if((false))
        return;
      }
     else
      {
       if((false))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(true)
      {
       if((false))
        break;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           break;
          }
         if((true && ((((false)) && true))))
          {
           if((false))
            {
             do
              {
               return;
               if((false))
                break;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           break;
           if((false))
            return;
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           buf[next_virtual_gid] = 2;
          }
        }
       while(false);
       if((false))
        break;
      }
     else
      {
      }
     if((false))
      break;
     if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(true)
          {
           do
            {
             if((false))
              break;
             do
              {
               if(((((max((vec2(mat2x3(injectionSwitch, 0.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, (float((transpose(transpose(mat4(0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), sqrt(1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, (injectionSwitch.x), 1.0, 0.0, 0.0, 0.0)))))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))), (vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > (min((0.0 + (injectionSwitch.y)), injectionSwitch.y))))))
                  {
                   if((false))
                    break;
                   break;
                  }
                 do
                  {
                   return;
                  }
                 while((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false))));
                }
              }
             while(false);
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
          }
        }
       if(false)
        {
         if((false || ((false))))
          break;
        }
       else
        {
         if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
          {
           do
            {
             return;
            }
           while(false);
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < (~ (~ (1))); _injected_loop_counter ++)
          {
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
               if((false))
                continue;
              }
            }
          }
        }
       if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        continue;
       if((false))
        {
         if(((! (! (false)))))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              break;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         continue;
        }
       if((((injectionSwitch.x > (vec2(mat2x3((vec2(injectionSwitch[0], (vec2(injectionSwitch[0], (1.0 * (injectionSwitch[1]))))[1])), (injectionSwitch.y), log((clamp(1.0, 1.0, 1.0))), 0.0, (max((float(vec4((mix(float(determinant(mat3((injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, (min(0.0, (mix(float(0.0), float(((- 8.2))), bool(false))))), 0.0, 1.0, cos(0.0)))), float((- 82.35)), bool(false))), 0.0, tan(0.0), sqrt(1.0)))), determinant(mat3((injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, (min(0.0, (mix(float(0.0), float(((- 8.2))), bool(false))))), 0.0, 1.0, cos(0.0)))))))).y))))
        {
         if(((((bool(bvec2(false, true)))) || false)))
          continue;
         if((false))
          break;
         break;
        }
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(true)
            {
             if(((bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, false)))))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       while(false);
       if(true)
        {
         if((bool(bool((false)))))
          break;
         if(((((! (((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x < injectionSwitch.y)))) && (((! (injectionSwitch.x > injectionSwitch.y)) && true)))))))))
          break;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if((false))
          return;
        }
       else
        {
        }
       if((false || ((false))))
        break;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          break;
        }
       else
        {
         if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, ((((injectionSwitch.x) - 0.0) < injectionSwitch.y)))))))
          {
           if((false))
            continue;
           break;
           if((false))
            continue;
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            continue;
           if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (- 8583.8108)), vec2((803.664), (((clamp((injectionSwitch)[1], (injectionSwitch)[(max(1, 1))], (injectionSwitch)[1]))) / 1.0)), bvec2(((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))), true))).y))))
            {
             do
              {
               return;
              }
             while(false);
            }
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((((bool((((false || (bool(injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))))))))
            {
             if(true)
              {
               return;
              }
             else
              {
               if(((! (! (! (! ((false))))))))
                return;
               if((false))
                continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         else
          {
           if((false))
            continue;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   else
    {
     do
      {
       if(true)
        {
         if((false))
          break;
         if((false))
          {
           if((false))
            continue;
           return;
          }
        }
       else
        {
         if(((bool(bvec3(false, true, true)))))
          break;
        }
       if((false))
        break;
      }
     while((bool(bvec4(((false) || false), false, true, true))));
     if((false))
      {
       if((false))
        continue;
       return;
      }
     if((false))
      {
       if((false))
        continue;
       continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         if((((false) && true)))
          return;
        }
       else
        {
        }
      }
     if(true)
      {
       for(int _injected_loop_counter = 0; ((bool(bvec4(bool(bvec3(((_injected_loop_counter) | (_injected_loop_counter)) != 1, true, true)), true, true, false)))); _injected_loop_counter ++)
        {
         if((false))
          break;
         if(false)
          {
           if(((! (((! (false)) || false)))))
            continue;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if((false))
            continue;
           if(true)
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   buf[next_virtual_gid] = ((2) << 0);
                  }
                 if((false))
                  continue;
                }
               while(false);
               do
                {
                 if(((bool(bvec4((true && (false)), ((injectionSwitch.x > injectionSwitch.y)), false, true)))))
                  return;
                 if((false || ((false))))
                  return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((false))
              break;
             if((false))
              break;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((bool(bool((bool(bvec3((false), true, false)))))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(((((! (! (false))))) && true))
                {
                 if((false))
                  break;
                 return;
                }
               return;
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               break;
              }
            }
           if((((false) || false)))
            {
             if((false))
              return;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 do
                  {
                   if((false))
                    break;
                   if(((bool(bool(bool(bvec4(true, true, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))))
                    {
                     if((! (! (false))))
                      {
                      }
                     else
                      {
                       if((false))
                        continue;
                       if(false)
                        {
                         if((false))
                          continue;
                        }
                       else
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           do
                            {
                             if((false))
                              return;
                             if((false))
                              break;
                             return;
                             if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
                              continue;
                            }
                           while(false);
                          }
                        }
                       if((((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, ((injectionSwitch.x > injectionSwitch.y)), false)))) || false))))
                        {
                         if(true)
                          {
                           return;
                           if((((((false || (injectionSwitch.x > injectionSwitch.y)))) || (false))))
                            continue;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         else
                          {
                          }
                         if(((! (! (false)))))
                          return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 while((bool(bvec2(false, false))));
                }
              }
             else
              {
              }
            }
           if(((! (! (false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               break;
              }
             if((false))
              continue;
             break;
            }
          }
        }
       if((false))
        continue;
       for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             return;
             if((false))
              break;
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
      }
     if((false))
      {
       for(int _injected_loop_counter = (clamp(0, 0, ((0) * 1))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 & - 76219); _injected_loop_counter < ((1) ^ 0); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              break;
             if((false))
              break;
             return;
            }
           if(((! (! ((bool(((bvec2(bvec4(bvec2((bvec3(bvec3(bvec3(bvec2(false, false), false))))), false, false)))))))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       continue;
       if((false))
        break;
      }
    }
  }
 while((! ((false || (! ((false || (false))))))));
}
