#version 460

struct _GLF_struct_3 {
 uint num_workgroup;
 bvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 vec4 _f1;
 vec4 _f2;
 mat3x4 _f3;
 float _f4;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 _GLF_struct_0 _f1;
 uvec4 _f2;
 vec4 _f3;
 bool _f4;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 uvec2 _f1;
 uint subgroup_local_id;
 bvec3 _f2;
 _GLF_struct_1 _f3;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(vec4(((true ? 1.0 : (degrees(- 6440.0489))))), uvec2(1u), gl_SubgroupInvocationID, bvec3(true), _GLF_struct_1(mat4x2(1.0), _GLF_struct_0(vec4(((1.0) - 0.0)), (min(vec4((min((clamp(1.0, (clamp(1.0, 1.0, 1.0)), 1.0)), 1.0))), (vec4(mat2x4(vec4(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0))))), vec4(1.0), mat3x4(1.0), 1.0), uvec4(1u), ((vec4(1.0)) / vec4(1.0, 1.0, 1.0, (mix(float(1.0), float((9.0)), bool(false))))), true));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if(((bool(bool((true && (false)))))))
    barrier();
   return;
   if((false))
    barrier();
  }
 if(((injectionSwitch.x < (mix(float(((float(vec4(4.4, 1.0, 1.0, 0.0))))), float(injectionSwitch.y), bool((((min(injectionSwitch.x, injectionSwitch.x)) < (max(injectionSwitch.y, injectionSwitch.y))))))))))
  {
   if((false || ((bool(bvec3((false), false, false))))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > (((clamp((((mix(float(float((vec2(vec2(vec2((log(1.0) + (((true ? clamp(injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y)), ((injectionSwitch.y) - 0.0)) : (61.98))))), 0.0)))))), float((- 4.0)), bool(false))))), injectionSwitch.y, injectionSwitch.y))) / cos(0.0))))))
    {
     if((false))
      barrier();
     if((bool(bvec3((false), ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       barrier();
       if((false))
        barrier();
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((((false) && true)))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(((bool(bvec2(((false) && true), true)))))
    barrier();
   if(((true && ((! (! (false)))))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((! (true && ((false || ((! (((false) && (false || ((((! (! (injectionSwitch.x < injectionSwitch.y)))))))))))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((false) && true)))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(false);
      }
     barrier();
    }
   if((false))
    barrier();
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_NumWorkGroups.x, bvec3(true), vec2(1.0));
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    continue;
  }
 while(false);
 if((false))
  {
   do
    {
     if(((bool(bool(((false) && ((injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           break;
           if((((false)) && true))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
         barrier();
         if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   for(int _injected_loop_counter = ((- 86374 & 0) >> (int(6))); _injected_loop_counter < ((1 << ((~ (~ (int(3)))))) >> (int(3))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   do
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   do
    {
     return;
    }
   while((! ((false || (! ((! (! (false)))))))));
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    continue;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(((! (! (false)))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
         if((bool(bvec3((! (! ((false)))), false, true))))
          barrier();
         for(int _injected_loop_counter = (0 >> (((int(8))) / 1)); _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              break;
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (((0 ^ 1) << (((int(3)) | 0))) >> (((int(3)) ^ 0))); _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 while(false);
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(false)
    {
     if((false))
      {
       do
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((bool(bvec4(false, false, false, false)))))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(((! (! (false)))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; ((true && (bool((bool(bvec3(bool(_injected_loop_counter > 0), true, false))))))); _injected_loop_counter --)
        {
         barrier();
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((! (! ((false || ((((false)) || false)))))))
      {
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((! (! ((injectionSwitch.x > ((mix(float((17.31)), float(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), bool(true)))))))))))
            barrier();
           for(int _injected_loop_counter = (0 & 13586); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
            {
             barrier();
            }
           if((false))
            barrier();
          }
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if(((bool(bvec3(false, false, true)))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         barrier();
        }
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((((false) || false)))
      barrier();
    }
   if(((! (! (((false) || false))))))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((true && ((((((bool(bvec2(bool((bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), true)))))) && true))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(((! (((! (false)) || false)))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (1u * (workgroup_base + subgroup_id * subgroup_size)) + _GLF_struct_replacement_2.subgroup_local_id;
 if((false))
  barrier();
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 | 1) << (int(5))) >> (int(5))); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   do
    {
     if((((false) && (! (((! ((bool(bvec4(true, false, true, false))))) || false))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((false) || false));
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint next_virtual_gid = ((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : (clamp(workgroup_base, workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + (max(((~ ((max((0u + ((clamp((min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), (clamp((min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))))) % (uint(uvec3(subgroup_size, (1u | ((1u << (uint(6u))) >> (uint(6u)))), 1u)))), ((~ ((max((0u + ((clamp((min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), (clamp((min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), (min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))))) % (uint(uvec3(subgroup_size, (1u | ((1u << (uint(6u))) >> (uint(6u)))), 1u))))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false || (true)))
  {
   ((((buf[virtual_gid] = ((max(int((min((((clamp(ivec4(((1) << 0), 1, 0, 1), ivec4(((1) << 0), 1, 0, 1), ivec4(((1) << 0), 1, 0, 1)))) << ivec4(0, 0, 0, 0)), ivec4(((1) << 0), 1, 0, 1)))), ((true ? ((int(ivec4(((1) << 0), 1, 0, 1))) << 0) : (- 63184))))))) | (uint(uvec3(0u, ((1u << (uint(2u))) >> (uint(2u))), (0u | (0u & 46798u))))))) << 0u);
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
  }
 if((! ((! (! (! ((bool(bvec4((false), false, false, false))))))))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if((false))
    return;
   if((false))
    {
     if((((((false)) || false) && true)))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((! (! ((false)))))
          barrier();
        }
       if(((false || (false))))
        barrier();
       barrier();
       if((false))
        continue;
      }
    }
   if((false))
    barrier();
  }
 while(false);
 if((uint(((uvec3((((~ ((min(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), ~ ((uint((injectionSwitch.x)) + (((_GLF_struct_replacement_2.subgroup_local_id + 1) >> 0u))))))))) * (0u ^ 1u)), 1u, (1u | 1u))) * uvec3(1u, 1u, 1u)))) < subgroup_size)
  {
   if(true)
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if(((((bool(bool(bool(bool((false)))))))) || false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = ((0) | (0)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
           if((false))
            barrier();
          }
         if((! (! ((((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)))))) && true)))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            return;
          }
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     if((! ((((false) && true) || (((((bool(bvec4(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), (! (! (false))), false, true)))))) || ((((((! ((((injectionSwitch.x > ((min((((false ? (7498.9975) : ((false ? ((float(vec2(- 1.8, 0.0)))) : injectionSwitch.y))))) / (max((clamp(1.0, ((true ? (mix(float((9.6)), float(1.0), bool(((injectionSwitch.x < injectionSwitch.y))))) : (- 2.6))), 1.0)), 1.0)), (clamp((((false ? (7498.9975) : ((false ? (min((- 1.8), (- 1.8))) : injectionSwitch.y))))) / (max((clamp(1.0, ((true ? 1.0 : (- 2.6))), 1.0)), 1.0)), (((false ? (7498.9975) : (((! (! (false))) ? (- 1.8) : injectionSwitch.y))))) / (max((clamp(1.0, ((true ? 1.0 : (- 2.6))), 1.0)), 1.0)), (((false ? (7498.9975) : ((false ? (- 1.8) : injectionSwitch.y))))) / (max((clamp(1.0, ((true ? 1.0 : (- 2.6))), 1.0)), 1.0)))))))))))))) || false)) && true))))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                barrier();
               barrier();
              }
             while(false);
            }
           barrier();
           if(((true && (false))))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ 0); _injected_loop_counter < (0 | (((1)) / 1)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           barrier();
           if((((false) || false)))
            return;
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     barrier();
    }
   if(true)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : (- 7.0)))))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         return;
        }
       if(true)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             barrier();
             if((false))
              {
               if((false))
                barrier();
               if((true && ((false || (((injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
                  break;
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               else
                {
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if(((! (! (((false) && true))))))
                barrier();
              }
            }
           else
            {
            }
           if((false))
            {
             if((true && ((false))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(((! (((! (((injectionSwitch.x > injectionSwitch.y)))) || false)))))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > ((false ? (injectionSwitch) : (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))
      return;
    }
   else
    {
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((bool(bool((true && ((false)))))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 + (~ ((1 * (~ ((((0)) / 1))))))); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              return;
             barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if(((bool(bvec4(false, false, false, (bool((bool(bool(bool(true)))))))))))
            barrier();
          }
         if((false))
          barrier();
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
     if(((true && ((false) || false))))
      {
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      break;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = ((1 << ((true ? ((int(((ivec4((clamp((clamp(int(4), int(4), ((int(4)) ^ 0))), (clamp(int(4), int(4), ((int(4)) ^ 0))), (clamp(int(4), int(4), ((int(4)) ^ 0))))), 1, (1 & 1), 0)) | (ivec4((clamp((clamp(int(4), int(4), ((int(4)) ^ 0))), (clamp(int(4), int(4), ((int(4)) ^ 0))), (clamp(int(4), int(4), ((int(4)) ^ 0))))), 1, (1 & 1), 0)))))) : (49518)))) >> (int(4))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((true && (false))))
            {
             if(((injectionSwitch.x > ((injectionSwitch.y) - 0.0))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(((true && (false))))
          continue;
         if((((injectionSwitch.x > (float(mat3((float(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((! ((bool(bvec2(! ((false || (bool(bvec4(false, false, true, false))))), true))))))))
        {
         if(((bool(bool(false)))))
          {
           if((false))
            barrier();
           continue;
          }
         break;
        }
       if((false))
        continue;
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(false);
   if((((false) && true)))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint((clamp(2, 2, 2))), 4, 64, 0);
    }
   while(false);
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 << (((int(3)) | (int(3))))) >> (int(3))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((((injectionSwitch.x > (float(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))))
            {
             if((false))
              return;
             if((false))
              barrier();
             barrier();
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((! ((false || (! ((false)))))))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((! (! ((false)))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         barrier();
         if((false))
          barrier();
        }
       if((false))
        return;
       break;
      }
    }
   if((false))
    barrier();
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((false))
        barrier();
       if((false))
        break;
       if(((! (! (false)))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((true && (((! (! (false)))))))
      {
       if(((bool(bvec3(false, false, true)))))
        return;
       continue;
       if((false))
        barrier();
      }
     if((((false || (((! (! (true))) && (((false || (((injectionSwitch.x < injectionSwitch.y)) && ((! (! ((false))))))))))))) || false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((((bool((((! (! (bool((((injectionSwitch.x > injectionSwitch.y)))))))) && true)))) || ((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(((! (! (bool(bvec3((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))), false, false)))))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if(((! (! (false)))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   subgroupAll((false || (false)));
   for(int _injected_loop_counter = ((false ? (- 64067) : 1)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((((((injectionSwitch.x > injectionSwitch.y)) || (((! (! ((bool(bool((bool(((bool(false)) || false)))))))))) || false))) || false))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         return;
        }
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((bool((true && (bool(((false) && true))))))))
          barrier();
         if((false))
          barrier();
         return;
         if((false))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
      }
    }
   if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(true)
          {
           barrier();
          }
         else
          {
           if((((((false) || false)) && true)))
            continue;
          }
        }
      }
     while(false);
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false) && true)))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > (((vec2(vec4(injectionSwitch, 1.0, 1.0))) * mat2(1.0))).y))))
    {
     if(false)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (! ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((((! (! ((((((false)) && true)) || false)))) && true)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     if((false))
      barrier();
     barrier();
     if((false))
      return;
     if((((((true ? injectionSwitch : (vec2(- 6962.8933, - 69.34)))).x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   if(((bool(bool(false))) || ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = (((int((injectionSwitch.x)) | ((min(0 ^ 1, 0 ^ 1))))) | 0); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((bool(bool((bool(bvec3((false || (false)), true, true))))))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     barrier();
    }
   atomicStore(buf[(0u + (((1u * ((0u ^ ((((0u >> (((uint(2u)) << 0u))) | (next_virtual_gid)) | ((0u >> (((uint(2u)) << 0u))) | (next_virtual_gid))))))))))], uint(2), 4, 64, 0);
   if((false))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     subgroupAll(true);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((bool(bvec4((false), true, false, true))))
    {
     if((false))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), false))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
    }
   do
    {
     if((bool(bvec3((false), true, false))))
      barrier();
    }
   while((true && (false)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((false || ((false || (((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if(((((injectionSwitch.x > injectionSwitch.y))) && true))
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
        }
       barrier();
       if((false))
        barrier();
      }
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
