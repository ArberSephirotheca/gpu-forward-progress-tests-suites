#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << ((int(ivec3((~ (~ (int(7)))), 0, 1))))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if(false)
    {
     if((false))
      continue;
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         do
          {
           return;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       barrier();
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((bool(bvec2((false), true))))
    {
     if((false))
      barrier();
     if(true)
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if(((! (! (false)))))
          {
           for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
           if((false))
            return;
           if((false))
            return;
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          return;
         do
          {
           if((false))
            barrier();
          }
         while(((false) || false));
         do
          {
           return;
           if((false))
            barrier();
          }
         while(false);
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      return;
     if(((bool(bvec2(false, true)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        return;
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        return;
      }
    }
   if((false))
    {
     if((false || ((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if((false))
        return;
       return;
      }
     if(((! ((bool(bvec4(! (false), false, false, true)))))))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   do
    {
     if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if(((bool(bvec2(false, false)))))
          barrier();
         return;
        }
       return;
      }
    }
   while(false);
   if(((! (! (false)))))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if((false))
  return;
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        continue;
      }
     else
      {
       return;
       if((false))
        return;
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((! (! ((! (((! (((true) || false))) && true)))))))
  {
   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec2(false, true)))))
            return;
           break;
          }
         if((false))
          break;
         return;
        }
       if(true)
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     do
      {
       if((false))
        return;
       if((false))
        break;
       if((false))
        {
         if((false))
          barrier();
         continue;
        }
       if((false))
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          break;
         if((false))
          continue;
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((false))
            {
             if((false))
              continue;
             barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           if((false))
            {
             if(((true && (false))))
              {
               if((false))
                break;
               barrier();
              }
             if((false))
              barrier();
             break;
             if((false))
              return;
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                return;
               continue;
              }
            }
           else
            {
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             return;
             if((false))
              barrier();
            }
          }
         if((false))
          continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           do
            {
             if(((bool(bvec4(false, false, true, false)))))
              break;
             barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(((((true && (((bool(bvec2((clamp(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y, ((injectionSwitch.x > injectionSwitch.y))))) && ((injectionSwitch.x < injectionSwitch.y)))))))))
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          break;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
     if((false))
      barrier();
    }
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    return;
  }
 if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((bool(bool(false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((false || (false))))
  {
   if(true)
    {
     return;
    }
   else
    {
     if(((true && (((false) || false)))))
      return;
    }
  }
 if(((false || (false))))
  return;
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         break;
        }
       if((bool(bvec4((false), true, true, false))))
        {
         do
          {
           return;
           if((false))
            barrier();
           do
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
              }
            }
           while(false);
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            break;
           return;
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((false) || false)))
            {
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             barrier();
            }
           barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(3))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool((bvec3(bvec3(bvec3(false, true, false))))))))
          barrier();
         return;
         if((false))
          break;
        }
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
   if(true)
    {
     do
      {
       if((false))
        break;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((((false) && true)))
            continue;
           barrier();
          }
        }
       if((false))
        {
         if((false))
          break;
         barrier();
        }
      }
     while(false);
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        return;
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    return;
  }
 uint next_virtual_gid = workgroup_base + ((subgroup_id) | (subgroup_id)) * (clamp(subgroup_size, subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   do
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      return;
    }
   while(false);
   if((false))
    return;
   barrier();
   if((false))
    return;
   if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
    return;
  }
 if((((injectionSwitch.x > (clamp((clamp((vec2(injectionSwitch[0], injectionSwitch[1])), (vec2(injectionSwitch[0], injectionSwitch[1])), (vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch, injectionSwitch)).y))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(true)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((! (! (true))))
          {
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((((false) && true)))
      barrier();
     if((false))
      barrier();
    }
   if(((((false || (false))) && true)))
    return;
   barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(((true && (false))))
        barrier();
       if((false))
        return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      return;
    }
  }
 buf[virtual_gid] = 1;
 for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > ((0) | (0)); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 >> (int(7))) >> (int(5))); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            return;
           if((false))
            continue;
          }
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        barrier();
       if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          continue;
         continue;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((false) || false)))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              continue;
             if((((((false ? (distance(vec4(2.1, 8361.5329, - 2.8, - 493.494), vec4(- 974.217, 438.059, - 4785.8390, 730.392))) : injectionSwitch.x)) > injectionSwitch.y))))
              {
               if((false))
                barrier();
               continue;
              }
             if(false)
              {
              }
             else
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            return;
           if(false)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(true)
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           break;
          }
        }
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     if(((((mix(float((- 254.515)), float((float(float(injectionSwitch.x)))), bool(((injectionSwitch.x < injectionSwitch.y))))) > (vec2(((vec4(((true ? injectionSwitch : (injectionSwitch))), 1.0, (injectionSwitch.y))) * mat4(1.0)))).y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
           if((false))
            break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           break;
          }
        }
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        break;
      }
    }
   while(false);
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     continue;
    }
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(true)
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       while(false);
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         barrier();
        }
       do
        {
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               barrier();
              }
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            {
             if(((true && (((((true && (! (! (false)))))) && true)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  return;
                }
              }
             if((false))
              barrier();
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
               if((false))
                return;
               if((false))
                barrier();
              }
             else
              {
               return;
               if((false))
                barrier();
              }
             if((false))
              return;
             if((false))
              barrier();
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if((false))
              {
               if((false))
                break;
               break;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if((false))
              return;
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 if(((! (! (false)))))
                  barrier();
                 if((false))
                  continue;
                 do
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     return;
                    }
                   if((false))
                    barrier();
                   barrier();
                   if(((bool(bool(false)))))
                    return;
                  }
                 while(false);
                 if((false))
                  barrier();
                }
              }
             if(true)
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              return;
            }
           do
            {
             barrier();
             if((false))
              continue;
            }
           while(false);
          }
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            barrier();
           continue;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               barrier();
              }
             if((false))
              {
               if(((false || (false))))
                continue;
               continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if((false))
              break;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               break;
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(((! (! (false)))))
            return;
           if((false))
            barrier();
           if((((((false)) && true)) && true))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(true)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(true)
                {
                 return;
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    return;
                   break;
                  }
                }
               else
                {
                 if((false))
                  break;
                }
              }
             if((false))
              return;
            }
           else
            {
            }
          }
         if((false))
          break;
         if((false))
          continue;
         if((((! (! (true && (false)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if((false))
            {
             if(((false || (false))))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          continue;
        }
       if((false))
        barrier();
       if(((! ((bool(bvec4(! (false), false, true, true)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(false)
        {
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            barrier();
           continue;
           if((false))
            break;
          }
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if(((false || (false))))
              break;
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                 if((false))
                  return;
                }
              }
            }
           if((false))
            continue;
           barrier();
          }
         return;
        }
       do
        {
         if((false))
          barrier();
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              barrier();
             if((((bool(bvec3(bool((bvec2(bvec3(bvec2(false, false), true)))), true, true))))))
              return;
             barrier();
             if((false))
              continue;
            }
          }
         if((false))
          break;
         return;
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            continue;
           if((false))
            barrier();
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             return;
            }
           if((false))
            return;
           if((false))
            {
             if((false))
              continue;
             if((false))
              barrier();
             if((false))
              continue;
             return;
            }
          }
         if((false))
          barrier();
         if((false))
          break;
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
           if((false))
            break;
          }
        }
       while(false);
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((bool(bvec2((false), ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if((false))
              {
               if((((false) && true)))
                barrier();
               break;
              }
             break;
            }
           return;
           if((false))
            return;
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if(((! (! (((! ((bool(bvec3(! (((vec2((min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), false)))))))))))
          {
           if((false))
            return;
           if((false))
            {
             if(true)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  break;
                 barrier();
                }
               if((false))
                continue;
              }
             else
              {
              }
            }
           if((bool(bvec3(((bool(bvec4(false, true, ((injectionSwitch.x < injectionSwitch.y)), false)))), false, ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               barrier();
              }
             if((false))
              {
               if(true)
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
               continue;
               if((false))
                barrier();
              }
             continue;
             if((false))
              barrier();
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
            }
           if((false))
            return;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             barrier();
            }
           do
            {
             if(true)
              {
               if((false))
                break;
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             else
              {
              }
            }
           while(false);
           return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((false || (false))))
              break;
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if((false))
        return;
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         continue;
        }
      }
     if((false))
      return;
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
        }
       continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if(((((true && (false))) || ((false || ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(false)
          {
          }
         else
          {
           if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         break;
         if(((bool(bool(false)))))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
           if(((! ((! (! (! (false))))))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   while((bool(bool(false))));
   if((false))
    break;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if(true)
  {
   if((((false) && true)))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
      }
     while((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), false))));
     barrier();
     if((false))
      {
       if((bool(bvec3(false, true, false))))
        {
         if((false))
          return;
         if((false))
          return;
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         barrier();
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((false || (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((((1 << (int(5))) >> (int(5))) << (int(5))) >> ((((min(int(5), int(5)))) - 0))); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        break;
       return;
      }
     if((false))
      return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((injectionSwitch.x) / 1.0) > injectionSwitch.y)))
  {
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
         if((false))
          {
           if((false))
            return;
           if(((bool(bvec3(false, true, false)))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if((false))
          return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false || (false)))
        {
        }
       else
        {
         if((false))
          {
           if(((((bool(bool(false)))) && true)))
            {
             if((false))
              return;
             barrier();
            }
           for(int _injected_loop_counter = (0 << ((0 ^ (int(7))))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
            }
          }
        }
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        {
         if((false))
          return;
         do
          {
           if((false))
            continue;
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
            {
             if(((false || ((bool(bool(bool(bvec2((((false)) && true), false)))))))))
              break;
             if((! (! ((true && ((((false) || false))))))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(false);
        }
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          {
           if((((((false) || false)) && true)))
            return;
           barrier();
          }
         barrier();
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
             if((false))
              {
               if((false))
                return;
               return;
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bool(((false) || false))))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            barrier();
           return;
          }
         barrier();
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((0.0 + ((((injectionSwitch.y) + 0.0))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      {
       if((false))
        {
         if(true)
          {
           return;
           if((false))
            return;
          }
         else
          {
          }
        }
       if((false))
        barrier();
       return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         barrier();
         if((false))
          {
           if((false))
            return;
           barrier();
          }
        }
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != (1 ^ (0 >> (int(3)))); _injected_loop_counter ++)
            {
             if(false)
              {
               if((false))
                continue;
              }
             else
              {
               return;
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
       if((false))
        return;
       if((false))
        return;
      }
     if((((injectionSwitch.x > (max((float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0))), injectionSwitch.y))))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if(((false || (false))))
      barrier();
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         do
          {
           if(true)
            {
             if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
              {
               if((false))
                continue;
               return;
              }
            }
           else
            {
            }
           if(((! (! (false)))))
            {
             if((false))
              continue;
             return;
             if((false))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((false))
              barrier();
             continue;
            }
           if(((bool(bvec3((! (! (false))), false, false)))))
            return;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((false))
              continue;
             return;
             if((false))
              return;
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 return;
                }
              }
            }
           barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if(true)
              {
               if((false))
                return;
               if(true)
                {
                 if((false))
                  return;
                 if(((false || (false))))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
             if((bool(bool(true))))
              {
               if((false))
                continue;
               if((false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         while(false);
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       return;
      }
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            continue;
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         continue;
        }
       if((false))
        barrier();
       if((false))
        {
         if(((bool(bool(false)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if((false))
          barrier();
         barrier();
        }
       do
        {
         if((false))
          {
           if((false))
            return;
           return;
           if((false))
            barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        barrier();
       for(int _injected_loop_counter = (min(1, 1)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       if((false))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((false))
            barrier();
           barrier();
           if((false))
            continue;
          }
         break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while((true && (((injectionSwitch.x > injectionSwitch.y)))));
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     if((false))
      barrier();
     subgroupAll(false);
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 ^ ((1 << (int(0))) >> (int(0)))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if(((true && (false))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                continue;
               if((false))
                {
                 if(((false || (false))))
                  continue;
                 continue;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           barrier();
           if(((! (! (false)))))
            continue;
          }
         if((false))
          break;
         if((false))
          barrier();
         if(true)
          {
           return;
          }
         else
          {
           if((false))
            break;
          }
         if((false))
          barrier();
         if((false))
          return;
        }
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
         if((false))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           barrier();
           if((false))
            return;
          }
         if(((bool(bvec2(false, true)))))
          barrier();
         if(((bool(bvec3(false, true, true)))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            return;
           if((false))
            return;
           return;
           if((false))
            barrier();
           if((false))
            return;
          }
        }
       else
        {
         if(((true && (false))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> ((0 | (int(4))))); _injected_loop_counter ++)
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
             if((false))
              return;
            }
          }
         if(((false || (false))))
          barrier();
         return;
        }
      }
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              continue;
             if((false))
              continue;
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
            }
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     do
      {
       if((((bool(bvec3((bool(bvec4((false), true, false, ((injectionSwitch.x < injectionSwitch.y))))), ((injectionSwitch.x > injectionSwitch.y)), true))) && true)))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           continue;
          }
         return;
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             if((((false) && true)))
              return;
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               return;
              }
            }
           while(false);
           if(((((bool(bool(bool(bvec2(false, false))))))) && ((injectionSwitch.x < injectionSwitch.y))))
            {
             if(((true && ((false || (false))))))
              barrier();
            }
           else
            {
             if(((bool((bool(bvec3(bool(((false) || false)), false, false)))))))
              continue;
             if((false))
              return;
             return;
             if((false))
              barrier();
             if((false))
              continue;
             if((false))
              break;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                continue;
               if(((bool(bool(false)))))
                return;
               barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((false) && true)))
            {
             if((false))
              {
               if((false))
                return;
               if((false))
                break;
               continue;
              }
             if((false))
              barrier();
             if(true)
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                break;
              }
             else
              {
               if((false))
                break;
              }
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              return;
             if((false))
              barrier();
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | (0)); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   for(int _injected_loop_counter = ((~ ((min(~ ((((0 + (0 << (((int(5)) | (int(5))))))) / 1)), ~ ((((0 + (0 << (((int(5)) | (int(5))))))) / 1))))))); _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               do
                {
                 barrier();
                }
               while(false);
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 continue;
                }
               barrier();
              }
             while(((false) && true));
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if((false))
                  continue;
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if(((! (! ((bool(bvec2(false, false))))))))
            return;
           if((false))
            barrier();
           for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             do
              {
               if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
               if((false))
                {
                 if((false))
                  return;
                 if((false))
                  barrier();
                 return;
                }
              }
             while(false);
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               barrier();
              }
            }
          }
         subgroupAll(true);
         if(((bool(bvec4(false, true, true, true)))))
          {
           if(true)
            {
             if((false))
              continue;
             barrier();
            }
           else
            {
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((false)) && true))
      barrier();
     if((false))
      {
       if(((bool((! (! (bool(false))))))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            continue;
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
}
