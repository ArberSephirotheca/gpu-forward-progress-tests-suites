#version 460

struct _GLF_struct_10 {
 int _f0;
 vec3 _f1;
 mat2 _f2;
 mat4x2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 uint _f1;
 mat4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 mat4x3 _f2;
 mat3x4 _f3;
 vec4 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_6 {
 bvec2 _f0;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 vec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 ivec3 _f1;
 float _f2;
 vec2 _f3;
 vec4 _f4;
 bvec4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 mat3x2 _f1;
 vec2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_12 {
 uint num_workgroup;
 _GLF_struct_4 _f0;
 mat2x4 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_11 _f3;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((((clamp(((injectionSwitch.x) / 1.0), injectionSwitch.x, (mix(float(injectionSwitch.x), float((472.332)), bool(false))))) > injectionSwitch.y)))) || ((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > (mix(float((26.50)), float((((true && (false)) ? (6333.8626) : injectionSwitch.y))), bool(true))))));
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; ((_injected_loop_counter > int((injectionSwitch.x))) || false); _injected_loop_counter --)
  {
   if((bool(bvec4((false), true, false, true))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(gl_NumWorkGroups.x, _GLF_struct_4(_GLF_struct_0(((ivec4(1)) ^ ivec4(0, 0, 0, 0)), mat3x2(1.0), vec2(((true ? ((1.0) * 1.0) : (- 0.0)))), mat3x2(1.0)), _GLF_struct_1(mat2(1.0)), _GLF_struct_2(mat2(1.0)), _GLF_struct_3(mat4(1.0), ivec3(1), 1.0, vec2(1.0), vec4(1.0), bvec4(true), mat2x3((((min((clamp(1.0, 1.0, (min(1.0, (((max((float(vec2((max((min((clamp(1.0, 1.0, 1.0)), 1.0)), ((false ? (4192.5759) : ((true ? (min(1.0, 1.0)) : (5.8))))))), (max(1.0, 1.0))))), (float(vec2((max(1.0, 1.0)), 1.0)))))) - 0.0))))), (clamp((float(mat4x3(1.0, 0.0, 1.0, 0.0, (dot(vec4(1.0, 1.0, 1.0, sqrt(0.0)), vec4(0.0, 0.0, 0.0, sqrt(1.0)))), 1.0, 1.0, 1.0, sin(0.0), 1.0, sqrt(cos(0.0)), 0.0))), 1.0, (min(1.0, (((float(vec2((max(1.0, 1.0)), 1.0)))) - 0.0))))))) + ((true ? (injectionSwitch.x) : (- 46.93))))))), bvec4(true)), mat2x4(1.0), _GLF_struct_7(_GLF_struct_5(mat4(1.0), mat4x3(1.0), uvec2(1u), vec3(1.0), vec3(1.0)), _GLF_struct_6((bvec2(bvec2(bvec2(true)))))), _GLF_struct_11(_GLF_struct_8(bvec3(true), ivec3(1), mat3x2(1.0), vec2(1.0)), _GLF_struct_9(vec2(((false ? (856.903) : (mix(float((((((((27.22) / (injectionSwitch.y)))) / 1.0) - ((0.0) - 0.0)))), float(1.0), bool((! (((! (true)) || false))))))))), 1u, ((true ? mat4((((mix((mix(float(float((35.65))), float((5.7)), bool(false))), float((mix((min(float(((- - 378.526))), (max(float(((- - 378.526))), float(((- - 378.526))))))), float(1.0), bool(true)))), bool(true)))) / ((true ? 1.0 : (- 64.55))))) : (mat4(87.37, 427.912, - 2.6, - 1.8, - 9.0, - 945.746, 58.48, 0.0, - 265.158, - 28.96, - 7.1, 409.640, - 4.0, - 1419.3825, - 3.7, 7.9)))), uvec4(((((false ? (min(subgroup_size, subgroup_id)) : 1u))) | 0u))), mat4x3(1.0), mat3x4(1.0), vec4(1.0), _GLF_struct_10((~ ((min(~ ((~ (((~ ((~ (~ ((int(ivec3((0 + (1)), 0, 1))))))))) | (0 | 0)))), ~ ((((~ (~ ((0 + (1))))) | (~ (~ ((0 + (1)))))))))))), (clamp(vec3(((mix(float((float(false))), float(max(1.0, 1.0)), bool(((injectionSwitch.x < injectionSwitch.y))))))), vec3(((mix(float((float(false))), float(max(1.0, 1.0)), bool(((injectionSwitch.x < (clamp(injectionSwitch.y, injectionSwitch.y, (mix(float((4.4)), float(injectionSwitch.y), bool(true)))))))))))), (max(vec3(((mix(float((float(false))), float(max(1.0, 1.0)), bool((! (! (((bool(bool((false || ((! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))))))), vec3(((mix(float((float(false))), float(max(1.0, 1.0)), bool(((injectionSwitch.x < injectionSwitch.y))))))))))), mat2((((((float(vec2(1.0, (max(0.0, 0.0))))) - 0.0)) * 1.0))), mat4x2((((false ? (- 785.807) : (((true ? 1.0 : (- 1.5)))) - 0.0)))), ivec2(((int(((int(0)) >> ((0) | 0)))) | (1))))));
 if((((bool(bvec3(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true)), false, true))))))
  barrier();
 uint workgroup_size = (max((((true ? (~ (~ (uint(uvec3((((((1u * (((gl_WorkGroupSize.x)) ^ 0u)) | (clamp((((0u ^ ((true ? ((1u * (((gl_WorkGroupSize.x)) ^ 0u))) - 0u : (atomicMin(subgroup_size, 121864u))))))), (1u * (((((gl_WorkGroupSize.x)) ^ 0u)) | 0u)), (1u * ((((uvec3(uvec4(gl_WorkGroupSize, 0u))).x)) ^ 0u)))))) * 1u)), 1u, 1u))))) : (subgroup_local_id)))), (((((1u * (((((~ (~ ((gl_WorkGroupSize.x))))) | ((gl_WorkGroupSize.x)))) ^ 0u)) | (clamp((((1u * (((((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)))) ^ 0u))) - 0u), (1u * ((((min(gl_WorkGroupSize, gl_WorkGroupSize)).x)) ^ 0u)), (1u * (((~ (~ (((true ? (gl_WorkGroupSize.x) : (154492u))))))) ^ 0u)))))) * 1u))));
 if((false))
  barrier();
 if(((((bool(bvec4(false, false, true, false)))) || false)))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (clamp(((((workgroup_base)) | 0u) | (workgroup_base)), workgroup_base, workgroup_base)) + subgroup_id * ((subgroup_size) ^ 0u) + subgroup_local_id;
 if(true)
  {
   for(int _injected_loop_counter = 1; (true && (_injected_loop_counter != 0)); _injected_loop_counter --)
    {
     if(((true && (((((false) || false) && true))))))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 0; ((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec3(false || ((! (! (_injected_loop_counter < 1)))), true, false)))))); _injected_loop_counter ++)
          {
           if(((((dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, (dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))))) * (injectionSwitch.x)) < (vec2(injectionSwitch[0], ((injectionSwitch[1]) / 1.0))).y)))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             if((((((bool(bool(bool(bool(false))))) || false)))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               while(false);
              }
            }
           else
            {
            }
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % ((subgroup_size) | (subgroup_size)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (! ((! (((bool(bvec3((! ((false || (! (((true && (false)))))))), false, false))) && true)))))))))
  barrier();
 for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (0 >> ((min(int(4), int((0 | (4))))))); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if(((injectionSwitch.x < (mix((float(vec3((min(((((false ? (- 2.2) : float(injectionSwitch.y)) - 0.0))), (max(float(injectionSwitch.y), float(injectionSwitch.y))))), 1.0, 1.0))), float((- 2.9)), bool(false))))))
    {
     if((((! ((! (! (! (((bool(bvec4(bool(bvec2((false), (((((float(vec3(injectionSwitch.x, 0.0, 1.0)))) - 0.0) < injectionSwitch.y)))), true, false, false)))))))))) || false)))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       while(false);
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
   else
    {
     if((false))
      barrier();
     if(((bool(bvec2(false, false)))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if(true)
    {
     do
      {
       barrier();
      }
     while(false);
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
   ((0u ^ ((((((((~ (~ ((((buf[virtual_gid] = (int(int(1))))) * 1u)))) | 0u)) >> 0u)) ^ ((0u) ^ 0u))) >> (max(0u, 0u)))));
   if((false))
    barrier();
  }
 else
  {
  }
 do
  {
   do
    {
     if(true)
      {
       if(((bool(bvec2(false, false)))))
        barrier();
      }
     else
      {
      }
     if((true && (false)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((max(subgroup_local_id + (0 + (1)), (((~ (((false ? (87601u) : (((~ (~ (~ (subgroup_local_id))))) >> 0u))))) + (((int(ivec3(int(ivec4(0, 1, 0, 1)), 1, int((injectionSwitch.x)))))) + (1))) | (max((subgroup_local_id + (0 + (1))), (subgroup_local_id + (0 + (1)))))))) < subgroup_size)
        {
         if(false)
          {
          }
         else
          {
           if((! (! (false))))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             atomicStore(buf[next_virtual_gid], uint(2), (((int((~ (~ ((max(ivec4((~ (~ (4))), 1, (1 | 0), 1), ivec4((~ (~ (4))), 1, (1 | 0), 1)))))))) ^ 0)), 64, (max(0, 0)));
            }
          }
         if(((false || ((! (! ((injectionSwitch.x < injectionSwitch.y))))))))
          {
           if(((bool(((bvec3(bvec4((bvec3(bvec4((bvec3(bvec3(bvec3(((bvec3(bvec3(bvec3(bvec3(bvec3((bvec3((((bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(bvec3((bool(bvec3(false, true, (true && (true))))), true, true)), false)), false)))))))))))))))))))), false))), true))))))))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         if(false)
          {
           do
            {
             if(((bool((bvec2(bvec2(bvec2((false || (false)), false))))))))
              {
               if(((((((! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                barrier();
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           while(false);
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((((false || (bool(bvec3(bool(bool((((injectionSwitch.x > injectionSwitch.y))) && true)), false, true)))))))))
              barrier();
             subgroupAll(false);
            }
           else
            {
            }
           if(((bool(bvec2(false, false)))))
            barrier();
          }
         do
          {
           do
            {
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               for(int _injected_loop_counter = 1; (min(_injected_loop_counter, _injected_loop_counter)) != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while((bool(bool(false))));
        }
       else
        {
         do
          {
           atomicStore(buf[next_virtual_gid], (uint(uint(uint((clamp(2, 2, 2)))))), ((((4) << 0)) >> 0), 64, 0);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         subgroupAll((false || (true)));
        }
       if((false))
        {
         if(((true && (! (! ((false)))))))
          barrier();
         barrier();
        }
      }
    }
   while(((true && (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))))));
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
}
