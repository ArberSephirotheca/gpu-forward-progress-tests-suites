#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(false)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false || (((injectionSwitch.x < injectionSwitch.y)))))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(4))); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(true)
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     else
                      {
                      }
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 while(false);
                }
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if(true)
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 do
                  {
                   if(((injectionSwitch.x < (max(injectionSwitch, injectionSwitch)).y)))
                    {
                     if(((((((! (! (injectionSwitch.x > injectionSwitch.y))))))) || false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                         barrier();
                        }
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 while(false);
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(((bool(bool(false)))))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             do
              {
               for(int _injected_loop_counter = ((((1 << (int(4)))) / 1) >> (int(4))); _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if(((true && (false))))
      {
       if(true)
        {
         barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(false);
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((false) && true))
  {
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   if(((! (! (false)))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((bool(bvec2(false, true)))))
  {
   if((((false) && true)))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((true ? gl_NumWorkGroups.x : (subgroup_local_id)));
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_size = (uint(uvec2(gl_WorkGroupSize.x, 1u)));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = ((((((gl_WorkGroupID)) | ((gl_WorkGroupID))) | uvec3(0u, (uint(uvec3(((0u) | (0u >> (uint(6u)))), 1u, 0u))), 0u))) ^ uvec3(0u, 0u, 0u)).x;
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if(false)
  {
   if((true && ((bool(bvec2((false), false))))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((((! (((! ((injectionSwitch.x > injectionSwitch.y))) || false))))))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > (min(((injectionSwitch.y) / 1.0), injectionSwitch.y))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((bool(bvec2(bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))), true))))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
     if((! ((true && (! (true))))))
      {
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > (float(mat3(injectionSwitch.y, ((((injectionSwitch.x < injectionSwitch.y)) ? 1.0 : (85.91))), 1.0, sin(0.0), (min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0)))))))
  barrier();
 uint next_virtual_gid = workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if((false || ((bool(bool(false))))))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 if((false))
  barrier();
 if(((((((! (! ((bool(bool(injectionSwitch.x > injectionSwitch.y))))))) && true)))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != (~ (~ (((((injectionSwitch.x > injectionSwitch.y)) ? (((atomicCompSwap(_injected_loop_counter, (_injected_loop_counter * 1898), _injected_loop_counter)) ^ 0)) : 1))))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((((! (! (bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((! (! (((((float(mat3(injectionSwitch.x, 0.0, 1.0, 1.0, determinant(mat4(tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0))), 0.0, 0.0, cos(0.0), 0.0))) > injectionSwitch.y)))))))
    {
     if(((! ((bool(bvec3(! (false), true, false)))))))
      {
       for(int _injected_loop_counter = (min(0, 0)); (((bool(bvec3((true && (_injected_loop_counter != ((1 << (int(0))) >> ((max(int(0), int(0))))))), false, true)))) && true); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
     if((((bool((bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), true))))))))
      barrier();
     barrier();
    }
  }
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(true)
      {
       if(true)
        {
         if((false))
          {
           if((false))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; ((bool(((bool(((! ((true && (! (_injected_loop_counter < 1)))))) && true)) || false)))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (((1 << (int(1))) >> ((clamp(int(1), (min(int(1), int(1))), int(1))))) | 1); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
               do
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if(((((float((mat3x4(mat3x4(mat3x4(injectionSwitch.x, (min(sqrt(1.0), sqrt(1.0))), tan(0.0), 1.0, 1.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, exp(0.0), 1.0)))))) > (float(mat2x3(((injectionSwitch) * vec2(1.0, 1.0)).y, log(1.0), (injectionSwitch.y), 0.0, 0.0, 1.0)))))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   if(false)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   while(false);
   if((((bool(bvec4(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))), true, false, true)))) && true))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = (((((0 | (0))) * ((int((injectionSwitch.y)) << (int(3))) >> (((false ? (- 36637) : int(3)))))) + 0)); _injected_loop_counter != ((((1 << (int(6)))) << ((((((0) << 0)) * 1)) / 1)) >> (int(6))); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (((0 | 1) | (0 << (int(0))))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = ((0 & ((((max(- 70372 << - 24913, - 70372 << - 24913))) >> 0))) << (int(4))); (~ (~ (_injected_loop_counter))) != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((true && ((((! (! ((false || ((((true && ((bool(bool(true))))))) && ((injectionSwitch.x < injectionSwitch.y))))))))) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(false)
      {
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((bool(bvec2((false), true))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(((false || (false))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                {
                 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                 barrier();
                }
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while((bool(bvec2(false, true))));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((false)) || false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); (bool(bvec4((((injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != 1)), true, false, true))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           do
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           while(((injectionSwitch.x > (min(((injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((bool(bvec2(((! ((bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))), ((injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((((true ? (min(injectionSwitch.x, injectionSwitch.x)) : (8.6))) > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              {
               if(((((max((1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if(((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               if((false))
                {
                 if(((bool((! (! (bool((bool(bvec4((! (! (false))), true, false, true)))))))))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(true)
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     while(((! ((bool(bool(! ((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y)))))))));
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(subgroup_local_id + ((1) << 0) < subgroup_size)
        {
         int i = ((0) ^ 0);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 84462); _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(((true && (false))))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ (0 ^ 0)); _injected_loop_counter ++)
                  {
                   if((! (! ((false)))))
                    barrier();
                   if(((bool(bvec2(false, false)))))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                    }
                   if(true)
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(((true && ((bool(bvec2(false, false)))))))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                  }
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((((false) && true)))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         do
          {
           do
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((true && ((false))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while((false || (false)));
          }
         while(false);
         if((false))
          barrier();
         atomicStore(buf[next_virtual_gid], (((max(uint(uvec3((((false ? (workgroup_size) : uint(2)) / 1u)), 1u, 1u)), (max(uint(uvec3((false ? ((clamp((clamp(workgroup_size, workgroup_size, workgroup_size)), (max(workgroup_size, ((workgroup_size) ^ 0u))), (~ (~ (workgroup_size)))))) : uint(2)), 1u, 1u)), uint(uvec3((false ? (workgroup_size) : uint(2)), 1u, 1u)))))))), 4, 64, 0);
         if((false))
          barrier();
        }
       else
        {
         if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((bool((bvec2(bvec2((bvec2(bvec2(bvec2(true, false))))))))) && (false))))
          {
           if((false))
            barrier();
           barrier();
          }
         if(true)
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if((false))
            barrier();
          }
         do
          {
           do
            {
             if(((false) && true))
              {
               if((false))
                barrier();
               if(true)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; ((_injected_loop_counter != 1) && true); _injected_loop_counter ++)
                    {
                     do
                      {
                       if((false))
                        barrier();
                       if(((injectionSwitch.x > (vec2(mat3x4(injectionSwitch, 0.0, exp(0.0), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0))).y)))
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                         if(((! (! (false)))))
                          {
                           if((false))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if((false))
                          barrier();
                        }
                       if((false))
                        barrier();
                      }
                     while(false);
                    }
                  }
                }
               else
                {
                }
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(true)
                    {
                     if(((bool(bvec4(false, false, true, false)))))
                      {
                       if((((false) || false)))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((false) && true)))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               atomicStore(buf[((((clamp(0u, ((((0u) / 1u)) << 0u), 0u)) ^ (min(((~ (~ ((uint((((uvec2(((uvec4(uvec2(next_virtual_gid, 0u), 1u, 1u)) | (uvec4(uvec2(next_virtual_gid, 0u), 1u, 1u))))) / uvec2(1u, 1u))))))))), (clamp((next_virtual_gid), (next_virtual_gid), (((next_virtual_gid) ^ 0u)))))))) - 0u)], ((~ (~ ((uint(2)) | (uint(2)))))), 4, 64, 0);
               if((false))
                barrier();
              }
            }
           while(((true && ((injectionSwitch.x > (float(((vec4(injectionSwitch.y, 0.0, 1.0, 1.0)) + sin(vec4(0.0, 0.0, 0.0, 0.0))))))))));
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = ((((((0) - 0) * 1)) | ((0) - 0))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
             if((false))
              barrier();
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(((((true && (((injectionSwitch.x > injectionSwitch.y))))) || false)))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter != (((- 88834 & 0) | 0) ^ 1); _injected_loop_counter ++)
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if(((! (((! (false)) && true)))))
              {
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
              }
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((! ((bool((bvec2(bvec2(bvec2(! ((false)), false)))))))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((false) || false)))
              barrier();
             do
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(((((false ? (- 3.7) : injectionSwitch.x)) > injectionSwitch.y)))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
             else
              {
               if((false))
                {
                 if((false))
                  {
                   if(((bool(bvec3((false || (false)), true, true)))))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               if(((((injectionSwitch.x < injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if((((false) && (bool(bool(((injectionSwitch.x < injectionSwitch.y))))))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((! (! ((false)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < (max(1, (int(ivec3(1, 0, 1))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((((injectionSwitch.x < injectionSwitch.y)) ? (0 >> (int(3))) : (- 61043))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); (bool((bvec2(bvec3(bvec2(_injected_loop_counter > int((injectionSwitch.x)), ((injectionSwitch.x < injectionSwitch.y))), true))))); _injected_loop_counter --)
          {
           do
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((! ((bool(bvec4(! ((((((true ? injectionSwitch : (vec2(- 34.29, - 97.29)))).x > (((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y)))), false, true, true))))))
                {
                 for(int _injected_loop_counter = 0; (((bool(bool((! (! (_injected_loop_counter != 1))))))) || false); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(true)
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                         if((false))
                          barrier();
                        }
                      }
                     while(false);
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if((((false) && true)))
                      barrier();
                    }
                   if((false))
                    barrier();
                   if(((true && (false))))
                    barrier();
                   if((((false) || false)))
                    barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
            }
           while(false);
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
     if(false)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if(((((bool(bvec4((! (! (((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))), false, true, true))) && true))))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           barrier();
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((((injectionSwitch.x) - length(vec2(0.0, 0.0))) > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
        }
       if((((injectionSwitch.x > (vec2(((injectionSwitch[0]) / 1.0), injectionSwitch[1])).y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; ((_injected_loop_counter != 0) && true); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((((((false || (injectionSwitch.x > (vec2((transpose(transpose(((true ? (transpose(transpose(mat3(injectionSwitch, 0.0, determinant(mat3(1.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0, abs(log(1.0)), 1.0, 1.0)))) : (mat3(22.67, - 1700.0549, - 76.99, 13.45, - 860.944, 5.1, 22.16, - 1.6, - 1.3))))))))).y))) && ((injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if(((((bool(bvec2(false, true))))) && true))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > (float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
        {
         do
          {
           barrier();
          }
         while((bool(bvec3(false, false, false))));
        }
      }
     while(false);
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}
