#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((max((((((uvec3(0u, 0u, 0u) ^ (false ? (uvec3((min(49856u, (0u ^ (49856u)))), 158143u, 199651u)) : gl_WorkGroupSize))) << uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), false ? (uvec3((min(49856u, (((0u ^ (49856u)) | (0u ^ (49856u)))))), 158143u, 199651u)) : gl_WorkGroupSize)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (((((min(((workgroup_base + subgroup_id * subgroup_size + (0u | (max(((uint(uvec2(((((uint(uint((subgroup_local_id) * 1u)))) ^ 0u)), 1u)))), ((uint(uvec2(((((uint(uint((subgroup_local_id) * 1u)))) ^ 0u)), 1u)))))))) ^ 0u), ((((workgroup_base + subgroup_id * subgroup_size + (0u | ((uint(uvec2(((((uint(uint((subgroup_local_id) * 1u)))) ^ 0u)), 1u)))))) ^ 0u)) * 1u)))) << 0u)) | (workgroup_base + ((subgroup_id) * 1u) * subgroup_size + (0u | (max(((true ? ((uint(uvec2(((subgroup_local_id) * 1u), 1u)))) : (num_workgroup))), ((uint(uvec2(((0u + (((true ? (1u * ((subgroup_local_id))) : (subgroup_id))))) * 1u), 1u)))))))));
 uint next_virtual_gid = (((((((true ? ((clamp(((workgroup_base + subgroup_id * (clamp(subgroup_size, subgroup_size, subgroup_size))) * 1u), workgroup_base + subgroup_id * (clamp(subgroup_size, subgroup_size, subgroup_size)), workgroup_base + subgroup_id * (clamp(subgroup_size, subgroup_size, subgroup_size))))) - (uint(uvec2(((true ? 0u : (workgroup_size))), 1u))) : (workgroup_size))))) | (((false ? (atomicMin(subgroup_local_id, virtual_gid)) : (max((clamp(((workgroup_base + subgroup_id * (min((clamp(subgroup_size, subgroup_size, subgroup_size)), (clamp(subgroup_size, subgroup_size, subgroup_size))))) * 1u), workgroup_base + subgroup_id * (((0u ^ (((max(clamp(subgroup_size, subgroup_size, subgroup_size), ((clamp(subgroup_size, subgroup_size, subgroup_size)) >> 0u))))))) + 0u), ((workgroup_base + subgroup_id * (clamp((max(((((subgroup_size) | (subgroup_size))) / 1u), subgroup_size)), subgroup_size, subgroup_size))) | (workgroup_base + (max(subgroup_id * (clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_id * (clamp(subgroup_size, subgroup_size, subgroup_size)))))))), (clamp(((workgroup_base + ((subgroup_id * (clamp(subgroup_size, subgroup_size, subgroup_size))) - 0u)) * 1u), ((true ? workgroup_base : (workgroup_size))) + subgroup_id * (((clamp(subgroup_size, subgroup_size, subgroup_size)) - 0u)), workgroup_base + subgroup_id * (clamp(subgroup_size, subgroup_size, subgroup_size))))))))))) | 0u) + (((((true) || false) ? (subgroup_local_id + 1) % subgroup_size : (~ (~ ((174265u)))))));
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != (1 ^ int((injectionSwitch.x))); _injected_loop_counter ++)
    {
     do
      {
       if((((((! ((! (! (! (true))))))) && true)) || (((((clamp(((vec2((mat2(1.0) * (mat3x2((injectionSwitch) * mat2(1.0), 0.0, 1.0, 1.0, 1.0)))))).x, injectionSwitch.x, injectionSwitch.x)) > ((false ? (injectionSwitch) : injectionSwitch)).y) || ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 buf[virtual_gid] = 1;
                }
              }
            }
           while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
          }
         while(false);
        }
       else
        {
        }
      }
     while(((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)));
    }
  }
 if(false)
  {
  }
 else
  {
   if((~ (~ ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))) + 1 < ((((1u * (((((((0u | (((((subgroup_size) ^ 0u)) | (subgroup_size))))) ^ 0u)))) * 1u))) << 0u) | (((((subgroup_size) ^ 0u)) | (((((((subgroup_size)) + 0u) | 0u)) + 0u))))))
    {
     int i = 0;
     if(true)
      {
       atomicStore(buf[next_virtual_gid], (((~ (~ (uint(2))))) << 0u), 4, 64, 0);
      }
     else
      {
      }
    }
   else
    {
     atomicStore(buf[(0u ^ (next_virtual_gid))], uint(2), 4, (min(64, 64)), 0);
    }
  }
}
