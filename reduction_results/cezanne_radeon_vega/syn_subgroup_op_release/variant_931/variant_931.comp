#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((! (! (false)))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(true)
    {
     return;
     if((false))
      return;
    }
   else
    {
    }
  }
 if((false))
  {
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid;
 if((false))
  return;
 uvec2 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id;
 if(true)
  {
   if(true)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          break;
         return;
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((false) && true)))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
     return;
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    return;
  }
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      continue;
     return;
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 uvec2 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(false)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         return;
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             return;
            }
           if((false))
            break;
          }
         if((false))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            return;
          }
         if((false))
          return;
         if((false))
          break;
        }
       while(((false) || false));
      }
     else
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
            return;
          }
        }
       if((false))
        return;
       if(false)
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           continue;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           do
            {
             if((false))
              break;
             if((false))
              continue;
             return;
            }
           while(false);
           if((false))
            {
             if((false))
              continue;
             return;
            }
           if((false))
            break;
           if((false))
            continue;
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if((false))
            return;
           if(true)
            {
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
                  {
                   return;
                   if((false))
                    return;
                  }
                 if((false))
                  break;
                }
               return;
              }
             if((false))
              {
               if((false))
                continue;
               return;
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                break;
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
        }
       if((false))
        {
         if((false))
          break;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
            return;
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if((false))
                break;
               return;
              }
             while(false);
            }
           if((false))
            break;
          }
         return;
        }
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     if((false))
      return;
     if((false))
      return;
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
       if((false))
        return;
      }
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y = subgroup_id;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x = GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 while(false);
 if((false))
  {
   if((false))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.w = subgroup_size;
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (int(6))); _injected_loop_counter --)
    {
     do
      {
       if((false))
        return;
      }
     while(false);
     if((false))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
       if((false))
        break;
      }
     GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.w;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((false))
        continue;
       break;
      }
     if((false))
      continue;
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if((false))
      break;
     if((false))
      {
       if((false))
        continue;
       if((false))
        return;
       continue;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> ((((clamp(int(8), int(8), int(8)))) / 1))); _injected_loop_counter --)
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            break;
           continue;
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
     if((false))
      break;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
       if((false))
        return;
      }
    }
   if((false))
    return;
  }
 while(false);
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if((((false) || false)))
          return;
        }
       while(false);
      }
    }
   while(false);
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
      {
       return;
       if((false))
        break;
      }
    }
   else
    {
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
    {
     if(((false || (false))))
      continue;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     if((false))
      continue;
     return;
    }
   if((false))
    continue;
  }
 if((false))
  return;
 if((false))
  {
   do
    {
     return;
     if((false))
      break;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     return;
    }
  }
 if((false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
   return;
  }
 if((false))
  {
   do
    {
     if((false))
      return;
    }
   while(false);
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.x = num_workgroup;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    break;
   if((false))
    {
     if((false))
      {
       if((false))
        break;
       continue;
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    continue;
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
    }
   if((false))
    continue;
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.y = GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.x;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      continue;
     break;
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(true)
        {
         if(true)
          {
           if(((bool(bvec3(false, true, true)))))
            return;
           return;
           if((false))
            continue;
           if((false))
            return;
           if((false))
            break;
          }
         else
          {
          }
         if((false))
          continue;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (1 | (0 ^ 0)); _injected_loop_counter > (int((injectionSwitch.x)) << (int(3))); _injected_loop_counter --)
  {
   if((false))
    {
     if(true)
      {
       if((((((false) || false)) && ((injectionSwitch.x < injectionSwitch.y)))))
        continue;
       for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if((((false) || false)))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               return;
              }
             return;
             do
              {
               if((false))
                return;
              }
             while(false);
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              return;
            }
           if((false))
            break;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
                {
                 if((false))
                  continue;
                 continue;
                }
               if((false))
                {
                 if((false))
                  continue;
                 continue;
                }
               if(((! (! (false)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     return;
                    }
                   break;
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(true)
                  {
                   if((false))
                    return;
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      break;
                     return;
                     if(((false || (false))))
                      break;
                     if((false))
                      {
                       if((false))
                        {
                         if((false))
                          return;
                         return;
                        }
                       if((false))
                        continue;
                       continue;
                      }
                    }
                  }
                 else
                  {
                   if((false))
                    continue;
                  }
                 if(((! (! ((! (! (false))))))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(((bool(bvec3(false, false, true)))))
                  {
                   if((false))
                    continue;
                   if((false))
                    return;
                   break;
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     continue;
                    }
                   if((false))
                    break;
                   return;
                  }
                 if((false))
                  break;
                 if((false))
                  return;
                 if((false))
                  break;
                }
              }
             while(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           do
            {
             if((false))
              continue;
             if((false))
              return;
            }
           while(false);
           if((false))
            return;
          }
        }
       if((false))
        continue;
      }
     else
      {
       if((((! (! (bool(bvec3(false, false, false))))))))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         break;
        }
      }
    }
  }
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = ((1) - 0); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      continue;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((false) && true)))
        break;
       GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
      }
     else
      {
      }
    }
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(((bool(bvec2(false, false)))))
    return;
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if(true)
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     do
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     if((false))
      return;
     if((bool((true && (bool(((injectionSwitch.x < injectionSwitch.y))))))))
      {
       return;
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    break;
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
    continue;
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
   if(false)
    {
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        continue;
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         if((false))
          continue;
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             return;
            }
          }
         if((false))
          return;
         if((false))
          continue;
        }
       else
        {
         if(((true && (false))))
          continue;
        }
       if((((false) || false)))
        continue;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         else
          {
          }
        }
      }
     continue;
     if((false))
      return;
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = ((1 << (((int(0)) | (int(0))))) >> (int(0))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if(((false || (false))))
        continue;
       if((false))
        {
         do
          {
           return;
          }
         while(false);
         if((false))
          return;
        }
       return;
      }
    }
   if(((bool(bvec2(false, true)))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         return;
        }
       if(true)
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         return;
         if((false))
          return;
        }
      }
     do
      {
       if((false))
        break;
       if((false))
        {
         do
          {
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               break;
              }
             continue;
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     while(false);
     do
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     return;
     if(((true && (false))))
      return;
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((false || (false))))
        return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             return;
            }
           return;
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
    }
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               do
                {
                 return;
                 if((false))
                  return;
                 if((false))
                  continue;
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(((! (! (false)))))
                continue;
              }
             if((false))
              break;
            }
          }
         else
          {
           if((false))
            continue;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        break;
       do
        {
         return;
        }
       while(false);
       if((false))
        break;
      }
     else
      {
       if((false))
        break;
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    return;
   if((false))
    break;
  }
 if((false))
  {
   if(true)
    {
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         if((false))
          return;
        }
       while((true && (false)));
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(((! (! (false)))))
      continue;
     if((false))
      break;
     for(int _injected_loop_counter = ((0 >> (int(0))) | (0 >> (int(6)))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
   if((false))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if((false))
            return;
           return;
          }
        }
      }
     else
      {
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x * GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z;
 if(((! (! (false)))))
  return;
 if(((! (! (((false) || false))))))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
   if((false))
    return;
  }
 if((((false) || false)))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   do
    {
     GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.y = virtual_gid;
     if((false))
      {
       if((false))
        break;
       break;
      }
    }
   while(false);
  }
 else
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x * GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y + ((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z + 1) % GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((bool(bvec3(false, false, false))))
  {
  }
 else
  {
   if(true)
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (! (false)))))
          return;
         return;
        }
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
       if((false))
        return;
      }
     if((false))
      return;
    }
   else
    {
    }
  }
 if((false))
  return;
 if(true)
  {
   if((false))
    return;
  }
 else
  {
  }
 do
  {
   if((false))
    {
     do
      {
       return;
      }
     while(false);
     if((false))
      continue;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.x = next_virtual_gid;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
   do
    {
     if((false))
      return;
     if((false))
      return;
    }
   while(false);
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.x = GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.x;
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((true && (((injectionSwitch.x > injectionSwitch.y)))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
           if((false))
            return;
          }
         if(((true && (false))))
          return;
        }
       else
        {
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              break;
             if((false))
              continue;
             if((false))
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
               if((false))
                break;
               if((false))
                break;
              }
            }
          }
        }
       if((false))
        continue;
      }
     else
      {
       if(true)
        {
         if((false))
          break;
         if((false))
          {
           if((false))
            continue;
           return;
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
             return;
            }
           if((false))
            continue;
           return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          break;
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if(false)
    {
     if((false))
      {
       if((false))
        continue;
       if((false))
        continue;
       return;
      }
     if((false))
      return;
     if((false))
      break;
    }
   else
    {
     buf[GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.y] = 1;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      continue;
     break;
    }
   if((false))
    break;
  }
 if(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z + 1 < GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((0 << (int(4))) << (int(6))); _injected_loop_counter != (int((injectionSwitch.x)) | 1); _injected_loop_counter ++)
      {
       do
        {
         if(true)
          {
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             if((false))
              continue;
             if(true)
              {
               if((false))
                return;
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                break;
              }
            }
           if(((true && (false))))
            continue;
          }
         else
          {
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     return;
     if(((bool(bvec3((! (! (false))), false, true)))))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
     if((((false) || false)))
      {
       if((false))
        return;
       return;
      }
    }
   do
    {
     for(int _injected_loop_counter = ((1 << (int(0))) >> (((false ? (36186) : int(0))))); _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          break;
         break;
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
            }
           else
            {
             if((false))
              continue;
             if((false))
              continue;
             if(false)
              {
              }
             else
              {
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         if((false))
          return;
         if((false))
          break;
        }
       while(false);
       if((false))
        continue;
       if((((false) && true)))
        {
         if((false))
          continue;
         break;
        }
       if((false))
        continue;
      }
    }
   while(false);
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        break;
       if((((false) && true)))
        continue;
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           break;
          }
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if((false))
        {
         if((false))
          break;
         continue;
         if((false))
          return;
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((false))
            return;
           continue;
          }
         for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
          {
           atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.x], uint(2), 4, 64, 4);
          }
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
        }
      }
     if((false))
      return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (1 & int((injectionSwitch.y))); _injected_loop_counter != (0 >> (((true ? int(3) : (- 56610))))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       return;
      }
     if((false))
      return;
     if(false)
      {
       if((false))
        break;
      }
     else
      {
       for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
             if((false))
              continue;
            }
          }
         if((false))
          return;
         if((false))
          return;
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       subgroupAll(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      continue;
    }
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
       if((false))
        break;
      }
     while(false);
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.x], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(((((true && (false))) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         return;
         if((false))
          break;
         if((false))
          continue;
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
    }
   if((false))
    return;
   if((false))
    {
     for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(true)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         else
          {
          }
         if((false))
          continue;
        }
       else
        {
         if((false))
          continue;
        }
      }
    }
   for(int _injected_loop_counter = ((1 << (int(4))) >> ((0 | (int(4))))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if((false))
        continue;
       continue;
      }
     if((false))
      break;
     if((false))
      continue;
     if((false))
      {
       if((false))
        continue;
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           continue;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            break;
           return;
          }
         if(true)
          {
           do
            {
             if((false))
              break;
             if((false))
              {
               for(int _injected_loop_counter = (1 ^ int((injectionSwitch.x))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 do
                  {
                   return;
                   if((false))
                    break;
                  }
                 while(false);
                }
              }
             if((false))
              continue;
            }
           while(false);
          }
         else
          {
          }
         if(false)
          {
           do
            {
             if((false))
              {
               if((false))
                return;
               return;
               if(((! (! (false)))))
                continue;
              }
            }
           while(false);
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if((false))
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              break;
             if((false))
              continue;
             return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if((false))
              break;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if((false))
              {
               if((false))
                continue;
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  break;
                 continue;
                }
               if(true)
                {
                 return;
                }
               else
                {
                }
               if((false))
                continue;
              }
            }
           while(false);
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((false || (false))))
          {
           if((false))
            break;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             if((false))
              return;
             return;
            }
          }
         while(false);
        }
       return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           do
            {
             if((false))
              return;
             if(false)
              {
              }
             else
              {
               do
                {
                 if(((! (! ((true && (false)))))))
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                   continue;
                  }
                 return;
                 if((((false) || false)))
                  {
                   if((false))
                    continue;
                   continue;
                   if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
                    continue;
                  }
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(((true && (false))))
              return;
            }
           while(false);
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(false);
           if((false))
            continue;
          }
        }
       while(((bool(bool(bool(bvec4(false, true, false, true)))))));
       if((false))
        continue;
      }
    }
   for(int _injected_loop_counter = (0 & - 66432); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            break;
           if((false))
            {
             if((false))
              break;
             break;
            }
           break;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = ((((1 << (((int(2)) * 1))) >> (int(2))) << (int(0))) >> (int(0))); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        return;
       if((false))
        break;
      }
     for(int _injected_loop_counter = ((((1 << (int(7))) >> (int(7))) << (int(0))) >> (int(0))); _injected_loop_counter != (int((injectionSwitch.x)) << (int(8))); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           break;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
          }
         if((false))
          {
           if((false))
            break;
           return;
          }
        }
       if((false))
        break;
      }
     if((false))
      break;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            return;
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
             if((false))
              return;
            }
           if((false))
            continue;
           break;
          }
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       for(int _injected_loop_counter = ((1 << ((((true ? int(ivec3(int(4), 1, 0)) : (- 66463)))))) >> (int(4))); _injected_loop_counter != (int((injectionSwitch.x)) << ((min(int(7), ((int(7)) << 0))))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       if((((false) && true)))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
           return;
          }
        }
      }
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       for(int _injected_loop_counter = (0 >> ((int(int(int(8)))))); _injected_loop_counter < ((1 << (((int(1)) * 1))) >> (int(1))); _injected_loop_counter ++)
        {
         do
          {
           if((false))
            return;
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             subgroupAll(true);
             if((false))
              continue;
             if((false))
              {
               if((false))
                return;
               continue;
              }
            }
          }
         while(false);
         if((false))
          return;
        }
      }
     do
      {
       if(((bool(bvec2(false, true)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         return;
         if((false))
          break;
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          {
           if((false))
            return;
           break;
          }
         return;
         if((false))
          continue;
         if((false))
          break;
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        continue;
       do
        {
         return;
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        continue;
      }
    }
  }
}
