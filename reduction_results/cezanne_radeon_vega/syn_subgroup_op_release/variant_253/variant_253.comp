#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((false || ((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = ((true ? (0u ^ (gl_WorkGroupSize.x)) : (subgroup_id)));
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = ((workgroup_size * workgroup_id) >> 0u);
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * (clamp(((subgroup_size) | 0u), subgroup_size, subgroup_size)) + subgroup_local_id;
 if(((bool(bvec2(((((false) || false)) && true), true)))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     do
      {
       if((((injectionSwitch.x > ((float(mat2x4((min((0.0 + (0.0)), (0.0 + (0.0)))), 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, (injectionSwitch.x), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, (float(((mat4x3(abs(0.0), (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, cos(0.0), 0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) + ((min(injectionSwitch, injectionSwitch)).y))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
    }
   while((true && (((false) || (((bool(bvec4(false, false, true, false)))) && true)))));
   do
    {
     if((false))
      barrier();
    }
   while((((bool(bool((((true && ((((bool(((bvec2(bvec3(bvec2(bvec2(bvec2(((injectionSwitch.x > (clamp(((((false ? (vec2(92.29, - 391.194)) : (vec2(injectionSwitch[0], injectionSwitch[1]))))) / vec2(((1.0) / exp(0.0)), 1.0)), injectionSwitch, ((injectionSwitch) * vec2(1.0, 1.0)))).y)), false))), false))))))) && true)))) || ((injectionSwitch.x > (((vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))) / vec2(1.0, 1.0))).y))))))) && (! ((bool(bvec2(! (true), false)))))));
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = ((false ? (uint(- 6.1)) : (((max(workgroup_base, workgroup_base))) | (workgroup_base)))) + subgroup_id * subgroup_size + ((clamp((subgroup_local_id + 1), (((subgroup_local_id + 1)) | (((false ? (workgroup_base) : (subgroup_local_id + 1))))), (((subgroup_local_id + 1) - 0u)))) % subgroup_size);
 buf[virtual_gid] = ((1) | ((((int(ivec3((((((clamp(((((clamp((max((~ (~ ((1)))) ^ 0, (~ (~ ((1)))) ^ ((((false ? (13239) : 0))) | (0)))), (~ (~ ((1)))) ^ 0, (~ (~ ((1)))) ^ 0)))) >> (((false ? (- 46632) : (0))) | (0))), ((1) ^ 0), ((1) ^ 0)))) | (((((((((false ? (23718) : (max((clamp(((((1) ^ 0)) >> 0), ((1) ^ 0), ((1) ^ 0))), (clamp(((((1) ^ 0)) >> 0), ((1) ^ 0), ((1) ^ 0)))))))) | ((clamp(((((1) ^ 0)) >> 0), ((1) ^ 0), ((1) ^ 0)))))) | ((clamp(((((1) ^ 0)) >> 0), ((1) ^ 0), ((1) ^ 0)))))) | 0)))) / 1), 1, 1))) | (int(ivec3(((0 ^ ((((max((~ (~ ((1) ^ 0))), (1) ^ 0)))) | (((max((~ (~ ((1) ^ 0))), (1) ^ 0))))))), 1, 1)))))));
 if((false))
  barrier();
 for(int _injected_loop_counter = int((float(mat2x4((injectionSwitch.y), 1.0, 0.0, log(1.0), (mix(float((- 28.70)), float(((false ? (5.7) : (clamp(1.0, 1.0, 1.0))))), bool(true))), 1.0, (dot(vec4(1.0, 0.0, 1.0, tan(0.0)), vec4(0.0, 1.0, length(0.0), 1.0))), 0.0)))); (((((bool(bool(_injected_loop_counter != ((clamp(((0 << (((int(4)) * 1)))) + 0, (max(((0 << (((int(4)) * 1)))) + 0, ((0 << (((int(4)) * 1)))) + 0)), ((0 << (((int(4)) * 1)))) + 0)))))) && true)) && true)); _injected_loop_counter --)
  {
   if((((1u * (((((((clamp(1u * ((max(((subgroup_local_id) | (subgroup_local_id)), ((subgroup_local_id) | (subgroup_local_id))))), 1u * ((max(((((((subgroup_local_id)) << 0u) | (subgroup_local_id)) - 0u)), ((((subgroup_local_id)) >> 0u) | (subgroup_local_id))))), (0u | (1u * ((max(((subgroup_local_id) | ((((uint(uvec4(subgroup_local_id, 1u, 0u, 1u))) >> 0u)))), ((subgroup_local_id) | (subgroup_local_id))))))))))) - 0u) + 1)) - 0u)) < subgroup_size) && ((injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int((min((((injectionSwitch.x) / ((clamp(((vec2(vec2(((vec2((clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))[0], (max((min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), (min(vec2(1.0, 0.0), vec2(1.0, 0.0))))) * ((clamp((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))), (mix(float(injectionSwitch[1]), float((clamp((mix(float((- 3.4)), float((- 175.006)), bool(false))), (- 3.4), (- 3.4)))), bool(false))), (mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))))), injectionSwitch[(clamp(1, 1, 1))])))))))) / vec2(1.0, 1.0)), (vec2((clamp((vec2(mat4x3(injectionSwitch, sqrt((min(0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))[0], (max((min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), injectionSwitch[(clamp(1, 1, 1))])))), (vec2((clamp(((false ? (vec2(0.7, - 4.5)) : ((true ? ((vec2(vec4(vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, (min(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0)), 0.0, (dot(vec2(((1.0) / 1.0), length(vec4(0.0, 0.0, ((false ? (2.9) : 0.0)), 0.0))), vec2(1.0, 0.0))))))) : (injectionSwitch))))), (mix(vec2((vec4(7.4, 74.36, 59.90, - 52.62).t), (clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], (- 3.0)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch))[0], (max((min(injectionSwitch[1], (clamp(((true ? ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float(((0.0 + ((float(mat4(- 3.4, 0.0, 1.0, exp(0.0), abs(0.0), (float(vec2(((1.0) + sqrt(0.0)), 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), bool((true && (false))))))) : (mod(- 2.7, 3891.0051)))), ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float(((0.0 + ((float(mat4(- 3.4, 0.0, 1.0, exp(0.0), abs(0.0), (float(vec2(((1.0) + sqrt(0.0)), 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), bool((true && (false))))))), (0.0 + (((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float(((0.0 + ((float(mat4(- 3.4, 0.0, 1.0, exp(0.0), abs(0.0), (float(vec2(((1.0) + sqrt(0.0)), 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), bool((true && (false))))))))))))), injectionSwitch[(clamp(1, 1, 1))])))))).y))), (max((max((clamp((((injectionSwitch.x) / ((vec2(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))))[0], (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y))), ((min(float(float((max((((injectionSwitch.x) / ((vec2(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))))[0], (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y))), (((injectionSwitch.x) / ((vec2(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))))[0], (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y))))))), float(float((max((((injectionSwitch.x) / ((vec2(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))))[0], (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y))), (((injectionSwitch.x) / ((vec2(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))))[0], (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y)))))))))), (((injectionSwitch.x) / ((vec2(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))))[0], (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y))))), (((injectionSwitch.x) / ((vec2(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, ((mix(float((2.8)), float(injectionSwitch.x), bool(true)))), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch))))[0], (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y))))), (((injectionSwitch.x) / ((vec2((float(mat3(((max(clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch), clamp((vec2(mat4x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 1.0))), ((false ? (injectionSwitch) : (mat2(1.0) * (injectionSwitch)))), injectionSwitch))))[0], 1.0, 1.0, 1.0, 1.0, 1.0, (dot(vec2(1.0, 0.0), vec2((dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 1.0))), 0.0, abs(1.0)))), (max(((mix(float(min(injectionSwitch[1], ((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((mix(float(injectionSwitch[1]), float((- 3.4)), bool(false))))))), float((- 653.643)), bool(false)))), injectionSwitch[(clamp(1, 1, 1))])))).y)))))))); ((! (! (bool(bool((! ((true && (! ((! (! ((int((injectionSwitch.x)) | (_injected_loop_counter)) != 1)))))))))))))); ((_injected_loop_counter ++) | 0))
      {
       atomicStore(buf[next_virtual_gid], uint(2), (0 | (((4) >> 0))), 64, 4);
       if(((! (! ((true && (! (! (! ((! ((((bool(bvec3((true && ((((injectionSwitch.x > injectionSwitch.y)) || (! (! (((false)))))))), ((injectionSwitch.x < injectionSwitch.y)), false))) && true))))))))))))))
        {
         if((((((false ? (injectionSwitch) : (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
          barrier();
         if((((bool(bvec4((bool((! (((! (bool(false))) || false))))), false, false, ((injectionSwitch.x < injectionSwitch.y))))) && true)))
          {
          }
         else
          {
           barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
            barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       if(((bool((bvec2(bvec4(bvec2(false, true), false, false)))))))
        {
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); (int(ivec3((clamp(((true ? _injected_loop_counter : (_injected_loop_counter))), _injected_loop_counter, ((_injected_loop_counter) / 1))), 1, 1))) != 1; (0 ^ (_injected_loop_counter ++)))
      {
       subgroupAll((! (! (false))));
      }
    }
   else
    {
     atomicStore(buf[((((next_virtual_gid) << 0u)) << ((true ? (1u * (uint((injectionSwitch.x)))) : (((((workgroup_id) >> 0u)) << 0u)))))], (max(((uint(uvec4(0u, 0u, 1u, uint((injectionSwitch.y))))) + ((0u + ((max(uint(2), ((uint(2)) / 1u))))))), (min(uint(2), uint(2))))), ((4) | 0), 64, (max((((0 ^ (4))) ^ (0 << (int(6)))), 4)));
     subgroupAll(true);
     if((false))
      barrier();
    }
  }
}
