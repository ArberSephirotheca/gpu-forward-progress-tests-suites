#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (((~ (~ ((((min(workgroup_size * workgroup_id, ((workgroup_size * ((((false) || false) ? (atomicCompSwap(subgroup_id, ((((((((~ (~ ((atomicAdd(num_workgroup, subgroup_id)))))) >> 0u)) ^ 0u) + (14180u & 0u))) | uint((injectionSwitch.x))), num_workgroup)) : workgroup_id))) >> 0u)))) - 0u))))) ^ 0u);
 uint virtual_gid = workgroup_base + subgroup_id * ((clamp(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(subgroup_size, subgroup_size, subgroup_size), clamp((~ (((~ (subgroup_size)) - 0u))), subgroup_size, subgroup_size)))) + subgroup_local_id;
 uint next_virtual_gid = (clamp(workgroup_base, workgroup_base, (~ (~ ((min(workgroup_base, workgroup_base))))))) + subgroup_id * subgroup_size + (max((((max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)));
 buf[virtual_gid] = (0 | ((min(((int(ivec3(int(ivec3(1, 0, 1)), 0, ((true ? ((0) >> 0) : (- 48979))))))), 1))));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), (((clamp((int(((((((min((0.0 + (((((injectionSwitch) * mat2(1.0)).x) / 1.0))), (((((float(vec4(((((injectionSwitch) * mat2(1.0)).x) / 1.0), 1.0, 0.0, 0.0)))) / 1.0)) / 1.0)))) / (max((min((max(1.0, 1.0)), 1.0)), (min((max(1.0, 1.0)), ((false ? (4.0) : ((true ? 1.0 : (- 4652.5867))))))))))) / 1.0))) ^ (4)), ((false ? (- 9264) : (int((clamp(((((((min((0.0 + (((((injectionSwitch) * mat2(1.0)).x) / 1.0))), (((float(vec4(((((injectionSwitch) * mat2(1.0)).x) / 1.0), 1.0, 0.0, 0.0)))) / 1.0)))) / (max((min((max(1.0, 1.0)), 1.0)), (min((max(1.0, 1.0)), 1.0)))))) / 1.0)), ((((((min((0.0 + (((((injectionSwitch) * mat2(1.0)).x) / 1.0))), (((float(vec4(((((injectionSwitch) * mat2(1.0)).x) / 1.0), 1.0, 0.0, 0.0)))) / 1.0)))) / (max((min((max(1.0, 1.0)), 1.0)), (min((max(1.0, 1.0)), 1.0)))))) / 1.0)), ((((((min((0.0 + (((((injectionSwitch) * mat2(1.0)).x) / 1.0))), (((float(vec4(((((injectionSwitch) * mat2(1.0)).x) / 1.0), 1.0, 0.0, 0.0)))) / 1.0)))) / (max((min((max(1.0, 1.0)), 1.0)), (min((max(1.0, 1.0)), 1.0)))))) / 1.0))))) ^ (4)))), (int(((((((((min(((mix(float(0.0 + (((((injectionSwitch) * mat2(1.0)).x) / 1.0))), float((1.6)), bool(false)))), (((float(vec4(((((injectionSwitch) * mat2(1.0)).x) / 1.0), 1.0, 0.0, 0.0)))) / 1.0)))) / ((float(((mat4(1.0) * (mat4(1.0) * (mat2x4(max((min((max(1.0, 1.0)), 1.0)), (min((max(1.0, 1.0)), 1.0))), exp((dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)))), length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0)))))))))) / 1.0))) + tan(0.0))) ^ ((((true ? (int(ivec4((4), 1, 1, 0))) : (94730)))) * 1))))) | ((((int(((((((min((0.0 + (((((((injectionSwitch) + vec2(0.0, 0.0))) * mat2(1.0)).x) / 1.0))), (((float(vec4(((((injectionSwitch) * mat2(1.0)).x) / 1.0), 1.0, 0.0, 0.0)))) / 1.0)))) / (max((min((max(1.0, 1.0)), 1.0)), (min((max(1.0, 1.0)), 1.0)))))) / 1.0))) ^ (4)))) * 1)), 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], ((uint(2)) ^ 0u), 4, 64, 4);
   subgroupAll(true);
  }
}
