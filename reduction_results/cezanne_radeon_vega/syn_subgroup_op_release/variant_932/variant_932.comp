#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((gl_NumWorkGroups.x) / 1u)) << (0u << (uint(8u))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (max(((workgroup_size * workgroup_id) | 0u), workgroup_size * workgroup_id));
 uint virtual_gid = (max((uint(uint(workgroup_base + (((((~ (~ (((! (! ((((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))) && true)))) ? (workgroup_id) : ((((0u | ((((max(((false ? (subgroup_local_id) : ((subgroup_id * subgroup_size)) | ((0u ^ ((subgroup_id * (min(subgroup_size, subgroup_size)))))))), (((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))))) | ((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size)))))) | ((0u ^ ((((subgroup_id * (min(subgroup_size, subgroup_size)))) ^ (0u << (uint(5u)))))))))) | (((subgroup_id * subgroup_size)) | ((0u ^ ((((subgroup_id) | (subgroup_id)) * (min(subgroup_size, subgroup_size))))))))))) | ((((max(((false ? (subgroup_local_id) : ((subgroup_id * subgroup_size)) | ((0u ^ ((subgroup_id * (min(subgroup_size, subgroup_size)))))))), (((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))))) | ((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size)))))) | ((0u ^ ((((subgroup_id * (min(subgroup_size, subgroup_size)))) ^ (0u << (uint(5u)))))))))) | (((subgroup_id * subgroup_size)) | ((0u ^ ((((subgroup_id) | (subgroup_id)) * (min(subgroup_size, subgroup_size)))))))))))))))) ^ (0u ^ (0u))) / uint((injectionSwitch.y))))))) + subgroup_local_id, (uint(uint(workgroup_base + (((((~ (~ (((! (! ((((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))) && true)))) ? (workgroup_id) : ((((0u | ((((max(((false ? (subgroup_local_id) : ((subgroup_id * subgroup_size)) | ((0u ^ ((subgroup_id * (min(subgroup_size, subgroup_size)))))))), (((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))))) | ((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size)))))) | ((0u ^ ((((subgroup_id * (min(subgroup_size, subgroup_size)))) ^ (0u << (uint(5u)))))))))) | (((subgroup_id * subgroup_size)) | ((0u ^ ((((subgroup_id) | (subgroup_id)) * (min(subgroup_size, subgroup_size))))))))))) | ((((max(((false ? (subgroup_local_id) : ((subgroup_id * subgroup_size)) | ((0u ^ ((subgroup_id * (min(subgroup_size, subgroup_size)))))))), (((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))))) | ((((min((0u ^ ((0u | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size)))))) | ((0u ^ ((((subgroup_id * (min(subgroup_size, subgroup_size)))) ^ (0u << (uint(5u)))))))))) | (((subgroup_id * subgroup_size)) | ((0u ^ ((((subgroup_id) | (subgroup_id)) * (min(subgroup_size, subgroup_size)))))))))))))))) ^ (0u ^ (0u))) / uint((injectionSwitch.y))))))) + subgroup_local_id));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + (~ (~ (1)))) % subgroup_size);
 buf[virtual_gid] = (max((((~ ((min(~ ((~ (((0 << (int(7))) | (((~ (((((~ (~ (((max(1, 1))))))) - 0) | 0))) + 0)))))), ~ ((max(1, 1)))))))) >> 0), (~ ((min(~ ((~ (((0 << (int(7))) | (((~ (((((~ (~ (((max(1, 1))))))) - 0) | 0))) + 0)))))), ~ ((max(1, 1)))))))));
 if(subgroup_local_id + (0 + ((((((injectionSwitch.x < injectionSwitch.y)) ? (((((1) << 0))) << ((((0 ^ 0) + (((((min(max(0, 0), max(0, 0))))) ^ 0)))) | ((min(((((min(max(0, 0), max(0, 0))))) ^ 0), ((((min(max(0, 0), max(0, 0))))) ^ 0)))))) : (84821))) << 0))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (max((min(4, ((0 << (int(2))) | (4)))), 4)));
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, 4);
   subgroupAll((! (! ((! ((((injectionSwitch.x < (max((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((1.9), (- 0.3)), bvec2(false, false))), (mix(vec2((injectionSwitch)[0], (909.142)), vec2((7.9), (injectionSwitch)[1]), bvec2(false, true))))).y)) && ((((bool((bvec3((bvec3(bvec4(bvec3(bvec3(! (true), true, false)), false))))))))) || false))))))));
  }
}
