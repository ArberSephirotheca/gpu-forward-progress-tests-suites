#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false) || false)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > (float(mat2x3((max((min(injectionSwitch.y, injectionSwitch.y)), (clamp((min(injectionSwitch.y, injectionSwitch.y)), ((false ? (8.8) : (min(injectionSwitch.y, injectionSwitch.y)))), (min(injectionSwitch.y, injectionSwitch.y)))))), 1.0, 0.0, 1.0, 0.0, 1.0)))))))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         for(int _injected_loop_counter = (((min(((injectionSwitch.x < injectionSwitch.y)) ? 1 : (448), (max(((! ((! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))) ? 1 : (448), ((false ? ((max(- 52347, - 52347))) : (((((max(injectionSwitch.x, ((false ? (12.36) : injectionSwitch.x))))) - 0.0) < ((injectionSwitch) - vec2(0.0, 0.0)).y)) ? 1 : (((0 + ((448)))) | (83860 & 0)))))))))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            {
             if((((0.0 + (injectionSwitch.x)) > injectionSwitch.y)))
              {
              }
             else
              {
               if((((! (! (bool(bvec3((bool((bool(bvec4(bool((false || (false))), true, false, false))))), true, true))))))))
                barrier();
               barrier();
              }
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if(((bool(((bool(false)) || false)))))
          barrier();
        }
       while(false);
      }
     else
      {
      }
     if((false))
      barrier();
     if(((! ((false || (! (false)))))))
      barrier();
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if((((true && ((bool(bvec4((((true && ((injectionSwitch.x > injectionSwitch.y) || false)))), false, true, false))))))))
  {
   if((! (! ((false)))))
    barrier();
   for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   if((true && ((false))))
    {
     if((false))
      {
       do
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(false);
        }
       while(false);
       for(int _injected_loop_counter = 1; ((_injected_loop_counter > (0 ^ ((0 << (int(((2) ^ (max(((0) | (0)), 0))))))))) && true); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            barrier();
           if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       if((((((injectionSwitch.x) * 1.0) > ((injectionSwitch) * vec2(1.0, 1.0)).y))))
        barrier();
      }
     do
      {
       if((false))
        barrier();
      }
     while(false);
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(((true && (false))))
  barrier();
 if((false))
  barrier();
 if((false || (false)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        {
         if((((((clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))))
          {
           if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; (bool(bvec2(_injected_loop_counter != 1, ((injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != ((1 << (min(((true ? (int(4)) : (- 4497))), (((int(4))) * 1)))) >> (int(4))); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   (0u + (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x = ((subgroup_id) | (0u << (uint((0u | (1u))))))));
  }
 do
  {
   if(true)
    {
     if(((((((min((max(injectionSwitch, injectionSwitch)), (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)) && (! (((((injectionSwitch.x < injectionSwitch.y)) && (((((((((false || (((! (! ((true && (! (((! (((! ((((bool(bvec3(bool(bvec3((injectionSwitch.x < ((injectionSwitch.y) * 1.0)), false, true)), false, false))))))) || false))))))))))) || false))) && true))) || false) && true)) || false)))))))))
      {
       do
        {
         do
          {
           if(((((mix(vec2((injectionSwitch)[0], (2.1)), vec2((- 2.7), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         while((bool((bvec3(bvec4(bvec3(false, (bool(bvec2((! (! (((injectionSwitch.x < injectionSwitch.y))))), true))), true), ((true) && true)))))));
         if((false))
          barrier();
        }
       while(false);
       do
        {
         if((bool(bvec2(false, true))))
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             if((false))
              barrier();
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           while(false);
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((bool(bvec3(false, true, true)))))
            {
             do
              {
               barrier();
              }
             while((((! (! (bool(bvec4(bool(bvec4(false, true, false, true)), true, true, false))))))));
            }
          }
         else
          {
          }
         do
          {
           if((false))
            {
             do
              {
               if((false))
                barrier();
               barrier();
              }
             while(false);
            }
          }
         while(false);
        }
       while(((true && ((false) && true))));
       if((false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(false);
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       barrier();
      }
     while((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))))));
     if((((((injectionSwitch.x > injectionSwitch.y)) || ((true && (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   if((((false) || false)))
    {
     if((((injectionSwitch.x > ((true ? (min(injectionSwitch.y, injectionSwitch.y)) : (58.67)))))))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   do
    {
     barrier();
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if(true)
  {
   if(((! ((true && (! ((! (((true && (bool(bvec4(((! ((! (! (! ((((bool(bvec2((! (bool(bvec2((bool(bvec2((false), false))), true)))), false))) && true) && true)))))))), false, true, true))))))))))))))
    {
     if(((bool(bool(bool(bool(((true) || false))))))))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = ((((((min(1u * (gl_WorkGroupID.x), 1u * (gl_WorkGroupID.x)))) << (0u | ((min(0u | 0u, 0u | 0u)))))) >> 0u));
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 uint workgroup_base = ((~ (~ (~ ((max(~ (((true ? workgroup_size : (subgroup_size))) * workgroup_id), ~ (workgroup_size * workgroup_id))))))));
 if((false))
  barrier();
 if((((! (! ((((injectionSwitch.x) - 0.0) > ((false ? (atan(3.3)) : injectionSwitch.y)))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       barrier();
      }
    }
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((! (! (true))))
  {
   if(((((((min(injectionSwitch.x, (vec2(injectionSwitch[0], injectionSwitch[1])).x)) > (max(injectionSwitch.y, injectionSwitch.y))) || false)))))
    {
     if((false))
      barrier();
     if(((! (! (false)))))
      barrier();
     if((((! (! (((false || (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(((((true) || false)) || false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       else
        {
         if((false))
          barrier();
        }
       if((! ((! (! (! ((((false) || false)))))))))
        barrier();
      }
     while(false);
    }
   while(false);
   if((false))
    barrier();
  }
 else
  {
  }
 ((false ? (min(workgroup_base, subgroup_size)) : (~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base)))));
 uint virtual_gid = ((((((true ? GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * ((subgroup_size) >> 0u) + subgroup_local_id : (subgroup_local_id)))) - 0u)) - 0u);
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + (((0u + (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x))) | (((((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x) / 1u)) >> 0u))) * subgroup_size + ((subgroup_local_id + 1) % (min(subgroup_size, subgroup_size)));
 if((false))
  barrier();
 if((false))
  {
   if(((! ((! (! (! (false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if((false))
    barrier();
   (~ ((~ (((~ (((~ (buf[virtual_gid] = 1)) | 0u))) ^ 0u)))));
   if((((false || (! (! (false)))))))
    barrier();
  }
 while((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false || (false)))
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   do
    {
     do
      {
       if(((false || (((bool((bvec3(bvec4(bvec3((true && ((! (! ((bool(bool((false) && true)))))))), true, true), false))))))))))
        barrier();
       do
        {
         if((((! (! (((bool((! (! (false || ((bool(false))))))))) || false))))))
          barrier();
        }
       while(false);
       if((((false)) && (((false || (((injectionSwitch.x < injectionSwitch.y))))) || false)))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   while(false);
   for(int _injected_loop_counter = ((1 << (((int(6)) | (((((((false ? ((ivec4((int(int((0 | (- 26819))))), 33666, - 84195, - 4273) | ivec4(48704, - 58660, - 70910, - 72540))[2]) : int((~ (((~ ((0 | (6)))) * 1)))))))) * 1)) | ((((false ? ((ivec4(- 26819, 33666, (((((0 | (- 84195))) ^ 0)) >> 0), - 4273) | ivec4(48704, - 58660, - 70910, - 72540))[2]) : int(6))))))))) >> (int(6))); ((((_injected_loop_counter) / ((1) >> 0))) - int((injectionSwitch.x))) != 0; _injected_loop_counter --)
    {
     if(((true && ((false || (false))))))
      {
       if(((((false) && true) || (false))))
        barrier();
       do
        {
         for(int _injected_loop_counter = ((((injectionSwitch.x < injectionSwitch.y)) ? (clamp(1, 1, 1)) : (_injected_loop_counter))); _injected_loop_counter > 0; ((((_injected_loop_counter --) / 1)) | 0))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           do
            {
             if((bool(bvec2((false), true))))
              {
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> ((int(ivec4(int(0), 0, 1, 1))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > (max(injectionSwitch.y, (clamp((min(injectionSwitch.y, injectionSwitch.y)), (min(injectionSwitch.y, injectionSwitch.y)), (min(injectionSwitch.y, injectionSwitch.y))))))))))
              barrier();
             if(((! (! (((((injectionSwitch.x > injectionSwitch.y))) || false))))))
              barrier();
             barrier();
             if((! (! (((((true && (((((mix(vec2((vec4(- 5.9, - 689.598, - 9.8, 9.9).z), (- 842.920)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(((injectionSwitch.x < injectionSwitch.y)), true)))).x > injectionSwitch.y) || false))))))))))
              barrier();
            }
           while(((((injectionSwitch.x > injectionSwitch.y) && true))));
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (((((int((ivec3(0, 0, 0) | (ivec3((1 | 1), 1, 0)))))) >> 0)) ^ 0); _injected_loop_counter ++)
              {
               if((((((((false)) && true) && true)) && true) || ((((! ((((! (((! (bool(bool((false || ((((! ((! (((! ((((injectionSwitch.x > ((vec2(mat2x4((injectionSwitch) * mat2((injectionSwitch.y)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))).y)) && true)))) || false)))) && true) && true))))))) && true))))))))))))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((bool(bvec3((false), ((injectionSwitch.x > injectionSwitch.y)), (! ((true && ((! (! (! (false))))))))))))
                    barrier();
                  }
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           else
            {
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       while(false);
       if(((! (! (false)))))
        barrier();
       if(((((max(injectionSwitch, (vec2(0.0, 0.0) + (injectionSwitch)))).x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
      }
     if(true)
      {
       if(subgroup_local_id + (min((clamp(1, 1, 1)), 1)) < subgroup_size)
        {
         if((false))
          barrier();
         if(true)
          {
           for(int _injected_loop_counter = (0 & - 90269); ((((injectionSwitch.x < injectionSwitch.y)) && (bool((! (! (bool((! (! (_injected_loop_counter < 1))))))))))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               atomicStore(buf[next_virtual_gid], uint((int((max((((ivec3(ivec4(ivec3(2, 1, ((0 ^ 1) | 1)), 0))) | ivec3(0, 0, 0))), ivec3(2, 1, ((0 ^ 1) | 1))))))), 4, 64, 4);
              }
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = ((0 + (0 ^ ((max(((1 << (int(((5) / 1))))), ((1 << (int(((5) / 1)))))))))) >> (int(5))); _injected_loop_counter != (((((0 ^ (int(((ivec4(((0 | 0) ^ 0), 0, (1 & 1), 1)) | ivec4(0, 0, 0, 0)))))) + 0))); _injected_loop_counter --)
            {
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
         while((false || ((! ((bool((bvec2(bvec3(bvec2((false || ((! (! (! (false)))))), false), false))))))))));
         for(int _injected_loop_counter = ((true ? int((injectionSwitch.x)) : (atomicCompSwap(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))); _injected_loop_counter != ((min((~ (~ ((0 | 0)))), (((0 | 0)) | ((0 | (0 ^ (0))))))) ^ 1); _injected_loop_counter ++)
          {
           do
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
         if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         for(int _injected_loop_counter = ((0) | ((((0) | (((0 | ((min((((false ? (_injected_loop_counter) : 0)) | 0), (false ? (_injected_loop_counter) : 0)))))))) ^ ((min(0, 0)))))); (bool(bvec3(_injected_loop_counter < (~ (((~ (1)) ^ 0))), true, true))); _injected_loop_counter ++)
          {
           if(true)
            {
             subgroupAll(false);
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         while(false);
         if(((false || ((((clamp(((false ? (- 740.322) : float((clamp(vec4(((false ? (injectionSwitch) : injectionSwitch)).x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, (clamp(determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), (((((float(float(0.0)))) + 0.0)) * 1.0)), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), ((0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))))), float((clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, (mix(float((float(93116))), float(0.0), bool(true))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, ((0.0) / (injectionSwitch.y)), 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), float((clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos((max(0.0, 0.0))), 0.0, 0.0, 0.0, (min(1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (clamp(0.0, 0.0, (max(0.0, 0.0))))), vec4(injectionSwitch.x, 0.0, determinant(((mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, (min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0))))))) > injectionSwitch.y)))))
          {
          }
         else
          {
           if((bool((bvec3(bvec4(bvec3(((true) && true), false, false), false))))))
            {
             if((false))
              {
               if(true)
                {
                 if(((! ((bool(bvec3((bool(bool(! (false)))), true, true)))))))
                  barrier();
                 if((((false) || false)))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
              barrier();
             if(((false || ((true && ((((max((max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))))
              barrier();
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         subgroupAll(true);
         if((true && ((false || ((! (! (((((mix(float(((+ - 6.6))), float(((false ? (refract(- 13.46, 5395.6837, 5.7)) : ((injectionSwitch.x) - 0.0)))), bool(true))) > injectionSwitch.y)))))))))))
          barrier();
         if((((false)) || false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((false || (((true && ((false)))) || false)) && true))))
      {
       if((! (! ((! (! (((bool((bool(bvec4(bool((true && (bool((bvec2(bvec4(bvec2((false), true), false, true))))))), false, true, false)))))))))))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y)))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if((false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((~ (~ (0))) << (int((((min(2, 2))) + 0)))); _injected_loop_counter --)
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           while(false);
          }
         barrier();
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((false || (false)))
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
}
