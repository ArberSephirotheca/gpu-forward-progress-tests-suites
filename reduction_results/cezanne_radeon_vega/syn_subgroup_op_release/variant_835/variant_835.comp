#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((false) && true)))
      barrier();
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            {
             if(true)
              {
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             else
              {
              }
             if((((false) && true)))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           while(false);
           if((false))
            barrier();
          }
         while(false);
        }
       else
        {
        }
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while(false);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((workgroup_size * workgroup_id) | ((uint(uvec2(workgroup_size * workgroup_id, 1u)))));
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    barrier();
  }
 uint virtual_gid = ((workgroup_base + ((true ? subgroup_id : (atomicExchange(subgroup_size, (subgroup_id >> subgroup_local_id))))) * subgroup_size + subgroup_local_id) | (workgroup_base + (min(subgroup_id, ((subgroup_id) >> 0u))) * subgroup_size + subgroup_local_id));
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((false ? (workgroup_size) : ((max((0u | ((((subgroup_local_id + (0 + (1))) | (subgroup_local_id + (0 + (1))))))), ((false ? (usubBorrow(workgroup_size, num_workgroup, workgroup_size)) : (0u | ((subgroup_local_id + 1))))))) % subgroup_size)));
 buf[virtual_gid] = 1;
 if(((((! (! (false)))) && (((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < (clamp(((min((clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))), ((false ? (3.5) : (injectionSwitch.y))))) + 0.0), (min(injectionSwitch.y, injectionSwitch.y)), (clamp(injectionSwitch.y, (min((mix(float(injectionSwitch.y), float((576.937)), bool(false))), (((((mix(float(injectionSwitch.y), float((576.937)), bool(false)))) - 0.0)) / 1.0))), (max((min(((injectionSwitch) - log(vec2(1.0, 1.0))), ((min(vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)))))))).y, injectionSwitch.y)))))))))))
  {
   if(true)
    {
     if((((bool(((bool(true)) && true)))) && (false || (true))))
      {
       barrier();
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           do
            {
             if(true)
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               else
                {
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if(false)
        {
         if((((false) || false)))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
             if((false))
              {
               if(((true) && ((injectionSwitch.x < injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           if(((((cos(0.0) * (injectionSwitch.x)) > injectionSwitch.y))))
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   while(false);
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        barrier();
       do
        {
         do
          {
           if((false))
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             while(false);
             for(int _injected_loop_counter = ((((min((1 << ((clamp(int(5), int(5), ((0 << (int(4))) + (int(5))))))) >> (int(5)), (1 << ((clamp(int(5), int(5), ((0 << (int(4))) + (int(5))))))) >> (int(5))))) << (int(4))) >> (((true ? int(4) : (bitfieldInsert(93971, (clamp(- 91193, - 91193, - 91193)), - 62920, 66652)))))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = ((1 << (((int(1))) ^ 0)) >> ((0 ^ (int(1))))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(false);
                 barrier();
                }
              }
             do
              {
               if((! ((! (! (! (((((injectionSwitch.x > injectionSwitch.y) && true))))))))))
                {
                }
               else
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   atomicStore(buf[next_virtual_gid], uint((int(((ivec2(((2) - 0), 1)) << ivec2(0, 0))))), 4, 64, 4);
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
             while(((false || (((bool(bool((true && (false)))))))) && true));
            }
           for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != ((0 << (int(6))) >> (int(0))); _injected_loop_counter --)
            {
             if(((! ((false || (! (false)))))))
              barrier();
            }
          }
         while(false);
        }
       while(false);
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(((bool(bvec4(bool(bvec3((false || ((false))), false, (false || (false)))), false, false, true)))))
            barrier();
          }
        }
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y)));
    }
   if(false)
    {
    }
   else
    {
     if(((((injectionSwitch.x > injectionSwitch.y))) || false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((false || (false))))
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           subgroupAll(false);
          }
        }
      }
    }
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (~ (~ (int((injectionSwitch.x))))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((bool(bool(((false) && true))))))
        barrier();
       if(false)
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if(true)
    {
     if(false)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
         for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(true)
          {
           if(((bool(bvec2(false, (! (! ((bool(bvec2(false, true)))))))))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (clamp(1, 1, 1)); _injected_loop_counter ++)
              {
               if(true)
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (((true ? int(6) : (_injected_loop_counter))))); _injected_loop_counter --)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if(true)
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         do
                          {
                           if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))
                            {
                             if(true)
                              {
                               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         while(false);
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(((true && (false))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (((int(7)) - 0))) >> (int(7))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(true)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; ((true ? _injected_loop_counter -- : (min(- 80602, - 78633)))))
      {
       if((false))
        {
         if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     subgroupAll(true);
    }
   else
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((! (! (false)))) && true))
        {
        }
       else
        {
         barrier();
         if((false))
          {
           for(int _injected_loop_counter = 1; ((((_injected_loop_counter > ((true ? 0 : (_injected_loop_counter)))) || (bool(bvec3((! (! (((injectionSwitch.x > injectionSwitch.y))))), true, ((injectionSwitch.x < injectionSwitch.y))))))) && true); _injected_loop_counter --)
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
      }
    }
   if(((((true && (bool(bvec3((false), false, true)))))) || false))
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if(((((true && ((((((! (bool(bvec3((! (injectionSwitch.x > injectionSwitch.y)), true, true))))) && true)) && ((((bool(bool((mix(float(injectionSwitch.x), float((vec3(- 9.4, - 8.7, 1.8).b)), bool(((injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))) || ((true && (true)))))))))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((bool(bvec2(false, true))))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             barrier();
            }
           while(false);
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
  }
 if(((((((! (! (injectionSwitch.x < injectionSwitch.y))))) && ((((true ? injectionSwitch : (injectionSwitch))).x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((((max((((max(injectionSwitch, injectionSwitch))) * mat2(1.0)), injectionSwitch)).x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
     if(((bool(bvec2(false, false)))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(false);
      }
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
}
