#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if(((((((true && (! ((false || (! ((((float(mat2(clamp((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / determinant(mat4(1.0, 0.0, 0.0, 0.0, (float(mat2x3(1.0, 0.0, determinant(mat4(abs(1.0), 0.0, 0.0, 0.0, ((log(vec2(1.0, 1.0)) + (injectionSwitch)).y), (float((mat2(((true ? mat3(mat2(1.0, 1.0, 0.0, 0.0)) : (mat3(728.551, - 207.953, 158.978, 519.172, 833.802, - 0.0, 4.6, 8.9, 3.2)))))))), 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, abs(0.0))))) > injectionSwitch.y))))))))) && true))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((true && ((! (! (bool((true && (bool((! (! (false)))))))))))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if(((true && (false))))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (~ (~ ((uint(((max(injectionSwitch, injectionSwitch)).x)) | (((0u ^ (min(((clamp((max(((min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | 0u, (((gl_WorkGroupSize.x)) | 0u) | 0u)), ((0u ^ ((uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x))) | 0u, (gl_WorkGroupSize.x) | 0u))), ((clamp((max(((min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | 0u, (((((gl_WorkGroupSize.x)) | 0u)) | 0u) | 0u)), ((0u ^ ((uvec3(0u, 0u, 0u) | (((gl_WorkGroupSize)) - uvec3(0u, 0u, 0u))).x))) | 0u, (gl_WorkGroupSize.x) | 0u))))))))))));
 if((false))
  return;
 uint workgroup_id = (0u ^ ((1u * (gl_WorkGroupID.x))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > (((vec2(mat2x4(injectionSwitch, (dot(vec4(exp(0.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, abs(0.0), abs(0.0), 0.0))) - vec2(0.0, 0.0))).y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((! ((bool(bvec3(! (false), false, false)))))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   barrier();
   if((false))
    return;
  }
 uint workgroup_base = ((workgroup_size) >> 0u) * (clamp(((((workgroup_id) + 0u)) ^ (clamp(((0u) | (0u)), 0u, 0u))), ((((workgroup_id) + 0u)) ^ (clamp(((0u) | (0u)), 0u, 0u))), ((((workgroup_id) + 0u)) ^ (clamp(((0u) | (((0u) | (0u)))), 0u, 0u)))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((uint(uvec3(((max((min(((false ? (subgroup_local_id) : ((~ (~ ((~ (((false ? (subgroup_size) : (max(~ (0u), ~ (0u ^ ((0u)))))))))))) | (subgroup_local_id + 1)))), subgroup_local_id + 1)), ((((true) && true) ? subgroup_local_id : (subgroup_size))) + 1))) % (uint((injectionSwitch.x)) ^ ((min(((subgroup_size) * uint((injectionSwitch.y))), ((subgroup_size) * uint((injectionSwitch.y))))))), 0u, 0u))));
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), (0 ^ (((((((false ? (14056) : true ? (min(4, (max(((4) >> 0), 4)))) : (- 30163)))))) | ((~ ((max(~ ((~ (~ (4)))), ~ ((~ (~ (4)))))))))))), 64, 4);
   if(((true && ((false || (((! ((! (! (! (false || ((((! (! (((((injectionSwitch.x > (float(mat2x4(injectionSwitch.y, 0.0, 0.0, ((1.0 * ((1.0) / 1.0))), 0.0, (dot(vec4(0.0, (injectionSwitch.y), 0.0, sin(0.0)), vec4(1.0, (max((clamp(tan(0.0), ((false ? (13.84) : tan(0.0))), tan(0.0))), (clamp((clamp(((tan(0.0)) - (injectionSwitch.x)), tan(0.0), tan(0.0))), tan(0.0), tan(0.0))))), (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0))), sqrt(1.0), sin(0.0))))) && true))))))) && true)))))))))))))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((! (! (((true && (((false) || false))))))))
    return;
   subgroupAll(false);
   if((false))
    return;
  }
 else
  {
   atomicStore(buf[(~ (~ (next_virtual_gid)))], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   subgroupAll(true);
  }
}
