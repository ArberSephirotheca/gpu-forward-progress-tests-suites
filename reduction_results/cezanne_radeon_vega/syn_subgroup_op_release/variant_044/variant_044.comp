#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((bool(bvec3((bool(bvec3(! (! (false)), true, false))), false, true))))))
    barrier();
   if(((((((((bool(bvec4((((clamp(injectionSwitch.x, injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, (clamp(injectionSwitch, (max(injectionSwitch, injectionSwitch)), injectionSwitch)).x))))) / 1.0) > injectionSwitch.y, true, false, true)))) && true))))) && true))
    {
     if((false))
      barrier();
     if((((((mix(vec2((6.2), (vec2(((mat3x2((((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0)) * mat3(1.0))))[1]), vec2((vec2(((mat3x2((((clamp((mix(vec2((injectionSwitch)[0], (406.432)), vec2((- 1627.8089), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, injectionSwitch))) * ((((injectionSwitch.x < injectionSwitch.y)) ? (((vec2(mat4x3(vec2(1.0, 1.0), abs(1.0), 0.0, 1.0, 0.0, (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0)))) * mat2(1.0)) : (injectionSwitch)))), 0.0, 0.0, 1.0, 1.0)) * mat3(1.0))))[0], (996.627)), bvec2(true, false)))).x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(((bool(bvec3((! (! ((! (! ((! (! ((bool((bvec3(bvec4(bvec3(bool(bvec3((true && (bool(bvec3((((! (! (((injectionSwitch.x > injectionSwitch.y))))))), true, true)))), true, true)), true, true), true)))))))))))))), false, true)))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     barrier();
     if(((bool(bool((! (! (false))))))))
      barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((! (((! ((((bool(bvec2(((0.0 + (injectionSwitch.x)) > injectionSwitch.y), false))) && true)))) || false))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((((min((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((((false) && true)))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec2((((injectionSwitch.x > injectionSwitch.y)) || (false)), false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((false) && true)))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y)), false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = ((max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))) - 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = ((gl_WorkGroupSize.x) << uint((((injectionSwitch.x) - 0.0))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((false)) && true))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = ((workgroup_size * workgroup_id) | 0u);
 uint virtual_gid = ((workgroup_base + subgroup_id * subgroup_size + (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | (((((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u)) ^ 0u) | ((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u)) ^ 0u)))));
 if((false))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = (((((uint(uvec4(workgroup_base, 0u, 0u, uint((injectionSwitch.y))))) + subgroup_id * subgroup_size) / uint((injectionSwitch.y))) >> 0u)) + (((0u ^ (subgroup_local_id + 1))) % subgroup_size);
 if(((bool((bool(bvec4(bool((false || (((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))), true, (bool(bvec2(true, true))), false)))))))
  {
   if((false))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
   barrier();
  }
 buf[virtual_gid] = 1;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false) && true)))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    barrier();
   atomicStore(buf[(((0u | (((next_virtual_gid) - 0u)))) / 1u)], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((((max(injectionSwitch, (vec2(mat2x4(injectionSwitch, 0.0, 1.0, (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 0.0, (min(0.0, ((0.0) / 1.0)))))))).x > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((false)) && true))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((bool(bvec3((false), true, true))))
      barrier();
     if((true && ((! (! ((false)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(((true && (false))))
      barrier();
    }
   subgroupAll(false);
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((((false || (true && (false))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], ((uint(2)) >> 0u), ((4) / 1), 64, 4);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   subgroupAll(true);
   if((false))
    {
     if((false))
      barrier();
     if((((false) || false)))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((((bool(bvec2((! (! (false))), false)))) && (bool(bool(true))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
