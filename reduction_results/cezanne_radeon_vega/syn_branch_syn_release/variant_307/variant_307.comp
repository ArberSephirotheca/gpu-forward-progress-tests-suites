#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)).x;
 uint workgroup_size = (((0u + (((gl_WorkGroupSize.x) << 0u)))) * 1u);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (~ ((0u | (((~ ((((~ (~ (0u ^ ((((false ? (workgroup_id) : (((((clamp((((min((((clamp(workgroup_size, workgroup_size, workgroup_size)) | ((uint(uvec2(clamp(workgroup_size, workgroup_size, workgroup_size), 0u)))))), (((clamp(workgroup_size, workgroup_size, workgroup_size)) | ((uint(uvec2(clamp(workgroup_size, workgroup_size, workgroup_size), 0u))))))))) | 0u), workgroup_size, workgroup_size))) | ((clamp(((false ? (num_workgroup) : ((uint(uvec2(clamp(workgroup_size, workgroup_size, workgroup_size), 1u)))))), workgroup_size, workgroup_size)))) * ((workgroup_id) << 0u)) >> 0u)))))))))) ^ 0u)) << uint((injectionSwitch.x)))))));
 uint virtual_gid = workgroup_base + (clamp(subgroup_id * subgroup_size, ((subgroup_id * (((((0u | ((((true ? min(subgroup_size, (uint((min(((uvec4(subgroup_size, 1u, 1u, 1u)) | uvec4(0u, 0u, 0u, 0u)), uvec4(subgroup_size, 1u, 1u, 1u)))))) : (workgroup_size))))))) ^ 0u)) ^ ((((false ? (atomicOr(num_workgroup, workgroup_size)) : 0u) + (uint((injectionSwitch.y)) ^ 1u)))))) | ((((clamp((0u | ((clamp(subgroup_id * (min(subgroup_size, subgroup_size)), subgroup_id * ((subgroup_size) >> 0u), subgroup_id * subgroup_size)) - (((false ? (subgroup_local_id) : ((0u << (uint((((clamp(5u, 5u, 5u))) >> 0u)))) >> 0u)))))), (((false ? (num_workgroup) : 0u)) | ((clamp(subgroup_id * (min((clamp(subgroup_size, (1u * (subgroup_size)), subgroup_size)), subgroup_size)), subgroup_id * ((subgroup_size) >> 0u), ((subgroup_id * subgroup_size) + 0u))) - (((false ? (subgroup_local_id) : ((0u + ((0u << (uint((((max(5u, 5u))) >> ((0u) >> 0u))))))) >> 0u)))))), (0u | ((clamp(subgroup_id * (min(subgroup_size, subgroup_size)), subgroup_id * ((subgroup_size) >> 0u), subgroup_id * subgroup_size)) - (((false ? (subgroup_local_id) : ((0u << (uint(((5u) >> 0u)))) >> 0u)))))))))))), (((0u + ((uint(uvec3(subgroup_id * subgroup_size, 1u, (min(1u, 1u)))))))) / ((1u << (((uint(5u)) / 1u))) >> ((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_local_id) : (uint(5u))))) ^ (~ (~ ((max(0u, 0u)))))))))) + subgroup_local_id;
 uint next_virtual_gid = ((((max(max(((max(uint(uint(((~ (~ (0u))) ^ (true ? workgroup_base : ((min(subgroup_id, subgroup_id))))))), uint(uint(((~ (~ (0u))) ^ (true ? workgroup_base : ((min(subgroup_id, subgroup_id)))))))))), ((((((~ (~ (((uint(uint(((~ (~ (0u))) ^ (true ? workgroup_base : (subgroup_id))))))) * 1u)))) | ((~ (~ (((uint(uint(((~ (~ (0u))) ^ (true ? workgroup_base : (subgroup_id))))))) * 1u)))))) ^ 0u))), ((max((uint(uint(((~ (~ (0u))) ^ (true ? workgroup_base : (subgroup_id)))))), (((~ (~ (((~ (~ ((true ? (((uint(uint(((~ (~ (0u))) ^ ((((bool(bvec2(true, false))) ? workgroup_base : (subgroup_id)) - (0u | 0u)))))))) * ((1u) | 0u)) : (workgroup_id))))))))) ^ 0u)))) | 0u)))))) + subgroup_id * subgroup_size + ((~ (~ ((clamp((((subgroup_local_id + 1) % subgroup_size) | ((((uint(uint((subgroup_local_id + (~ (~ (1)))) % subgroup_size)))) / 1u))), (subgroup_local_id + 1) % subgroup_size, (((subgroup_local_id + 1) - uint((injectionSwitch.x)))) % subgroup_size))))));
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (((min(4, ((4) | 0)))) - 0));
  }
 else
  {
   if(false)
    {
    }
   else
    {
     do
      {
       do
        {
         atomicStore(buf[next_virtual_gid], ((uint(((~ (~ (int(((ivec3(2, 0, (clamp(1, 1, 1)))) + ivec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))))))))) / uint((min((injectionSwitch.y), (((injectionSwitch.y)) - 0.0))))), 4, (((clamp(64, 64, 64)) | (clamp(64, 64, 64)))), 4);
        }
       while(false);
      }
     while(false);
    }
  }
}
