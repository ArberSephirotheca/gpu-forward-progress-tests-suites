#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       return;
      }
     barrier();
    }
   do
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(false);
  }
 if((false))
  {
   if(((true && (false))))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((false))
      return;
    }
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if(true)
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
      }
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(false);
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((((1 << (int(6))) >> (int(6)))) * 1); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     do
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     while(false);
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   else
    {
    }
   if(((! (((! (false)) && true)))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != (1 | (0 ^ 0)); _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if((false))
  barrier();
 do
  {
   if((false))
    return;
  }
 while(false);
 if(true)
  {
   if((((false) || false)))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) << (int(4))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             if((false))
              barrier();
             if(true)
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
        }
       barrier();
      }
     do
      {
       if((((false) || false)))
        barrier();
      }
     while(false);
     do
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    barrier();
   return;
   if((((false) && true)))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != (min(1, 1)); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((true ? int((injectionSwitch.x)) : (bitfieldReverse(- 39831)))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      return;
     for(int _injected_loop_counter = (1 * (1)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(4))) >> ((int(ivec4(int(4), 0, 0, 0))))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
   if((false))
    {
     do
      {
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
     while(false);
     if(true)
      {
       barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(5))); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(false)
      {
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               return;
              }
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if((false))
          return;
        }
       if((((false) || false)))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             return;
            }
           while(false);
          }
         if((false))
          barrier();
        }
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 do
  {
   if((false))
    {
     if(((bool(bvec2(false, true)))))
      barrier();
     barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 do
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(false);
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 while(false);
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if((false))
      barrier();
     if((false))
      continue;
     barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    return;
   for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         break;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       barrier();
       if((false))
        {
         if((! (! (true))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(((true && (false))))
              barrier();
             continue;
            }
          }
         if(((((injectionSwitch.x > injectionSwitch.y)) || ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
      }
    }
   for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((false))
      return;
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      return;
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(true)
      {
       return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((bool(bvec2(true, false))))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           return;
          }
         barrier();
         if((false))
          break;
        }
       else
        {
        }
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (((~ (~ (1)))) | (1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        {
         for(int _injected_loop_counter = ((1 << (int(2))) >> ((~ (~ (int(2)))))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       do
        {
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       if((false))
        return;
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           do
            {
             do
              {
               if(((! (! (false)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  continue;
                 barrier();
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               if((false))
                return;
               if(((bool(bvec4(false, true, true, false)))))
                barrier();
              }
             while(false);
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(false);
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            break;
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                break;
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if((false))
              {
               for(int _injected_loop_counter = ((0 >> (int(5))) >> ((clamp(int(6), int(6), int(6))))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           if((false))
            barrier();
           if((false))
            continue;
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = ((1 << ((min(int(7), ((int(7)) >> 0))))) >> (int(7))); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             continue;
            }
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               return;
              }
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         for(int _injected_loop_counter = (((1 << (int(0))) >> (int(0))) & 1); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
          {
           if((false))
            {
             if(true)
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             else
              {
              }
            }
          }
        }
       while(false);
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     do
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (((0 << (int(6))) << (int(6))) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
         if((false))
          barrier();
         do
          {
           if((false))
            return;
          }
         while(false);
         barrier();
         if(true)
          {
           if((false))
            {
             do
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(false);
             return;
            }
          }
         else
          {
          }
        }
      }
     while(false);
    }
   do
    {
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(((! (! (false)))))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           return;
          }
         if(true)
          {
           barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if((false))
            return;
          }
        }
      }
     else
      {
      }
    }
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(((((false || (false))) || false)))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       return;
      }
    }
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(true)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           return;
          }
         while(false);
        }
       while(false);
      }
    }
   else
    {
    }
   do
    {
     if((false))
      {
       if(((! (! (false)))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while((bool(((bool(false)) && true))));
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   while(false);
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 do
  {
   do
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         if(((true && (false))))
          barrier();
         if((false))
          {
           if((false || (false)))
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  return;
                }
               else
                {
                }
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
            }
           else
            {
             if((false))
              barrier();
             return;
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if(true)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         barrier();
         if((false))
          barrier();
         if(((bool(bvec4(false, true, true, false)))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   while(false);
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((! (! ((true && (false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       do
        {
         return;
        }
       while(false);
      }
    }
   else
    {
    }
  }
 if(((! (! (false)))))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((false))
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(((bool(bool(false)))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if(false)
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
      }
     else
      {
       return;
       if((false))
        return;
      }
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
         barrier();
        }
       return;
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           return;
          }
        }
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(false);
          }
        }
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      {
       do
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       while(false);
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((bool(bvec3(false, true, true)))) || ((injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if(true)
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   do
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       while(false);
      }
     do
      {
       return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 do
  {
   if(true)
    {
     do
      {
       do
        {
         if((false))
          continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter < (int(ivec3(1, 0, 0))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if((false))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               break;
              }
             barrier();
            }
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((bool(bool(false))))
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(true)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     while(false);
                     if((false))
                      return;
                     barrier();
                    }
                  }
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
       while(false);
      }
     while(false);
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       return;
       if((false))
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((false))
          break;
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(false);
     if((false))
      break;
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
           if((false))
            return;
           barrier();
          }
        }
      }
     while(((false) && true));
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(false)
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             do
              {
               barrier();
              }
             while(false);
            }
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 << (int(6))) >> (int(6))) ^ 0); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
     if((false))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 do
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
      {
       if((true && (false)))
        {
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > ((- 26749 | - 33029) & (int((injectionSwitch.x)) | 0)); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       continue;
       if((false))
        barrier();
      }
     barrier();
     if((false))
      continue;
    }
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   do
    {
     if(false)
      {
       if(true)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (1 * (0)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
        }
       else
        {
         if((false))
          continue;
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       continue;
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     do
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
    {
     if((((! (! (true)))) || false))
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true)))))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          break;
         do
          {
           barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        return;
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         if(true)
          {
           if((! (! (((true) && true)))))
            {
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               return;
              }
             barrier();
            }
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    return;
                  }
                 barrier();
                }
               barrier();
              }
             for(int _injected_loop_counter = ((1 << (((int(3)) | 0))) >> (int(3))); _injected_loop_counter != (((0) / 1) << (int(3))); _injected_loop_counter --)
              {
               if((false))
                return;
              }
             if((false))
              break;
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
              {
               if((! (! (true))))
                {
                 return;
                }
               else
                {
                }
              }
             do
              {
               if((false))
                barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               break;
              }
             if(false)
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(((true) || false))
                {
                 return;
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  barrier();
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       break;
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if((false))
                barrier();
              }
            }
           while(false);
          }
         barrier();
        }
       if((false))
        {
         if((false))
          return;
         break;
        }
      }
     barrier();
    }
  }
 while(false);
 if(true)
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          return;
         barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if(true)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           return;
          }
        }
       if((! (! (true))))
        {
         return;
        }
       else
        {
        }
      }
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if((false))
      barrier();
     if(true)
      {
       if(((((((injectionSwitch.x < injectionSwitch.y))) && true)) || false))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if((false))
                    break;
                   if((false))
                    barrier();
                   if((((false) || false)))
                    break;
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    {
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     return;
                    }
                   barrier();
                  }
                 do
                  {
                   if(((bool((bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true), false)))))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  return;
                 if((false))
                  {
                   if(true)
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                   barrier();
                   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     else
                      {
                      }
                    }
                  }
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       break;
                      }
                     barrier();
                    }
                  }
                 if((false))
                  break;
                }
              }
             while(false);
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (1 & int((injectionSwitch.y))); _injected_loop_counter != (0 << (int(5))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             while(false);
             if((false))
              return;
             barrier();
            }
           return;
           do
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < (clamp(1, 1, 1)); _injected_loop_counter ++)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                {
                 if((false))
                  continue;
                 for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 do
                  {
                   barrier();
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    break;
                  }
                 while(false);
                }
              }
            }
           while(false);
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           do
            {
             for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             barrier();
            }
           while(false);
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     else
      {
      }
     if((((false) || false)))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     do
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(((false || (false))))
              barrier();
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           barrier();
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (max(((1) ^ 0), 1)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false) && true)))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              return;
             if((false))
              {
               if(((! (! (false)))))
                continue;
               barrier();
              }
             if((false))
              {
               if((false))
                {
                 for(int _injected_loop_counter = (clamp((~ (~ (0))), 0, (~ (~ (0))))); _injected_loop_counter != ((1) / 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
               if((false))
                barrier();
              }
            }
          }
         else
          {
          }
        }
       if(((! (! ((! (! (((false) && true)))))))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((true && (false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if((false))
            {
             do
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(false);
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if(true)
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x > injectionSwitch.y))))));
                }
              }
            }
          }
        }
       do
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           barrier();
           if(((! (! (false)))))
            barrier();
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              return;
            }
          }
         else
          {
          }
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           continue;
          }
        }
       while(false);
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 & 1) & 1); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((false) || false)))
            break;
           if((false))
            barrier();
           continue;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(false)
            {
             if((((! (! (bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if((false))
        {
         if((false))
          barrier();
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             continue;
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           barrier();
          }
         if((false))
          continue;
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               barrier();
              }
             while(false);
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         continue;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((((false) && true)))
              {
               if((false))
                {
                 for(int _injected_loop_counter = ((false ? (- 38396) : 1)); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               if(((! (! (false)))))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
            }
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = (((1 | 1)) | (0 << (int(2)))); _injected_loop_counter != ((0) << 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if((false))
            break;
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
          {
           if((false))
            break;
           if((false))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             while((bool(bool(false))));
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((bool(bvec4(false, false, false, false))))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
  }
 else
  {
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (int(ivec2(((int((injectionSwitch.x))) + 0), 0))); _injected_loop_counter --)
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       if(((false) && true))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if((false))
        return;
      }
     while(false);
    }
   if(((false || (false))))
    {
     do
      {
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
     while(false);
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            {
             if((true && (false)))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
            return;
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(((false) || false));
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if(((! (! (bool(bool(false)))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            {
             if(((! ((false || (! (false)))))))
              barrier();
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             do
              {
               if((false))
                break;
               if((false))
                barrier();
              }
             while(false);
             return;
             if((false))
              break;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   break;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if((false))
                    {
                     if((false))
                      continue;
                     if((false))
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     return;
                    }
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(((! (! (false)))))
                  barrier();
                 if((false))
                  continue;
                }
               return;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
            }
           if((false))
            barrier();
          }
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     if(false)
      {
      }
     else
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    return;
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << ((clamp(int(5), int(5), int(5))))) >> (int(5))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       while(false);
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(false);
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   while((bool(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y))))));
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if(true)
    {
     if(((! (! (false)))))
      return;
    }
   else
    {
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     barrier();
    }
   if(((bool(bvec4(false, true, true, false)))))
    barrier();
   return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   barrier();
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((bool(bvec3(true, false, false))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     if((false))
      barrier();
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        return;
      }
     while(false);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       else
        {
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                return;
               do
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(false);
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        break;
       if(true)
        {
         if((false))
          {
           do
            {
             barrier();
             if(((! (! (((((injectionSwitch.x > injectionSwitch.y))) && true))))))
              break;
            }
           while(false);
           if((false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((bool(bool(false)))))
          barrier();
        }
       if((false))
        {
         if(true)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           if(true)
            {
             if((false))
              return;
            }
           else
            {
            }
           if((false))
            break;
          }
         else
          {
          }
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           continue;
          }
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((((false) || false)))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
      }
    }
   while(false);
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if(false)
          {
          }
         else
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ 0); _injected_loop_counter != (int((injectionSwitch.x)) | int((injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while((bool(bool(false))));
    }
   if((false))
    {
     if((false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           do
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
        }
      }
     while(false);
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
         while(false);
         if((false))
          return;
         if((false))
          barrier();
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if((((false) && true)))
      {
       if((false))
        return;
       return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       buf[virtual_gid] = 1;
      }
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = (0 | (0 | 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         while((false || (false)));
        }
       if((false))
        {
         if(true)
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
              }
            }
          }
         else
          {
          }
         break;
        }
       if((false))
        continue;
      }
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       break;
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(false)
        {
        }
       else
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
           break;
          }
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         barrier();
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
      }
    }
  }
 while(false);
 if(((bool(bool(false)))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     do
      {
       if(((bool(bvec3(false, false, true)))))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(subgroup_local_id + 1 < subgroup_size)
        {
         int i = 0;
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
         do
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               do
                {
                 return;
                }
               while(false);
              }
            }
           else
            {
            }
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
         while(false);
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           do
            {
             do
              {
               if((false))
                {
                 if(true)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
              }
             while(false);
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               do
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = (ivec3(94731, 98426, - 32672).g & 0); _injected_loop_counter != (clamp(1, ((false ? (62990) : 1)), (clamp(1, 1, 1)))); _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             if((false))
              {
               if((false))
                continue;
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (((int(0)) >> int((injectionSwitch.x))))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if((false))
                  barrier();
                }
              }
             if((! (! (false))))
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           while(false);
           barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             continue;
             if(((false || (false))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                return;
              }
            }
           if((false))
            barrier();
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
              }
             break;
            }
           barrier();
          }
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 & int((- 0.6 * - 8.6))); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
             if(((false || (false))))
              {
               do
                {
                 barrier();
                }
               while((bool(bvec4(false, true, false, false))));
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((((false) && true)))
                break;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
               if((false))
                return;
               break;
              }
             if((false))
              barrier();
             if((false))
              {
               if((false))
                return;
               if(false)
                {
                }
               else
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                   if((false))
                    break;
                  }
                 else
                  {
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                }
               if(((((false || (((injectionSwitch.x > injectionSwitch.y))))) || false)))
                barrier();
               if((false))
                continue;
               if(true)
                {
                 return;
                }
               else
                {
                 if((false))
                  break;
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(((true && (false))))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << ((int(((ivec4(int(6), 0, (0 >> (int(3))), 0)) | (ivec4(int(6), 0, (0 >> (int(3))), 0))))))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
              }
             for(int _injected_loop_counter = (- 56302 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
               return;
              }
             if(true)
              {
               barrier();
              }
             else
              {
               if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           if(false)
            {
            }
           else
            {
             do
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(false)
                {
                 if(((! (! (false)))))
                  {
                   if((false))
                    return;
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      {
                       do
                        {
                         if((false))
                          barrier();
                        }
                       while(false);
                       do
                        {
                         return;
                        }
                       while(false);
                      }
                     for(int _injected_loop_counter = 1; _injected_loop_counter > (- 82599 & 0); _injected_loop_counter --)
                      {
                       if(true)
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   return;
                   if((false))
                    break;
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter != ((1 << (int(6))) >> (((int(6)) | 0))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if((false))
                      return;
                    }
                   barrier();
                  }
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(((bool(bvec3(false, false, true)))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          break;
                         if((false))
                          {
                           if((false))
                            {
                             do
                              {
                               return;
                              }
                             while(((bool(bvec2(bool(bvec4(false, false, true, false)), false)))));
                            }
                           barrier();
                          }
                         if((false))
                          barrier();
                         barrier();
                        }
                       if((false))
                        continue;
                       barrier();
                       do
                        {
                         if((false))
                          return;
                        }
                       while(false);
                       do
                        {
                         if((false))
                          barrier();
                        }
                       while((bool(bool(false))));
                      }
                     while(false);
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((0 << (int(6))) & 53264); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                        {
                         if((((false) && true)))
                          barrier();
                         do
                          {
                           do
                            {
                             if((false))
                              barrier();
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                           for(int _injected_loop_counter = 1; _injected_loop_counter != (- 25777 & (47097 & 0)); _injected_loop_counter --)
                            {
                             if((false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(((injectionSwitch.x > injectionSwitch.y)));
                              }
                            }
                          }
                         while(((false) && true));
                        }
                      }
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 << (int(1))) & - 71346); _injected_loop_counter --)
                        {
                         do
                          {
                           if((false))
                            {
                             if(((! (! (false)))))
                              {
                               if(true)
                                {
                                 return;
                                }
                               else
                                {
                                }
                              }
                             barrier();
                            }
                          }
                         while(false);
                        }
                       if((false))
                        barrier();
                       if((((! (! (bool((bvec3(bvec3(bvec3((bool(bvec4(false, false, true, true))), true, false)))))))))))
                        continue;
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       return;
                      }
                     barrier();
                    }
                  }
                }
              }
             while(false);
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(7))) >> (((int(7)) / 1))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false || (true)))
          {
           if(((bool(bvec4(false, true, false, true)))))
            barrier();
           do
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if((true && (true)))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
               if((false))
                return;
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(((((injectionSwitch.x > injectionSwitch.y)) || ((! (! (false)))))))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    return;
                   if((false))
                    barrier();
                   return;
                  }
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while((false || (false)));
                  }
                }
               continue;
              }
            }
           while(false);
          }
         else
          {
           if((false))
            {
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(false);
             continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while((! (! (false))));
                  }
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 & 1) << (int(0))) >> (int(0))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            continue;
           barrier();
          }
         for(int _injected_loop_counter = (clamp(1, ((1) - 0), 1)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true)))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
              }
             else
              {
              }
             continue;
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           barrier();
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                continue;
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(((! (! (false)))))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(false);
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if((false))
            break;
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if((bool(bool(false))))
              {
              }
             else
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            return;
           if((false))
            barrier();
           do
            {
             do
              {
               if((((false) || false)))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     return;
                    }
                   if((false))
                    continue;
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                    }
                   if((false))
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     break;
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (0 >> (int(2))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != (int((injectionSwitch.y)) ^ 0); _injected_loop_counter ++)
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & 25238); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   if((false))
                    barrier();
                   if(((((! (! (false)))) && true)))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1) | (1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                }
              }
             while((bool(bvec4(((false) && true), true, ((injectionSwitch.x < injectionSwitch.y)), false))));
            }
           while(false);
           return;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
              }
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false || (false)))
            {
            }
           else
            {
             if((false))
              {
               if((((false) || false)))
                break;
               if(((bool(bvec3(false, true, false)))))
                break;
               if((false))
                {
                 if((false))
                  {
                   if(true)
                    {
                     for(int _injected_loop_counter = (0 | 1); _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  continue;
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
                  {
                   if(true)
                    {
                     do
                      {
                       if((false))
                        barrier();
                       if(false)
                        {
                        }
                       else
                        {
                         do
                          {
                           if((false))
                            barrier();
                           if((false))
                            barrier();
                          }
                         while(false);
                        }
                       barrier();
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                            continue;
                           if((false))
                            break;
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                             if((false))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                             barrier();
                             if(false)
                              {
                              }
                             else
                              {
                               if((false))
                                {
                                 if(((injectionSwitch.x < injectionSwitch.y)))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                         if((false))
                          {
                           if((false))
                            {
                             if(true)
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(false)
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = (1 & (1 & 1)); _injected_loop_counter > 0; _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                          }
                        }
                       if(((false || (false))))
                        break;
                       if((false))
                        barrier();
                      }
                     while(false);
                    }
                   else
                    {
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if((false))
                return;
               if((false))
                continue;
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
              }
            }
           for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if(((false || (false))))
              return;
             if((false))
              continue;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
           else
            {
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                barrier();
               barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                  }
                 break;
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
              }
             else
              {
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               if((! (! (false))))
                {
                }
               else
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               return;
              }
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 return;
                }
               else
                {
                }
              }
             if((false))
              {
               if((false))
                break;
               break;
               if((false))
                barrier();
              }
             if(((((false || (false))) || false)))
              barrier();
             if((false))
              break;
            }
           if((false))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((true && (true)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((true && (false)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               while(false);
              }
             else
              {
              }
             do
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               if(((true && (false))))
                return;
              }
             do
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
             while(false);
             continue;
            }
          }
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(true)
              {
               if((false))
                return;
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while((! (! (false))));
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 while(false);
 if(((! (! ((bool(bool(false))))))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (int(7))) >> ((clamp(int(7), ((int(7)) * 1), int(7))))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = ((1 << ((0 + (int(0))))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (((int(6)) * 1))); _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      break;
     if((false))
      continue;
     if(true)
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(((! (! (false)))))
      break;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((false))
    return;
  }
}
