#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((true && ((bool(bvec3((false), true, false))))))
    {
     do
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((! ((bool(bvec3(! (((bool((bvec2(bvec2(bvec2(((true && (true))), false)))))) || false)), ((injectionSwitch.x > injectionSwitch.y)), true))))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if((false))
          continue;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(false);
         if((false))
          break;
        }
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(false);
     if((false))
      return;
    }
   return;
  }
 if((false))
  {
   if((false))
    {
     if((! (! ((false || (true))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     barrier();
     do
      {
       if(true)
        {
         if((((((bool(bvec4((false || ((false))), false, false, false))) && true)) && true)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              return;
             if((false))
              barrier();
             if((false))
              return;
            }
           if(((false) || false))
            {
             if((false))
              return;
            }
           else
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                return;
               barrier();
              }
            }
           do
            {
             if(true)
              {
               do
                {
                 return;
                 if((false))
                  return;
                 if(((((bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     if((false))
                      break;
                     barrier();
                    }
                   break;
                  }
                 if((false))
                  {
                   if(((false) || false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(false);
              }
             else
              {
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((((float(vec2(injectionSwitch.x, 1.0)))) - sin(0.0)) > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                return;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                 if((false))
                  barrier();
                }
               else
                {
                }
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((false))
            return;
           if((false))
            return;
           return;
          }
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((false || (false))))
            return;
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
         if((false))
          {
           if((bool(bool((bool(bvec4((false || ((false))), true, false, true)))))))
            barrier();
           if((false))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   do
    {
     if(false)
      {
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (clamp((40974 & 0), (40974 & 0), (40974 & 0))); _injected_loop_counter --)
            {
             if((false))
              {
               if((false || (true)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            return;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
         if((false))
          break;
        }
       if((false))
        {
         if((((false)) && true))
          barrier();
         continue;
        }
      }
     else
      {
       if(((false || (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             return;
            }
           break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            {
             if((false))
              continue;
             return;
            }
          }
         if((((false) && true)))
          continue;
         do
          {
           barrier();
           if((false))
            break;
          }
         while(false);
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          return;
        }
       if((false))
        continue;
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if(((true && (false))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
         barrier();
        }
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
      }
     if((false))
      continue;
    }
   while((! (! (false))));
  }
 if(((! (! (false)))))
  return;
 if(true)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        continue;
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            return;
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if((false))
          continue;
         if((false))
          break;
        }
       if(((bool(bvec2(((false) || false), true)))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        continue;
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if((false))
      continue;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((! ((false || (! (((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          continue;
         if((false))
          continue;
         break;
        }
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      continue;
     return;
     if((false))
      break;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > (max((max(injectionSwitch, injectionSwitch)), ((injectionSwitch) / vec2(1.0, 1.0)))).y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    return;
   if((false))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); (bool(bvec3(_injected_loop_counter != 0, (bool(bvec4(false, false, true, false))), true))); _injected_loop_counter --)
      {
       return;
      }
     if((false))
      return;
    }
  }
 else
  {
  }
 if(((true && (false))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
    }
   if((((false) || false)))
    return;
   barrier();
   if((false))
    return;
  }
 do
  {
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   do
    {
     if((false))
      continue;
     if((false))
      {
       if((bool(((bool(true)) && true))))
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if(((((bool((bvec2(bvec2((bvec2(bvec2(bvec2((bool(bvec4((! (! (injectionSwitch.x > injectionSwitch.y))), true, ((injectionSwitch.x > injectionSwitch.y)), true))), true)))))))))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          break;
        }
       else
        {
        }
      }
     if((false))
      {
       if(((bool(bvec2(false, true)))))
        continue;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(((bool(bvec3(false, true, false)))))
      {
       if((false))
        break;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          break;
         continue;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   while((true && (false)));
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     return;
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = (0 ^ int((injectionSwitch.y))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        return;
      }
     if((true && (true)))
      {
       if((((false)) && true))
        barrier();
      }
     else
      {
      }
     return;
     if((false))
      return;
    }
   else
    {
     if((false))
      barrier();
     if((false))
      return;
    }
   if(false)
    {
    }
   else
    {
     if(((! (! (false)))))
      return;
    }
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
    }
   while(false);
   if((((false)) && ((injectionSwitch.x < injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((min((gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u), (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)))).x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      return;
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             return;
            }
          }
         else
          {
           return;
          }
        }
       if((false))
        return;
       barrier();
      }
    }
   barrier();
   if((false))
    return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(((((false || ((true && (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      {
       do
        {
         if(((((bool(bool(false))))) && true))
          barrier();
        }
       while(false);
       return;
      }
     if(((((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))) && true)))
      {
       if(true)
        {
         if(((true && (false))))
          return;
        }
       else
        {
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((false))
        continue;
       if(((false || (((false) || false)))))
        barrier();
       if((false))
        return;
       return;
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id) >> 0u);
 if((false))
  return;
 uint next_virtual_gid = ((false ? (((workgroup_size) | 0u)) : ((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) + 0u)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > (float((mat3((transpose(transpose(mat3(mat3(((max(float(mat2x4(injectionSwitch.y, 0.0, (dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0)), float(mat2x4(injectionSwitch.y, 0.0, (dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 1.0)))))))))))))
  {
   for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(((((mix(vec2((9862.5591), (1.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, ((injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if((false))
  return;
 if(true)
  {
   if((false))
    barrier();
   buf[virtual_gid] = 1;
  }
 else
  {
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
         return;
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x < injectionSwitch.y)) && (((! (((! (! (bool(bvec3((bool((bvec2(bvec2(bvec2(((! (((((false) || false))) || false)) && true), (false || (true)))))))), true, (! (! (true)))))))))))))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         if(((! (! (false)))))
          continue;
         if((false))
          return;
        }
       while((! (! (((bool(bvec2(((false) || false), ((injectionSwitch.x > injectionSwitch.y))))) || (false))))));
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     if(((! ((true && (! (bool((((true && (bool((((false)) || false)))) && true))))))))))
      {
       if((false))
        return;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((((((((false)) && true))) || false) && ((injectionSwitch.x < injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(((((float(((false ? (mat3(- 56.98, 2877.6964, - 3059.9617, 66.82, - 9920.7741, - 5898.0870, 421.559, 22.11, 2.5)) : mat3(injectionSwitch.x, 1.0, 0.0, tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0))))) > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((! (! ((false)))))
        barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((false || (false))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         if((((((injectionSwitch.x) + 0.0) > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(((true && (false))))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
       if(((bool(bvec2(false, false)))))
        barrier();
       return;
      }
    }
  }
 if((false))
  barrier();
 if((((~ (~ (subgroup_local_id))) + 1) | (subgroup_local_id + 1)) < subgroup_size)
  {
   for(int _injected_loop_counter = ((0) - 0); _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   do
    {
     buf[next_virtual_gid] = 2;
    }
   while(false);
   subgroupAll(false);
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   do
    {
     if((false))
      return;
     if((false))
      continue;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        return;
       if(((((((! ((! (! (bool(bvec3(((((true && (! (((injectionSwitch) / (vec2(1.0, 1.0) * ((vec2(0.0, 0.0) + (vec2((injectionSwitch.y), ((max((clamp(injectionSwitch, injectionSwitch, (vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), injectionSwitch)).y))))))).x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))), false, true)))))))) && true)))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while((! (! ((((! (! (false)))) || false)))));
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(((((injectionSwitch.x) + 0.0) > injectionSwitch.y)));
   buf[next_virtual_gid] = 2;
   if((((injectionSwitch.x > ((((mat2(1.0) * ((injectionSwitch) * mat2(1.0))) - vec2(0.0, 0.0)))).y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   if(((false || (false))))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   do
    {
     if((false))
      {
       if((true && (((injectionSwitch.x < injectionSwitch.y)))))
        {
         if(((bool(bvec4((! (! ((true && (false))))), false, false, false)))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((false))
          continue;
        }
       else
        {
        }
       if(((bool((bool(bvec2(bool(false), true)))))))
        return;
       return;
       if(false)
        {
         if((false))
          barrier();
         if((false))
          continue;
        }
       else
        {
         if((false))
          return;
        }
      }
    }
   while(false);
   do
    {
     subgroupAll(true);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((! (! (((false) || false))))))
  {
   do
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(false);
   for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false || ((false))))
  return;
}
