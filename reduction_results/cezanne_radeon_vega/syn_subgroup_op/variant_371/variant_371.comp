#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 if((false))
  {
   do
    {
     do
      {
       return;
      }
     while((((max((mix(vec2((injectionSwitch)[0], (- 3.5)), vec2(((63.16)), (injectionSwitch)[1]), bvec2(false, true))), ((true ? injectionSwitch : (injectionSwitch))))).x > injectionSwitch.y)));
    }
   while(false);
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
 if((((false || ((bool(bvec4(bool(bvec4(false, true, false, true)), (bool(bvec2((bool(bvec2(true, true))), true))), false, false))))))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((((max(injectionSwitch.x, (float(mat3x2(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0))))) > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
 uint workgroup_id = (((uvec3(uvec4((uvec3(uvec3(gl_WorkGroupID))), 0u)))) - uvec3(0u, ((0u) >> 0u), 0u)).x;
 uint workgroup_base = ((((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id))) - 0u);
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (clamp(((false ? (uvec2(97081u, 94411u)) : GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)), (uvec2(0u, 0u) ^ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)).x;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (uint((uvec2(((uvec3(uvec2(((max(max(((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size), (((min((clamp(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, (((((~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1)))) | 0u)) * 1u))), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1))) % subgroup_size)), max(((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size), (((min((clamp(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, (((((~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1)))) | 0u)) * 1u))), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1))) % subgroup_size))))), 1u), 1u)) >> uvec3(0u, 0u, 0u))))));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     if((((true && (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(((false) || ((injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if((((false) || false)))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); (bool((bool(bvec3(bool(_injected_loop_counter > 0), true, true))))); _injected_loop_counter --)
            {
             return;
            }
          }
         if((true && (false)))
          {
          }
         else
          {
           if((bool((bvec2((bvec2(bvec2(bvec2((bvec2(((bvec2(bvec3(bvec2(bvec3(bvec2((bvec2(bvec3(bvec2((((((float(mat2x4((clamp((mix(float(float(((mat4(injectionSwitch.x, (float(mat4x2((clamp(1.0, 1.0, 1.0)), log(1.0), 0.0, 0.0, cos((clamp(tan(0.0), tan(0.0), tan(0.0)))), 0.0, tan(0.0), 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, (mix(float(((- 5.4 + - 338.546))), float((((min(1.0, (mix(float((456.545)), float(((1.0) - 0.0)), bool(true)))))) - 0.0)), bool(true))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), float((9821.0365)), bool(false))), float(((mat4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec2((max(1.0, 1.0)), 1.0)))), 1.0, 1.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)))), ((float(((true ? mat4x3(dot(vec4(1.0, 0.0, 1.0, (mix(float(1.0), float((vec4(5.8, - 35.01, - 671.587, - 3.6).g)), bool(false)))), vec4(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, 1.0) : (mat4x3(- 30.53, - 317.672, - 8.7, - 31.08, 170.897, 545.732, - 960.024, 54.94, 25.52, - 9.7, 724.197, - 0.7))))))), tan(0.0), abs(0.0), 1.0, 1.0, (float(vec4(0.0, 1.0, 1.0, log(1.0)))), 1.0)))) > injectionSwitch.y))), true), (bool((bvec2((bvec3(bvec4(bvec3((bvec2(bvec2(bvec2(true, ((injectionSwitch.x > injectionSwitch.y)))))), false), false))))))))))), true)), false)))))))))))))))
            {
             for(int _injected_loop_counter = 0; (((bool(bool(_injected_loop_counter != ((0 >> (((true ? int((min(7, ((7) ^ 0)))) : (- 53000))))) | ((1 << (int(6))) >> (int(6))))))) && true)); _injected_loop_counter ++)
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   do
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                   while(false);
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  {
                   do
                    {
                     return;
                    }
                   while((false || (false)));
                  }
                 return;
                }
              }
             else
              {
               for(int _injected_loop_counter = (0 >> (int(0))); (((bool(bvec3(_injected_loop_counter < 1, false, false)))) && true); _injected_loop_counter ++)
                {
                 if((false))
                  return;
                }
              }
             return;
            }
          }
        }
      }
     else
      {
      }
    }
   while(false);
  }
 buf[virtual_gid] = 1;
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      continue;
     if(true)
      {
       for(int _injected_loop_counter = (1 ^ 1); (true && (((bool(bool(bool(bvec4(_injected_loop_counter != 1, true, false, false)))))))); _injected_loop_counter ++)
        {
         if((false))
          return;
        }
       if((false))
        {
         if(true)
          {
           return;
           if((false))
            break;
          }
         else
          {
          }
        }
       if(false)
        {
        }
       else
        {
         if((((((false) || false)) && true)))
          {
           for(int _injected_loop_counter = (1 | 0); (bool(bvec2(_injected_loop_counter > 0, true))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
     else
      {
      }
    }
   while(false);
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != ((true ? (1 ^ 1) : (_injected_loop_counter))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; (~ (0 | (((((0 ^ ((~ (~ (~ ((1 * (((_injected_loop_counter ++) | 0))))))))))) - 0)))))
    {
     if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + (((true ? ((~ (~ (max(max(1, 1), ((((max(1, 1)) | (max(1, 1)))) >> 0)))))) : (clamp((ivec4(- 28359, - 86306, 3897, 25301)[1]), ((((false) || false) ? (- 86670) : (((ivec4(- 28359, - 86306, 3897, 25301)[1])) >> ((0 ^ 0) << (((~ (((~ ((int(7)))) << 0))) | 0)))))), (((max((((((ivec4(- 28359, - 86306, 3897, 25301)[1])) - 0)) / 1), (min((((ivec4(- 28359, - 86306, 3897, 25301)[1])) - (1 * (0))), (((ivec4(- 28359, ((- 86306) << 0), 3897, 25301)[1])) - 0)))))) ^ 0)))))) < subgroup_size)
      {
       buf[next_virtual_gid] = 2;
       for(int _injected_loop_counter = (0 >> (((int(((1) + 0))) ^ 0))); _injected_loop_counter < 1; ((false ? (- 41409) : (~ (((~ (_injected_loop_counter ++)) / 1))))))
        {
         if(((false || ((! (! (false))) || ((((true && (bool(bvec4(((false)), true, true, false))))) || false))))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ (1)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   subgroupAll(false);
                  }
                 else
                  {
                  }
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                }
              }
            }
           while(false);
          }
        }
      }
     else
      {
       if(((injectionSwitch.x < (vec2(vec2((vec2(((false ? (vec4(- 65.62, 45.64, 90.77, - 95.90)) : vec4(injectionSwitch, 0.0, 0.0)))))))).y)))
        {
         for(int _injected_loop_counter = (0 << ((((max(int(8), int(8)))) ^ int((injectionSwitch.x))))); _injected_loop_counter != ((false ? (ivec2(- 27825, - 6289).y) : (clamp((~ (~ ((0 ^ (((1 << (int(2))) >> ((clamp(int(2), (clamp(int(2), ((int(2)) ^ 0), int(2))), int(2)))))))))), ((1 << (int(2))) >> ((clamp(int(2), (clamp(int(2), ((int(2)) ^ 0), int(2))), int(2))))), (1 * (((1 << (int(2))) >> ((clamp(int(2), (clamp(int(2), ((int(2)) ^ 0), int(2))), int(2))))))))))); _injected_loop_counter ++)
          {
           (((false ? (virtual_gid) : (buf[next_virtual_gid] = (clamp(((2) | 0), 2, 2))) | 0u)));
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            return;
          }
         do
          {
           return;
           if((false))
            break;
          }
         while(false);
        }
       if((false || (true)))
        {
         if((false))
          break;
         if((((! (! (injectionSwitch.x < injectionSwitch.y))))))
          {
           subgroupAll(true);
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if((! (! (false))))
      {
      }
     else
      {
       if(((((((false || (false))) || false))) && true))
        return;
      }
    }
  }
}
