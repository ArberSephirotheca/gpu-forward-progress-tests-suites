#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((((injectionSwitch.x > injectionSwitch.y)) ? ((uvec3(69529u, 122574u, 144627u) << subgroup_id)) : gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false || (true)))
    {
     do
      {
       for(int _injected_loop_counter = (0 ^ 1); ((false || (((bool(bvec3((false || (_injected_loop_counter > 0)), ((((! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))), (bool(bvec2(false, true)))))) || false)))); _injected_loop_counter --)
        {
         do
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         while((false || (false)));
        }
      }
     while(false);
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (uint(uvec3(workgroup_base + subgroup_id * subgroup_size + (min(((((max((((~ (~ ((~ (~ (clamp((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)))))))) << (0u << (uint(8u)))), clamp(((~ (~ (max(subgroup_local_id, subgroup_local_id))))), subgroup_local_id, (~ (~ (subgroup_local_id))))))) + 1) % subgroup_size), ((((max((~ (~ ((1u * ((((~ (~ (clamp((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)))))) | 0u))))), clamp((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)))) + 1) % subgroup_size))), 0u, 1u)));
 for(int _injected_loop_counter = 0; (true && (((false ? ((-- _injected_loop_counter)) : (max(((_injected_loop_counter) | (_injected_loop_counter)), _injected_loop_counter)))) < int((injectionSwitch.y)))); (1 * (_injected_loop_counter ++)))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     buf[virtual_gid] = 1;
    }
  }
 if(subgroup_local_id + ((int((ivec2(ivec3(ivec2((1) | (1), 1), 1)))))) < (min((((min(subgroup_size, subgroup_size)) - 0u)), (min(subgroup_size, (clamp(subgroup_size, subgroup_size, subgroup_size)))))))
  {
   if((! (! (true))))
    {
     do
      {
       (((~ (~ (((true ? (0u | (buf[next_virtual_gid] = (int((max(int(((((((~ (~ (((((1 << (int(6))) >> (int(6))) * ((false ? (2346) : (2)))))))) >> (0 >> (int(5))))) - ((~ (~ (0 << (int((max(0, 0)))))))))) >> 0)), int(2))))))) : (num_workgroup))))))) << 0u);
      }
     while((true && (((injectionSwitch.x > injectionSwitch.y)))));
    }
   else
    {
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); (~ (((~ (_injected_loop_counter)) >> 0))) < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; ((_injected_loop_counter) >> 0) > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(true)
            {
             do
              {
               for(int _injected_loop_counter = ((int(int(1 | 1)))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false || (false)))
                  {
                  }
                 else
                  {
                   subgroupAll(false);
                  }
                }
              }
             while(false);
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   if((! ((bool(bvec4(! ((false)), ((injectionSwitch.x < injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
  }
 else
  {
   ((((buf[next_virtual_gid] = 2) / uint((min((((((injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0)).y), (injectionSwitch.y))))) - 0u));
   for(int _injected_loop_counter = ((0) | (0)); (false || (_injected_loop_counter < 1)); _injected_loop_counter ++)
    {
     do
      {
       if((((((false) && true) || (! (((true && (false)) || (! ((! (! (((((bool(bvec4(((injectionSwitch.x < injectionSwitch.y) || false), false, false, true)))) && true))))))))))))))
        {
         if(((((((false || (true)) && ((! (! ((injectionSwitch.x > injectionSwitch.y))))))) || false))))
          barrier();
        }
       else
        {
        }
      }
     while(false);
    }
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (((false ? (atomicOr(_injected_loop_counter, clamp(_injected_loop_counter, 41268, 57192))) : (((int(int((~ (((~ (((((((min(int(((ivec3((0), 1, (0 << ((min((1 * ((min(((int(1)) | 0), int(1))))), ((false ? (_injected_loop_counter) : int(1))))))))) >> ivec3(((0) - 0), (0 + (0)), 0))), int(((ivec3((0), 1, (0 << ((min((1 * (int(1))), ((false ? (_injected_loop_counter) : int(1))))))))) >> ivec3((max(((true ? 0 : (- 76704))), 0)), 0, 0)))))) | (int(((ivec3((0), 1, (0 << ((min((1 * (int(1))), ((false ? ((0 + (_injected_loop_counter))) : int(1))))))))) >> ivec3(((0) << ((54915 % - 20542) & 0)), 0, 0)))))))) | 0)) >> (0 >> (int(5))))))))) << ((int((((max(ivec2(0, 1), ivec2(0, 1)))) << ivec2(0, 0)))) & - 81490)) | ((0 | ((((0) << (0 & - 81490)) >> 0)))))))); _injected_loop_counter --)
      {
       subgroupAll(true);
      }
    }
  }
}
