#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((bool((bvec2(bvec2(bvec2(false, true))))))))
  {
   if(((((min(injectionSwitch.x, ((((min(mix(float((- 3.9)), float(injectionSwitch.x), bool(true)), mix(float((- 3.9)), float(injectionSwitch.x), bool(true))))) - 0.0)))) > injectionSwitch.y))))
    barrier();
   if((false || (false)))
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((false || (false)))
        {
        }
       else
        {
         if((true && ((false))))
          barrier();
        }
       if(((((bool(bvec4((((bool(bvec2(false, false)))) && true), false, false, false))) && true))))
        barrier();
       barrier();
       do
        {
         if(((! (! ((! (! (false))))))))
          barrier();
        }
       while(false);
      }
    }
   if(false)
    {
    }
   else
    {
     barrier();
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((false))
    {
     if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((bool(bvec3((bool(bvec2((false), true))), true, true))) || ((injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 do
  {
   if(((false || (false))))
    barrier();
  }
 while(false);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((true && ((((((bool(bvec4(! (! ((((! (! (! ((! ((false || ((bool(bool(! (! (((bool((bvec3(bvec3((bvec3(bvec3(bvec3((false || ((((mix(float((59.49)), float(((mix(float((clamp(max(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x))), max(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x))), max(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x)))))), float((1.2)), bool(((injectionSwitch.x > injectionSwitch.y))))))), bool(((injectionSwitch.x < injectionSwitch.y)))))) - 0.0) > injectionSwitch.y)), true, false)))))))))))))))))))))))) && true))), true, false, false))))))))))
  {
   if((! (! ((! (! (((bool(bvec2((((clamp(1.0 * ((mix(float((- 2.1)), float(injectionSwitch.x), bool(true)))), 1.0 * ((mix(float((- 2.1)), float(injectionSwitch.x), bool(true)))), 1.0 * ((mix(float((- 2.1)), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y), true)))))))))))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((false) && true)))
                barrier();
               barrier();
              }
             do
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             while(false);
            }
           while(((injectionSwitch.x > (vec2(1.0, 1.0) * ((clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))))).y)));
          }
         else
          {
          }
        }
       else
        {
         if((false))
          barrier();
        }
      }
    }
   barrier();
   if(((bool(bvec3(false, true, true)))))
    barrier();
   if((false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((bool(bvec2(true, false))))
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((true && (((injectionSwitch.x > ((((injectionSwitch) * mat2(1.0))) + abs(vec2(0.0, 0.0))).y)))))
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 if(((bool(bvec4((true && (((injectionSwitch.x > injectionSwitch.y)))), false, ((injectionSwitch.x > injectionSwitch.y)), false)))))
  barrier();
 do
  {
   if((false))
    barrier();
  }
 while(false);
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = ((int(int(0 ^ 1)))); _injected_loop_counter != (min(0, (max(0, 0)))); _injected_loop_counter --)
  {
   if(((! (! (((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec4(bool(bvec3(false, true, true)), true, false, true)))))))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = int((((((false ? (3.9) : injectionSwitch.x) / 1.0))))); (((injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter < (1 & 1))); _injected_loop_counter ++)
      {
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
      }
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 uint workgroup_base = workgroup_size * (((((((false) || false) ? (subgroup_local_id) : (((false ? (((num_workgroup)) | ((clamp((num_workgroup), (((num_workgroup)) >> 0u), (num_workgroup))))) : (((max(1u, (max(1u, 1u)))) * ((false ? ((((0u | ((true ? (53831u) : (atomicAdd(subgroup_size, workgroup_id))))) ^ 0u))) : workgroup_id))))))) | (workgroup_id)))) << 0u));
 uint virtual_gid = (((0u | (workgroup_base))) - 0u) + subgroup_id * subgroup_size + subgroup_local_id;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + ((true ? subgroup_id * subgroup_size : (subgroup_local_id))) + ((subgroup_local_id + 1) % subgroup_size);
 if((((injectionSwitch.x > (max(injectionSwitch.y, (float((mat4x3(mat4x3(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, exp(0.0), 0.0, 1.0, 0.0))))))))))))
  barrier();
 buf[virtual_gid] = (0 | (1));
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < (int(ivec4(((1) | 0), (1 * (0)), 0, (0 | 0)))); _injected_loop_counter ++)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if((! (! ((max(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size))))
        {
         for(int _injected_loop_counter = 1; (bool(bool(_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           do
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               ((buf[next_virtual_gid] = (~ (~ (2)))) << 0u);
               if((false))
                barrier();
              }
             while(false);
             if(((bool((bool(bvec3(bool(false), false, false)))))))
              barrier();
            }
           while(false);
          }
         subgroupAll(false);
         if((false))
          barrier();
        }
       else
        {
         do
          {
           buf[next_virtual_gid] = 2;
          }
         while(false);
         if((false))
          barrier();
         if(((! (! (false)))))
          barrier();
         if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
          barrier();
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; ((_injected_loop_counter) << 0) != 0; _injected_loop_counter --)
            {
             if(((false || ((! (! (true && ((! (! (true)))))))))))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if(((false || ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
                      barrier();
                     do
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(false);
                    }
                  }
                }
               while(false);
               subgroupAll((! (((! (true)) || false))));
              }
             else
              {
               if(((! (! (((false) && true))))))
                barrier();
              }
             if(((true && (false))))
              barrier();
            }
          }
         if((false))
          barrier();
        }
      }
     while(false);
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 & (min(39222, (~ (~ (39222)))))); (! (((bool(bvec4(! (! (! (_injected_loop_counter < 1))), true, false, true)))))); _injected_loop_counter ++)
      {
       if((((((true ? injectionSwitch : ((max(injectionSwitch, injectionSwitch))))).x > injectionSwitch.y))))
        {
         if(((true) && ((injectionSwitch.x < injectionSwitch.y))))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
    }
   else
    {
    }
   if((! ((true && (! ((false)))))))
    barrier();
  }
 for(int _injected_loop_counter = 0; (! (((! ((! (! (! (! ((_injected_loop_counter != 1)))))))) || false))); _injected_loop_counter ++)
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((((((1) | ((0 ^ (1)))) | ((1) | ((0 ^ (1))))))) + 0); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((((! (! (((bool(bvec2(((false)) && true, true))) || false)))))))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if(((false || (((! (! (injectionSwitch.x < injectionSwitch.y))))))))
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
        }
       if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
        barrier();
      }
    }
   if((false))
    barrier();
  }
}
