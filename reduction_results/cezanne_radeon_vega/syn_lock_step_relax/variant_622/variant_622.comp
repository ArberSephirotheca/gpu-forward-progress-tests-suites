#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (~ (~ (gl_NumWorkGroups))).x;
 uint workgroup_size = (~ (~ (((gl_WorkGroupSize.x) - 0u))));
 uint workgroup_id = (~ ((max((~ (~ (~ (gl_WorkGroupID)))), ~ (gl_WorkGroupID))))).x;
 uint workgroup_base = (max(workgroup_size, workgroup_size)) * workgroup_id;
 uint virtual_gid = workgroup_base + ((((((~ (((~ ((false ? (packUnorm4x8((clamp(vec4(1.2, ((8464.4186) / 1.0), 5.6, 82.19), vec4(1.2, ((((8464.4186) / 1.0)) * 1.0), 5.6, 82.19), vec4(1.2, ((8464.4186) / 1.0), 5.6, 82.19))))) : ((((0u | 0u) ^ (subgroup_id))) * (max(((uint((injectionSwitch.y))) | (uint((injectionSwitch.y)))), uint(((true ? (injectionSwitch.y) : (1.0 * ((- 9.6))))))))) * subgroup_size))) - 0u))))) >> 0u)) * 1u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (((min((0u ^ 0u), ((true ? (0u | ((0u ^ 0u))) : (subgroup_id))))) + ((clamp((clamp((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)), (((clamp((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id))) >> 0u), (clamp((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)))) + 1))))) % subgroup_size);
 ((true ? (~ ((~ (~ (~ (buf[virtual_gid] = 1)))))) : (subgroup_local_id)));
 atomicStore(buf[next_virtual_gid], ((((uint(2)) ^ (0u << ((((0u ^ ((((false ? ((min(next_virtual_gid, next_virtual_gid))) : ((0u | ((min(uint(((6u) / ((~ (~ ((max((~ (~ (1u & 1u))), (~ (~ (1u & 1u))))))))))), uint((~ (~ (((((6u) / ((~ (~ (1u & 1u)))))) + 0u)))))))))))) | (uint(((6u) / ((~ (~ (1u & 1u)))))))))))) << 0u)))) | 0u), (min(4, 4)), ((64) + 0), 0);
}
