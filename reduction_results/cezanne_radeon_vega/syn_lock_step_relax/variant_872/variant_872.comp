#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((gl_WorkGroupSize) / uvec3(1u, 1u, 1u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((0u >> (uint(2u))) | (((workgroup_size) << (max(0u, 0u))))) * ((workgroup_id) | (((0u & 123546u) ^ (((0u ^ (uint(uvec3((((1u * (workgroup_id))) << 0u), (clamp(1u, 1u, 1u)), 1u)))))))));
 if((false))
  return;
 uint virtual_gid = workgroup_base + (max(subgroup_id, subgroup_id)) * (clamp((clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size, subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = ((workgroup_base + subgroup_id * ((subgroup_size) | (subgroup_size))) | (workgroup_base + (min(subgroup_id * (((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) ? (virtual_gid) : (min(subgroup_size, subgroup_size)))), (((clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, ((true ? ((subgroup_id * (min(subgroup_size, subgroup_size))) - 0u) : ((++ virtual_gid))))))) + 0u))))) + (uint(uint((clamp(((~ ((((uint(uint(~ ((max((subgroup_local_id + 1) % subgroup_size, (0u ^ (((((injectionSwitch.x < injectionSwitch.y)) ? (((max((((subgroup_local_id + 1)) ^ 0u) % subgroup_size, (((subgroup_local_id + 1)) ^ 0u) % subgroup_size))) ^ 0u) : (mix(num_workgroup, subgroup_size, true)))))))))))))) | (((uint(uint(~ ((max((subgroup_local_id + 1) % subgroup_size, (0u ^ ((((((mix(float((float(float(injectionSwitch.x)))), float((6.0)), bool(((injectionSwitch.x > injectionSwitch.y))))) < injectionSwitch.y)) ? (((max((((subgroup_local_id + 1)) ^ 0u) % subgroup_size, ((((((uint(uvec4(subgroup_local_id + 1, 0u, 0u, 1u)))))) >> uint((injectionSwitch.x))) ^ 0u) % subgroup_size))) ^ 0u) : (mix(num_workgroup, subgroup_size, true))))))))))))))))), ((((((~ (~ ((max((subgroup_local_id + 1) % subgroup_size, (0u ^ (((((injectionSwitch.x < injectionSwitch.y)) ? (((max((((subgroup_local_id + 1)) ^ 0u) % subgroup_size, (((((subgroup_local_id + 1)) ^ 0u) % subgroup_size) << 0u)))) ^ 0u) : ((min(mix(num_workgroup, subgroup_size, true), mix(num_workgroup, subgroup_size, true)))))))))))))))) - 0u) - 0u), ((~ (~ ((max((((((subgroup_local_id + 1)) * (1u & 1u))) >> 0u) % subgroup_size, (((0u ^ (clamp((((((injectionSwitch.x < injectionSwitch.y)) ? (((max((((subgroup_local_id + 1)) ^ 0u) % subgroup_size, (((subgroup_local_id + 1)) ^ 0u) % (~ (~ (subgroup_size)))))) ^ 0u) : (mix(num_workgroup, subgroup_size, true))))), (((((injectionSwitch.x < injectionSwitch.y)) ? (((max((((subgroup_local_id + 1)) ^ 0u) % subgroup_size, (((subgroup_local_id + 1)) ^ 0u) % (~ (~ (subgroup_size)))))) ^ 0u) : (mix(num_workgroup, subgroup_size, true))))), (((((injectionSwitch.x < injectionSwitch.y)) ? (((max((((subgroup_local_id + 1)) ^ 0u) % subgroup_size, (((subgroup_local_id + 1)) ^ 0u) % (~ (~ (subgroup_size)))))) ^ 0u) : (mix(num_workgroup, subgroup_size, true))))))))) | ((0u ^ (((((injectionSwitch.x < injectionSwitch.y)) ? (((max((((subgroup_local_id + 1)) ^ 0u) % subgroup_size, (((subgroup_local_id + 1)) ^ 0u) % subgroup_size))) ^ 0u) : (mix(num_workgroup, subgroup_size, true)))))))))))))))))));
 (~ (~ (((buf[virtual_gid] = ((((1) - 0) ^ 0))) ^ 0u))));
 atomicStore(buf[((((false ? (7315u) : next_virtual_gid))) - 0u)], uint(2), 4, 64, 0);
}
