#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (min((max((clamp((((0u ^ (((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))))) << (uint((injectionSwitch.y)) * (0u))), (((0u ^ (((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))))) << (uint((injectionSwitch.y)) * (0u))), (((0u ^ (((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))))) << (uint((injectionSwitch.y)) * (0u))))), (((((0u ^ (((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))))) << (uint((injectionSwitch.y)) * (0u)))) >> uint((injectionSwitch.x))))), gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * ((true ? workgroup_id : ((~ (~ (atomicOr(workgroup_id, subgroup_id)))))));
 uint virtual_gid = (min(workgroup_base + (~ ((min(~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size))))), workgroup_base + (~ ((min(~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size))))))) + (0u + (subgroup_local_id));
 uint next_virtual_gid = (max((min((clamp(workgroup_base + ((subgroup_id) ^ 0u) * subgroup_size, (((uint(uint(uint(((uvec3((((uint(uint(~ (~ (workgroup_base + subgroup_id * subgroup_size))))) << 0u)), 0u, 0u)) - (uvec3(0u, 0u, 0u) << (uvec3(0u)))))))))), (uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 1u, 0u))))), (clamp(workgroup_base + subgroup_id * subgroup_size, (((true ? ((min(uint(((uvec3((((min((uint(uint(~ (~ (((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + subgroup_id * subgroup_size))))))) << 0u, (uint(uvec4((uint(uint(~ (~ (workgroup_base + subgroup_id * subgroup_size))))) << 0u, 0u, 1u, 0u))))))), 0u, 0u)) - (uvec3(0u, 0u, 0u) << (uvec3(0u))))), uint(((uvec3((((min((uint(uint(~ (~ (((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + subgroup_id * subgroup_size))))))) << 0u, (uint(uvec4((uint(uint(~ (~ (workgroup_base + subgroup_id * subgroup_size))))) << 0u, 0u, 1u, 0u))))))), 0u, 0u)) - (uvec3(0u, 0u, 0u) << (uvec3(0u)))))))) : (workgroup_size)))), (uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 1u, 0u))))))), (clamp(workgroup_base + ((subgroup_id) * 1u) * subgroup_size, ((uint(((uvec3((((uint(uint(~ ((max(~ (workgroup_base + subgroup_id * subgroup_size), ~ (workgroup_base + subgroup_id * subgroup_size))))))) << 0u)), 0u, 0u)) - (uvec3(0u, 0u, 0u) << (uvec3(0u))))))), (uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 1u, 0u))))))) + (((~ (~ (subgroup_local_id))) + (0 ^ (1))) % subgroup_size);
 buf[virtual_gid] = 1;
 atomicStore(buf[(min((~ (~ (next_virtual_gid))), (((0u << (uint(8u))) ^ (max(next_virtual_gid, ((next_virtual_gid) + 0u)))))))], (0u ^ ((max(uint(((2) - 0)), uint(2))))), 4, 64, ((0 >> (int(0))) | (0)));
}
