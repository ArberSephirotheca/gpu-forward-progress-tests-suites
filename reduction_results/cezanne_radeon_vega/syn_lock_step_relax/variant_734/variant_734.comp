#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups.x) + uint((injectionSwitch.x)));
 uint workgroup_size = (uvec3(gl_WorkGroupSize[0], ((gl_WorkGroupSize) << uvec3(0u, 0u, 0u))[1], gl_WorkGroupSize[2])).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (((max((max(workgroup_id, workgroup_id)), (max(((((workgroup_id) | (workgroup_id))) << 0u), workgroup_id))))) | ((119028u & 0u) ^ ((1u * (0u)))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + (clamp(((true ? subgroup_id * subgroup_size : (workgroup_id))), ((false ? (((subgroup_id)) | ((subgroup_id))) : ((0u | (((min((~ (~ (subgroup_id * subgroup_size))), (uint(uint(subgroup_id * subgroup_size))))) ^ 0u)))))), subgroup_id * (min(subgroup_size, subgroup_size)))) + ((((((uint(uvec4(0u, 1u, 1u, 0u))) | (uint(uvec4(0u, 1u, 1u, 0u)))))) >> 0u) + (((((false ? (atomicMin(num_workgroup, subgroup_local_id)) : ((((uint(uvec3((false ? (workgroup_id) : subgroup_local_id + 1), 0u, 1u)))) << (0u << (uint(6u)))))))) % subgroup_size)));
 buf[virtual_gid] = (max((min(1, 1)), 1));
 for(int _injected_loop_counter = (((int((1 * (int((((((((clamp(1, (((0 | (1))) | (1)), 1))) / 1)) | (0 >> (int(2))))) ^ 0))))))) | ((min((clamp(1, ((false ? (71187) : (int((min(ivec2(1, 1), ivec2(1, 1))))))), 1)), (max((clamp(1, ((false ? (71187) : (int((min(ivec2(1, 1), ivec2(1, 1))))))), 1)), (clamp(1, ((false ? (71187) : (int((min(ivec2(1, 1), ivec2(1, 1))))))), 1)))))))); _injected_loop_counter > ((((min((((((((int(ivec2((int(ivec4(((max((((int(int(false ? (_injected_loop_counter) : ((((((((0) / ((min(0, 0)) | (1))) ^ 0)) - int((injectionSwitch.x)))) >> (0 ^ 0))) + 0))))), ((((((((0) / 1) ^ 0)) - int((injectionSwitch.x)))) >> (0 ^ 0))) + 0))), 0, 1, 0))), 0)))) - 0)) * (int(int(1)))) | 0)), (((((((~ (~ ((~ (~ (((((((((~ (~ ((~ (~ (((0) / 1) - int((injectionSwitch.x))))))))) ^ 0))) >> (((true ? (int(int(((int(int((0 ^ 0)))) ^ int((injectionSwitch.x)))))) : (((max((int(ivec2(int(ivec3(- 58706, 0, ((0 ^ 0) + (1)))), 1))), int(ivec3(- 58706, 0, 1))))))))))) / 1))))))))) / 1) + 0)) * 1)))) | 0)); _injected_loop_counter --)
  {
   atomicStore(buf[next_virtual_gid], uint((clamp(2, 2, 2))), 4, 64, 0);
  }
}
