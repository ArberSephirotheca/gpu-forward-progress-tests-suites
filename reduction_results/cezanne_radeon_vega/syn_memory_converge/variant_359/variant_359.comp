#version 460

struct _GLF_struct_15 {
 mat3x2 _f0;
 uvec4 _f1;
 vec4 _f2;
 uint subgroup_id;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
 vec4 _f1;
 uvec2 _f2;
 bvec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 vec4 _f1;
 mat3x2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_8 {
 mat2x3 _f0;
 vec2 _f1;
 int _f2;
 mat4x3 _f3;
 vec2 _f4;
 ivec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 bvec4 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 vec2 _f1;
 _GLF_struct_13 _f2;
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_size;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 mat2x4 _f1;
 uvec3 GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_size;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 mat3x4 _f1;
 vec4 _f2;
 bool _f3;
 bvec3 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 bvec2 _f1;
 uint _f2;
 int _f3;
 uvec4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_3 {
 bool _f0;
 vec3 _f1;
} ;

struct _GLF_struct_1 {
 int _f0;
 ivec4 _f1;
 mat3x4 _f2;
 uvec4 _f3;
 int _f4;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat4x3 _f1;
 vec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 mat2x3 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 uint workgroup_id;
 mat3 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_7 _GLF_struct_replacement_7;
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid;
 if((false))
  {
   do
    {
     if((false))
      return;
    }
   while(false);
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, true)))) || false)))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   do
    {
     if((false))
      return;
    }
   while(false);
   if((false))
    return;
   do
    {
     do
      {
       do
        {
         if((false))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              return;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          {
           if((false))
            continue;
           if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
           if((false))
            break;
          }
         for(int _injected_loop_counter = (0 >> (((int(1)) << 0))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       while(false);
      }
     while(false);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
   if((false))
    return;
  }
 _GLF_struct_14 _GLF_struct_replacement_14;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(mat3x2(1.0), uvec4(1u), vec4(1.0), gl_SubgroupID);
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
  }
 else
  {
  }
 _GLF_struct_replacement_7._f0._f5.GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_size.x = _GLF_struct_replacement_15.subgroup_id;
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
  {
   if((false))
    break;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          break;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          continue;
         if((false))
          {
           for(int _injected_loop_counter = ((1) >> 0); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              {
               do
                {
                 return;
                 if((false))
                  break;
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((false))
            continue;
           do
            {
             return;
            }
           while(false);
          }
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = (((0 << (int(0)))) | ((0 << (int(0))))); _injected_loop_counter < (((1 & int((injectionSwitch.y))) << (int(0))) >> (((int(0)) | (int(0))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             return;
             if((false))
              return;
            }
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
         while(false);
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       if((false))
        break;
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        break;
      }
     if((false))
      continue;
     if((false))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((! (! (false)))))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         return;
        }
       else
        {
        }
       if((false))
        {
         if((false))
          return;
         break;
        }
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
       if((false))
        return;
      }
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
         if((false))
          return;
        }
      }
     return;
    }
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if(true)
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 else
  {
  }
 do
  {
   if((false))
    {
     if((false))
      break;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      continue;
     if((false))
      continue;
     if((false))
      continue;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        break;
       if(true)
        {
         if((false))
          {
           if(((bool((bvec2(bvec3(bvec2(false, true), true)))))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 return;
                }
               else
                {
                }
               if((false))
                return;
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    {
                     if((false))
                      continue;
                     return;
                    }
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((bool(bvec4(true, false, false, false))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   break;
                   if((false))
                    continue;
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                 if((false))
                  break;
                }
              }
            }
           if((false))
            return;
           if((false))
            return;
           if((false))
            break;
          }
        }
       else
        {
        }
      }
     if((false))
      break;
     if((false))
      break;
    }
   else
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        break;
       GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.x = _GLF_struct_replacement_7._f0._f5.GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_size.x;
       if((false))
        break;
      }
     else
      {
      }
     if((false))
      continue;
    }
   if((false))
    continue;
   if((false))
    {
     if((((((false) && true)) && true)))
      continue;
     break;
    }
   if((false))
    break;
  }
 while(false);
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             return;
            }
           if((false))
            return;
           return;
          }
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(((! ((false || (! (false)))))))
      break;
     if((false))
      continue;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 _GLF_struct_replacement_14.GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_size.y = subgroup_size;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      break;
     break;
    }
   GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y = subgroup_local_id;
   if((false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 do
  {
   if((false))
    {
     if((false))
      {
       if((false))
        break;
       return;
       if((false))
        break;
      }
     if((false))
      continue;
     do
      {
       if(false)
        {
         if((false))
          continue;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(false);
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 if(true)
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ int((injectionSwitch.y))); _injected_loop_counter != (0 << (int(3))); _injected_loop_counter --)
      {
       return;
      }
     if((false))
      return;
    }
   if((false))
    return;
   if(true)
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(true)
              {
               if((bool(bool(((injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 return;
                }
               if((false))
                return;
              }
             else
              {
              }
            }
           do
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
             if((false))
              continue;
             if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               break;
              }
            }
           while(false);
           if((false))
            return;
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           return;
          }
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
        }
      }
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
    }
   if(false)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            break;
           return;
          }
         if((false))
          return;
        }
      }
     else
      {
       if(((! (! (false)))))
        return;
      }
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(((! (! (false)))))
      return;
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           for(int _injected_loop_counter = (1 ^ int((injectionSwitch.x))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if(((! (! (false)))))
                    continue;
                   do
                    {
                     if(true)
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   while(false);
                  }
                }
               return;
               if((false))
                break;
              }
             while(false);
             if((false))
              break;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        return;
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     if(true)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
          }
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 _GLF_struct_replacement_14.GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_size.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false || (true)))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        continue;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
               if((false))
                break;
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
      }
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
        return;
      }
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             if((((false) || false)))
              return;
             if((false))
              return;
             return;
            }
           if(((! (! (false)))))
            {
             do
              {
               for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          break;
                         return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    break;
                   return;
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     break;
                    }
                  }
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             return;
             if((false))
              continue;
            }
          }
         if((((false) && true)))
          return;
        }
      }
     while(false);
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        continue;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if((false))
        return;
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if((false))
  return;
 _GLF_struct_replacement_7._f0._f5.GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_size.z = workgroup_size;
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    {
     do
      {
       if((false))
        break;
       return;
      }
     while(false);
     if((false))
      return;
    }
   if((false))
    return;
   if((((false) || false)))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          break;
        }
       while((false || (false)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       return;
      }
     if(false)
      {
      }
     else
      {
       return;
      }
     if((false))
      {
       for(int _injected_loop_counter = (((0 ^ 0)) | ((0 ^ 0))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     do
      {
       return;
      }
     while(false);
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << (int(7))) >> (int(7))); _injected_loop_counter ++)
    {
     do
      {
       if(true)
        {
         return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if((false))
          {
           if(((((injectionSwitch.x < injectionSwitch.y))) && true))
            {
             return;
            }
           else
            {
            }
           if((false))
            continue;
          }
        }
      }
     while(((false) && true));
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        break;
       if((false))
        return;
      }
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       return;
       if((false))
        return;
      }
    }
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      continue;
     return;
    }
   while(false);
  }
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        break;
       break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if((false))
      return;
     if((false))
      return;
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if((false))
        return;
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
  {
   _GLF_struct_replacement_14.GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_size.z = _GLF_struct_replacement_7._f0._f5.GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_size.z;
   if((false))
    return;
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    return;
   do
    {
     if((false))
      continue;
     do
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            continue;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
          }
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((bool(bvec3(true, true, false))))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if((false))
                  return;
                }
              }
             else
              {
              }
            }
           if((false))
            {
             if((false))
              break;
             continue;
            }
           break;
          }
         if((false))
          break;
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            return;
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if((false))
                continue;
               if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                continue;
              }
             if(((false || (false))))
              continue;
             if((false))
              {
               if((false))
                return;
               continue;
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    return;
                   continue;
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                   if((false))
                    continue;
                  }
                }
               if((false))
                break;
               if(((bool(bvec2(false, false)))))
                return;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 do
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    break;
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if((false))
                      return;
                     return;
                    }
                   while(false);
                  }
                }
               else
                {
                 if((false))
                  return;
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                    {
                     if((false))
                      return;
                     do
                      {
                       return;
                      }
                     while(false);
                    }
                  }
                 if((false))
                  continue;
                }
               for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                     if((false))
                      continue;
                     if(((bool(bvec4(false, true, false, true)))))
                      break;
                    }
                   while(false);
                   if((false))
                    {
                     if((false))
                      break;
                     return;
                    }
                  }
                 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                  break;
                 if((false))
                  break;
                }
               if((false))
                break;
              }
            }
          }
         if((false))
          break;
        }
       do
        {
         do
          {
           if((false))
            return;
          }
         while(false);
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
       do
        {
         if((false))
          {
           if(((((! (! (false)))) && true)))
            continue;
           return;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 << (int(1))) >> (int(1))) | 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      break;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      return;
     do
      {
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << ((max(int(6), (0 ^ (int(6))))))); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((false))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                   if((false))
                    return;
                  }
                 while(false);
                }
               if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                {
                 if((false))
                  break;
                 break;
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                }
               return;
              }
             if((false))
              return;
             if((false))
              break;
             if((false))
              continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if(true)
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
              }
             if((false))
              {
               if((false))
                break;
               continue;
              }
             if((false))
              continue;
            }
           if(((! (! (false)))))
            continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec3(false, false, true)))))
            return;
           if(false)
            {
             if((false))
              continue;
             if((false))
              break;
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter != ((int((injectionSwitch.y)) << ((0 | (int(0))))) >> (int(0))); _injected_loop_counter ++)
                  {
                   return;
                   if((false))
                    return;
                  }
                 if(((true && (false))))
                  continue;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               if((false))
                {
                 if((false))
                  break;
                 for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
                  return;
                 do
                  {
                   return;
                  }
                 while(false);
                 if((((! (! (bool(bvec4(false, true, true, true))))))))
                  return;
                }
               if((false))
                return;
              }
            }
           else
            {
             do
              {
               if((false))
                return;
              }
             while(false);
             return;
            }
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((false || (false))))
          {
           if((false))
            {
             if((false))
              continue;
             continue;
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   do
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        return;
       if((false))
        return;
       for(int _injected_loop_counter = ((1 << (int(6))) >> ((0 | (int(6))))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
         if((false))
          break;
        }
      }
     if((false))
      break;
    }
   while(false);
  }
 else
  {
   if((false))
    return;
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat2(1.0), mat2x3(1.0), _GLF_struct_2(_GLF_struct_0(uvec4(1u), mat4x3(1.0), vec3(1.0), uvec4(1u)), mat3(1.0), _GLF_struct_1(1, ivec4(1), mat3x4(1.0), uvec4(1u), 1)), _GLF_struct_3(true, vec3(1.0)), gl_WorkGroupID.x, mat3(1.0));
 if((false))
  return;
 if((false))
  return;
 uint workgroup_base = _GLF_struct_replacement_14.GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_size.z * _GLF_struct_replacement_4.workgroup_id;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & 9258); _injected_loop_counter --)
        {
         if((false))
          continue;
         if((false))
          break;
         if((false))
          break;
         if(((! (! (false)))))
          {
           if(((true && (false))))
            continue;
           return;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(((bool(bvec3(false, false, true)))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   return;
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             if((false))
              continue;
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     while(false);
    }
   else
    {
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((0 << (int(3))) | ((1 << (int(4))) >> (int(4)))); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(4))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = (int((injectionSwitch.x)) & (- 89079 / 56004)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if((false))
              return;
            }
          }
        }
       while(false);
      }
    }
  }
 for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(false)
    {
     if((false))
      break;
    }
   else
    {
     if((false))
      break;
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(false)
            {
            }
           else
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             while(false);
            }
          }
        }
       else
        {
         if((false))
          continue;
        }
       if((false))
        break;
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         if(true)
          {
           if((false))
            continue;
           if((false))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              return;
            }
           if((false))
            return;
           for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
           if((false))
            continue;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         break;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 do
  {
   if((false))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           do
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  break;
                 continue;
                }
               break;
              }
             return;
            }
           while(false);
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             continue;
            }
          }
        }
       if(((bool(bvec2(false, false)))))
        break;
       if(((false || (false))))
        continue;
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              continue;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               break;
              }
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          return;
         if((false))
          continue;
        }
       while(false);
      }
     else
      {
      }
     if(((! (! (false)))))
      return;
     if(((false || (((false) && true)))))
      return;
     if((false))
      continue;
     if((false))
      return;
     if((false))
      {
       if(true)
        {
         if((false))
          return;
         return;
        }
       else
        {
        }
      }
     do
      {
       if((false))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((clamp(int(0), int(0), int(0))))) >> (int(0))); _injected_loop_counter ++)
        {
         return;
         if((false))
          continue;
        }
      }
     while(false);
    }
  }
 while(false);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  {
   if((false))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         return;
        }
       if(((! ((bool(bool(! (false))))))))
        return;
       if((false))
        break;
       if((false))
        break;
      }
    }
   if((false))
    return;
  }
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    continue;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > (((1 ^ 1) >> (int(6))) << (((int(3)) << 0))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      continue;
     if((false))
      return;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(2))) >> (((int(2)) ^ (0 & 72491)))); _injected_loop_counter ++)
      {
       if((false))
        break;
       if(((false) && true))
        {
        }
       else
        {
         return;
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((false))
        return;
       continue;
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
       do
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  break;
                 return;
                }
               else
                {
                 if((false))
                  continue;
                }
               if((((false) || false)))
                return;
              }
             while(((false) && true));
            }
           else
            {
            }
           if((false))
            {
             if((false))
              continue;
             return;
            }
          }
        }
       while(false);
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
    }
   if((false))
    break;
   if((false))
    break;
  }
 do
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 while(false);
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.x * _GLF_struct_replacement_14.GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_size.y + GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y;
 if((false))
  return;
 if((false))
  return;
 do
  {
   if(true)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        continue;
       if((false))
        continue;
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          break;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
           do
            {
             if((false))
              continue;
             if((false))
              return;
             if((false))
              continue;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             break;
            }
           if((false))
            return;
           if((false))
            continue;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   else
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        return;
       break;
      }
     if((false))
      return;
    }
  }
 while(false);
 do
  {
   if((false))
    continue;
   if((false))
    break;
   if((false))
    continue;
   if((false))
    continue;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     continue;
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(((false || (false))))
      {
       if((false))
        {
         if((false))
          break;
         break;
        }
       if((false))
        break;
       continue;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        continue;
       if((false))
        continue;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           return;
           if((false))
            return;
          }
        }
      }
     else
      {
       if((false))
        break;
       do
        {
         _GLF_struct_replacement_7._f0._f5.GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_size.y = virtual_gid;
         if((false))
          break;
        }
       while(false);
       if((false))
        continue;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      continue;
     do
      {
       if((false))
        {
         if((((false) || false)))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       return;
       if((false))
        {
         if(true)
          {
           if(true)
            {
             return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              continue;
            }
           if((false))
            {
             if((false))
              continue;
             continue;
            }
          }
         else
          {
          }
        }
       if((false))
        break;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
          continue;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((bool(bvec2(false, true)))))
          break;
         return;
        }
       if((((false) && true)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if(((false || (false))))
            continue;
           continue;
          }
         continue;
        }
       if((false))
        return;
       return;
       if((false))
        continue;
       if((false))
        break;
       if((false))
        continue;
      }
     if((false))
      continue;
     if((false))
      {
       if((false))
        continue;
       if((false))
        continue;
       break;
      }
     if((false))
      continue;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       break;
      }
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((false || (false))))
      return;
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          continue;
         break;
        }
       break;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(((bool(bvec4(false, false, false, true)))))
        return;
      }
     continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       continue;
      }
     if(((true && (false))))
      continue;
     if((false))
      continue;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    {
     if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if((false))
          break;
         return;
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      return;
    }
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(true)
          {
           return;
          }
         else
          {
           if((false))
            break;
          }
        }
       if((false))
        continue;
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(2))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (1 ^ ((1 << (int(4))) >> (int(4)))); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
          {
           if(((bool(bvec4(false, false, true, false)))))
            {
             if(false)
              {
               if((false))
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  continue;
                 break;
                }
               if((false))
                continue;
              }
             else
              {
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  continue;
                 break;
                }
               if((false))
                return;
               return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 << (int(3))) >> (int(3))) & 1); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          return;
        }
       if(((! (! ((! (! (false))))))))
        return;
       if((! (! (true))))
        {
         return;
        }
       else
        {
        }
       if((false))
        continue;
      }
     if((false))
      continue;
     if((false))
      break;
     if((false))
      {
       if((false))
        return;
       continue;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        break;
       break;
      }
     if((false))
      return;
    }
   while(false);
   if(true)
    {
     if((false))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             return;
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   if((false))
                    return;
                   return;
                  }
                 if((false))
                  break;
                 if(false)
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                   if((false))
                    continue;
                   return;
                   if((false))
                    return;
                  }
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if((false))
                {
                 if(((! (! (false)))))
                  {
                   if((false))
                    break;
                   continue;
                  }
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                return;
               if((false))
                {
                 do
                  {
                   if((false))
                    break;
                   if((false))
                    return;
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((false))
                      return;
                     return;
                     if((false))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                 while(false);
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      continue;
                     return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if((false))
                  continue;
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               do
                {
                 do
                  {
                   return;
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(false);
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if((false))
                continue;
               if((false))
                continue;
               if(true)
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    return;
                   if((false))
                    break;
                  }
                 else
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = ((1 << (int(1))) >> (((int(1)) + (0 << (int(3)))))); _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        return;
                      }
                     return;
                    }
                  }
                }
               else
                {
                }
               if((false))
                return;
              }
             if((false))
              return;
            }
           else
            {
            }
          }
         if(((true && (false))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if(false)
          {
           if((false))
            return;
           if((false))
            return;
          }
         else
          {
           if(((false) || false))
            {
             if((false))
              break;
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                break;
               return;
              }
            }
           if((false))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != (8054 & 0); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(true)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
          }
         if((false))
          return;
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            continue;
           if((false))
            {
             if((false))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 return;
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      continue;
                     break;
                    }
                   break;
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   if((false))
                    continue;
                  }
                 do
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      {
                       if((false))
                        return;
                       return;
                      }
                     if((false))
                      break;
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 if((false))
                  return;
                 return;
                }
               if((false))
                continue;
              }
             do
              {
               if((false))
                return;
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > (0 >> (int(7))); _injected_loop_counter --)
      {
       if((false))
        break;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((false) || false)))
          continue;
        }
       while(false);
      }
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((((false) || false)))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((false))
    {
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          return;
         if((((false) || false)))
          return;
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        return;
       if((false))
        return;
      }
    }
   if((false))
    {
     if((((false) && true)))
      return;
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((bool(bvec2(false, true))))
  {
  }
 else
  {
   if(((false || (false))))
    return;
   GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z = _GLF_struct_replacement_7._f0._f5.GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_size.y;
  }
 if((false))
  return;
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      break;
     do
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
         if((false))
          return;
        }
       if((false))
        continue;
       if((false))
        {
         if((((false) || false)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         continue;
         if((false))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(true)
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
           if((false))
            break;
           if((false))
            return;
          }
         else
          {
           if((false))
            continue;
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(false);
       if((false))
        return;
       if((((false) || false)))
        return;
      }
    }
   while(false);
  }
 do
  {
   if((false))
    return;
   if((false))
    continue;
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      continue;
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((false))
        continue;
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(false)
        {
        }
       else
        {
         if((((false) || false)))
          break;
         return;
        }
       if((false))
        break;
      }
     if(((bool(bvec2(false, true)))))
      {
       if((false))
        continue;
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      continue;
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          continue;
         break;
        }
       if((false))
        return;
       if((false))
        {
         if((false))
          continue;
         return;
        }
       if(true)
        {
         do
          {
           if(true)
            {
             do
              {
               if((false))
                break;
               if(false)
                {
                }
               else
                {
                 atomicStore(write_val, uint(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z), 4, 64, 0);
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          break;
        }
       else
        {
         if((false))
          {
           if((false))
            break;
           break;
          }
        }
      }
     if((false))
      break;
    }
   if((false))
    break;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   buf[GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z] = uint(subgroupAllEqual(write_val));
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 do
  {
   if((false))
    return;
  }
 while(false);
}
