#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((bool((bvec3(((bvec3(bvec3(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, true))))))))))))))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if(((((max((min(injectionSwitch, (max(injectionSwitch, injectionSwitch)))).x, (float(mat4x3((min(injectionSwitch, (max(injectionSwitch, injectionSwitch)))).x, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0)))))) > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((! (! (bool(bvec4(! (! ((((((false)) || false)) && true))), true, false, ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > (vec2(injectionSwitch[0], (float(vec4(injectionSwitch[1], 1.0, 1.0, 1.0))))).y))))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec3(false, true, false)))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((((true && ((injectionSwitch.x > ((mix(vec2((vec2(injectionSwitch[0], ((((injectionSwitch[1]) - 0.0)) / 1.0)))[0], (float(mat2((vec2(injectionSwitch[0], ((((injectionSwitch[1]) - 0.0)) / 1.0)))[1], 0.0, 0.0, 0.0)))), vec2((- 3.1), (- 0.7)), bvec2(false, false)))).y)))) || false))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bool(false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((bool(bool(((injectionSwitch.x > injectionSwitch.y))))) && true))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   if(((((((! (! ((true && (injectionSwitch.x > injectionSwitch.y)))))) && true)))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && (bool(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), true))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
      barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = (clamp((min(((gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)))).x, ((uint(uvec2((((0u ^ ((max(((min(gl_WorkGroupSize, gl_WorkGroupSize)).x) * 1u, ((min(gl_WorkGroupSize, gl_WorkGroupSize)).x) * 1u))))) ^ (0u >> ((max(uint(8u), uint(8u)))))), (1u ^ 1u))))), ((gl_WorkGroupSize.x) >> ((((uint(uvec2(true ? 0u : (num_workgroup), 1u))))) | 0u))));
 if((((((true && ((false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((false || ((bool(bvec2(false, true)))))))
  {
   if(((true && (false))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > ((injectionSwitch) + tan(sqrt(vec2(0.0, 0.0)))).y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((false || (false))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(((bool(bool(false)))))
    barrier();
  }
 uint workgroup_base = (~ (~ ((((max(workgroup_size, workgroup_size))) << 0u)))) * workgroup_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((! (! ((false)))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = ((workgroup_base + subgroup_id * subgroup_size) ^ (min(0u, 0u))) + subgroup_local_id;
 if(((! (! ((bool(bvec4((true && ((((float(vec4(injectionSwitch.x, 0.0, abs(0.0), 1.0))) > injectionSwitch.y)))), true, true, ((false) && ((true) || false))))))))))
  {
   if(((bool((bvec2(bvec2(bvec2((bool(bool(false))), (((bool(bool((bool(bvec2(false, true)))))) && true))))))))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((((false) || false)))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((false)) && true))
  barrier();
 if((((injectionSwitch.x > ((max(mix(((true ? float((- 5.0)) : (- 200.035))), (max(float(((injectionSwitch) * mat2((((injectionSwitch.y)) - length(0.0)))).y), float(((injectionSwitch) * mat2((((injectionSwitch.y)) - length(0.0)))).y))), bool(true)), mix(float((- 5.0)), float(((injectionSwitch) * mat2((((injectionSwitch.y)) - length(0.0)))).y), bool(true)))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((false || (false))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > (1.0 * (injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((bool((bvec3(bvec4(bvec3(false, true, true), true)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = (((clamp((~ (~ (0u))), 0u, (max(0u, 0u)))) | (~ (((false ? (workgroup_size) : (~ (~ (~ (uint(subgroupAllEqual(((write_val) ^ (min((0u | 0u), (0u | 0u))))))))))))))));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 if(((bool((bvec2(bvec3(bvec2((! (! ((false || ((bool(bvec4(false, false, (((bool(bvec2(true, true)))) && ((! (! (bool((bvec3(bvec4(bvec3(((injectionSwitch.x < ((min((max(vec2(mat3x2((vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, exp(0.0), (dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0)), vec2(mat3x2(injectionSwitch, (max((max(1.0, (min(1.0, 1.0)))), 1.0)), exp(0.0), (dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), ((((min(max((clamp(0.0, 0.0, 0.0)), 0.0), max((clamp(0.0, 0.0, 0.0)), 0.0)))) - 0.0)))))), vec2(mat3x2(injectionSwitch, 1.0, exp(0.0), (dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0))))).y)), false, true), false))))))))), ((false) && true))))))))), true), false)))))))
  barrier();
 if((false))
  barrier();
}
