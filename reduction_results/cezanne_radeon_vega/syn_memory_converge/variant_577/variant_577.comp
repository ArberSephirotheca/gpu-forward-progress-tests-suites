#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((! ((false || (! (((((injectionSwitch) * mat2((injectionSwitch.y))).x > injectionSwitch.y)))))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  {
   if(((((((bool(bool(bool(bvec4((bool(bvec4((bool(bool(false || ((true && ((bool((bvec3(bvec4(bvec3(false, true, true), false))))))))))), true, false, true))), true, false, true)))))))) || false)))
    {
     if(((((max((min((((min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x, injectionSwitch.x)), (((vec2(mat2x4((mix(vec2((715.331), (mix(((float((injectionSwitch)[1])) - 0.0), float((- 1.9)), bool(false)))), vec2((injectionSwitch)[0], (min((- 6595.7940), (- 6595.7940)))), bvec2(true, ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))), 0.0, 0.0, 0.0, ((max((max(clamp(1.0, 1.0, (min((mix(float((- 6.3)), float(1.0), bool(true))), 1.0))), clamp(1.0, 1.0, (min((mix(float((- 6.3)), float(1.0), bool(true))), 1.0))))), ((true ? clamp(1.0, 1.0, (min((mix(float((- 6.3)), float(1.0), bool(true))), 1.0))) : (- 3.6)))))), ((clamp((false ? (18.71) : (float(((true ? mat2x3(1.0, length(((vec2((max((clamp(0.0, 0.0, 0.0)), (clamp(0.0, 0.0, 0.0)))), 0.0)) / vec2(1.0, 1.0))), 1.0, (float(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, abs(1.0), round(length(normalize(1.0))), 0.0))), 0.0, 0.0) : (mat2x3(3.1, - 9484.1048, - 38.61, ((false ? (- 1.2) : - 2.2)), 3265.0516, 605.641))))))), (((! (! (((bool(((bvec3(bvec3(bvec3(bvec4(bvec3(false, true, (((! (! (injectionSwitch.x < injectionSwitch.y)))))), ((injectionSwitch.x < injectionSwitch.y)))))))))) && true))))) ? (clamp((18.71), (18.71), (((18.71)) - 0.0))) : (float(((true ? mat2x3(1.0, length(vec2(((clamp(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)))), 0.0)), 1.0, 0.0, 0.0, 0.0) : (mat2x3(3.1, - 9484.1048, - 38.61, - 2.2, 3265.0516, 605.641))))))), (false ? (18.71) : (float(((true ? mat2x3(1.0, length(vec2((clamp(0.0, 0.0, (mix(float((- 3123.7837)), float(0.0), bool(true))))), ((min((clamp(float(((false ? (mat2(- 18.77, 9.6, 9.9, - 7.9)[1]) : vec2(0.0, 0.0)))), float(((false ? (mat2(- 18.77, 9.6, 9.9, - 7.9)[1]) : vec2(0.0, 0.0)))), float(((false ? (mat2(- 18.77, 9.6, 9.9, - 7.9)[1]) : vec2(0.0, 0.0)))))), float(((false ? (mat2(- 18.77, 9.6, 9.9, - 7.9)[1]) : vec2(0.0, 0.0))))))))), 1.0, 0.0, 0.0, 0.0) : (mat2x3(3.1, - 9484.1048, - 38.61, - 2.2, 3265.0516, 605.641)))))))))), 1.0)))) - sin(vec2(0.0, 0.0))).x)) > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (((bool(bvec2(false || ((((! (((((! (false))) || false)) || false))))), false)))))) || false))
      {
       if((false))
        return;
       return;
      }
     if((bool(bvec3((bool(bool((((injectionSwitch.x > (float(mat3x4(((((injectionSwitch.x > injectionSwitch.y)) ? (smoothstep(- 1.5, - 31.79, (- 7484.7891))) : (min((((max(((mat2(((mat3x2(((mat2(1.0) * (mat2((injectionSwitch.x), ((max((min((min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x))), (injectionSwitch.x), (injectionSwitch.x)))) + ((mat2(1.0) * (mat2(1.0))))))) * mat3((injectionSwitch.y))))) * (injectionSwitch)).y, ((mat2(((mat3x2(mat2(1.0))) * mat3((injectionSwitch.y))))) * (((injectionSwitch)) + vec2(0.0, 0.0))).y))) / ((false ? (54.57) : (1.0 * (1.0))))), (((max(((mat2(((mat3x2(((mat2(1.0) * (mat2((injectionSwitch.x), ((max((min((min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x))), (injectionSwitch.x), (injectionSwitch.x)))) + ((mat2(1.0) * (mat2(1.0))))))) * mat3((injectionSwitch.y))))) * (injectionSwitch)).y, ((mat2(((mat3x2(mat2(1.0))) * mat3((injectionSwitch.y))))) * (((injectionSwitch)) + vec2(0.0, 0.0))).y))) / ((false ? (54.57) : (1.0 * (1.0))))))))), 0.0, round(length((abs(vec4(0.0, (clamp((mix(float((7338.2968)), float(0.0), bool(true))), 0.0, 0.0)), 0.0, 0.0)) + (normalize((vec4(mat4x3(((max((vec4(1.0, ((false ? (- 5.3) : 1.0)), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0), (clamp((vec4(1.0, ((false ? (- 5.3) : 1.0)), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0), (vec4(1.0, ((false ? (- 5.3) : 1.0)), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0), (max((vec4(1.0, ((false ? (- 5.3) : 1.0)), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0), (vec4(1.0, ((false ? (- 5.3) : 1.0)), 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))))))), 0.0, 1.0, sqrt(0.0), 1.0, 1.0, determinant(mat2(exp(0.0), 0.0, 0.0, 1.0)), 0.0, (injectionSwitch.x))))))))), 1.0, 0.0, 0.0, 1.0, sin(0.0), determinant(mat4(1.0, 1.0, (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, (float(mat2x4(1.0, abs(1.0), round(length(normalize(abs(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, (injectionSwitch.y))), 0.0, (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0))))))))), false, true))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > (clamp(injectionSwitch, (min((vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)), injectionSwitch)).y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if((! ((true && (! ((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y)))))))))
    return;
   return;
   if(((bool((bvec3(bvec3(bvec3((! (! ((! (! (((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), (bool(bool(true))), false))))))))
    return;
   if((((bool(bool((false || ((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((((((false) || false)))) && ((((false ? (- 4913.2495) : injectionSwitch.x)) < injectionSwitch.y))) || false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if((! (((! (((! (! (bool(bvec4(! ((! ((false)))), ((injectionSwitch.x < injectionSwitch.y)), false, false)))))))) && true))))
    {
     if((((bool(bool(((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
      {
       if((false))
        {
         if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
          return;
         return;
        }
       if((false))
        return;
       return;
      }
     return;
    }
   if(((bool(bool(false)))))
    return;
   if((((((injectionSwitch.x < injectionSwitch.y)) && ((((((! ((((bool(bvec2(! (true && (false || ((false)))), false))) || false)))))) || false)) || false)))))
    return;
   return;
  }
 if(((((clamp(((injectionSwitch) * mat2((injectionSwitch.y))), injectionSwitch, injectionSwitch)).x > ((injectionSwitch) - abs(vec2(0.0, 0.0))).y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((! ((! (! (! (((false || ((! (! ((! (((bool(bvec3(bool(bvec4((((((bool(bool((true && (! (false))))))) || false)) && true), true, ((injectionSwitch.x < injectionSwitch.y)), true)), ((injectionSwitch.x < injectionSwitch.y)), false)))))))))))))))))))
  {
   if(((true && (false))))
    return;
   if((false))
    return;
   if((false))
    {
     if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       return;
       if((false))
        return;
       if((false))
        return;
      }
     return;
    }
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if(((((true && (false))) && true)))
  return;
 uint num_workgroup = ((1u ^ 1u) | (((gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)).x));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((! (! ((false || ((((bool((bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))))))) && (! (! (true)))) && (false))))
  return;
 if((false))
  return;
 if(((((((! (! (bool((bvec3(bvec4(bvec3(bool(bvec3((((((bool((bvec2(bvec2(bvec2(! (! (bool((true && ((bool(bvec4(bool((max(injectionSwitch.x, injectionSwitch.x)) > ((max(vec2((mix(float(((mix(float(1.3), float(((- 70.86 * (- - 8729.5843)))), bool(false))))), ((((float(injectionSwitch[0]))) + sin(0.0)) - 0.0), bool(true))), injectionSwitch[1]), vec2((mix(float(((mix(float(1.3), float(((- 70.86 * (- - 8729.5843)))), bool(false))))), ((((float(injectionSwitch[0]))) + sin(0.0)) - (clamp(0.0, 0.0, 0.0))), bool(true))), injectionSwitch[1])))).y), true, true, false)))))))), true)))))) || false)))), false, true)), true, false), true)))))))))))))
  {
   if((((((injectionSwitch.x < injectionSwitch.y)) && (false || (false))))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if(((true && ((((bool(bvec3(false, false, false)))) || false)))))
  return;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  {
   if(((bool((true && (! (((! ((((bool(bvec4((((bool((! (! ((! ((bool((false || (bool(! (false))))))))))))) && true)), true, false, false)))) && true))) && true))))))))
    return;
   return;
   if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 if((false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (max(((subgroup_local_id) << 0u), ((subgroup_local_id) - 0u)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, (min(64, 64)), 0);
 if((false))
  return;
 (0u ^ (((buf[virtual_gid] = uint(subgroupAllEqual(((write_val) | 0u)))) - 0u)));
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
}
