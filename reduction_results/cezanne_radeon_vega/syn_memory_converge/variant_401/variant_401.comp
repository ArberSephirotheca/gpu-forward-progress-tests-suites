#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((! (! (false)))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((bool(bvec2((((! (((true && ((! (true))))) && true)) && (((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), false))) && true))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      return;
     if((((bool((bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (((! (false)) && true)))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false || ((((injectionSwitch.x > ((false ? (injectionSwitch) : injectionSwitch)).y))))))
  {
   if(((bool(bvec2(false, false)))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((bool(bvec2((false), false))))
  {
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((false) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > (min((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (0.0 + (injectionSwitch.y))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((bool(bool((bool(bvec4((false || (((((bool(bvec2((float(vec2((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0))) > ((injectionSwitch) * mat2(1.0)).y, false)))))))), true, true, true)))))))
  {
   if(((bool(bvec2(((bool(bool(bool(bvec2(false, false)))))), false)))))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((true && ((false || (((bool(bvec3(false, false, true)))) && true)))))))
    {
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((false ? (subgroup_id) : ((gl_WorkGroupSize) | (gl_WorkGroupSize)).x));
 if(((bool(bvec4(false, true, true, false)))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
  {
   if((! (! (! ((bool(bvec3(! (((((injectionSwitch.x > injectionSwitch.y))))), true, false))))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((((((min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, ((true ? (vec2(0.0, 0.0) + (injectionSwitch)) : (sign(vec2((min(((true ? (((max(((- 7.8) - 0.0), - 7.8))) - 0.0) : (length(- 1774.9659)))), (1.0 * (((((true ? (max(((- 7.8) - 0.0), - 7.8)) : (length(- 1774.9659))))) * 1.0))))), 3.1))))).x, injectionSwitch.x)))) > ((false ? (- 1.0) : injectionSwitch.y))))))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((((! ((false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(((bool(bvec4((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((((false || (((injectionSwitch) / vec2(1.0, 1.0)).x > (max(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bvec3(false, false, false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = (((max(gl_WorkGroupID, gl_WorkGroupID))) - uvec3(0u, 0u, 0u)).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 uint workgroup_base = ((workgroup_size) - 0u) * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((bool(bvec2(false, false)))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((false) && true)))
  return;
 uint virtual_gid = workgroup_base + (0u | (subgroup_id)) * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if(((false || (false))))
  return;
 if((false))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((((false)) && true))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((false || (false))) && true)))
  return;
 if(((! (! (false)))))
  {
   if((false))
    return;
   if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
   if(((((bool(bool(false)))) || false)))
    return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if(((bool(bool(((false || (false || (false)))))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if(((false || (false))))
        return;
       return;
      }
     if((false))
      return;
     if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(((bool(bvec3(false, true, false)))))
        return;
       if((false))
        return;
       return;
      }
     return;
    }
   return;
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
}
