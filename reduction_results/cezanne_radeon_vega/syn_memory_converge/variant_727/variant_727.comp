#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((true && ((((! (((((bool(bvec2(bool(bvec2((bool(bvec4(! ((true && ((((((((bool(bool(true))))) && true) || false)) && true))) && (bool(bvec3((bool((bvec3(bvec4(((bvec3(bvec3(bvec3(bvec4(bvec3((false), ((false) || false), true), false)))))), true))))), (((true && (injectionSwitch.x < injectionSwitch.y)))), true)))), true, true, false))), true)), false)))) && true))))) || false))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((false ? (subgroup_id) : (uint(((uvec2(max((((true ? clamp(gl_NumWorkGroups.x, (((~ (~ ((clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))) / 1u), gl_NumWorkGroups.x) : (uint(- 50942))))), gl_NumWorkGroups.x), (0u + (0u)))) >> uvec2(0u, 0u)))))));
 uint workgroup_size = (((max(gl_WorkGroupSize.x, (clamp((0u ^ ((uvec3((clamp(0u, 0u, 0u)), 0u, 0u) + (((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)))).x)), (uvec3(0u, 0u, ((0u) / uint((injectionSwitch.y)))) + (((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)))).x, (uvec3(0u, 0u, 0u) + (((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)))).x)))) >> 0u));
 uint workgroup_id = ((gl_WorkGroupID.x) | (clamp(0u, (1u * (0u)), 0u)));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (((((true ? (0u | (min((clamp(((uint(((uvec3(uvec3((min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))))) + (uvec3((workgroup_base), 1u, uint((injectionSwitch.x))))))) / uint((injectionSwitch.y))), workgroup_base, workgroup_base)), (((max((0u + (workgroup_base)), workgroup_base))) | 0u)))) : (workgroup_id)))) + subgroup_id * (max(subgroup_size, subgroup_size)) + subgroup_local_id) | uint((injectionSwitch.x)));
 atomicStore(write_val, uint(virtual_gid), 4, (~ (~ (64))), 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}
