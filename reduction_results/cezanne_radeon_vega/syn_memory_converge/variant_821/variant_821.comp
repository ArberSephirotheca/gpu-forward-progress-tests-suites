#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((gl_WorkGroupSize) | (gl_WorkGroupSize)).x;
 uint workgroup_id = (((false || (((false) && true))) ? (atomicMin(subgroup_id, write_val)) : ((1u * (((~ (~ (gl_WorkGroupID.x)))))) >> 0u)));
 uint workgroup_base = ((workgroup_size) / 1u) * workgroup_id;
 uint virtual_gid = ((0u | 0u) ^ (clamp(((((((0u << (((false ? (workgroup_base) : uint(2u))))) ^ ((~ (~ ((((true ? (((((max((max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id)))) * 1u) * 1u) : (subgroup_size))) / 1u)))))))) >> (0u | (0u | (0u))))), ((1u ^ 1u) ^ (((max((max(((min(0u, 0u)) ^ (workgroup_base)) + subgroup_id * ((subgroup_size) / 1u), workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (max((0u | (workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id))))), ((~ (~ ((uint((injectionSwitch.x)) ^ ((max((max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * ((subgroup_size) | (((subgroup_size) | (((subgroup_size)) | 0u)))))) + subgroup_local_id)))))))))));
 atomicStore(write_val, (0u | (uint(virtual_gid))), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}
