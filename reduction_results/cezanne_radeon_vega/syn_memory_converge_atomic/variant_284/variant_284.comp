#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(true)
  {
   if(true)
    {
     if(((! ((false || (! (((false) || false))))))))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if(((((((false || (((injectionSwitch.x > injectionSwitch.y))))) || false)) && true)))
      {
       if((false))
        return;
       if(((bool(bvec3(false, false, (bool(bvec3(true, true, false))))))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
       barrier();
       if((false))
        barrier();
      }
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if(((! (! (false)))))
        return;
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     do
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((false) && true)))
            barrier();
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if(((false || (false))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     while(false);
     do
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(1))) >> ((int(int(int(1)))))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(((! (! ((! (! (false))))))))
            return;
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter != (((((int(ivec4((1 << (int(5))), 1, 1, 0)))) ^ 0) >> ((max(int(5), int(5))))) | 1); ((_injected_loop_counter ++) << 0))
                {
                 if((false))
                  barrier();
                 return;
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             else
              {
               if((false))
                barrier();
              }
            }
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(((! (! (false)))))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size;
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((! (! ((false)))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.x = subgroup_id;
 for(int _injected_loop_counter = (((1 & 1) << ((max(((int(7)) ^ 0), ((int(7)) ^ 0))))) >> ((0 | (int(7))))); _injected_loop_counter != (0 | (0 & - 37470)); _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 if(((! (! (((false) || false))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         return;
        }
      }
     if((false))
      barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   do
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        barrier();
      }
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec4(false, false, true, true)))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          break;
         if((false))
          barrier();
         for(int _injected_loop_counter = (int(ivec2(0, 0))); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if((false))
        return;
       if((((bool(bvec3(((! (! (false)))) || false, false, false))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         if((false))
          barrier();
         break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              return;
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(false);
  }
 if((false))
  {
   if(((injectionSwitch.x > ((clamp(float((min(vec2(injectionSwitch.y, 0.0), vec2(injectionSwitch.y, 0.0)))), float((min(vec2(injectionSwitch.y, 0.0), vec2(injectionSwitch.y, 0.0)))), float((min(vec2(injectionSwitch.y, 0.0), vec2(injectionSwitch.y, 0.0))))))))))
    {
     if((false))
      barrier();
    }
   else
    {
     if((bool(bvec2((false), (! (! (false)))))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((bool((bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)))))))))))
        return;
       if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         if((false))
          return;
         barrier();
        }
       return;
      }
    }
   if((((false || ((((true ? injectionSwitch : (injectionSwitch))).x > injectionSwitch.y))))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((bool(bvec4(((false) || false), true, false, false)))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((((vec2(mat3(injectionSwitch, 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.w = subgroup_size;
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if(((! (! (false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false || ((bool(bvec2(((((injectionSwitch.x < injectionSwitch.y) || false))), false))))))
      {
       if((((true && (bool(bvec4(false, true, true, true)))))))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) | ((int(ivec2(1, 0))))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = ((1 << (((0 + (~ (~ (int(2)))))))) >> (max((int(2)), (int(2))))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((false) || false)))
                return;
              }
             if((false))
              {
               if((false))
                break;
               barrier();
              }
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 return;
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             if((false))
              continue;
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
              }
            }
           return;
           if(((true && (false))))
            barrier();
          }
         if(((((bool(bvec3((true && (false)), true, true))) || false))))
          barrier();
         for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > (1 * (0)); _injected_loop_counter --)
          {
           if((bool(bvec4((true && (false)), true, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y))))))
            {
             if((false))
              {
               if((false))
                barrier();
               break;
              }
             if((false))
              barrier();
            }
           else
            {
             barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          break;
         for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             while(false);
            }
          }
         else
          {
          }
        }
       if((false))
        return;
       if((false))
        return;
       if(((((mix(vec2((vec2(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, tan(0.0), 0.0)))[0], (28.52)), vec2((- 220.015), (vec2(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, tan(0.0), 0.0)))[1]), bvec2(false, true)))).x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(((bool(bool(false)))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          barrier();
        }
      }
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); (0 ^ (_injected_loop_counter)) > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(false);
  }
 GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool((! (! (bool(false))))))))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((true && (true)))
    {
     if(((bool(bool((! (! ((false || (false))))))))))
      barrier();
     if((false))
      {
       if(((! (! (false)))))
        return;
       barrier();
      }
     if((false))
      barrier();
     if(((((float(mat4x3(injectionSwitch.x, 0.0, (dot(vec3(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     do
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     do
      {
       if((false))
        return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(false);
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((false || (((injectionSwitch.x > injectionSwitch.y) || false)))))))
    return;
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  return;
 if((bool(bool((false)))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; ((_injected_loop_counter ++) * 1))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 do
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     break;
    }
  }
 while(false);
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.x = num_workgroup;
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 while(false);
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
   if(((true && (false))))
    {
     for(int _injected_loop_counter = (0 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = ((((((true ? 1 << (((int(0)) * 1)) : (- 51103)))) ^ 0)) >> (int(0))); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
       if((((injectionSwitch.x > (mix(float((8.0)), float(injectionSwitch.y), bool(true)))))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((! (! ((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)))))))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
     if(((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))))))))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (0 | (1)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      break;
     if((false))
      break;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             do
              {
               return;
              }
             while((((clamp((max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)));
            }
          }
         if((false))
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           while((((! (! ((bool((bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x < injectionSwitch.y))), true, true)))))))))));
          }
         if(true)
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if(true)
                {
                 if((false))
                  barrier();
                 if(((true && (false))))
                  {
                   if((false))
                    barrier();
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = (0 ^ (1)); _injected_loop_counter != (0 >> (int(8))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               if(((false || ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))))
                return;
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ ((1 << (int(4))) >> (int(4)))); _injected_loop_counter ++)
                {
                 if((false))
                  continue;
                 return;
                 if((false))
                  break;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         if((false))
          {
           if(((! (! (false)))))
            {
             if((false))
              barrier();
             break;
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(((! (! (false)))))
      barrier();
    }
   while(false);
   return;
   if((false))
    {
     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false || (false)))
        {
        }
       else
        {
         do
          {
           if((false))
            {
             if((false))
              {
               if(((bool(bool(false)))))
                barrier();
               continue;
              }
             if(((! (! ((bool(bvec2(false, true))))))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               continue;
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                continue;
               if((false))
                break;
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  return;
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
               if((false))
                break;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(false);
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  barrier();
                 do
                  {
                   if((false))
                    return;
                   if((false))
                    barrier();
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                 if((false))
                  return;
                 if((false))
                  {
                   if((false))
                    barrier();
                   continue;
                  }
                 if((false))
                  continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                  return;
                 if((false))
                  barrier();
                 break;
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  continue;
                 if(true)
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false || (((((((false ? (atan(injectionSwitch, injectionSwitch)) : (min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))) || false))))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                     continue;
                    }
                   if((false))
                    return;
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     continue;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if((false))
                    barrier();
                  }
                }
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  return;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             while(((false) || false));
             if((false))
              barrier();
             if((false))
              continue;
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 return;
                }
              }
            }
          }
         while((! (! (false))));
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < ((1 << ((~ (~ (int(1)))))) >> (int(1))); _injected_loop_counter ++)
    {
     return;
     if((false))
      return;
     if((false))
      barrier();
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        return;
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = (1 & (int((clamp(ivec4(int((injectionSwitch.y)), 1, 1, (1 | 1)), ivec4(int((injectionSwitch.y)), 1, 1, (1 | 1)), ivec4(int((injectionSwitch.y)), 1, 1, (1 | 1))))))); ((true && (bool((false || (bool(_injected_loop_counter > 0))))))); _injected_loop_counter --)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        break;
       if((false))
        barrier();
       GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.y = (min(workgroup_size, ((((0u ^ (max(workgroup_size, workgroup_size))))) + 0u)));
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            continue;
           barrier();
          }
         continue;
        }
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; (true && ((true && (_injected_loop_counter > int((injectionSwitch.x)))))); _injected_loop_counter --)
  {
   if(((! (! (false)))))
    break;
   if((false))
    {
     if((false))
      continue;
     if((((bool((bvec3(bvec4(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false), true))))) || false)))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    continue;
   if((((false) || false)))
    {
     if((false))
      continue;
     if((false))
      continue;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.x * GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.w + (clamp(GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size, GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size, GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size)).z;
 do
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 while(false);
 if(((bool(bvec3(false, false, false)))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(true)
    {
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(1))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if((false))
  barrier();
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(true)
      {
       if((! (! ((false)))))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << ((clamp(int(0), int(0), int(0))))); _injected_loop_counter --)
      {
       if(((true) && true))
        {
         barrier();
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
        }
       else
        {
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    return;
  }
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((- 4770.9012)), bool(false)))))))
  return;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     return;
    }
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = 0; (false || (_injected_loop_counter != 1)); _injected_loop_counter ++)
        {
         atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        continue;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || ((bool(bvec4(false, false, true, false)))))))
      barrier();
     for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       do
        {
         return;
        }
       while((! (! (false))));
      }
    }
  }
 if((false))
  return;
 if((false))
  {
   do
    {
     if((false))
      break;
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(false);
    }
   while(false);
   if(((bool(bool((bool(bvec3(false, true, true))))))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if(false)
      {
       if((false))
        break;
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
           if((false))
            return;
          }
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             do
              {
               if(((injectionSwitch.x > ((((true ? injectionSwitch.y : (932.882)))) * 1.0))))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
      }
    }
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         do
          {
           if((false))
            return;
           if(((bool(bvec3(false, false, false)))))
            {
             if((false))
              break;
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        return;
      }
    }
   if(true)
    {
     barrier();
    }
   else
    {
    }
   do
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         if(((bool(bool(false)))))
          continue;
         barrier();
        }
      }
    }
   while(false);
   if((false))
    return;
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      return;
    }
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if(true)
      {
       if(((! (! (false)))))
        {
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
         return;
         if(((! (true && ((false || ((! (false)))))))))
          return;
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      barrier();
    }
   else
    {
     if(((! (! (((false) || false))))))
      return;
     if((false))
      {
       if((((max((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     return;
    }
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      return;
     if((! (! (false))))
      {
       if((false))
        break;
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.y = read_val;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.y));
 if(((((! (! (((injectionSwitch.x) - 0.0) > injectionSwitch.y)))))))
  barrier();
}
