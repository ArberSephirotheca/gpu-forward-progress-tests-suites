#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((0u << (uint(4u))) + ((min((((min((((((uvec3(uvec3((gl_WorkGroupSize) << uvec3(0u, 0u, 0u))))).x)) - 0u), (((gl_WorkGroupSize) << uvec3(0u, 0u, 0u)).x)))) | ((min((((((uvec3(uvec3((gl_WorkGroupSize) << uvec3(0u, 0u, 0u))))).x)) - 0u), (((gl_WorkGroupSize) << uvec3(0u, 0u, 0u)).x))))), (((min((((((uvec3(uvec3((gl_WorkGroupSize) << uvec3(0u, 0u, 0u))))).x)) - 0u), (((gl_WorkGroupSize) << uvec3(0u, 0u, 0u)).x)))) | 0u))))) | (((gl_WorkGroupSize.x) | 0u)));
 if((false))
  return;
 uint workgroup_id = (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)).x;
 if(((((bool(bvec2(false, false))))) || false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + ((((((((((false ? (num_workgroup) : (clamp((((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : uint(uvec4(uint(uvec3(0u, 1u, 1u)), (max(1u, 1u)), 0u, 0u)))))) << 0u), (((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : uint(uvec4(uint(uvec3(0u, 1u, 1u)), (max(1u, 1u)), 0u, 0u)))))) << 0u), (((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : uint(uvec4(uint(uvec3(0u, 1u, 1u)), (max(1u, 1u)), 0u, 0u)))))) << 0u)))))) | 0u))) << 0u) | (((uint(uint(((max((min(subgroup_id, subgroup_id)), subgroup_id)))))) | (((((uint(uint((subgroup_id)))) >> 0u)) | (uint(uint((subgroup_id)))))))))) | 0u) * subgroup_size + (uint(uint(subgroup_local_id)));
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad((uint(uvec2((0u | (write_val)), 0u))), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual((~ (((true ? ~ (read_val) : (workgroup_size)))))));
}
