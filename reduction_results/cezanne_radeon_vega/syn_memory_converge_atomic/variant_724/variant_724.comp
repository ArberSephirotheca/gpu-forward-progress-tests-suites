#version 460

struct _GLF_struct_0 {
 uint num_workgroup;
 bvec2 _f0;
 ivec2 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((bool(bool(((mix(vec2((injectionSwitch)[0], (5.5)), vec2((6.4), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))))))
  {
   do
    {
     if((false))
      {
       if((false))
        break;
       continue;
      }
     if((((((injectionSwitch.x > injectionSwitch.y)))) && (bool(bvec4(true, true, false, ((injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(((injectionSwitch.x > (mix(float(injectionSwitch.y), float((243.948)), bool(false))))))
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      break;
     if((false))
      {
       if(((! (! (false)))))
        break;
       if((false))
        {
         if((false))
          break;
         break;
        }
       return;
       if(((! (! (false)))))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if((false))
      {
       if(((false || ((! (! (! ((bool(bool(! ((bool(bool((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))
        continue;
       break;
      }
    }
   while(false);
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter < 1; ((_injected_loop_counter ++) ^ (0 << (((false ? (63331) : int(7)))))))
        {
         return;
        }
      }
     return;
    }
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if(((bool(bvec4((true && (false)), true, false, ((injectionSwitch.x < injectionSwitch.y)))))))
          break;
         break;
        }
       continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((! (! (! ((! ((true && (bool(bool(((bool((bvec3(bvec3(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))) || ((false)))))))))))))))
        {
         if(((! (! (false)))))
          continue;
         if((false))
          continue;
         return;
         if((false))
          continue;
        }
       if((((false) || false)))
        {
         if(((! (! (false)))))
          continue;
         if((false))
          continue;
         break;
        }
       barrier();
      }
    }
   else
    {
    }
   if((false))
    break;
  }
 while(false);
 do
  {
   if(((! ((bool(bvec4(! (((true && ((injectionSwitch.x > injectionSwitch.y))))), true, true, true)))))))
    return;
  }
 while(((injectionSwitch.x > (vec2(mat4x2((max(injectionSwitch, injectionSwitch)), 1.0, sin(abs(0.0)), 0.0, 0.0, 1.0, (dot(vec3((injectionSwitch.x), (injectionSwitch.y), 0.0), vec3(1.0, 0.0, 1.0)))))).y)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0((((((false ? (uvec3(149126u, 126706u, 160654u)) : ((false ? (uvec3(39694u, 139949u, 172443u)) : ((clamp(uvec3(uvec4(uvec3((0u ^ ((0u ^ (((0u) | 0u))))), 0u, 0u), 0u)), uvec3(uvec4(uvec3((0u ^ ((0u ^ (((0u) | 0u))))), 0u, 0u), 0u)), uvec3(uvec4(uvec3((0u ^ ((0u ^ (((0u) | 0u))))), 0u, 0u), 0u))))))) | (gl_NumWorkGroups)))).x) | ((((~ ((0u ^ (~ ((((0u) | ((~ (~ (0u))))) | ((0u) | ((~ (~ (0u))))))))))))) / (1u | 0u))), bvec2(true), ivec2(1));
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (((((! (bool(bvec4((false), true, true, true))))) || false)) || false))))
    {
     if((false))
      return;
     return;
    }
   if((! (((! ((((bool((((injectionSwitch.x > injectionSwitch.y)) || (bool(injectionSwitch.x < injectionSwitch.y))))))))) && true))))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     if(false)
      {
      }
     else
      {
       if((! (((bool(bvec3(true && (! ((false))), false, true)))))))
        {
         if(((injectionSwitch.x < ((injectionSwitch.y) / 1.0))))
          {
           do
            {
             for(int _injected_loop_counter = 1; (! (! (_injected_loop_counter != 0))); _injected_loop_counter --)
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; ((_injected_loop_counter != 1) || false); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if((false))
                {
                 if((false))
                  return;
                 continue;
                }
               if((((false)) && true))
                break;
              }
            }
           while((true && (false)));
          }
         else
          {
          }
         if((false))
          return;
         if((((false)) && ((injectionSwitch.x < injectionSwitch.y))))
          return;
         return;
         if((false))
          {
           do
            {
             if((! ((((! (! (! (false)))))) && ((injectionSwitch.x < injectionSwitch.y)))))
              {
              }
             else
              {
               return;
              }
            }
           while(false);
          }
        }
      }
    }
   else
    {
    }
   return;
  }
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if((((false)) || false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(false)
  {
  }
 else
  {
   if((false))
    return;
  }
 do
  {
   if(false)
    {
    }
   else
    {
     if(((bool(bvec4(false, (((((((clamp(injectionSwitch.x, (float(float(injectionSwitch.x))), injectionSwitch.x))) - 0.0) < (float(mat3x2((((mix(float((337.894)), float((clamp((mix(float(true ? injectionSwitch.y : (- 680.773)), float((199.436)), bool(false))), (false || (true)) ? injectionSwitch.y : (- 680.773), true ? injectionSwitch.y : (max((- 680.773), (max((min((- 680.773), (- 680.773))), (- 680.773)))))))), bool(true))))), 0.0, 0.0, 0.0, 0.0, 1.0)))))) && true), true, true)))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          return;
        }
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        return;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((bool(bvec2(true, true))))
        {
         for(int _injected_loop_counter = (int((clamp(int(0), int(0), ((int(0)) >> 0))))); _injected_loop_counter != (((((1 | 0) | 0))) * 1); _injected_loop_counter ++)
          {
           if((false))
            continue;
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if((false))
          continue;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
     if((false))
      return;
    }
  }
 if((false))
  {
   if((false))
    {
     if((bool(bvec4((! (! ((! (! ((bool(bvec2((false || (true)), false))))))))), true, false, false))))
      {
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if((false))
      return;
    }
   barrier();
  }
 if((false))
  return;
 do
  {
   if((false))
    return;
  }
 while(false);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (max((min(workgroup_base, workgroup_base)) + (~ ((0u + (((~ (~ ((max((~ (((((((1u * ((subgroup_id)))) ^ 0u) | (subgroup_id))) | ((((((uint((~ (~ (uvec2(uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))), 1u)))))))))) + 0u)))) / 1u, (min((~ (((((((1u * ((subgroup_id)))) ^ 0u) | (subgroup_id))) | (((((uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))))))) + 0u)))) / 1u, (~ ((~ (~ (((((((((1u * ((subgroup_id))))) | 0u) ^ 0u) | (subgroup_id))) | (((((clamp((((uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))))) - 0u), (uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u)))), (uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))))))))) + 0u))))))) / 1u)))))))))))) * subgroup_size, (min(workgroup_base, workgroup_base)) + (~ ((0u + (((~ (~ ((max((~ (((((((1u * ((subgroup_id)))) ^ 0u) | (subgroup_id))) | ((((((uint((~ (~ (uvec2(uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))), 1u)))))))))) + 0u)))) / 1u, (min((~ (((((((1u * ((subgroup_id)))) ^ 0u) | (subgroup_id))) | (((((uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))))))) + 0u)))) / 1u, (~ ((~ (~ (((((((((1u * ((subgroup_id))))) | 0u) ^ 0u) | (subgroup_id))) | (((((clamp((((uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))))) - 0u), (uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u)))), (uint(((uvec3(((false ? (workgroup_size) : false ? (subgroup_size) : 0u)), 0u, 1u)) >> uvec3(0u, 0u, 0u))))))))) + 0u))))))) / 1u)))))))))))) * subgroup_size)) + subgroup_local_id;
 for(int _injected_loop_counter = (35780 & 0); _injected_loop_counter < (0 ^ (((((clamp(max(0, 0), max(0, 0), ((max((((((max(0, 0))) - 0) | (max((0 | ((((max((min(0, 0)) / 1, (min(0, 0)) / 1)))))), 0)))), (((max(0, 0)) | (max((0 | ((((min(0, 0)) / 1)))), 0)))))) | 0)))) ^ (((((1 | 0) - 0)) >> 0)))) & 1)); _injected_loop_counter ++)
  {
   if(((true && (false))))
    {
     if((false))
      return;
     do
      {
       return;
      }
     while(false);
     if((((((injectionSwitch.x > ((injectionSwitch.y) / (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))))) || false)))
      break;
    }
   if((false))
    continue;
   if(((((false || ((((bool(((((bool(bool((bvec2(bvec4(bvec2((! (! ((injectionSwitch.x > injectionSwitch.y)))), false), false, false)))))) && true)) || false))) && true))))))))
    continue;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 ^ 0) & (0 ^ 1)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
  {
   atomicStore(write_val, (clamp(((uint(virtual_gid)) / 1u), uint(virtual_gid), (((1u | 1u) * ((((min(true ? ~ ((~ (~ (~ (((clamp((((uint((0u ^ (virtual_gid)))) - 0u)) + 0u, (((uint((0u ^ (virtual_gid)))) - 0u)) + 0u, (((uint((0u ^ (virtual_gid)))) - 0u)) + 0u)))))))) : (47276u), true ? ~ ((~ (~ (~ (((clamp((((uint((0u ^ (virtual_gid)))) - 0u)) + 0u, (((uint((0u ^ (virtual_gid)))) - 0u)) + 0u, (((uint((0u ^ (virtual_gid)))) - 0u)) + 0u)))))))) : (47276u)))))))))), (((max(4, (0 ^ (4))))) ^ 0), (0 ^ (64)), 0);
  }
 uint read_val = atomicLoad(write_val, 4, (~ (~ ((((min((true ? (max(((false ? (- 16514) : (int(ivec2(min(((((false ? (max(- 99351, 92835)) : ((((~ (~ (clamp(64, 64, 64)))))) - 0))) | ((false ? (max(- 99351, 92835)) : ((((~ (~ (clamp(64, 64, 64)))))) - 0))))), 64), 1))))), ((false ? (89124) : (int(ivec2(min(((false ? (max((1 * (((- 99351) | (- 99351)))), 92835)) : (0 | (((((~ (~ (clamp(64, 64, 64)))))) - 0))))), 64), 1))))))) : (((0 | (((((63627)) | 0)) | 0)) & 52682))), (max((true ? ((false ? (58941) : ((false ? (66008) : ((min((0 | (int(ivec2(min((((((clamp(64, 64, 64)) << 0))) - 0), 64), 1)))), int(ivec2(min((((((clamp(64, 64, 64)) << 0))) - 0), 64), 1))))))))) : ((63627 & 52682))), (int(ivec3((true ? ((((false ? (((66008) ^ 0)) : (int(ivec2(min(((((~ (~ (((((clamp((0 ^ (64)), 64, 64)) << 0)) << 0)))))) - 0), 64), 1)))) ^ 0))) : ((63627 & 52682))), 0, 0)))))))))))), 0);
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 else
  {
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
