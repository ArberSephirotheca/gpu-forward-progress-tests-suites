#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((false || (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, ((! (! (true))) && (true)))))))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! ((true && (! ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))))))))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint num_workgroup = ((gl_NumWorkGroups.x) | (((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)).x));
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = (min((~ (~ (((((workgroup_size * workgroup_id)) >> 0u)) - (0u << (uint(2u)))))), (~ (~ (((false ? (161568u) : (max(((workgroup_size * workgroup_id)) - (0u << (uint(2u))), ((workgroup_size * workgroup_id)) - (0u << (uint(2u))))))))))));
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((((bool(bool(bool((bvec3(bvec4(bvec3((false), false, true), ((injectionSwitch.x > injectionSwitch.y)))))))))) && true)))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = ((workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + ((subgroup_id * ((subgroup_size) - (0u | 0u))) ^ 0u))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if(((false || (((false) || false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, (~ (~ ((clamp(0, ((0) | 0), 0))))));
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if((! (! ((false)))))
  barrier();
 if(((((bool((bvec3(bvec4(bvec3((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true), false, false), (((((mix(float((- 4.3)), float(injectionSwitch.x), bool(true)))) - 0.0) < (0.0 + ((max(((injectionSwitch.y) + 0.0), (mix(float(((injectionSwitch.y) + 0.0)), float((7.3)), bool(false))))))))))))))))))
  {
   if(((((((((false || ((! ((! (! (bool(bvec3((! ((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)) || ((((clamp(max(((vec2(mat3x4((((((((injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0))) + vec2(0.0, 0.0)) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (injectionSwitch.x), tan(0.0), 0.0)))), injectionSwitch), (vec2(mat2x4(max(((mix(vec2(((((((injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0))))[0], (- 3.5)), vec2((- 0.8), ((((((injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0))))[1]), bvec2(false, true))) + vec2(0.0, 0.0)), injectionSwitch), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), max((((min(((((injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0)), ((((injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0))))) + vec2((float(mat4x3(0.0, (injectionSwitch.x), 1.0, 1.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (((false ? (- 2393.5071) : float(vec3(0.0, sqrt(1.0), 0.0))))))), 0.0, 1.0, 0.0, sqrt(sqrt(1.0)), 0.0, 0.0, 1.0))), 0.0)), injectionSwitch)))).x > injectionSwitch.y)), true, false, false))))), ((injectionSwitch.x > injectionSwitch.y)), true)))))))))) || ((injectionSwitch.x > injectionSwitch.y))))) || false))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
}
