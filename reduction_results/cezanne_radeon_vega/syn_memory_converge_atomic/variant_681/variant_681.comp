#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((min(((uint(uvec4(((((min((uint((injectionSwitch.x)) | (uint(uint(gl_NumWorkGroups.x)))), (uint((injectionSwitch.x)) | (uint((((clamp(uint(gl_NumWorkGroups.x), uint(gl_NumWorkGroups.x), uint(((gl_NumWorkGroups.x) / (1u & 1u))))) / 1u)))))))) - 0u)) << 0u, 1u, 1u, 1u))) / ((1u << (uint(6u))) >> (uint(6u)))), ((uint(uvec4(((((min((uint((injectionSwitch.x)) | (uint(uint(gl_NumWorkGroups.x)))), (uint((injectionSwitch.x)) | (uint((((clamp(uint(gl_NumWorkGroups.x), uint(gl_NumWorkGroups.x), uint(((gl_NumWorkGroups.x) / (1u & 1u))))) / 1u)))))))) - 0u)) << 0u, 1u, 1u, 1u))) / ((1u << (uint(6u))) >> (uint(6u)))))))));
 uint workgroup_size = (max((1u * (gl_WorkGroupSize.x)), (1u * (gl_WorkGroupSize.x))));
 uint workgroup_id = ((((true ? gl_WorkGroupID : (uvec3(105867u, 60221u, 108254u)))).x) / 1u);
 uint workgroup_base = (((uint(uvec3(workgroup_size, 0u, uint((injectionSwitch.y))))) * workgroup_id) - 0u);
 uint virtual_gid = (min(((((0u | (uint(((false ? (uvec2((min(2002u, 2002u)), 33793u)) : uvec2((((false || ((! ((bool(bvec4(! ((! (! ((true && (false)))))), (! (! (((true) || false)))), (! (((bool(bvec4((false || ((((bool(bool((! (! ((! (! (! ((true))))))))))) || false)) && true)), ((injectionSwitch.x < injectionSwitch.y)), false, false)))))), true))))))) ? ((((clamp((0u | (num_workgroup)), num_workgroup, num_workgroup))) << 0u)) : workgroup_base)), 1u))))))) + subgroup_id * subgroup_size) - uint((injectionSwitch.x))), ((0u | (uint(((false ? (uvec2((min(2002u, 2002u)), 33793u)) : uvec2((((false || ((! ((bool(bvec4(! ((! (! ((true && (false)))))), (! (! (((true) || false)))), (! (((bool(bvec4((false || (((bool(bvec2(bool((bvec3(bvec4(bvec3((((bool(bool((! (! ((! (! (! ((true))))))))))) || false)) && true, false, false), false)))), true)))))), ((injectionSwitch.x < injectionSwitch.y)), false, false)))))), true))))))) ? ((((clamp((0u | (num_workgroup)), num_workgroup, num_workgroup))) << 0u)) : workgroup_base)), 1u))))))) + subgroup_id * subgroup_size)) + ((subgroup_local_id) << 0u);
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, ((false ? (- 86778) : (max(64, ((64) | ((((min(64, 64))) >> 0))))))), 0);
 ((buf[virtual_gid] = uint(subgroupAllEqual((((0u) | (0u)) | (read_val))))) / uint((injectionSwitch.y)));
}
