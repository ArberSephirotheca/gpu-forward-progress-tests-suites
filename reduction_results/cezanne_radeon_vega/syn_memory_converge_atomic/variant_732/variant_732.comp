#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(true)
  {
   if((bool((! (! (bool((false))))))))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(((((injectionSwitch.x < injectionSwitch.y) && true))))
      {
       if((((injectionSwitch.x > (max((max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) + 0); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         if((false))
          barrier();
         if((bool((bvec3(bvec3(bvec3((false || ((false))), false, true)))))))
          {
           if(((bool(bool(false)))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            barrier();
          }
         if((bool(bvec3((((false || ((((((sqrt(vec2(1.0, 1.0)) * (mat2(1.0) * (injectionSwitch))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))), true, false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((bool(bvec2(false, true))))
            {
             if((false))
              barrier();
            }
           else
            {
             if((((false)) || false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter < 1))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = int(((min(injectionSwitch.y, injectionSwitch.y)))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = ((((0 << (int(5))) ^ 1) << (((int(0)) + int((injectionSwitch.x))))) >> (int(0))); _injected_loop_counter != (0 >> (int(7))); _injected_loop_counter --)
          {
           if((false))
            {
             if(((((! (! (false)))) || false)))
              barrier();
             if((false))
              {
               if(((false || (((false) || false)))))
                barrier();
               if(((((true && ((false || (false)))))) && true))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         barrier();
        }
       while(((false) || false));
      }
     else
      {
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((bool(bool((false)))))
  {
   if((bool(((((bool((((false)) || false))) && true)) && true))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((false)) || false))
  {
   if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   barrier();
  }
 if(true)
  {
   if((((injectionSwitch.x > (((vec2((max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y))))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((! (! (! (! ((false))))))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = ((0) | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(((true && (false))))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 uint num_workgroup = (((((((uint(uvec3(((gl_NumWorkGroups.x) ^ 0u), 1u, 0u)))) << ((0u) + 0u))) - 0u)) - ((max((0u) | (((0u) >> 0u)), (0u) | (((0u) >> 0u))))));
 if((((false) && true)))
  {
   if(false)
    {
     if((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))
      {
      }
     else
      {
       if(((((! (! ((true && (injectionSwitch.x > (1.0 * ((max((mix(float((520.951)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))))))))))
        barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       barrier();
      }
    }
   if((false))
    barrier();
   if((((false)) && true))
    barrier();
   if((! ((false || (! ((((bool(bvec4((false), false, true, false)))) || false)))))))
    {
     for(int _injected_loop_counter = ((0 << (int(5))) >> (int(3))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
   if((false))
    {
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > (min(injectionSwitch.y, ((injectionSwitch.y) / 1.0))))))
      {
      }
     else
      {
       if(true)
        {
         barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
      }
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((! (! ((((((((injectionSwitch.x < injectionSwitch.y)) ? (min(injectionSwitch.x, injectionSwitch.x)) : (- 437.255))) > injectionSwitch.y)))))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != ((max((1 ^ 1), (1 ^ 1))) >> (int(2))); _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), false)))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; ((_injected_loop_counter --) >> 0))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 if(((((((bool(bvec4((true && (false || ((false)))), false, true, true))) && true)))) || false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if(((((((injectionSwitch.x < ((injectionSwitch) / vec2(1.0, 1.0)).y)) && ((! (! (bool(bvec3(true, false, false)))))))) && ((injectionSwitch.x < injectionSwitch.y)))))
    {
     if((((false) && true)))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + ((uint((uvec2(0u, 0u) | (uvec2(uint((((min(uvec3(uvec3(((((max(uvec3(0u, 0u, 0u) + (uvec3(uvec4((uvec3(0u, 0u, 0u) | (uvec3(subgroup_id, uint((injectionSwitch.y)), 1u))), 0u))), (uvec3(uvec4(uvec3(0u, 0u, 0u) + (uvec3(uvec4((uvec3(0u, 0u, 0u) | (uvec3(subgroup_id, uint((injectionSwitch.y)), 1u))), 0u))), 0u))))))) | uvec3(0u, 0u, 0u)))), uvec3(((uvec3((((((((uvec3(0u, 0u, 0u) + (uvec3(uvec4((uvec3(((0u) | (((0u) ^ 0u))), 0u, 0u) | (uvec3(subgroup_id, uint((injectionSwitch.y)), 1u))), 0u))))) ^ (uvec3(0u, 0u, 0u) << (uvec3(7u))))) | uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u) >> (uvec3(2u)))))) * uvec3(1u, 1u, 1u)))))))), 1u)))))) * subgroup_size + (1u * (subgroup_local_id));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > (float(vec2(injectionSwitch.y, 0.0)))))))
    barrier();
   if(((injectionSwitch.x < (mix(vec2((2.2), ((- (((false ? (- 9.9) : (min(- 2.5 + 4.5, - 2.5 + 4.5)))))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))
    {
     if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
      {
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         barrier();
        }
       if(((((false || (((false || (bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))))) && true)))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((false || (((injectionSwitch.x < injectionSwitch.y)))))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; ((((max(clamp(_injected_loop_counter, _injected_loop_counter, (max(_injected_loop_counter, _injected_loop_counter))), clamp(_injected_loop_counter, _injected_loop_counter, (max(_injected_loop_counter, _injected_loop_counter))))))) ^ 0) != 1; _injected_loop_counter ++)
      {
       if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if(((true) && (! (! (true)))))
              {
               if((! (! (false))))
                {
                 do
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(((! (! ((! (! (false))))))))
                      barrier();
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((((false || (((true && (injectionSwitch.x > injectionSwitch.y))))))))
                    barrier();
                  }
                 while((bool((bvec3(bvec3(bvec3(((((true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))))), true, false)))))));
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
                  barrier();
                 if((true && ((false))))
                  barrier();
                 barrier();
                 if((false))
                  {
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if((((false) || false)))
            barrier();
          }
         if(((! ((! (! (! (false))))))))
          {
           if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((((! (! (((false || ((((vec2(mat4x3(injectionSwitch, (float(vec2(((sin(0.0)) - 0.0), 1.0))), 0.0, 1.0, 0.0, (mix(float((660.079)), float((mix(float(1.0), float((81.68)), bool(false)))), bool(true))), 0.0, 0.0, 1.0, 0.0, 1.0)))) + vec2((float(mat3x2((1.0 * (0.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 1.0))), 0.0)).x > injectionSwitch.y)))))) && true)))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         if(((injectionSwitch.x < (clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) / vec2(1.0, 1.0)))).y)))
          {
           do
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
               if((false))
                barrier();
              }
            }
           while(false);
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); (((bool((bool(bvec2(bool((((! (! (_injected_loop_counter < (~ (~ (1)))))) || false))), false)))))) || false); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((! (! ((false || ((false))))))) || false))
        barrier();
       if((true && (false)))
        {
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     while(false);
     if((((false) || false)))
      barrier();
     if((! (! ((bool(bool((false))))))))
      barrier();
    }
   else
    {
    }
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 do
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while(((false) || false));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   buf[virtual_gid] = uint(subgroupAllEqual(read_val));
  }
 while(false);
 if(((bool(bvec4(false, true, true, true)))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
}
