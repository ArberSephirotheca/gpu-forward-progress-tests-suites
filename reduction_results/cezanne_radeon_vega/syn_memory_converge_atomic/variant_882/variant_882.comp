#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((((((false) || false)) && true) || ((((injectionSwitch.x > (((min((max(injectionSwitch, (min(injectionSwitch, injectionSwitch)))).y, injectionSwitch.y))) * 1.0))) || ((((((! ((true && (! (bool(bvec2(false, ((! (! ((true)))) || false)))))))))) || false)))))) || (! (! ((! ((true && (! (false)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((! (! (false)))))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((max(((injectionSwitch.x) - 0.0), injectionSwitch.x)) > (max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if(((! (! (false)))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((((((uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))) ^ uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize)).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(((((((! (! ((((injectionSwitch.x < injectionSwitch.y)) && ((! (! ((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))) || false))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((((false)) && true)) || false))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(((! (! ((false || (false)))))))
    {
     if((false))
      return;
     if((false || ((((bool(bvec4(true, false, true, false))) && ((! (((injectionSwitch.x > injectionSwitch.y)) || ((! ((bool(bool(false))))))))))))))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (! (false || (((true && (true)) && ((((! (! ((((false)) && true))))) && ((injectionSwitch.x < injectionSwitch.y)))))))))))
    return;
   return;
   if((false))
    return;
  }
 if(((! ((! (! (! (((bool(bool(bool(bvec3((! (! (false))), ((injectionSwitch.x < injectionSwitch.y)), true))))))))))))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
  {
   if((false))
    return;
   return;
  }
 if((! (! ((false)))))
  return;
 uint virtual_gid = (~ (~ (workgroup_base + ((~ (~ (0u | (((0u | ((((subgroup_id) | 0u))))) / (1u | 1u)))))) * subgroup_size))) + (uint(uvec3((~ (~ (((false ? (num_workgroup) : ((subgroup_local_id) >> 0u)))))), 1u, ((((injectionSwitch.x < injectionSwitch.y)) ? (0u + (0u)) : (49973u))))));
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  return;
 (((0u | ((~ (~ (((1u << (uint(5u))) >> (uint(5u)))))))) * (((0u | (buf[virtual_gid] = uint(subgroupAllEqual((((0u ^ ((((((1u << (((uint(7u))) ^ 0u)) >> (((uint(7u)) >> 0u))) * ((((((clamp(((((read_val) / 1u))) | ((read_val)), ((((read_val) / 1u))) | ((read_val)), ((((read_val) / 1u))) | ((read_val))))) - 0u))) ^ 0u))) ^ 0u))) | 0u))))))))) - uint((injectionSwitch.x)));
 if((((false) && (false || ((! (! (! (! ((bool(bvec2((((((((injectionSwitch.x < injectionSwitch.y) || false))) && (false)) || (true))), true)))))))))))))
  {
   if((true && (((((bool(bvec3(((((injectionSwitch.x > injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true, false)))) && true)))))
    {
     if((! (! ((((false) || false))))))
      return;
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
}
