#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((! (true && ((false || ((! (bool(bool(false))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
     if((((! ((bool(bvec2(! ((! (! ((true && ((injectionSwitch.x > injectionSwitch.y))))))), true))))))))
      barrier();
    }
   if((false))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) || (! (! (((true && ((false || (! (! (false))))))))))))))
    {
     if((false))
      return;
     if(((! (! (! (! ((false))))))))
      {
       if((false))
        return;
       barrier();
      }
     if(((false || (false))))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((false))
  {
   if(((bool(bvec4(false, true, false, false)))))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if(((false || ((bool(bvec2(false, false)))))))
  {
   if((false))
    {
     if(((! ((! (! (! (false))))))))
      return;
     return;
    }
   barrier();
  }
 if((true && ((false))))
  return;
 if(((! (! (((false) || false))))))
  barrier();
 if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, ((((false ? (- 632.164) : injectionSwitch.x)) < injectionSwitch.y))))))))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   barrier();
   if((false))
    {
     if(((false || (false))))
      barrier();
     if(((((mix(float(((+ - 2.2))), float((min(injectionSwitch.x, injectionSwitch.x))), bool(true))) > (mix(float((max(injectionSwitch.y, injectionSwitch.y))), float((float(69046u))), bool(((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if((bool(bool((false)))))
        return;
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((false) && true)))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    {
     if(((! (! (false)))))
      return;
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) && true)))
      barrier();
     return;
     if((false))
      return;
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, ((injectionSwitch.x < injectionSwitch.y)))))))))
    return;
   barrier();
  }
 if((false || ((false))))
  return;
 if((false))
  return;
 if((false))
  {
   if(((true && (false))))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if((((false)) && (true && (true))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if(((((! (! ((((false || ((! (! (bool(bvec3((bool(bool(((true && ((! ((false || (! (((bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))))))))), false, true))))))))) && true)))) || false)))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > ((false ? (injectionSwitch) : injectionSwitch)).y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((false || (bool(bool((false || (false)))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
   if((true && ((false))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if(((bool(bvec3(((bool(bvec4((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))), false, true, false)))), false, (! (((! (true)) && true))))))))
          return;
         barrier();
        }
       if((false))
        return;
       if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
        return;
       barrier();
      }
     return;
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if(((bool((false || (bool(false)))))))
  {
   if((false))
    return;
   if((false))
    return;
   barrier();
   if((false || ((bool(bool(((! (! (false))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if((((false || (bool(bool(false)))))))
      return;
    }
  }
 if((false))
  {
   if((false))
    return;
   if(((((((true && (injectionSwitch.x > injectionSwitch.y)) || false))))))
    {
     if(((false || ((! (! (false)))))))
      {
       if((false))
        return;
       barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if(((bool(bvec4(((((false ? (injectionSwitch) : injectionSwitch)).x > (mix(float((clamp((48.49), (48.49), (48.49)))), float(injectionSwitch.y), bool(true))))), true, true, false)))))
    {
     if(((bool((! ((false || (! (bool(false))))))))))
      barrier();
     if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
      return;
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if(((! (! (((! (! (((true) || false)))) && (((((injectionSwitch.x > injectionSwitch.y) && true))))))))))
    {
     if((false))
      return;
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if(((((! (! (injectionSwitch.x > ((false ? (abs(vec2(- 0.8, 2.4))) : injectionSwitch)).y)))))))
    barrier();
   if((false))
    return;
   if((false))
    return;
   barrier();
   if((false))
    return;
  }
 if((false))
  {
   if(((((bool(bvec2(false, false)))) && true)))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
      return;
     barrier();
    }
   if((((true && (bool((bvec2((bvec3(bvec3(bvec3(bvec2(false, false), true))))))))))))
    return;
   barrier();
  }
 uint workgroup_id = (uvec3(uvec3((uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[(((~ (~ (2)))) << (0 ^ 0))]))))).x;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((false || (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((true && (((false) || false)))))
  {
   if(((true && ((! (! (false)))))))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((bool(bvec4((false), false, true, true))))
  {
   if((false))
    return;
   barrier();
  }
 if((((((false)) && true)) && true))
  {
   if((false))
    return;
   if((((bool(bvec2((false) && true, false))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((((! (! (bool(bvec4(((! (! (false)))), false, true, true)))))) || false)))
      {
       if(((((min(injectionSwitch.x, (float(((mat4x2(injectionSwitch.x, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0)) * mat4(1.0)))))) > injectionSwitch.y))))
        return;
       if((false))
        return;
       if(((((mix(vec2((- 47.35), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((154.646 - 5.9))), bvec2(true, false))).x > injectionSwitch.y))))
        return;
       if(((((bool(bvec2(false, false)))) || false)))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((! (! ((false)))))
          return;
         barrier();
        }
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if(((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > ((true ? injectionSwitch : (vec2(8.4, - 460.769)))).y))))
    return;
   barrier();
  }
 if((((((injectionSwitch) - log(vec2((max(1.0, (mix(float(1.0), float((9.3)), bool(false))))), 1.0))).x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((bool(bvec2((((false)) && true), ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = (((((uint(uvec3((uint(uvec3((max(workgroup_size, ((workgroup_size) + 0u))), 1u, 0u))), 1u, 0u))) / ((1u) - 0u)))) >> 0u) * workgroup_id;
 uint virtual_gid = ((((workgroup_base + ((clamp(((max(((subgroup_id) ^ 0u), (0u + ((~ (~ ((clamp(subgroup_id, subgroup_id, subgroup_id)))))))))), ((max(((subgroup_id) ^ 0u), subgroup_id))), ((1u * ((max(((subgroup_id) ^ 0u), subgroup_id))))))) << 0u) * subgroup_size + subgroup_local_id) >> 0u) | (((((((1u * (workgroup_base + (max(((subgroup_id) ^ ((true ? 0u : (workgroup_id)))), subgroup_id)) * subgroup_size)) + subgroup_local_id) >> 0u) / 1u)) ^ 0u))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((true && ((((! (! ((((true && ((false)))) && ((injectionSwitch.x < injectionSwitch.y)))))))) && true)))
  return;
 if((false))
  return;
 atomicStore(write_val, ((uint(virtual_gid)) / 1u), (1 * ((int(int((((~ (~ (4)))) - 0)))))), (max(64, (clamp(64, 64, 64)))), 0);
 if((false))
  barrier();
 if(((bool(bool(false)))))
  return;
 if((false))
  return;
 if((bool(bvec3((false), false, true))))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((((bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(((true && (((((! (! (((! ((! (! (! (((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))))))))))) && true) || false)))))
    {
     if((((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))) && true)))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if(((((mix(float((- 9.4)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((! (! (false)))))
        return;
       barrier();
       if((false))
        return;
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      {
       if(((((bool(bvec4((bool(bool((bool(bvec3(false, false, true)))))), true, false, false)))) || false)))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if(((! (! (false)))))
    return;
   if((false))
    {
     if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(((false || (true && (((bool(bool((! (! ((! (! (true && ((((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((((((! (! ((bool(bvec4(false, false, false, true))))))) || false)) && true)))
  return;
 if((false))
  barrier();
 if((! (! ((false || (((((((bool(bvec4(false, true, false, false))))) && true)) && true)))))))
  {
   if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (- 6442.7707) : (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
    {
     if((((false)) && true))
      return;
     if((true && ((true && ((false))))))
      {
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        return;
       return;
       if((false))
        barrier();
       if((false))
        return;
      }
     return;
    }
   if((false))
    barrier();
   if((true && ((false))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((false || ((false))))
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if(((((((! (! (((false ? (vec2(810.720, 9.7)) : injectionSwitch)).x > injectionSwitch.y))) || false))))))
      {
       if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
    }
  }
 if((false))
  return;
 if(((bool((bool(bool((! (! (bool((! (! ((false || (false))))))))))))))))
  {
   if((((false)) && true))
    {
     if((false))
      {
       if((false))
        return;
       if((((false || (((true && (false))) || false)))))
        return;
       return;
      }
     if((false))
      return;
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec4(false, true, false, true)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(((true && (false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) && (((bool(bvec3(bool(bvec2(false || (true), true)), true, false))))))))
      return;
     barrier();
    }
  }
 uint read_val = atomicLoad(((write_val) | (write_val)), 4, 64, 0);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   barrier();
   if(((false || ((! (! (false)))))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = ((uint(subgroupAllEqual(read_val))) * ((1u) | ((uint((uvec3(uvec3(uvec3(1u, 0u, 0u)))))))));
 if(((! (! (false)))))
  barrier();
 if((false))
  return;
 if((((((false ? (- 2.2) : injectionSwitch.x)) > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
}
