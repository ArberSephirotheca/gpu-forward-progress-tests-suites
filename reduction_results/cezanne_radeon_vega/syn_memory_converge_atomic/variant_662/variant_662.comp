#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (~ (~ (((max((max(~ (~ (gl_WorkGroupID)), (max((uvec3(uvec3(~ (~ (gl_WorkGroupID))))), (uvec3(uvec3((clamp(~ (~ (gl_WorkGroupID)), ((~ (~ (gl_WorkGroupID))) - uvec3(0u, 0u, 0u)), ~ (~ (gl_WorkGroupID))))))))))), ~ (~ (gl_WorkGroupID)))))))).x;
 uint workgroup_base = ((((((((((((max(min((max((~ (~ ((min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))))), workgroup_size * (clamp(workgroup_id, (~ ((min(~ (workgroup_id), (0u ^ (~ (workgroup_id))))))), ((workgroup_id) | ((0u | (workgroup_id)))))))), workgroup_size * workgroup_id), min((max((min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), (((max(workgroup_size, workgroup_size))) << 0u) * (clamp(workgroup_id, (~ (((~ (workgroup_id)) | (~ (workgroup_id))))), ((workgroup_id) | ((0u | (uint(uint((((workgroup_id)) | ((workgroup_id))))))))))))), workgroup_size * workgroup_id)))) | (min((max((min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), workgroup_size * (clamp(workgroup_id, (~ ((clamp((((1u ^ 0u) << (uint(6u))) >> ((0u | (uint(6u))))) * ((~ (workgroup_id))), (((1u ^ 0u) << (uint(6u))) >> ((0u | (uint(6u))))) * ((~ (workgroup_id))), (((((1u ^ 0u) << (uint(6u))) >> ((0u | (uint(6u))))) * ((~ (workgroup_id)))) + (0u >> (uint(1u)))))))), ((((0u ^ ((workgroup_id)))) | 0u) | ((0u | (workgroup_id)))))))), workgroup_size * workgroup_id)))) | ((((max(min((max((~ (~ ((min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))))), workgroup_size * (clamp(workgroup_id, (~ ((min(~ (workgroup_id), (0u ^ (~ (workgroup_id))))))), ((workgroup_id) | ((0u | (workgroup_id)))))))), workgroup_size * workgroup_id), min((max((min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), workgroup_size * (clamp(workgroup_id, (~ (~ (workgroup_id))), (((min((((0u ^ (workgroup_id))) / 1u), workgroup_id))) | ((0u | (uint(uint((((workgroup_id)) | ((workgroup_id))))))))))))), workgroup_size * workgroup_id)))) | (min((max((min(workgroup_size * workgroup_id, (~ (~ (((workgroup_size) | 0u)))) * workgroup_id)), workgroup_size * (clamp(workgroup_id, (~ ((((((((1u * ((1u ^ 0u))) << (uint((0u | (6u)))))) | (((1u * ((1u ^ 0u))) << (uint((0u | (6u)))))))) << uint((injectionSwitch.x))) >> ((0u | (uint(6u))))) * ((~ (workgroup_id))))), ((((0u ^ ((workgroup_id)))) | 0u) | ((0u | (workgroup_id)))))))), workgroup_size * workgroup_id)))))) << 0u)) ^ 0u))) / 1u);
 uint virtual_gid = (clamp(workgroup_base + ((true ? subgroup_id * subgroup_size : (num_workgroup))), workgroup_base + ((true ? subgroup_id * subgroup_size : (num_workgroup))), workgroup_base + ((true ? subgroup_id * subgroup_size : (num_workgroup))))) + ((subgroup_local_id) << 0u);
 atomicStore(write_val, ((0u << (uint(6u))) | (uint(virtual_gid))), ((((4) | (4))) | (4)), (((max(64, 64)) | (max(64, 64)))), 0);
 if((false || (((true && (((bool(bvec2(((bool(bvec2(false, true)))) || false, true))))))))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = ((uint(subgroupAllEqual((min((uint(uvec2(((((~ (((true ? (((min(~ ((~ (~ (uint(((uint((((0u | (read_val))) | (read_val)))) / 1u)))))), ~ ((false ? (subgroup_size) : ((~ (~ (uint(((uint((((0u | (read_val))) | (read_val)))) / 1u))))))))))) + 0u) : (num_workgroup))))))) + (0u >> (uint(0u)))), 1u))), (~ ((~ ((clamp(~ ((max(((((~ (read_val)) | (~ ((clamp(read_val, ((false ? (workgroup_size) : read_val)), read_val)))))) / 1u), ~ (read_val)))), ~ ((max(((((~ (read_val)) | (~ ((clamp(read_val, ((false ? (workgroup_size) : read_val)), read_val)))))) / 1u), ~ (read_val)))), ~ ((max(((((~ (read_val)) | (~ ((clamp(read_val, ((false ? (workgroup_size) : read_val)), read_val)))))) / 1u), ~ (read_val))))))))))))))) / 1u);
}
