#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((((((((~ ((clamp(~ (((~ (~ (((((((1u) >> 0u) * (gl_WorkGroupSize.x))) / 1u)) + 0u)))) ^ 0u), ~ (((~ (~ (((((((1u) >> 0u) * (gl_WorkGroupSize.x))) / 1u)) + 0u)))) ^ 0u), ~ (((~ (~ (((((((1u) >> 0u) * (gl_WorkGroupSize.x))) / 1u)) + 0u)))) ^ 0u)))))) / ((((1u << (uint(0u))) >> (uint(0u))) << (uint(5u))) >> ((0u + (uint(5u))))))))) - 0u) - (max(0u, 0u))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (~ ((min(~ (workgroup_size * workgroup_id), (((((clamp(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) ? ~ (workgroup_size * workgroup_id) : ((workgroup_size ++))))))));
 uint virtual_gid = ((52720u & 0u) + (workgroup_base + (((0u ^ ((~ (~ (subgroup_id))) * subgroup_size))) - 0u))) + (((uint(uvec4(subgroup_local_id, 1u, 1u, 1u)))) ^ 0u);
 atomicStore(write_val, uint(virtual_gid), 4, (max(64, 64)), (max((((((((((0 | (0)) + 0))) << (0 >> (int(4)))))) ^ 0) * (int(ivec4((max(1, 1)), (1 ^ 0), 1, 0)))), (((((1 * (((max(((((0 | 0) + (((0 | (0)) + 0)))) | 0), ((((0 | (0)) | (0 << (int(4))))) + 0)))))))) - 0) << (0 >> (int(4)))))));
 uint read_val = atomicLoad(((min((write_val) - 0u, (((write_val)) ^ (((1u) * 1u) ^ 1u)) - 0u))), 4, 64, 0);
 ((((buf[virtual_gid] = uint(subgroupAllEqual(read_val)))) | 0u) * 1u);
}
