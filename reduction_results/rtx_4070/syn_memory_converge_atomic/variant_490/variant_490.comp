#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(true)
  {
   if((false))
    {
     if((! (! (false))))
      {
      }
     else
      {
       return;
      }
    }
   if(true)
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = ((1 | 1) & 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((false))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if(((! (! (false)))))
    break;
  }
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(false);
      }
    }
   if((false))
    barrier();
  }
 else
  {
   if((((bool(bool(bool(bool(false))))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if(true)
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if(false)
          {
           if((false))
            continue;
          }
         else
          {
           if((false))
            return;
          }
         return;
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               return;
              }
             if((false))
              return;
            }
           else
            {
            }
          }
        }
       while(false);
      }
     do
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != ((0 << (int(3))) & 29685); _injected_loop_counter --)
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          break;
         barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(false);
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((((false) || false)))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
  }
 for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter < ((((1 << (int(6))) >> ((min(int(6), int(6))))) << (int(2))) >> (((int(2)) | (int(2))))); _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       do
        {
         do
          {
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             barrier();
            }
          }
         while(false);
        }
       while(false);
       if(true)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        {
         for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
          }
        }
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((false) && true)))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          continue;
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != ((37637 & 0) | 0); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                return;
              }
             if(((true) && true))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             do
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             while(false);
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((((int((injectionSwitch.y)) << ((~ (~ (int(2)))))) >> (((int(2)) * 1))) << (int(6))) >> (int(6))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         do
          {
           if(((true && (false))))
            barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if(true)
                {
                 barrier();
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if(false)
              {
               if((false))
                return;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ (0 & - 98981)); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if((((false) || false)))
          {
           if((false))
            barrier();
           continue;
          }
         if((false))
          return;
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
       if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
        return;
       if((false))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(false);
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((false))
          barrier();
         barrier();
        }
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        barrier();
       break;
      }
     if((false))
      break;
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if((((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))
              barrier();
             return;
            }
          }
        }
      }
    }
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   if(true)
    {
     if((((false) && true)))
      {
       if(true)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(true)
            {
             do
              {
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             barrier();
             for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((false) || false)))
            barrier();
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         if(((true && (false))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           barrier();
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           continue;
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 while(false);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      {
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(((false || (false))))
        return;
       barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   while(false);
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     do
      {
       if(true)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     while(false);
     if((false))
      barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((false || (false))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((false))
            return;
          }
         else
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     if((false))
      barrier();
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   do
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (((0 >> (int(5))) | 0) ^ 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(false);
  }
 if(((! (! (false)))))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(true)
  {
   do
    {
     atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = ((1 << (int(4))) >> (((int(4)) / 1))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((false) && true)))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   do
    {
     if(true)
      {
       if((false))
        {
         for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        return;
      }
     else
      {
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(true)
      {
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
        {
         if((false))
          {
           if(true)
            {
             if((false))
              return;
            }
           else
            {
            }
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
      }
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (int((injectionSwitch.y)) | 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((! (! (false)))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           do
            {
             if((false))
              barrier();
             barrier();
            }
           while(false);
          }
         else
          {
          }
        }
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((((1 << (int(7))) >> ((max(int(7), int(7)))))) | 0); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   while(false);
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((((injectionSwitch.x > injectionSwitch.y))) && true))
        {
        }
       else
        {
         barrier();
        }
       if((false))
        continue;
      }
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     if((false))
      barrier();
     if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (((1 ^ (0 << (int(3)))) << (int(4))) >> (int(4))); _injected_loop_counter > (0 << ((min(int(0), int(0))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> ((1 * ((~ (~ (int(0)))))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if((false))
      barrier();
     return;
    }
  }
 else
  {
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
          }
        }
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 return;
                }
              }
             while(false);
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
          }
         else
          {
          }
         if(false)
          {
          }
         else
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
         if((false))
          continue;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            continue;
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
          }
        }
       if((false))
        break;
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     for(int _injected_loop_counter = ((int((injectionSwitch.x)) >> (int(4))) | (- 29251 & 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if((false))
      return;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((! ((true && (! (((injectionSwitch.x < injectionSwitch.y))))))))
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       barrier();
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(true)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
             if((false))
              barrier();
             if(true)
              {
               if(((! (! ((true && (((injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(((false || (false))))
                  {
                   if(true)
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    {
                     do
                      {
                       return;
                      }
                     while(false);
                    }
                   barrier();
                  }
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   if((false))
                    {
                     if(((false) || false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 barrier();
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 if((false))
                  return;
                }
               else
                {
                }
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(false);
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
               barrier();
              }
             if((false))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               return;
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = (0 & 74259); _injected_loop_counter < ((false ? (- 49425) : 1)); _injected_loop_counter ++)
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = ((0 >> (int(1))) >> (int(3))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((false) || false)))
            barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       buf[virtual_gid] = uint(subgroupAllEqual(read_val));
      }
     if((false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(true)
          {
           if((false))
            barrier();
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(false);
          }
         else
          {
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((true && (false))))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
             if((false))
              barrier();
            }
          }
        }
       do
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             barrier();
             do
              {
               if((false))
                return;
              }
             while(false);
            }
           while(false);
          }
         if(((true && (false))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           break;
          }
        }
       while(false);
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             for(int _injected_loop_counter = (clamp((0 >> (int(2))), (0 >> (int(2))), (0 >> (int(2))))); _injected_loop_counter < ((int((injectionSwitch.y)) << (int(5))) >> ((int(ivec4(int(5), 0, 0, 1))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       while(false);
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 & 44537); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (false))))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             continue;
            }
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
          }
        }
       barrier();
      }
    }
   else
    {
     do
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
      }
     while(false);
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       for(int _injected_loop_counter = ((1 << (((int(1)) >> 0))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(true)
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
     if(true)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           do
            {
             if((((false) && true)))
              {
               for(int _injected_loop_counter = (max(1, 1)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(false);
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if(((false || (false))))
                barrier();
               barrier();
               if((((false) || false)))
                barrier();
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (((int(7)) | (int(7))))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
            }
           do
            {
             if((((false) || false)))
              {
               if((false))
                return;
               return;
              }
            }
           while(false);
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 51040); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   if((false))
                    continue;
                  }
                }
               if((false))
                barrier();
               if(true)
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(false);
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(true)
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                     break;
                    }
                  }
                 if(false)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     barrier();
                    }
                  }
                 else
                  {
                   if(true)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if((false))
                      barrier();
                     if((false))
                      break;
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                        }
                       if((false))
                        barrier();
                       if(true)
                        {
                         do
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         while(false);
                        }
                       else
                        {
                        }
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   do
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   while((bool((bvec3(bvec3(bvec3(false, true, true)))))));
                   if(false)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         return;
                        }
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             barrier();
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         break;
                        }
                       if((false))
                        barrier();
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       do
                        {
                         if(true)
                          {
                           do
                            {
                             barrier();
                            }
                           while(false);
                          }
                         else
                          {
                          }
                        }
                       while(false);
                       if((false))
                        break;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     if((false))
                      {
                       if((false))
                        continue;
                       break;
                       if((false))
                        barrier();
                      }
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         if((false))
                          return;
                         if(((true) || false))
                          {
                           return;
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(((! (! (false)))))
                          return;
                        }
                      }
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                        {
                         if(true)
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                         if((false))
                          {
                           if(((! (! ((! (! (false))))))))
                            barrier();
                           barrier();
                          }
                        }
                      }
                    }
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if((false))
                return;
               if((false))
                {
                 if((false))
                  barrier();
                 break;
                }
              }
            }
           else
            {
            }
           if((false))
            return;
           if((false))
            return;
          }
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     for(int _injected_loop_counter = (((1 | 1) << (int(3))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
     if((false))
      barrier();
    }
   if(true)
    {
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = ((0 >> (int(4))) << ((int((injectionSwitch.y)) * (int(2))))); _injected_loop_counter != (clamp((1 | 1), (1 | 1), (1 | 1))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (((1 & 1) << (((int(1)) / 1))) >> ((0 | (int(1))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ int((injectionSwitch.x))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((((false) && true)))
                    barrier();
                  }
                 barrier();
                }
              }
             for(int _injected_loop_counter = ((true ? ((false ? (_injected_loop_counter) : (0 ^ int((injectionSwitch.y))))) : (_injected_loop_counter))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(((bool(bvec4(false, false, false, false)))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if((false))
                        barrier();
                      }
                    }
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                    {
                     if((false))
                      break;
                     for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ (0 & - 16963)); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        barrier();
                      }
                     if((false))
                      continue;
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
             if(true)
              {
               barrier();
               if((false))
                {
                 if(((true && (false))))
                  {
                   if((false))
                    barrier();
                   continue;
                  }
                 if((false))
                  barrier();
                 do
                  {
                   if((((((false) && true)) || false)))
                    {
                     if((false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     continue;
                    }
                   barrier();
                  }
                 while(false);
                 if((false))
                  {
                   if((((false) || false)))
                    barrier();
                   barrier();
                   if((false))
                    continue;
                  }
                 if((false))
                  barrier();
                 if((false))
                  continue;
                }
               do
                {
                 if(((true && (false))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       continue;
                      }
                     barrier();
                    }
                  }
                 if((false))
                  break;
                 barrier();
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 do
                  {
                   for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       barrier();
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         do
                          {
                           do
                            {
                             barrier();
                            }
                           while(false);
                           if((false))
                            {
                             for(int _injected_loop_counter = ((0) << 0); _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                         if((false))
                          barrier();
                        }
                       if((false))
                        break;
                       barrier();
                      }
                     if((false))
                      continue;
                     if((false))
                      barrier();
                    }
                  }
                 while(false);
                }
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if(((true) || false))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               do
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     barrier();
                     if((false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                    }
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                  }
                }
               while(false);
              }
             if(true)
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = ((0 >> (int(7))) | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                      }
                     barrier();
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(true)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
               if((false))
                return;
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (((false ? (11894) : ((int(3)) - 0))))); _injected_loop_counter --)
              {
               do
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((false))
                        return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       barrier();
                       if((false))
                        barrier();
                      }
                     while(false);
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(true)
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(false);
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  continue;
                 if((false))
                  {
                   if(true)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((((false) || false)))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                  }
                }
               if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                continue;
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (41620 & int((injectionSwitch.x))); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ ((0 & 44870) | 1)); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(((true && (false))))
                    barrier();
                  }
                 else
                  {
                  }
                 return;
                }
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                   continue;
                  }
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     continue;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if(((true && (false))))
                  barrier();
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                barrier();
              }
            }
          }
         if(true)
          {
           if((false))
            continue;
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((((false) || false)))
      barrier();
    }
  }
 do
  {
   do
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
       if(((true && (false))))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(false);
 if((false))
  barrier();
 if((false))
  {
   do
    {
     if(true)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
