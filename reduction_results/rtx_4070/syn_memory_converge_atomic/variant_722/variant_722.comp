#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((((! (! (bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  return;
 if((false))
  {
   if(((true && (false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if(((((! (! (injectionSwitch.x > (clamp((clamp((vec2(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), injectionSwitch, injectionSwitch)).y, (clamp((vec2(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), injectionSwitch, injectionSwitch)).y, (clamp((vec2(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), injectionSwitch, injectionSwitch)).y)))))))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((false))
    {
     if((! (! ((bool(bvec2((false), false)))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((! (! ((bool(bvec3(((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))), true, (! ((true && (! (false)))))))))))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
    }
   return;
   if(((bool((bvec2(bvec4(bvec2(((injectionSwitch.x > injectionSwitch.y)), ((((false ? (vec4(- 5.5, 891.029, 831.872, - 844.883).ts) : injectionSwitch)).x > injectionSwitch.y))), true, true)))))))
    {
     if(((! (! (false)))))
      return;
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((((injectionSwitch.x > (clamp((min((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y)), (((true ? float(mat4((float(mat4x2((min(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0, 0.0, (0.0 + (0.0)), (mix(float(1.0), float((float(true))), bool(false))), 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)) : ((false ? (- 1.0) : (- 388.015)))))), (min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(((((false || (((injectionSwitch.x > injectionSwitch.y))))) && true)))
    {
     if((false))
      {
       if((((false) && true)))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
   if(((bool(bvec3(false, false, true)))))
    barrier();
   if(((false || (false))))
    {
     if((false))
      {
       if((bool(bool((false)))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if(((! ((! (! (! (false))))))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((false) || false)))
        {
         if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
          return;
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       return;
      }
     return;
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if(((((mix(vec2((754.153), (- 1883.4329)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > ((injectionSwitch.y) + length(vec4(0.0, 0.0, 0.0, 0.0)))))))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if(((! (! (false)))))
      return;
     barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
    }
   if((false))
    return;
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   return;
   if(((true && ((! (! ((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > (clamp(injectionSwitch, ((injectionSwitch) * mat2(1.0)), injectionSwitch)).y)))))))))))
    return;
  }
 if(((! (! ((! (! ((bool(bool(((injectionSwitch.x > (float(vec2(injectionSwitch.y, 0.0))))))))))))))))
  return;
 if((false))
  return;
 if(((((! (! ((mix(float(((injectionSwitch) / vec2(1.0, 1.0)).x), float((- 406.262)), (! ((bool(bool(! ((bool(bvec4(bool(false), true, true, false))))))))))) > (clamp(injectionSwitch, injectionSwitch, (min(injectionSwitch, injectionSwitch)))).y)))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(((! (! (false)))))
    return;
   if((false))
    return;
   barrier();
   if((((false) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((bool(bool((bool(bool((((false)) && true))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((false || (false))))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if(((((! (! (false)))) && true)))
  return;
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   return;
   if((false))
    return;
  }
 if((((((((bool(bvec2(bool(bvec4((((bool(bvec4((bool(((bool((! ((bool(bvec4((true && (! (bool((bvec3(bvec3(bvec3((! (! (false || ((mix(vec2((injectionSwitch)[0], (- 6149.4167)), vec2((- 99.60), (injectionSwitch)[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)), (true && (false)))))))))), true, (true && ((! (! (((injectionSwitch.x < injectionSwitch.y))))))), true))))))) && true))), true, false, false)))) && true), false, false, true)), false))))))))))
  {
   if((false))
    barrier();
   if(((((bool(bvec3((false || (((false) || false))), false, true)))) || ((injectionSwitch.x > injectionSwitch.y)))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if(((((max(injectionSwitch, injectionSwitch)).x > (min(injectionSwitch, injectionSwitch)).y))))
      {
       if((false))
        return;
       return;
      }
     return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if(((! (! ((bool(bvec3(false, false, true))))))))
  return;
 uint workgroup_id = (((((max(gl_WorkGroupID, gl_WorkGroupID)).x) - 0u)) << 0u);
 if((false))
  barrier();
 if((false))
  {
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > (max((((mix(float((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float((8.5)), bool(false)))) - abs(0.0)), injectionSwitch.y))))))
  {
   if((((false)) || false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((mix(float((- 3.5)), float((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
   if((false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(((! ((false || (! (false)))))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if(((! (! (false)))))
      return;
     barrier();
    }
   barrier();
  }
 uint virtual_gid = ((false ? (subgroup_size) : (~ (~ (workgroup_base + ((((clamp(~ (~ (((min(uint((injectionSwitch.x)), uint((injectionSwitch.x)))) | (subgroup_id)))), ~ (~ (((min(uint((injectionSwitch.x)), uint((injectionSwitch.x)))) | (subgroup_id)))), ~ (~ (((min(uint((injectionSwitch.x)), uint((injectionSwitch.x)))) | (subgroup_id))))))) | ((uint((injectionSwitch.y)) * (~ (~ (((((min(uint((injectionSwitch.x)), uint((injectionSwitch.x)))) | (subgroup_id)) | ((((min(uint((injectionSwitch.x)), uint((injectionSwitch.x)))) | (subgroup_id)) - 0u))))))))))) * subgroup_size))))) + subgroup_local_id;
 if((((((bool(bvec4(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))), false, true, true))))) && true)))
  return;
 if((false))
  return;
 atomicStore(write_val, uint(((((((((virtual_gid) ^ 0u)) | (((max((virtual_gid), (virtual_gid)))) << 0u))) - 0u) << 0u))), 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((true && (false))))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
  }
 uint read_val = atomicLoad((uint(uint(write_val))), 4, ((0 | 0) ^ (((false ? (- 64654) : ((((((64)) << 0)) ^ (1 ^ 1)) >> 0))))), ((((((((0) << 0) << 0)) / 1))) << 0));
 if(((((((((! (! (((bool((true && (bool(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, ((injectionSwitch.x < injectionSwitch.y)))))) && true) && true))))))))))) || ((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))))))
  {
   if((false))
    return;
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((true && (false))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(((true && (((((injectionSwitch.x > injectionSwitch.y))) || false)))))
        {
         if((false))
          return;
         return;
        }
       barrier();
      }
     barrier();
    }
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    return;
   if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
