#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x > (vec2((mat2((clamp(0.0, ((0.0) / 1.0), 0.0)), 0.0, 0.0, 0.0) + (mat2(injectionSwitch, (injectionSwitch.y), 0.0))))).y))))))
      {
       if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((((((true && (bool(((bool((injectionSwitch.x > injectionSwitch.y))) && true)))))))) && ((injectionSwitch.x < injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((injectionSwitch.x > ((injectionSwitch.y) + 0.0))) || false))))
  barrier();
 if((false))
  {
   if((((((bool(bvec3((false || (((((vec2(((false ? (mat4x3(8.0, - 5.8, 5.6, 3491.3086, - 82.09, - 4.3, 97.04, 27.65, 6822.8826, - 0.0, - 1.7, - 90.38)) : mat4x3((((max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), log(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, (min(0.0, 0.0)), 0.0, 1.0))), (max(0.0, 0.0)), 1.0, 1.0))))).x > (float((mat4(1.0) * (mat3x4((max(((clamp(((vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), ((vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), ((vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)))), (vec2(injectionSwitch[0], injectionSwitch[1])))).y, abs(0.0), (max(((0.0) / 1.0), 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0)))))))))) && true, false, false)))) && true))))
    barrier();
   barrier();
  }
 if((((false)) && true))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))) || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = (clamp((max(gl_WorkGroupID, (~ (~ (gl_WorkGroupID))))).x, (uint(((uvec3(gl_WorkGroupID.x, 1u, 1u)) | (uvec3(gl_WorkGroupID.x, 1u, 1u))))), gl_WorkGroupID.x));
 if((false))
  barrier();
 if((((true && (bool(bvec4(false, true, true, false)))))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((true && ((((max(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((! (((bool(bvec4(bool(bvec4(! (false), false, true, true)), true, true, true))))))))
    barrier();
  }
 if((false))
  barrier();
 if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint virtual_gid = workgroup_base + (clamp(subgroup_id, (~ ((1u * (~ (subgroup_id))))), (~ (~ (uint((clamp(uvec3((((subgroup_id)) ^ 0u), 1u, uint((injectionSwitch.x))), uvec3((((subgroup_id)) ^ 0u), 1u, uint((injectionSwitch.x))), uvec3((((subgroup_id)) ^ 0u), 1u, uint((injectionSwitch.x))))))))))) * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((false || (((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))
  barrier();
 if((true && (((bool((bvec3(bvec4((bvec3(((bvec3(bvec4((bvec3(bvec3((((bvec3(bvec3(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(bvec3(bvec3(bvec3((((bvec3(bvec4(bvec3(bvec4(bvec3((bvec3(bvec4((bvec3(bvec4(bvec3((bvec3(bvec3(bvec3((! (! (false))), true, true))))), false))), true)))), false)), true))))))))))))))))))))))), ((injectionSwitch.x > injectionSwitch.y)))))))), true)))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((! (! ((((! ((bool(bvec4((! (! (! ((! (((! ((true && ((false))))) && true))))))), ((injectionSwitch.x > injectionSwitch.y)), true, false)))))) || ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((((false) || false)))
    barrier();
   if(((((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) || false))))))
    barrier();
  }
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(((! (! (false)))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if(((((! ((false || (! (false || ((false))))))))) || false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, (1 * (0)));
 if(((bool(bvec3(false, false, true)))))
  {
   if((bool((bvec2(bvec4(bvec2((false), false), true, false))))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((! (! ((false)))))
  barrier();
 if((false))
  barrier();
 if(((bool(bool(false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bool((! (true && ((true && (((! (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))))))
  barrier();
 if((false))
  barrier();
 if(((((((true && (((false ? (injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))) || false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = ((uint(subgroupAllEqual(read_val))) + (min((0u | (0u)), (0u | (0u)))));
 for(int _injected_loop_counter = (int((((injectionSwitch) * mat2(1.0)).x)) & 43587); (bool(bvec4(_injected_loop_counter != (((((((min(int((max(ivec4(1, (0 + (1)), 1, (((0) | (0)) << ((~ (~ (int(0))))))), (~ (~ (ivec4(1, (0 + (1)), 1, ((max(0 << ((~ (~ (int(0))))), ((0 | 0) | (((0 << ((~ (~ (int(0)))))) | ((clamp((0 + (0 << ((~ (~ (int(0))))))), 0 << ((~ (~ (int(0))))), 0 << ((~ (~ (int(0))))))))))))))))))))), int((max(ivec4(1, (0 + (1)), 1, (0 << ((~ (~ (int(0))))))), ivec4(1, (0 + (1)), 1, ((max(0 << ((~ (~ (int(0))))), 0 << ((~ (~ (~ ((0 | (~ ((((((int(0))) * 1)) ^ 0))))))))))))))))))) ^ 0)) ^ 0)) * 1), false, ((! (! ((injectionSwitch.x < ((injectionSwitch) - vec2(0.0, 0.0)).y))))), false))); _injected_loop_counter ++)
  {
   if(((! (! ((bool(bvec2(false, true))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
  }
 if(((((bool(bvec2(bool(bvec2((bool(bvec4((false) && true, true, false, false))), false)), true)))))))
  barrier();
}
