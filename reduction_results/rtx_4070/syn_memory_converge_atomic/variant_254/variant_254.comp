#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((bool(bool(false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (((min(((workgroup_size) | (workgroup_size)), workgroup_size)) * (clamp(workgroup_id, ((workgroup_id) << (0u >> (uint((uint(uvec2(6u, 1u))))))), workgroup_id))) / ((true ? ((1u) | (1u)) : ((+ subgroup_id)))));
 if((((((! (((! (! (! (((true && (bool(bvec2((((! (! ((((((bool(bvec3((bool(bvec3((! (! (((bool(bvec4((true && (((mix(float((4.5)), float((mix(float((max((min(injectionSwitch.x, injectionSwitch.x)), (((min(injectionSwitch.x, injectionSwitch.x))) + 0.0)))), float((7.5)), bool(((injectionSwitch.x > injectionSwitch.y)))))), bool(true))) > injectionSwitch.y))), (((bool(bvec2((bool(bvec2((((((vec2(injectionSwitch[0], injectionSwitch[1]))) * sqrt(vec2(1.0, 1.0)))) / vec2(1.0, 1.0)).x < injectionSwitch.y, true))), false))))), false, (bool(bvec4(true, false, true, true))))))) || false))), false, true))), true, true))) || false))))))) && true) && true), true))))))))) && true))))))))
  barrier();
 uint virtual_gid = ((uint(uvec4(~ (~ (workgroup_base)), uint((injectionSwitch.x)), 1u, (1u | 1u))))) + (~ ((max((~ (~ (((((~ (((true ? (min(((subgroup_id) >> 0u), subgroup_id)) : (workgroup_base))))) / 1u)) - 0u)))), (~ (~ (((((~ (((true ? (min(((subgroup_id) >> 0u), subgroup_id)) : (workgroup_base))))) / 1u)) - 0u)))))))) * subgroup_size + ((true ? (~ (~ (subgroup_local_id))) : (subgroup_id)));
 if(((! (! ((true && (((injectionSwitch.x < ((((clamp((clamp(((min((clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))), injectionSwitch))), ((min(injectionSwitch, injectionSwitch))), ((min(injectionSwitch, injectionSwitch))))), ((((min(injectionSwitch, injectionSwitch))) * mat2(1.0))), ((min(injectionSwitch, injectionSwitch))))) * mat2(((1.0) - sin(0.0))))) - vec2(0.0, 0.0)).y)) && (true && (((false)))))))))))
  barrier();
 atomicStore(write_val, (uint(uint(((((true ? uint(virtual_gid) : (119074u)))) >> 0u)))), 4, 64, (clamp(0, 0, 0)));
 uint read_val = atomicLoad(((write_val) / 1u), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual((((clamp(read_val, read_val, read_val))) | ((((~ (~ (clamp(((((((true ? (read_val) : (subgroup_size)))) | 0u)) * 1u), (max(((true ? (read_val) : (subgroup_size))), ((true ? (read_val) : (subgroup_size))))), ((true ? (read_val) : (subgroup_size))))))) ^ 0u))))));
}
