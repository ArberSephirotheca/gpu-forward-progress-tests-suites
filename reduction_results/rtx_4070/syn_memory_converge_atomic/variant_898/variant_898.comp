#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((((true ? ((((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)).x : (subgroup_id)))) | 0u);
 uint workgroup_id = (max((uvec3(0u, 0u, ((((0u) | 0u)) | 0u)) + (((gl_WorkGroupID) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, ((((0u) | 0u)) | 0u)) + (((gl_WorkGroupID) / uvec3(1u, 1u, 1u)))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (((~ ((uint(uint(~ ((((~ ((~ (min((~ (~ (((((false ? (uint(uvec2((((subgroup_size) | ((~ (~ (subgroup_size)))))), 1u))) : workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) ^ (~ (~ (((((max(uint(uvec3((min(0u, 0u)), 0u, (((clamp((uint((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u, 0u, 1u, 1u))))), (uint(uvec4(1u, 0u, 1u, 1u))), (uint(uvec4(1u, 0u, 1u, 1u)))))) << 0u))), uint(uvec3((0u ^ ((((clamp(0u, 0u, 0u)) | (min(0u, 0u)))))), 0u, (uint(uvec4(1u, 0u, 1u, 1u)))))))) << uint((injectionSwitch.x))))))))))), (~ (~ (((((false ? (uint(uvec2((((subgroup_size) | ((~ (~ (max((((subgroup_size)) / 1u), (subgroup_size)))))))), 1u))) : workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) ^ (~ (~ (((max((min((((max(uint(uvec3((min(0u, 0u)), 0u, (((clamp((uint((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u, 0u, 1u, 1u))))), (uint(uvec4(1u, 0u, 1u, 1u))), (uint(uvec4(1u, 0u, 1u, 1u)))))) << 0u))), uint(uvec3((0u ^ ((((clamp(0u, 0u, 0u)) | (min(0u, 0u)))))), 0u, (uint(uvec4(1u, 0u, 1u, 1u)))))))) << uint((injectionSwitch.x))), (((max(uint(uvec3((min(0u, 0u)), 0u, (((clamp((uint((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u, 0u, 1u, 1u))))), (uint(uvec4(1u, 0u, 1u, 1u))), (uint(uvec4(1u, 0u, 1u, 1u)))))) << 0u))), uint(uvec3((0u ^ ((((clamp(0u, 0u, 0u)) | (min(0u, 0u)))))), 0u, (uint(uvec4(1u, 0u, 1u, 1u)))))))) << uint((injectionSwitch.x))))), (((((((max(uint(uvec3((min(0u, 0u)), 0u, (((clamp((uint((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u, 0u, 1u, 1u))))), (uint(uvec4(1u, 0u, 1u, 1u))), (uint(uvec4(1u, 0u, 1u, 1u)))))) << 0u))), uint(uvec3((0u ^ ((((clamp(0u, 0u, 0u)) | (min(0u, 0u)))))), 0u, (uint(uvec4(1u, 0u, 1u, 1u)))))))) << uint((injectionSwitch.x)))) / 1u)) * 1u))))))))))))))))) * 1u)))))))) | 0u);
 atomicStore(write_val, (clamp(((uint(virtual_gid)) | (0u << (uint(3u)))), (max(uint(virtual_gid), uint(virtual_gid))), uint(virtual_gid))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
}
