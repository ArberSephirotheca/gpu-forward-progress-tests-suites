#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uvec4 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size;
 if((false))
  {
   if(true)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if(((((bool(bvec3(false, true, true))) && true))))
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   barrier();
  }
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(false);
       return;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(true)
          {
           barrier();
           if((false))
            barrier();
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       if((false))
        return;
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       if((false))
        continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      continue;
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((bool(bool(false))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = ((((1 << (int(1))) >> (int(1))) << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          return;
         if((false))
          return;
         do
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            continue;
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           while(false);
           if((false))
            {
             if(true)
              {
               if(((bool(bvec3(false, false, false)))))
                return;
              }
             else
              {
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if((((false) && true)))
            continue;
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if(true)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(((! (! (false)))))
                  continue;
                }
               else
                {
                }
              }
            }
          }
         while(false);
         do
          {
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
         if((false))
          return;
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(false);
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (clamp(1, 1, 1)); _injected_loop_counter ++)
        {
         return;
         if((false))
          break;
        }
      }
    }
  }
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.y = subgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false || (false)))
    {
    }
   else
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if(((true && (false))))
    {
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         return;
        }
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     do
      {
       if((false))
        barrier();
      }
     while(false);
     do
      {
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     while(false);
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        return;
       continue;
      }
     for(int _injected_loop_counter = (int(ivec3(0, (1 & 1), 0))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           continue;
          }
         break;
        }
       if((false))
        {
         if((false))
          break;
         for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        break;
       if((false))
        {
         if((false))
          break;
         if((false))
          barrier();
         continue;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       do
        {
         if((false))
          {
           if(((bool((bvec2(bvec3(bvec2(false, true), true)))))))
            barrier();
           barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                break;
               return;
              }
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | (1 & 1)); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if((false))
              return;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 barrier();
                }
              }
             while(false);
             barrier();
             if((false))
              barrier();
            }
          }
         return;
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      barrier();
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((false))
      return;
    }
   if(((false || (false))))
    return;
   barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 return;
                 if((false))
                  break;
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               return;
              }
             while(false);
            }
           if(((true && (false))))
            {
             if((false))
              return;
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > ((int((injectionSwitch.x))) + 0); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
            }
          }
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       do
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((false))
              break;
             return;
            }
           return;
          }
         while(false);
        }
       while(false);
      }
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          continue;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            {
             if((false))
              break;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(true)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
              }
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               if((false))
                break;
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       else
        {
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         do
          {
           if(true)
            {
             if((false))
              return;
            }
           else
            {
            }
          }
         while(false);
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        break;
       break;
       if((false))
        return;
       if((false))
        {
         if(true)
          {
           barrier();
           if((false))
            break;
          }
         else
          {
          }
        }
       if((false))
        return;
      }
    }
   while(((false) || false));
  }
 do
  {
   do
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((0 << (((int(6)) ^ 0))) >> (int(0))); _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
        }
       if(true)
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       barrier();
      }
    }
   while(false);
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   if(((true && (false))))
    return;
   return;
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        break;
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if(((bool(bvec4(false, true, false, true)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
  }
 if((((false) && true)))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(true)
  {
   if((false))
    {
     for(int _injected_loop_counter = ((1 << (int(4))) >> (((int(4)) / 1))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    {
     do
      {
       if((false))
        break;
       barrier();
      }
     while(((false) && true));
     if((false))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
     if((false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if(false)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       do
        {
         return;
        }
       while((! ((! (! (! (false)))))));
      }
    }
   else
    {
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.w = subgroup_size;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = ((0 >> (int(2))) << (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   do
    {
     barrier();
    }
   while(false);
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ (0 << (int(3)))); _injected_loop_counter ++)
    {
     if((false))
      return;
     GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base.z = GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.w;
    }
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        continue;
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        break;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    continue;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(true)
      {
       if((false))
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         if((! (! (true))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     return;
     if((false))
      barrier();
     if(((! (! (false)))))
      barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if((false))
        return;
       return;
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
   barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if(true)
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
            }
          }
         while(false);
         if(((! (! (false)))))
          {
           if((false))
            return;
           if((false))
            barrier();
           return;
          }
         return;
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       do
        {
         if((false))
          break;
         barrier();
         if(true)
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < ((1 << (int(5))) >> (((int(5)) >> 0))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
          }
        }
       while(false);
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while((! (! ((true && (false))))));
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         return;
        }
       if((false))
        barrier();
       return;
       if((false))
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
   if(((! ((true && (! (((false) || false))))))))
    return;
  }
 do
  {
   if(true)
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           barrier();
          }
         while((false || (false)));
        }
       break;
      }
     do
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         return;
         if((false))
          break;
        }
       if((false))
        {
         if(((! (! (false)))))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
                {
                 if((false))
                  break;
                 barrier();
                }
              }
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       for(int _injected_loop_counter = (((1 | 0) << (int(2))) >> (int(2))); _injected_loop_counter > ((0 | 0) >> (int(2))); _injected_loop_counter --)
        {
         if((false))
          continue;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        continue;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    continue;
  }
 while(false);
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
  }
 while((((! (! (false)))) && true));
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         return;
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(false);
            }
          }
        }
       while(false);
      }
     barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(true)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if(((true && (false))))
        return;
      }
     return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       do
        {
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       if((false))
        {
         if((((false) && true)))
          {
           if((false))
            return;
           return;
          }
         barrier();
         if((false))
          return;
        }
       do
        {
         barrier();
        }
       while(false);
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   else
    {
     if((false))
      return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      break;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        break;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
   while(false);
   return;
  }
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((int((injectionSwitch.y)) << (int(4))) >> ((~ (~ (int(4)))))); _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           return;
          }
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       barrier();
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((false))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
   else
    {
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((false || (false))))
    barrier();
   return;
  }
 if(((bool(bvec3(false, false, false)))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  {
   for(int _injected_loop_counter = ((1 & 1) & 1); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
           return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((! (! (false)))))
              break;
             break;
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                return;
               barrier();
              }
            }
           else
            {
            }
           if((false))
            {
             if((false))
              barrier();
             if(((false || (false))))
              continue;
             break;
            }
           if((false))
            continue;
           if((false))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             barrier();
            }
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                break;
               barrier();
              }
            }
           if(false)
            {
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y)) || (true)))
                {
                 for(int _injected_loop_counter = ((0 >> (int(2))) >> (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if((false))
            continue;
           if((((((false) || false)) || false)))
            break;
           if((false))
            {
             if((false))
              {
               if((false))
                continue;
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = ((false ? (_injected_loop_counter) : 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             continue;
             if((false))
              barrier();
            }
           if((false))
            return;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((bool(bvec3(false, true, false)))))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        continue;
       if((false))
        break;
       if((false))
        barrier();
       if((false))
        barrier();
       if(((true && (false))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((false))
          {
           if((! (! (false))))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            barrier();
           if((false))
            break;
           if(((bool(bvec2(false, true)))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if((false))
          continue;
         if((bool((bvec2(bvec2(bvec2(false, false)))))))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
      }
    }
   barrier();
   if((false))
    {
     do
      {
       do
        {
         barrier();
        }
       while(false);
      }
     while(false);
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != (0 << (int(3))); _injected_loop_counter --)
        {
         if((false))
          break;
         barrier();
        }
      }
     barrier();
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
       barrier();
      }
    }
   if((false))
    {
     if((((false) || false)))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
      }
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(8))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           barrier();
          }
        }
      }
     if((! (! (false))))
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 if(((bool(bvec4(false, true, false, false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if((false))
      return;
    }
   if(((false || (false))))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
   else
    {
    }
   barrier();
  }
 for(int _injected_loop_counter = (((0 ^ int((injectionSwitch.y))) << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(true)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if(true)
              {
               if(((! ((bool(bvec4(! (false), false, true, false)))))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           continue;
           if((false))
            return;
          }
         if(false)
          {
           if((false))
            break;
           if(((bool(bvec3(false, true, true)))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                barrier();
               break;
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      break;
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
              }
             else
              {
               if((false))
                barrier();
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 barrier();
                }
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  {
                   if((false))
                    continue;
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 if(true)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if((false))
                  continue;
                }
              }
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
           if((false))
            {
             if(true)
              {
               barrier();
               if((false))
                continue;
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                 if((false))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 if((false))
                  break;
                }
               if((false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (((int(6)) | (int(6))))); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  break;
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            {
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         barrier();
        }
       if((false))
        {
         do
          {
           return;
          }
         while(((((injectionSwitch.x > injectionSwitch.y))) || false));
        }
       break;
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      break;
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     continue;
     if((false))
      {
       do
        {
         if((false))
          return;
         barrier();
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       break;
      }
     continue;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((! ((false || (! (((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
      }
    }
   if(((((bool(bvec4(false, false, false, false))) && true))))
    barrier();
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false) && true)))
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        {
         do
          {
           barrier();
           if((false))
            continue;
          }
         while(false);
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      barrier();
     continue;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       if((false))
        barrier();
       break;
      }
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
            return;
           barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
      {
       if((false))
        continue;
       do
        {
         barrier();
        }
       while(false);
       if((false))
        continue;
       if((((false) || false)))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if((false))
          break;
         if((false))
          break;
         barrier();
         if((false))
          barrier();
         do
          {
           if(((bool(bvec2(false, false)))))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
              {
               if((((false) || false)))
                return;
              }
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      barrier();
    }
   if((false))
    continue;
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   while(false);
   GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base.x = num_workgroup;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       do
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     barrier();
     if(((bool(bool(false)))))
      {
       if((! (! (false))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((! (! (false)))))
      {
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     do
      {
       barrier();
      }
     while(false);
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   while(false);
   if((false))
    {
     if(((false || (false))))
      barrier();
     barrier();
    }
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((false))
        barrier();
       barrier();
      }
     if(((true && ((bool(bool(false)))))))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
             if((false))
              return;
            }
           else
            {
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            continue;
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         break;
         if((false))
          continue;
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
      }
     if((false))
      barrier();
     if((false))
      return;
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           else
            {
             if(((false || (false))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((false) && true))
              {
              }
             else
              {
               barrier();
               if((false))
                break;
              }
             if((false))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             break;
            }
          }
         if((false))
          return;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
            }
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           if(false)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> ((int(ivec3(int(0), (0 << (int(7))), 0))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 continue;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              barrier();
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               do
                {
                 if((false))
                  return;
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             return;
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
            }
           if((false))
            return;
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        continue;
       barrier();
       if((false))
        break;
       if((false))
        continue;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         break;
        }
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
    }
   if(true)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (int((injectionSwitch.x)) >> (int(1))); _injected_loop_counter --)
      {
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if(false)
            {
            }
           else
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               if((((false) && true)))
                return;
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((false) || false)))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
               if(true)
                {
                 if(((false || (false))))
                  return;
                }
               else
                {
                }
              }
             barrier();
            }
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              return;
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 & - 87390) & 6150); _injected_loop_counter --)
              {
               return;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       else
        {
        }
       if((false))
        continue;
      }
     if(((false || (false))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       return;
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
      }
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
            {
             if(((bool(bvec4(false, true, false, false)))))
              break;
             barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         return;
        }
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        {
         if((false))
          return;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if((((false) || false)))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          return;
        }
       if((false))
        {
         if((false))
          return;
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        return;
       barrier();
       if((false))
        return;
      }
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((! (! (false))))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < ((1 << (((int(4)) ^ 0))) >> (int(4))); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            break;
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            continue;
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
      {
       if((false))
        continue;
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       return;
      }
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    return;
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       continue;
      }
     if((false))
      break;
     barrier();
     if((false))
      break;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(false);
   if((false))
    return;
  }
 if((false))
  return;
 if(true)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 do
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while((! (! (false))));
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        return;
       barrier();
      }
     barrier();
     if((false))
      {
       if((! (! (true))))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 while(false);
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
  }
 else
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
     if(((! (((! (false)) || false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = ((1) + 0); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               while(false);
              }
             if((false))
              return;
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           do
            {
             if((false))
              return;
            }
           while(false);
           if((false))
            return;
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 >> (int(1))) << ((max((~ (~ (int(6)))), int(6))))); _injected_loop_counter --)
              {
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   if(((bool((bvec2(bvec4(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), true, true)))))))
                    continue;
                   return;
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    continue;
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if(((true && (false))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 break;
                }
              }
            }
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            {
             do
              {
               return;
              }
             while(false);
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           return;
          }
         if((false))
          return;
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              return;
            }
           barrier();
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            return;
           barrier();
          }
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((false || (false))))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        barrier();
       barrier();
       if((((false) || false)))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(1))); _injected_loop_counter --)
  {
   if((false))
    return;
   GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
   if((false))
    break;
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         barrier();
        }
      }
     while(false);
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        return;
      }
     barrier();
    }
  }
 while(false);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 do
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(false);
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base.w = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 uint virtual_gid = GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base.z + GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z;
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        return;
      }
     else
      {
      }
     barrier();
    }
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       return;
      }
     barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           barrier();
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   barrier();
   if((false))
    return;
  }
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    barrier();
  }
 while(false);
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
    }
   if((false))
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(((false || (false))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
      {
       return;
      }
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y)) || (true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   else
    {
    }
  }
 if(((! (! ((bool(bool(false))))))))
  {
   if(true)
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       barrier();
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if(((! (! (false)))))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          continue;
         do
          {
           barrier();
          }
         while(false);
        }
      }
     while(false);
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((bool(bvec4(false, true, true, true)))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (((32656 & 0) ^ 0) ^ 0); _injected_loop_counter --)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if(((bool(bvec3(false, false, false)))))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     return;
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 | 0) >> (int(1))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(true)
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             if(true)
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 do
                  {
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(false);
                }
               else
                {
                }
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
           if((false))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if((false))
            {
             if((false))
              return;
             continue;
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if((false))
            {
             if((((false) && true)))
              barrier();
             barrier();
            }
          }
         while(false);
        }
       else
        {
        }
       if((false))
        return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       do
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
       if((false))
        return;
      }
    }
   barrier();
   do
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((((injectionSwitch.x < injectionSwitch.y))) || false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     while(false);
    }
  }
 do
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if(true)
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
   else
    {
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(((true && (false))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(((false || (false))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((! (! (false)))))
    return;
   return;
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       barrier();
       if((false))
        continue;
      }
    }
   if((false))
    return;
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     do
      {
       if((false))
        {
         if(((! (! (false)))))
          continue;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        return;
       barrier();
      }
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (! (false)))))
    return;
   if((false))
    {
     if(((bool(bvec3(false, false, false)))))
      return;
     barrier();
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(false);
    }
  }
 do
  {
   if((false))
    barrier();
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     atomicStore(write_val, uint(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x), 4, 64, 0);
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 if((! (! (true))))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       return;
      }
     return;
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       return;
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(true)
        {
         barrier();
         if(((false || (false))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     do
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
      }
     else
      {
       return;
       if((false))
        barrier();
      }
    }
  }
 do
  {
   if((false))
    break;
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((! ((bool(bool(! (true)))))))
          {
           return;
          }
         else
          {
          }
        }
       if(true)
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
       if(((! (! (false)))))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 while(false);
 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              continue;
             if((false))
              {
               if(true)
                {
                 if((((((false) && true)) || false)))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 barrier();
                }
               else
                {
                }
              }
            }
           barrier();
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              return;
            }
           if((false))
            return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((((false) || false)))
        {
         if((false))
          barrier();
         if((false || (true)))
          {
           return;
          }
         else
          {
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(true)
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     if((false))
      {
       if((false))
        {
         do
          {
           return;
          }
         while((true && (((injectionSwitch.x > injectionSwitch.y)))));
        }
       return;
      }
     if((false))
      barrier();
     if(((! (! (false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     for(int _injected_loop_counter = (0 & (false ? - 51439 : int(true))); _injected_loop_counter < (((1) * 1) & 1); _injected_loop_counter ++)
      {
       barrier();
       if(((! (! (false)))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         return;
        }
       while(false);
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if(true)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if(((true && (false))))
            return;
          }
        }
       else
        {
        }
       return;
      }
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    {
     if((((((false) || false)) || false)))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       while(false);
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   return;
   if(((((true && (false))) && true)))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if(((bool(bool(false)))))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ ((1 << (int(4))) >> (int(4)))); _injected_loop_counter ++)
      {
       if(((true && (false))))
        return;
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
      }
     if((((false) || false)))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(true)
    {
     barrier();
    }
   else
    {
    }
   if((((false) || false)))
    {
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(false);
    }
   if((false))
    {
     if(((false || (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           return;
          }
        }
       while(false);
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(false);
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
      }
     else
      {
      }
     barrier();
    }
   else
    {
     if((false))
      return;
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 do
  {
   if((false))
    {
     do
      {
       if((false))
        continue;
       do
        {
         barrier();
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         if((false))
          return;
         break;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      break;
     return;
    }
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     break;
    }
  }
 while(false);
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(((false) && true))
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              return;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(false);
         if((false))
          barrier();
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             barrier();
            }
           if((false))
            barrier();
           if((false))
            return;
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
         else
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if(((bool((bvec3(bvec4(bvec3(false, false, true), true)))))))
            return;
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if(false)
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 return;
                }
              }
             else
              {
               return;
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
              }
            }
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
          }
        }
       if((false))
        return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
   if((((false) && true)))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       if((false))
        barrier();
       if((false))
        return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
       do
        {
         barrier();
        }
       while(false);
      }
    }
   else
    {
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((int((injectionSwitch.x))) - 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((! (! (bool(bvec4(false, true, true, true))))))))
        return;
       if((true && (false)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         do
          {
           return;
          }
         while(false);
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                break;
               barrier();
              }
            }
           if((false))
            {
             if(((false) && true))
              {
              }
             else
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             continue;
            }
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 ^ (0 | 0)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         break;
        }
       if((false))
        continue;
       if((false))
        {
         if((((((false) && true)) && true)))
          return;
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            break;
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((false || (false))))
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if((false))
          continue;
         continue;
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             return;
            }
          }
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           if((false))
            barrier();
           break;
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           continue;
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                return;
               if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false)))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            barrier();
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if(((! ((bool(bvec2(! (false), false)))))))
            return;
           break;
          }
         if((false))
          continue;
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               break;
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           do
            {
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
           if((false))
            continue;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           break;
          }
         if((false))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = ((0 ^ 0) & 66429); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             if((false))
              break;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              return;
             if((false))
              {
               if((false))
                {
                 if((false))
                  break;
                 if((false))
                  barrier();
                 barrier();
                }
               continue;
              }
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         break;
        }
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((false) || false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if((false))
      {
       if((((false) || false)))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(((! (! (false)))))
    return;
  }
 while(false);
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((((false) && true)))
            return;
          }
         barrier();
        }
      }
    }
   if((false))
    return;
   if((false))
    return;
   for(int _injected_loop_counter = ((int((injectionSwitch.x)) >> (int(3))) & 53718); _injected_loop_counter < (((1 << (int(6))) >> (int(6))) & 1); _injected_loop_counter ++)
    {
     barrier();
     if((false))
      break;
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   do
    {
     if((false))
      {
       if((false))
        break;
       return;
      }
     if((false))
      continue;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   return;
   do
    {
     if((false))
      return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if(((bool(bvec3(false, false, false)))))
      barrier();
     if((false))
      return;
     barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   return;
  }
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.x = read_val;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(((! ((! (! (! (false))))))))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      continue;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          {
           if((false))
            break;
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((true) && true))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                 if((false))
                  return;
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
             if((false))
              return;
            }
          }
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            {
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             return;
            }
          }
         while((! (! (false))));
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((false ? (- 14717) : 1)); _injected_loop_counter ++)
              {
               return;
              }
            }
           return;
          }
         if((false))
          {
           if(((((! (! (false)))) || false)))
            barrier();
           return;
          }
         return;
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if(((! (! (false)))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            break;
           barrier();
          }
        }
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       if(true)
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((0 | 1) & 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                continue;
               if(true)
                {
                 barrier();
                 if((false))
                  return;
                }
               else
                {
                }
              }
             return;
            }
           while(false);
           if((false))
            {
             if((false))
              return;
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            return;
          }
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          return;
         if(true)
          {
           barrier();
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               do
                {
                 barrier();
                 if((false))
                  break;
                }
               while(false);
              }
            }
           if((false))
            return;
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             do
              {
               return;
              }
             while(false);
            }
           return;
          }
        }
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     do
      {
       if(((true && (false))))
        barrier();
      }
     while(false);
    }
  }
 if(true)
  {
   if(((false) || false))
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((((false) && true)))
        barrier();
       if(true)
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            return;
          }
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(true)
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(((true && (false))))
          barrier();
        }
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if(false)
            {
             if((false))
              return;
            }
           else
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         return;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     if((false))
      barrier();
     do
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
             if((false))
              return;
            }
           while(false);
           if((false))
            break;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             return;
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if((false))
            continue;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
          }
        }
       if((false))
        continue;
       if((false))
        barrier();
      }
     while(false);
    }
  }
 else
  {
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     do
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     do
      {
       if((false))
        return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       barrier();
       if((((false) || false)))
        return;
      }
     if((false))
      barrier();
     if(false)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
         return;
         if((false))
          return;
        }
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     if(true)
      {
       return;
      }
     else
      {
      }
     if((false))
      return;
    }
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            {
             do
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  return;
                }
               if((false))
                break;
              }
             while(false);
             if((false))
              return;
             do
              {
               if((false))
                barrier();
              }
             while(false);
             barrier();
             if((false))
              return;
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
        }
       if((false))
        return;
      }
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             return;
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
             if((false))
              break;
            }
           while(false);
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base.y = GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   return;
  }
 if((bool(bool(false))))
  {
  }
 else
  {
   if((false))
    barrier();
  }
 do
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(4))); _injected_loop_counter --)
      {
       if((false))
        {
         if(((! (! (false)))))
          break;
         return;
        }
      }
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(true)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           barrier();
          }
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
            }
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               break;
              }
             barrier();
            }
           do
            {
             if((false))
              break;
             barrier();
             if((false))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           while(false);
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & int((injectionSwitch.y))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        break;
       for(int _injected_loop_counter = ((- 57918 + (+ 8293)) & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((false))
      {
       if((false))
        continue;
       if((false))
        barrier();
       if(true)
        {
         if(((bool(bvec2(false, true)))))
          break;
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       else
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if(((true && ((! (! (false)))))))
        {
         do
          {
           do
            {
             if((false))
              break;
             return;
            }
           while(false);
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   if((false))
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        continue;
      }
     break;
    }
   if((false))
    continue;
   if((false))
    continue;
  }
 while(false);
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = (((0) << 0) ^ (0 & 97323)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if(((true && (false))))
        continue;
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if(((! (! (false)))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((true && (false))))
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          return;
        }
       barrier();
      }
     if((false))
      return;
     barrier();
    }
   if(true)
    {
     barrier();
    }
   else
    {
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       return;
       if((false))
        barrier();
      }
    }
   if(((false || ((bool(bvec2(false, false)))))))
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != ((0 & 80397) >> (int(5))); _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         continue;
        }
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            break;
          }
        }
       do
        {
         barrier();
        }
       while(false);
      }
    }
  }
 while(false);
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     barrier();
     if((false))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       for(int _injected_loop_counter = ((1 << (int(0))) >> ((min((int(int(int(0)))), int(0))))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           if((false))
            continue;
           barrier();
           if((false))
            barrier();
          }
        }
      }
     if((false))
      return;
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if(((((bool(bool(false)))) || false)))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     barrier();
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (0 & 53844); _injected_loop_counter < (((0 ^ 1) << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           return;
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         do
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       return;
      }
    }
   if((bool(bvec2(true, true))))
    {
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = (((1) | (1)) ^ (1 & 1)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               barrier();
              }
            }
           while(false);
          }
         else
          {
          }
         do
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           barrier();
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if((false))
          break;
         if((false))
          break;
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(false);
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
     if(true)
      {
       buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x] = uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_base.y));
       if((false))
        continue;
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         do
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
      }
     if((false))
      continue;
     if(((true && (false))))
      {
       if((false))
        continue;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
       if(((false || (false))))
        {
         if((false))
          continue;
         if((false))
          barrier();
         return;
         if(((! (! (false)))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       continue;
       if((false))
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
     if(((bool(bvec4(false, false, true, true)))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(false)
        {
        }
       else
        {
         do
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         while(false);
         for(int _injected_loop_counter = ((1 & 1) ^ 0); _injected_loop_counter > (82286 & 0); _injected_loop_counter --)
          {
           if((false))
            return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         continue;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(2))) >> (((int(2)) | (int(2))))); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            continue;
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(true)
              {
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   barrier();
                  }
                 barrier();
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  continue;
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                     if(((bool(bvec4(false, false, false, true)))))
                      continue;
                    }
                   while(false);
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
            }
           while(false);
          }
        }
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(((bool(bvec4(false, true, false, false)))))
          break;
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 & 1) | 1); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                break;
               continue;
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((false))
                return;
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                return;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   break;
                  }
                 return;
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       barrier();
                       if((false))
                        return;
                      }
                    }
                  }
                 while(false);
                 if((false))
                  break;
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                 while(false);
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                   if((false))
                    break;
                  }
                 if((false))
                  break;
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                return;
              }
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              break;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(2))) >> ((min(int(2), (clamp(int(2), int(2), int(2))))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((1 | 1) | 1); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
     if((false))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if(((true && (false))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << ((clamp(int(0), int(0), int(0))))) >> ((int(int(int(0)))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             return;
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((false))
          {
           do
            {
             barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                return;
              }
            }
           while(false);
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 return;
                }
              }
             barrier();
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       barrier();
       if((false))
        return;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(true)
    {
     if((false))
      return;
     barrier();
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     return;
    }
  }
}
