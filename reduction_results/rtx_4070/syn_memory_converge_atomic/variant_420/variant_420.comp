#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((((float(mat2(injectionSwitch.x, tan(0.0), 0.0, 0.0))) > injectionSwitch.y) || false)))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   barrier();
  }
 if(((false || (false)) || ((false))))
  {
   if((false))
    {
     if(((false || ((! (! (false)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if((false))
      barrier();
    }
   return;
  }
 if((false))
  {
   if((((true && (false)) || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((((false || ((injectionSwitch.x > (float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))))) && true))))
      barrier();
     return;
    }
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((false) && true)))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((((! (! ((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  barrier();
 if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    {
     if(((((((clamp(injectionSwitch.x, injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x))))) - abs(0.0)) > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((bool(bool((false)))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec3(false, false, true)))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((! ((false || (! ((! (! ((false))))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > ((false ? (- 38.17) : injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((((true && ((! (bool(bvec2((bool((bool(bool((true && (bool((! (false)))))))))), ((injectionSwitch.x > injectionSwitch.y)))))) || false)))) && (((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x < injectionSwitch.y))))))))
  {
   if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > ((vec2(1.0, 1.0) * (((mix(vec2((injectionSwitch)[0], (- 4.5)), vec2(((+ - 7.0)), (injectionSwitch)[1]), bvec2((! (((! ((! (! (false))))) || false))), true)))) + vec2(0.0, 0.0)))).y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((! (! ((! (! (! (! ((false)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if(((((injectionSwitch.x < injectionSwitch.y)) && ((false || (false))))))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
  }
 if(((false || (false))))
  barrier();
 if((((injectionSwitch.x > (clamp(injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (1u * (workgroup_size)) * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 atomicStore(write_val, ((uint(virtual_gid)) + 0u), 4, 64, 0);
 if((false))
  {
   if((false))
    barrier();
   if((((bool(bvec4((! (((bool(bvec3((! (((! ((! (bool(bvec4((((false || ((! (! (((! (! (bool((bool(((bvec3(bvec4(bvec3((bvec3(bvec4(bvec3(bvec3(bool(false), (false || (true)), false)), true)))), false))))))))))))))))) || false), true, true, false)))))) || false))), true, (bool(bool(true))))))) && true)), true, false, true))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((! (! (false)))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        return;
      }
     if(((((clamp(((injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if((false))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     return;
    }
   if(((false || (false))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((((! (((! (((max((float(vec4(injectionSwitch.x, (injectionSwitch.y), 0.0, 0.0))), (min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) || false))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  return;
 if((((false) || (((((! (! (injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y)))))) && true))))
  {
   if((((bool(bvec4(! (! (false)), true, ((injectionSwitch.x > injectionSwitch.y)), true))))))
    barrier();
   if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   return;
   if((false))
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if(((((! (! (false)))) && true)))
    {
     if(((((! (! (false)))) || false)))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
     return;
    }
   if(((bool((bvec3(bvec3((bvec3((bvec3(bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true))))))))))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > (min(((injectionSwitch.y) / 1.0), injectionSwitch.y))))))
      {
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec2(false, false)))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
}
