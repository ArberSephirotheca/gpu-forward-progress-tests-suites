#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if(((bool(bool((((mix(vec2((2.4), (- 58.93)), vec2((injectionSwitch)[0], ((vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bvec2(true, true))).x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((! (false || ((! (false)))))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 uint workgroup_size = (((((((((uvec3(0u, 0u, 0u) | ((((((injectionSwitch.x > injectionSwitch.y)) ? (uvec3(17785u, 109778u, 193257u)) : clamp(clamp(uvec3(uvec3(gl_WorkGroupSize)), (max(uvec3(uvec3(gl_WorkGroupSize)), uvec3((uvec3(uvec4(uvec3(gl_WorkGroupSize), uint((injectionSwitch.x)))))))), uvec3(uvec3(gl_WorkGroupSize))), clamp(uvec3(uvec3(gl_WorkGroupSize)), (~ (((~ ((max(uvec3(uvec3(gl_WorkGroupSize)), uvec3(uvec3(gl_WorkGroupSize)))))) - uvec3(0u, 0u, 0u)))), uvec3(uvec3(gl_WorkGroupSize))), clamp(uvec3(uvec3(((gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)))), (max(uvec3(uvec3(gl_WorkGroupSize)), uvec3(uvec3(gl_WorkGroupSize)))), uvec3(uvec3(gl_WorkGroupSize)))))))))) / uvec3((max(1u, 1u)), 1u, 1u)) | uvec3(0u, 0u, 0u))) + uvec3((((uint((injectionSwitch.x)) + (((0u) | (0u))))) | (0u)), 0u, 0u))))).x;
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = (((uvec3(uvec3((min(gl_WorkGroupID, gl_WorkGroupID))))).x) / 1u);
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + (~ (~ (subgroup_id))) * subgroup_size + subgroup_local_id;
 if((false))
  {
   if(((((true && (bool((bvec2(bvec2(bvec2(((bool((bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, (((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))), false)))))))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((((mat2((0.0 + (1.0))) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint(((0u | ((0u ^ (((((0u) | (((((((((1u * ((((0u)) + 0u)))) + 0u)) | ((0u)))) + 0u)) | ((0u)))) >> (uint(4u))) ^ (((false ? (write_val) : (((virtual_gid) | (clamp((virtual_gid), (0u | ((virtual_gid))), (((virtual_gid)) | ((((((1u | ((1u << (uint(0u))) >> (uint(0u)))) * (virtual_gid))))) / 1u)))))))))))) + (((clamp(0u, 0u, ((0u) << 0u))) << (uint((0u ^ (0u))))) | 0u))))), 4, (max(64, 64)), (min((max(((0) | (0)), 0)), (~ (~ (0))))));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad((0u | ((0u | (write_val)))), (min(4, 4)), 64, 0);
 if((false))
  barrier();
 buf[virtual_gid] = ((uint(subgroupAllEqual((uint(uint(read_val)))))) - 0u);
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((vec2(injectionSwitch[0], (((min((mat2(1.0) * (injectionSwitch)), injectionSwitch))[1]) * 1.0))).x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
}
