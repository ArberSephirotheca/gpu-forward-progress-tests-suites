#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((false || (false))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (! ((! (! (! ((! (false)))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((((bool((((bvec2(bvec3(bvec2((bvec3(bvec4(bvec3((bvec2(bvec4(bvec2(bvec4((((bvec2(bvec4(bvec2(bvec4(bvec2(bvec4((bvec2(bvec2((bvec2(bvec2((bvec2(bvec3(bvec2(((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), (((false || ((! (! (injectionSwitch.x > injectionSwitch.y)))))))), true))))))))), false, true)), false, true)), true, ((false) || false)))))), false, false)), false, false))), false), true)))), false))))))) || false)))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if(((((clamp(injectionSwitch, (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), ((false ? (injectionSwitch) : (min((vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))))))).x > injectionSwitch.y))))
  barrier();
 if((((((! (! (bool(bvec4((bool(bvec4((bool(bvec4(false, true, true, (((true && (injectionSwitch.x > (mix(float((3.1)), (mix(float(float(injectionSwitch.y)), float(((252.953))), bool(((injectionSwitch.x > injectionSwitch.y))))), bool(true)))))))))), false, false, true))), false, true, false))))))) || ((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((min(injectionSwitch.x, (mix(float((6.1)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false || ((((((false) || false))) && true))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(((((((bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))
    {
     if((((false)) || false))
      barrier();
     barrier();
    }
   if((((false || ((false || ((injectionSwitch.x > (clamp(injectionSwitch.y, ((true ? injectionSwitch.y : (12.71))), injectionSwitch.y))))))))))
    barrier();
  }
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((false) || false)))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = ((false ? (uvec3(152665u, 37412u, 188027u)) : ((uvec3(((0u) ^ (1u ^ 1u)), 0u, 0u) ^ uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((max((0u ^ ((1u * (min((((~ (~ (((((((~ (~ (0u | (workgroup_base + subgroup_id * subgroup_size))))) / ((1u << (uint(4u))) >> (((uint(4u)) >> 0u)))))) | ((0u | (workgroup_base + subgroup_id * subgroup_size))))))) + subgroup_local_id) - 0u), (~ (~ ((min((((0u | (workgroup_base + subgroup_id * subgroup_size))) | ((((((false ? (subgroup_local_id) : 0u | (workgroup_base + subgroup_id * subgroup_size)))) | (0u << (uint(4u))))))), (((0u | (workgroup_base + subgroup_id * subgroup_size))) | ((0u | (workgroup_base + subgroup_id * subgroup_size))))))))) + subgroup_local_id))))), min((~ (((~ ((((0u | (workgroup_base + subgroup_id * subgroup_size))) | ((uint(uvec2((0u | (workgroup_base + ((subgroup_id * subgroup_size) >> 0u))), 0u))))))) * 1u))) + subgroup_local_id, (((true ? max((((~ (~ ((((0u | (workgroup_base + subgroup_id * subgroup_size))) | ((0u | (workgroup_base + subgroup_id * subgroup_size))))))) + subgroup_local_id) / (min(1u, 1u))), (~ (~ ((((((0u | (workgroup_base + subgroup_id * subgroup_size))) >> 0u)) | ((0u | (workgroup_base + subgroup_id * subgroup_size))))))) + subgroup_local_id) : (workgroup_size))))))));
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(write_val, (uint(uvec4(uint(virtual_gid), 0u, 1u, (0u >> ((max(uint(3u), uint(3u)))))))), 4, ((min(((((int(ivec3(64, 1, 0))) | ((min(int(ivec3(64, 1, 0)), int(ivec3(64, 1, 0)))))) / 1)), int(ivec3(64, 1, 0))))), ((0 | 0) | (0)));
 uint read_val = atomicLoad((~ ((min(~ (write_val), ~ ((false ? (workgroup_base) : (clamp((write_val), (write_val), (write_val))))))))), 4, 64, 0);
 if(((((injectionSwitch.x < injectionSwitch.y)) && (true && ((((! (! (bool(bvec4(bool((bvec3(bvec4(bvec3((false), false, false), true)))), false, false, true))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((! (((bool(bvec4((! ((false || ((false))))), false, false, false))) && true))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual((clamp(read_val, (((((((injectionSwitch.x < injectionSwitch.y)) ? 0u | (read_val) : (uaddCarry(workgroup_base, subgroup_local_id, virtual_gid))))) | (0u | (read_val)))), read_val))));
}
