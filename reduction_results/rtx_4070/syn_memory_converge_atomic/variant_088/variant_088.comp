#version 460

struct _GLF_struct_8 {
 mat3x4 _f0;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 mat2x3 _f1;
 bool _f2;
 mat2x3 _f3;
 uvec2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 mat3x4 _f2;
 mat2 _f3;
 float _f4;
} ;

struct _GLF_struct_10 {
 uint read_val;
 _GLF_struct_9 _f0;
 bvec3 _f1;
 bvec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
 uint _f1;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 bool _f1;
 _GLF_struct_4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_3 {
 int _f0;
 bvec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 uint workgroup_size;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
} ;

struct _GLF_struct_1 {
 uint subgroup_id;
 _GLF_struct_0 _f0;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(((! ((true && (! (false)))))))
    barrier();
   if((false))
    return;
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if((false))
    {
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((- 967.994)), bool(false)))))))
        barrier();
       return;
       if(true)
        {
         if(((((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))) || false)))
          return;
        }
       else
        {
        }
       do
        {
         if((false))
          break;
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       while(false);
      }
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if(false)
        {
         if(true)
          {
           if(true)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
         barrier();
        }
      }
     if((((false) && true)))
      {
       do
        {
         if((false))
          {
           if((((false) || false)))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
       if((false))
        barrier();
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            {
             if((false))
              barrier();
             if(((false || (false))))
              return;
             if((false))
              {
               if(((! (! (false)))))
                barrier();
               barrier();
              }
             if(true)
              {
               if((false))
                return;
              }
             else
              {
              }
             if(false)
              {
               if((false))
                {
                 if((true && (((((! (! (false))) || (true && (false))))))))
                  barrier();
                 return;
                }
              }
             else
              {
               return;
               if((false))
                barrier();
               if(true)
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                return;
              }
             if((true && ((! (! ((false)))))))
              barrier();
             if((false))
              barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      return;
     if((false))
      return;
     if((bool(bool(((injectionSwitch.x < injectionSwitch.y))))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                continue;
               continue;
              }
             for(int _injected_loop_counter = ((int((injectionSwitch.y))) >> 0); (bool(bvec2((true && (_injected_loop_counter != (int((injectionSwitch.x)) & 79813))), false))); _injected_loop_counter --)
              {
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(8))); _injected_loop_counter --)
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; ((_injected_loop_counter != ((0 << (int(6))) ^ 0)) || false); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   do
                    {
                     if((false))
                      return;
                    }
                   while(false);
                   if((false))
                    {
                     if((false))
                      barrier();
                     continue;
                    }
                  }
                }
               barrier();
              }
             if((false))
              continue;
             if(((! (! ((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))))))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              return;
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(((((((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) / 1.0)) / 1.0)) > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
    }
   else
    {
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if((false))
    return;
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(gl_SubgroupID, _GLF_struct_0(((false ? (ceil(vec3(9.5, - 0.2, - 9.3))) : vec3(1.0)))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      return;
     if(((((injectionSwitch.x > injectionSwitch.y))) || false))
      {
      }
     else
      {
       if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((bool(bvec2(false, false)))))
              return;
             return;
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if(((true && (! (! ((false)))))))
                return;
              }
            }
           else
            {
            }
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         do
          {
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     do
      {
       return;
       if(((! (! (false)))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              continue;
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          return;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(((! (! (false)))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       else
        {
        }
      }
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec4(false, true, false, true)))))
            barrier();
           return;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          barrier();
         barrier();
         if((false))
          return;
        }
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((false || (false))))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     do
      {
       if(((bool(bvec3(false, false, true)))))
        barrier();
      }
     while(false);
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   barrier();
   if((false))
    barrier();
  }
 if((true && ((bool(bvec4((false), true, true, (true && (true))))))))
  return;
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((! (((! ((false))) && true))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((true && (false))))
  return;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      break;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       return;
      }
     else
      {
       if(((! (! (false)))))
        break;
      }
     if((false))
      continue;
    }
  }
 while(false);
 if(true)
  {
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     do
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if(true)
        {
         if((false))
          return;
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
       if((false))
        barrier();
      }
    }
  }
 else
  {
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(false);
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((! (! ((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, false)))))))
    barrier();
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_2(ivec3(1)), _GLF_struct_3(1, bvec3(true), uvec3(1u)), gl_WorkGroupSize.x, _GLF_struct_5(mat4x3(1.0), true, _GLF_struct_4(mat3(1.0), 1u), ivec2(1)));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     barrier();
    }
  }
 if((! ((! (! (! ((! (((! ((false))) || false))))))))))
  {
   if((bool(bvec3(true, false, (((max(injectionSwitch, ((injectionSwitch) * vec2(1.0, 1.0)))).x < injectionSwitch.y))))))
    {
     if((false))
      barrier();
     return;
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if((! ((((injectionSwitch.x > injectionSwitch.y)) || (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (min(0, 0)); _injected_loop_counter --)
          {
           if((false))
            return;
          }
         return;
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((((true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))
        {
         for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       return;
      }
    }
   else
    {
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = ((gl_WorkGroupID.x) | (gl_WorkGroupID.x));
 uint workgroup_base = _GLF_struct_replacement_6.workgroup_size * workgroup_id;
 if((false))
  return;
 if((! (! (false))))
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if(((((false || (false))) && true)))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
      {
       if((false))
        return;
      }
    }
  }
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_1.subgroup_id * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
   if((false))
    barrier();
   do
    {
     if((false))
      {
       do
        {
         return;
        }
       while((bool(bvec3(false, false, false))));
      }
    }
   while(false);
   if((false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            barrier();
           do
            {
             if((false))
              return;
            }
           while(false);
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               if(((((! (! (((true ? (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : (3868.0228))) > injectionSwitch.y)))))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              break;
            }
           else
            {
             return;
            }
          }
         barrier();
         do
          {
           if((false))
            return;
          }
         while(false);
        }
       if((false))
        barrier();
       if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
        barrier();
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = ((0 | (0)) >> (int(2))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              return;
            }
           if((false || ((false))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            {
             if((false))
              return;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if((false))
        barrier();
      }
    }
   if((((false || (((bool(bool(false))) && true))))))
    {
     if((false))
      barrier();
     return;
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(true)
    {
     do
      {
       for(int _injected_loop_counter = (1 ^ 0); (0 | (_injected_loop_counter)) != (0 << (((int(1)) + 0))); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            barrier();
           if(false)
            {
             if((((bool(bvec4((true && ((false))), true, false, true)))) && true))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((((! (! ((false || (((false ? (- 156.127) : ((injectionSwitch.x) - 0.0))) > injectionSwitch.y)))))))))
              continue;
            }
           else
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(((true && ((false || (false))))))
              continue;
             if((false))
              break;
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              continue;
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               do
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                   if((false))
                    continue;
                   if((false))
                    barrier();
                   break;
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 if((false))
                  barrier();
                 barrier();
                }
               while(false);
               if((false))
                {
                 if((false))
                  continue;
                 barrier();
                }
               if((false))
                break;
              }
             if(true)
              {
               if(false)
                {
                }
               else
                {
                 if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
                  {
                   if((false))
                    continue;
                   if((false))
                    continue;
                   if((false))
                    barrier();
                   if(true)
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if((false))
                      continue;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((bool(bvec3((false), false, (true && (false))))))
                  barrier();
                 return;
                }
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   return;
                  }
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((false || (false))))
                  break;
                 if((! (! (((((true) || false)) || false)))))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                continue;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((((((injectionSwitch.x > injectionSwitch.y) || false)) || false)))))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                return;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 << (int(7))) >> (int(7))) & 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   if((false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((((false) || false)))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                }
               while(false);
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if(((bool(bvec4(false, true, false, false)))))
              return;
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                {
                 if(false)
                  {
                   do
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   while(false);
                   if(true)
                    {
                     do
                      {
                       for(int _injected_loop_counter = (0 << ((clamp(int(6), int(6), int(6))))); _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         if((false))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 << (int(2))) << (int(7))); _injected_loop_counter --)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if((false))
                            continue;
                           barrier();
                          }
                        }
                      }
                     while((! (! (false))));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    continue;
                   return;
                  }
                 if((false))
                  return;
                }
               if((false))
                {
                 if((false))
                  return;
                 if(((! ((! (! (! (false))))))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 break;
                }
               do
                {
                 if((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), true))))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               while(false);
               if((false))
                break;
               if((false))
                break;
              }
             if((false))
              continue;
             if((false))
              continue;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          barrier();
        }
      }
     while(false);
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(false);
    }
   else
    {
    }
   if((((false)) && true))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((bool((bvec3(bvec4(bvec3((bool(bvec3(false, false, true))), false, false), true))))))
          {
           if((false))
            barrier();
           do
            {
             if((false))
              return;
            }
           while(false);
          }
         else
          {
           for(int _injected_loop_counter = ((0) >> 0); _injected_loop_counter != (((clamp(1 << (int(6)), 1 << (int(6)), 1 << (int(6))))) >> (int(6))); _injected_loop_counter ++)
            {
             if((false))
              break;
             barrier();
            }
          }
        }
       else
        {
        }
      }
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((! (! ((true && (true))))))
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (0 | int((injectionSwitch.y))); _injected_loop_counter ++)
        {
         if((false))
          break;
         if((false))
          {
           do
            {
             if((false))
              continue;
             if(false)
              {
              }
             else
              {
               barrier();
              }
             if((! (! ((! (! (true)))))))
              {
               if((false))
                barrier();
              }
             else
              {
              }
            }
           while(((((injectionSwitch.x) - 0.0) > (vec2((transpose(transpose(mat3x2(((mat2(1.0) * ((injectionSwitch) * mat2(1.0)))), 1.0, sqrt(1.0), 0.0, 0.0)))))).y)));
          }
         if((false))
          return;
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             break;
            }
           if((false))
            break;
          }
         else
          {
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             do
              {
               if(true)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 for(int _injected_loop_counter = (max(int((injectionSwitch.y)), int((injectionSwitch.y)))); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; (! (! (_injected_loop_counter > 0))); _injected_loop_counter --)
                    {
                     if((false))
                      barrier();
                     barrier();
                     if((false))
                      continue;
                    }
                   if((((false || (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)))))))))
                    break;
                  }
                 if(((bool((bvec2(bvec4((bvec2(bvec2(bvec2(false, false)))), true, false)))))))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if((false))
                {
                 do
                  {
                   barrier();
                   if((false))
                    continue;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             while(false);
            }
           if(((bool(bvec4(false, false, true, false)))))
            break;
          }
         if((((injectionSwitch.x < injectionSwitch.y)) && ((bool(bvec3(true, true, false))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            continue;
          }
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           do
            {
             do
              {
               atomicStore(write_val, uint(virtual_gid), (((0 ^ (((4)) | ((min((4), ((min(4, 4))))))))) | (((((4) ^ 0))) | 0)), 64, 0);
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (int((clamp(1, 1, 1))))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
        }
      }
     while(false);
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         continue;
        }
       barrier();
      }
    }
   while(false);
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    {
     if(((! (! (false)))))
      {
       if((false))
        return;
       do
        {
         if(false)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
            }
          }
         else
          {
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
     if((false))
      return;
    }
  }
 if(true)
  {
   if((false))
    return;
   if(true)
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
        }
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           barrier();
           if((false))
            break;
           if((! (! ((! (! (((true && ((false || (false))))))))))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << (int(1))) >> (((int(1)) ^ 0))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      return;
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 if((bool(bool((false)))))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > (((float(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0)))) - log(1.0))))))
    barrier();
   do
    {
     return;
    }
   while(false);
  }
 if((false || ((! (! (((! (! (false))))))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     barrier();
     if((false))
      continue;
    }
   if((false))
    {
     for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
    }
  }
 do
  {
   if((false))
    {
     if((((false) || false)))
      return;
     barrier();
    }
  }
 while(false);
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(atomicLoad(write_val, (int(ivec4(4, 1, 1, 0))), 64, 0), _GLF_struct_9(_GLF_struct_7(mat4(1.0), mat2x3(1.0), true, mat2x3(((false ? (32.44) : 1.0))), uvec2(1u), mat2(1.0)), _GLF_struct_8(mat3x4(1.0)), mat3x4(1.0), mat2(1.0), 1.0), bvec3(((true) || false)), bvec3(true), mat2(1.0));
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
  }
 else
  {
  }
 if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   buf[virtual_gid] = uint(subgroupAllEqual(_GLF_struct_replacement_10.read_val));
   if((false))
    return;
  }
 else
  {
  }
}
