#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((bool(bvec2(false, true)))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((false)) && true))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((! (! (false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = (0u | ((uvec3(gl_NumWorkGroups[(clamp(0, (1 * (0)), (max(0, 0))))], gl_NumWorkGroups[1], (min(((max((clamp(((max(gl_NumWorkGroups, gl_NumWorkGroups)) | (max(gl_NumWorkGroups, gl_NumWorkGroups))), (clamp(max(gl_NumWorkGroups, gl_NumWorkGroups), max(gl_NumWorkGroups, gl_NumWorkGroups), max(gl_NumWorkGroups, gl_NumWorkGroups))), max(gl_NumWorkGroups, gl_NumWorkGroups))), (clamp(max(gl_NumWorkGroups, gl_NumWorkGroups), (clamp(max(gl_NumWorkGroups, gl_NumWorkGroups), max(gl_NumWorkGroups, gl_NumWorkGroups), max(gl_NumWorkGroups, gl_NumWorkGroups))), max(gl_NumWorkGroups, gl_NumWorkGroups)))))), gl_NumWorkGroups))[2])).x));
 if(((true && (((true && (bool(bvec3((((injectionSwitch.x < injectionSwitch.y)) && (false)), false, false)))))))))
  return;
 uint workgroup_size = (((((((true ? (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u) : (uvec3(30130u, 2996u, 140415u))))) | uvec3(0u, 0u, 0u)))) / uvec3(1u, 1u, 1u)).x;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 uint workgroup_id = (0u + (gl_WorkGroupID.x));
 uint workgroup_base = (((((min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) - 0u)) - (0u & 44639u));
 if(((((((((max((clamp((clamp(injectionSwitch.x, injectionSwitch.x, (clamp(injectionSwitch.x, (float(float(injectionSwitch.x))), injectionSwitch.x)))), (((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / round(length(normalize(vec3(1.0, 1.0, 1.0))))), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (min(injectionSwitch.x, injectionSwitch.x)))) / 1.0)) > injectionSwitch.y))) || false)))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, (((true ? ((~ ((uint((injectionSwitch.x)) + ((~ (~ (((~ (uint(virtual_gid))) ^ 0u)))))))) | (~ ((uint((injectionSwitch.x)) + ((~ (~ (((~ (uint(virtual_gid))) ^ 0u))))))))) : (uvec4(150199u, 100236u, 90037u, 57533u)[1])))), 4, (max(64, 64)), 0);
 if((((injectionSwitch.x > (float(vec2(injectionSwitch.y, abs(1.0))))))))
  return;
 if((false))
  return;
 uint read_val = atomicLoad(write_val, ((4) | (4)), 64, 0);
 if((false))
  return;
 buf[virtual_gid] = ((uint(subgroupAllEqual(read_val))) / 1u);
 if(((bool(bvec2(false, false)))))
  return;
}
