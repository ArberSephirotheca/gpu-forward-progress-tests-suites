#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max((uvec3((min(uvec3(((true ? gl_NumWorkGroups : (uvec3(168250u, 73694u, 19376u))))), uvec3(((true ? gl_NumWorkGroups : (uvec3(168250u, 73694u, 19376u))))))))), gl_NumWorkGroups)).x;
 uint workgroup_size = (((uvec3(uvec4(gl_WorkGroupSize, ((1u << (uint(3u))) >> (uint(3u))))))) * uvec3(1u, 1u, 1u)).x;
 uint workgroup_id = ((((gl_WorkGroupID) - (uvec3(0u, 0u, 0u) << (uvec3(2u))))) ^ (uvec3(0u, 0u, 0u) | (((((((false ? (uvec3(139458u, 179579u, 42475u)) : uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (((~ (((~ ((1u * ((~ (~ (clamp(((~ (~ ((~ ((false ? (subgroup_size) : (~ ((min((((((~ (~ ((((((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u)) * 1u))))) | uint((injectionSwitch.x))) >> 0u), (((~ (~ ((((clamp((((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u, (((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u, (((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u)))) * 1u)))) | 0u)))))))))))), ((~ (~ ((~ (~ ((min((((~ (~ ((((((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u)) * 1u)))) >> 0u), (((~ (~ ((((((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u)) * 1u)))) | 0u)))))))))), (uint(uint(((~ (~ ((((~ (~ ((min((((~ (~ ((((((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u)) * 1u)))) >> 0u), (((~ (~ ((((((((clamp(workgroup_base, workgroup_base, workgroup_base))) - uint((injectionSwitch.x))))) | 0u)) * 1u)))) | 0u)))))))) ^ 0u))))))))))) + subgroup_id * ((false ? (((~ (~ ((((((max(injectionSwitch, (vec2(injectionSwitch[0], (min(injectionSwitch[1], injectionSwitch[1])))))).x > injectionSwitch.y)) ? ((true ? (subgroup_id) : (subgroup_local_id))) : (atomicOr(subgroup_local_id, (clamp(write_val, ((write_val) ^ 0u), write_val))))) - 0u)))))) : subgroup_size)) + subgroup_local_id)))) ^ 0u)))) / 1u);
 atomicStore(write_val, uint((min(virtual_gid, (max(virtual_gid, virtual_gid))))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, (clamp(((1 * (((min(64, 64))) | ((((0 ^ (true ? 64 : (- 91539))))))))), (clamp((((true ? ((0 | (((clamp(0, 0, 0)) | (64)))) | 0) : (- 38622)))), 64, ((64) ^ 0))), 64)), (~ (~ (0))));
 ((true ? ((buf[virtual_gid] = uint(subgroupAllEqual(read_val))) - 0u) : (write_val)));
}
