#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size;
 uvec4 GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val;
 uvec4 GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup;
 if((false))
  barrier();
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.xyz = GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_id;
 GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.xyz = GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.xyz;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz = GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.xyz;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((((mix(vec2((injectionSwitch)[0], (- 323.737)), vec2((7086.0264), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y)) && ((((injectionSwitch.x > injectionSwitch.y)))))) && true))
  barrier();
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((clamp(int(3), int(3), int(3))))) >> (int(3))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((! (! (true))))
    {
     if((((((injectionSwitch.x) + 0.0) > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; ((_injected_loop_counter) * 1) != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   do
    {
     if((false))
      barrier();
     if(((! (! (false)))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while((((((injectionSwitch.x > injectionSwitch.y)) || (((((injectionSwitch.x) * 1.0) > injectionSwitch.y) || false))))));
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(7))); _injected_loop_counter --)
      {
       barrier();
       if(((! (! ((false || (false)))))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if(true)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if(((bool(bvec2(false, true)))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; ((((false ? (_injected_loop_counter) : ((_injected_loop_counter) / 1)))) >> 0) > (0 >> (int(3))); _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (((min(((vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))) * mat2(1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))))[1]), vec2((- 519.729), (20.50)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))).y))))
            {
             if((((injectionSwitch.x > (clamp(injectionSwitch, (mix(vec2((injectionSwitch)[0], ((max(- 254.705, - 254.705)))), vec2((- 455.370), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
             if((false))
              barrier();
            }
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       barrier();
      }
    }
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if(((bool((bvec2(bvec2(bvec2(bool(bvec3((false), false, false)), false))))))))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((! (! (false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(((! (! (false)))))
      barrier();
    }
   while(((bool((true && (bool((((((((injectionSwitch.x > (vec2(vec3(injectionSwitch, 0.0))).y))) || false) && true)) && true))))))));
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  barrier();
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.y = subgroup_id;
 if((false))
  barrier();
 if((false))
  barrier();
 if((! ((true && (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((bool(bvec3(true, true, true))))
  {
   GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.w = subgroup_size;
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((bool(bool(true))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter < (1 & (1 ^ 0)); _injected_loop_counter ++)
          {
           barrier();
           if((false))
            barrier();
          }
        }
       barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if(false)
    {
     if(((false || (false))))
      barrier();
     if((false))
      {
       if((((false) || false)))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
       if(((false || (false))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((float(66776u))), bool(false)))))))
        {
         if((((bool(bvec4((bool(bvec3(((((injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), false, false))), true, false, false))))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
     if((false))
      barrier();
     if(((bool(bvec2(false, false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! ((false || (((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(true)
        {
         for(int _injected_loop_counter = (0 >> (((false ? (- 42005) : int(2))))); _injected_loop_counter < ((((1 << (((int(5))) * 1)) >> (int(((((5) | (5))) | (5))))) << ((clamp(int(5), int(5), int(5))))) >> (int(5))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((false))
                  barrier();
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                 if(((bool(bool((bool(bvec4(false, true, true, true))))))))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
            {
             barrier();
             if(((bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), false, true)))))
              barrier();
            }
          }
         if((false))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((bool((false || (bool(false)))))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = ((1 << (int(3))) >> (((int(3)) * 1))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while((true && (false)));
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x < injectionSwitch.y)) && (((bool(bvec3(false, false, (true && (false)))))))))
        {
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     if(false)
      {
       if(((bool(bvec4(false, false, true, true)))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((bool(bool((true && ((((injectionSwitch.x > injectionSwitch.y)))))))))
        {
         do
          {
           if((((! (! (bool(bvec3((! (! (true && ((((injectionSwitch.x > injectionSwitch.y))))))), ((injectionSwitch.x > injectionSwitch.y)), true))))))))
            barrier();
          }
         while(false);
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > (vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0))).y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     barrier();
     if((false))
      barrier();
    }
  }
 if(((((((bool(bool(bool(bvec4(false || (false), true, true, false)))))))) && true)))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) >> 0); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((((injectionSwitch.x > injectionSwitch.y))) || false))
        {
        }
       else
        {
         if(true)
          {
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           while((! ((! ((! (! (! (! (false))))))))));
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (! (false)))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > ((injectionSwitch) - log(vec2(1.0, 1.0))).y))))
        barrier();
       barrier();
      }
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((! (! ((false)))))
      {
       for(int _injected_loop_counter = (0 & (71563 ^ 6753)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > (max(injectionSwitch, (min(injectionSwitch, (min(injectionSwitch, injectionSwitch)))))).y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : (- 1132.3706)))))))
      barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
   while(false);
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if((false))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
       if(((false || (false))))
        barrier();
      }
    }
   if(false)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if(((((bool(bvec2(false, true)))) || false)))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! ((bool(bvec3(! (false), true, true)))))))
      barrier();
     if(((bool(bvec4(false, false, true, true)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((true && (false))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > (((clamp(injectionSwitch, injectionSwitch, (max(injectionSwitch, injectionSwitch))))) * cos(vec2(0.0, 0.0))).y))))
    {
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(false);
    }
   barrier();
  }
 for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((true && (! (! ((((false) || false)))))))
    {
     if(((((((injectionSwitch.x > injectionSwitch.y)) || ((min(((false ? (injectionSwitch) : injectionSwitch)).x, ((false ? (injectionSwitch) : injectionSwitch)).x)) > injectionSwitch.y))))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if(false)
      {
       if(((! ((bool(bvec3(! (false), true, true)))))))
        barrier();
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((((false || (false))) || false))
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((! (! ((false)))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((bool((bvec3(bvec3(bvec3(false, true, false)))))))
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if(((true && (false))))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
                        barrier();
                       barrier();
                      }
                    }
                   while((bool(bool(false))));
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                         if((false))
                          barrier();
                        }
                       barrier();
                      }
                     do
                      {
                       if((! (! ((false || ((false || (! ((! ((bool(bool(false))))))))))))))
                        {
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          barrier();
                         barrier();
                         if((false))
                          barrier();
                        }
                      }
                     while(false);
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != ((false ? (58186) : ((1 << (int(3))) >> (int(3))))); _injected_loop_counter ++)
                          {
                           barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if((false))
                          barrier();
                        }
                      }
                     if((false))
                      barrier();
                    }
                  }
                }
               for(int _injected_loop_counter = 1; (((! (! ((bool(bvec4(_injected_loop_counter != 0, false, true, true))))))) && ((((false ? (- 6.1) : (vec2(injectionSwitch[0], injectionSwitch[1])).x)) < injectionSwitch.y))); _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   ((GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.y = ((false ? (subgroup_size) : GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z))) | 0u);
                   if((false))
                    barrier();
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(((false || ((true && (((injectionSwitch.x > injectionSwitch.y))))))))
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((false))
                        barrier();
                       if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((false || (false))))
                            barrier();
                           barrier();
                          }
                         barrier();
                        }
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if(((! (! ((bool(bvec4(false, true, false, false))))))))
                        barrier();
                      }
                     barrier();
                     if((false))
                      barrier();
                     if(((false || (false))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
              }
             if((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               do
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                   if(((! (! (! (! (! ((! ((((false || ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
                    barrier();
                   if(((false) || false))
                    {
                     if((((false) || false)))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     if(((false || (false))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       barrier();
                      }
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = ((0 & - 88086) | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if(((true && ((! (! (false)))))))
        barrier();
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 uint num_workgroup = (((~ (((~ (((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)))) << 0u)))) - 0u);
 if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
       if((false))
        barrier();
       if(((true && (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    {
     if(true)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (((int(7))) + 0)) >> (int(7))); _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
        {
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((0 << (int(4))) ^ 1); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.w = num_workgroup;
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = (max((~ (~ (((~ (~ (0u ^ (((gl_WorkGroupSize.x) / ((((1u << ((max(uint(0u), uint(0u))))) >> (uint(0u))) << (((true ? uint(5u) : (75014u))))) >> ((clamp(uint(5u), ((uint(5u)) | (uint(5u))), uint(5u)))))))))))))), gl_WorkGroupSize.x));
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     if(((! (! (((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)))))))))
      {
       if((false))
        {
         if((false))
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = (1 | ((1 << (int(1))) >> (int(1)))); (~ ((min(~ ((int(ivec4(_injected_loop_counter, 1, 0, 1)))), ~ ((int(ivec4(_injected_loop_counter, 1, 0, 1)))))))) != (max(0, 0)); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while((false || (false)));
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
     if((((((! (! ((injectionSwitch.x > injectionSwitch.y))))))) || false))
      {
       for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((! (! ((((false)) || false)))))
          {
           if(((((bool(bvec4(((false) || false), false, false, ((injectionSwitch.x < injectionSwitch.y))))) && true))))
            barrier();
           barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       if((((false)) || false))
        {
         if((false))
          {
           if((false))
            barrier();
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if(((! (((! (false)) && true)))))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.z = ((workgroup_id) / ((((uint((((injectionSwitch) / vec2(1.0, 1.0)).y)) << (max((uint(7u)), (uint(7u))))) | 0u)) >> (uint(7u))));
 uint workgroup_base = workgroup_size * GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.z;
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.w + GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.y;
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w = virtual_gid;
    }
  }
 if((((false) || false)))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = ((((((((((1 << (int(1))) >> (int(1)))) | (((1 << (int(1))) >> (int(1))))) << (int(5)))) << 0) >> (int(5))) << ((min(int(2), int(2))))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
   if((false))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   atomicStore(write_val, uint(GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w), 4, ((64) / 1), ((0) | (((0 << (int(2))) + (0)))));
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.x = ((uint((injectionSwitch.x)) ^ (uint(((uvec4(((((max((read_val) << 0u, (read_val) << 0u)))) | ((clamp(read_val, (clamp(((read_val) | (read_val)), ((read_val) << 0u), read_val)), read_val)))), 0u, 1u, 1u)) | uvec4(((uint(uint(((clamp(((0u) * 1u), 0u, 0u)))))) >> uint((injectionSwitch.x))), 0u, 0u, 0u))))));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if(((bool(bvec4(false, false, true, true)))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.w = (min(GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size, GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size)).x;
  }
 if(((! (! (false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((((true && (false))) && true)))
    barrier();
   if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), false)))) || false))
            barrier();
          }
         while(false);
        }
       else
        {
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if(((((((true ? injectionSwitch : (vec2(655.403, - 534.249))))) / vec2(1.0, 1.0)).x < ((injectionSwitch.y) / 1.0))))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > (min(injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y))))))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(((bool(bvec4(bool(bool((false))), true, false, true)))))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if(((true) || false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         barrier();
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
   do
    {
     if(true)
      {
       for(int _injected_loop_counter = int(((clamp((vec2(mat4(injectionSwitch, 1.0, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, ((clamp(float(mat2(1.0, exp(0.0), 1.0, abs(1.0))), (clamp(float(mat2(1.0, exp(0.0), 1.0, abs(1.0))), float(mat2(1.0, exp(0.0), 1.0, abs(1.0))), float(mat2(1.0, (1.0 * ((clamp(exp(0.0), exp(0.0), (float(mat3x4(exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))), 1.0, abs(1.0))))), float(mat2(1.0, exp(0.0), 1.0, abs(1.0)))))), cos(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0)))), injectionSwitch, injectionSwitch)).y)); _injected_loop_counter != (0 << ((clamp((clamp(int(4), (min(int(4), int(4))), int(4))), (clamp(int(4), (min(((int(4)) + 0), int(4))), int(4))), (clamp(int(4), (min(int(4), (0 ^ ((int(int(int(4)))))))), ((min((int(int((41272 & 0)))), (clamp((~ (~ ((41272 & 0)))), (41272 & 0), (41272 & 0))))) | (int(4))))))))); ((false ? (_injected_loop_counter) : _injected_loop_counter --)))
        {
         if((! (! (((((! ((((! (! (! ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))))) && true))))) || false)))))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   do
    {
     GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x = GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.w;
    }
   while(((false) && true));
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   do
    {
     barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if(true)
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (int(ivec2((max(1, 1)), (((0 ^ 1) | int((injectionSwitch.x))))))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (((((true ? (max((((0) ^ 0)) - 0, (((0) ^ (1 * (0)))) - 0)) : (_injected_loop_counter))))) | (0)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((true && ((! (! ((false)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; (((0 | (_injected_loop_counter))) * 1) != (0 ^ ((0 ^ (max((((max((int(((min((vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, (injectionSwitch.x)))), injectionSwitch)).x))), (int((injectionSwitch.x)))))) * 1), (int(((mix(float(injectionSwitch.x), float((2.0)), bool(false))))))))))); ((false ? (_injected_loop_counter) : _injected_loop_counter --)))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; (~ ((0 | ((~ (~ (~ ((~ (~ (_injected_loop_counter))))))))))) != 1; _injected_loop_counter ++)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > (max((max((min(((float(mat4(float(mat4x2((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x), 1.0, 1.0, 0.0, (injectionSwitch.x), log(1.0), 1.0)), 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), round(length(normalize(1.0))), 0.0, 0.0)))), injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (min(int((injectionSwitch.x)), int((injectionSwitch.x)))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          barrier();
         buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual((min((1u * ((uint(uvec2(((((((GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup) | (uvec4(0u, 0u, 0u, 0u) >> (uvec4(2u))))) * uvec4(1u, 1u, 1u, 1u)).xyz) - uvec3(0u, 0u, 0u)).x, 1u))))), ((GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz) - uvec3(0u, 0u, 0u)).x))));
         if((false))
          barrier();
         if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))
          barrier();
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(true)
      {
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
        }
       while(false);
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(false);
        }
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     barrier();
     if((false))
      barrier();
    }
   else
    {
    }
  }
}
