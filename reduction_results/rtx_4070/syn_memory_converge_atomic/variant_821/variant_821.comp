#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false)) || false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((! (! ((((! ((bool(bvec3(! (! (! (((((! (! ((bool(bvec4(bool(bvec2(((false || ((false || ((true && ((((bool(bool((true && (bool((bool((bvec3(bvec4((bvec3(bvec4(bvec3(bool((((! (! (false)))) && true)), true, false), true))), true)))))))))))) && true)))))))), false)), false, false, true)))))))) || false)))), true, true)))))))))))
  {
   if((false))
    barrier();
   if(((((((clamp(((max((min((injectionSwitch) * mat2(1.0), (((injectionSwitch) * ((true ? mat2((max(1.0, 1.0))) : (outerProduct(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)))), (injectionSwitch) * mat2(1.0)))), ((max((min((injectionSwitch) * mat2(1.0), (((injectionSwitch) * ((true ? mat2((max(1.0, 1.0))) : (outerProduct(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)))), (injectionSwitch) * mat2(1.0)))), ((true ? ((max((min((injectionSwitch) * mat2(1.0), (((injectionSwitch) * ((true ? mat2((max(1.0, 1.0))) : (outerProduct(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)))), (injectionSwitch) * mat2(1.0)))) : (vec2(65.59, 563.207)))))).x > ((clamp(((((((((max((clamp((true ? vec2(vec2(injectionSwitch)) : (injectionSwitch)), (true ? vec2(vec2(injectionSwitch)) : (injectionSwitch)), (true ? vec2(vec2(injectionSwitch)) : (injectionSwitch)))), (((((true ? vec2(vec2(injectionSwitch)) : (injectionSwitch))) * mat2(((1.0) * 1.0))) * mat2(1.0))))))) * vec2(1.0, 1.0))) * mat2(1.0))) + vec2(0.0, 0.0)), ((max((clamp((true ? vec2((vec2(1.0, 1.0) * (vec2(injectionSwitch)))) : (injectionSwitch)), (true ? vec2(vec2((max(injectionSwitch, ((min(vec2(mat2(injectionSwitch, 0.0, 1.0)), vec2(mat2(injectionSwitch, 0.0, 1.0))))))))) : (injectionSwitch)), (true ? vec2(vec2(injectionSwitch)) : (injectionSwitch)))), (((true ? vec2(vec2(injectionSwitch)) : (injectionSwitch))) * (((mat2(mat3x2(mat2(1.0))))) + mat2(0.0, 0.0, 0.0, 0.0)))))), ((max((clamp((true ? vec2(vec2(injectionSwitch)) : (injectionSwitch)), (((true) || false) ? vec2(vec2(injectionSwitch)) : (injectionSwitch)), ((((clamp(true ? vec2(vec2(injectionSwitch)) : (injectionSwitch), true ? vec2(vec2(injectionSwitch)) : (injectionSwitch), true ? vec2(vec2(injectionSwitch)) : (injectionSwitch)))) / vec2(1.0, 1.0))))), ((((((clamp(true ? vec2(vec2(((false ? (injectionSwitch) : injectionSwitch)))) : (injectionSwitch), (! (! (true))) ? vec2(vec2(((false ? (injectionSwitch) : injectionSwitch)))) : ((min(injectionSwitch, injectionSwitch))), true ? vec2(vec2(((false ? (injectionSwitch) : injectionSwitch)))) : (injectionSwitch)))) - vec2(0.0, 0.0)))) * mat2(1.0)))))))).y)) || ((false) || ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     if((((bool(bvec3((! (! (bool(bvec4(((true && (! (((! (((false)))) || false))))) && (! (! (true))), ((injectionSwitch.x < injectionSwitch.y)), false, (bool(((bvec3(bvec3((bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false)))))))))))))))), false, false))))))
      barrier();
     if(((! (! (false)))))
      barrier();
     barrier();
     if(((! ((bool(bvec4(! (((injectionSwitch.x > injectionSwitch.y))), true, true, true)))))))
      barrier();
    }
   barrier();
   if(((((((min(injectionSwitch.x, injectionSwitch.x)) > (float(vec2(injectionSwitch.y, 1.0))))))) && true))
    barrier();
   if(((bool((bvec2(bvec4(bvec2(false, false), (bool(bvec4(true, false, true, true))), true)))))))
    barrier();
  }
 if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 if(((((((! (! (false))))) || false)) && (! (! (((true) && true))))))
  {
   if((false))
    barrier();
   if(((((true && ((false || (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((! ((! ((bool(bvec4(! (! ((false))), true, false, true))))))))
  barrier();
 if((false))
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((! (! ((false)))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max(gl_NumWorkGroups.x, (uvec3(((gl_NumWorkGroups) / ((uvec3((~ (~ (((1u) - 0u)))), 1u, 1u) << (~ (~ ((uvec3(1u)))))) >> (uvec3(1u))))[((0) >> 0)], ((clamp((gl_NumWorkGroups[((1) - 0)]) | 0u, (((gl_NumWorkGroups[1]) | ((max(gl_NumWorkGroups[1], (0u | (gl_NumWorkGroups[1]))))))) | 0u, (((true ? gl_NumWorkGroups[1] : (subgroup_size)))) | 0u))), gl_NumWorkGroups[(~ (((~ (2)) | (~ (2)))))])).x));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((false || (((true && ((true && ((true && ((((false)) && true)))))))))) || (((true && ((! (! (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((false) && true)))
  barrier();
 uint virtual_gid = ((((uint(uvec3(clamp(workgroup_base, workgroup_base, workgroup_base), uint((injectionSwitch.y)), 1u))))) - uint((injectionSwitch.x))) + subgroup_id * (clamp(((false ? (0u | ((num_workgroup))) : subgroup_size)), (min(subgroup_size, (0u | (subgroup_size)))), (~ (~ (~ (~ (((0u | (subgroup_size)))))))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((((((min(injectionSwitch.x, ((max((injectionSwitch.x), (injectionSwitch.x))) / 1.0)))) / 1.0) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((false || (bool(bool(false)))))))
    {
     if((((bool(bvec3((false), true, false))) || false)))
      {
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint read_val = atomicLoad(write_val, (clamp(4, 4, ((4) - 0))), 64, 0);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((mix(float(((false ? (clamp((float(mat3x2(0.1, 1.0, 1.0, 0.0, 1.0, 0.0))), 0.1, 0.1)) : (max(- 864.659, ((- 864.659) / 1.0)))))), float(injectionSwitch.x), bool(true))) > ((((false) && true) ? (- 9470.3611) : (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
  barrier();
 if((((bool(bvec3((false), false, false)))) || ((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = ((uint(subgroupAllEqual(read_val))) * 1u);
 if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec3((((! (! ((((bool(bool(false || ((true && ((((false || (((injectionSwitch.x > injectionSwitch.y)))) || ((bool((bvec2((bvec3(bvec4(bvec3((bvec2(bvec4(bvec2(injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y, true), true, true))), true), false))))))))))))))))))))) || false)), (((false || ((min((mix(vec2((371.355), (192.937)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (exp(vec2(0.0, 0.0)) * (injectionSwitch)))).x > injectionSwitch.y)))), true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((bool((((false) && true) || (bool((((false || (((! (! (true && ((false))))) || false))))))))))) || false))
    {
     if((false))
      {
       if(((bool(bvec4(bool(bvec2((false), ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((((injectionSwitch.x > injectionSwitch.y))))) && ((injectionSwitch.x < injectionSwitch.y))) && true))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((((((min(float(mat4(true ? (clamp(injectionSwitch, (mat2(1.0) * (injectionSwitch)), ((false ? ((mix(vec2((61.71), (vec2(- 8566.1841, 74.39))[1]), vec2((vec2(- 8566.1841, 74.39))[0], (5.8)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y)))))) : injectionSwitch)))).x : (681.864), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), 1.0, 1.0, 0.0, 1.0)), float(mat4(true ? (clamp(injectionSwitch, (mat2(1.0) * (injectionSwitch)), ((false ? ((mix(vec2((61.71), (vec2(- 8566.1841, 74.39))[1]), vec2((vec2(- 8566.1841, 74.39))[0], (5.8)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y)))))) : injectionSwitch)))).x : (681.864), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), 1.0, 1.0, 0.0, 1.0))))))) > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((((1.0 * ((min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y) || false)))))
  barrier();
}
