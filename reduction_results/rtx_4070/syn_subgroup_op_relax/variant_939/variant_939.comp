#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (clamp((min((~ (~ (gl_NumWorkGroups))), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x, (0u | ((((uint(uint(1u))) << (uint((clamp(((3u) | 0u), 3u, 3u))))) >> (uint(((3u) | (3u))))) * (((((min((~ (~ (gl_NumWorkGroups))), ((~ (((~ (~ ((~ (uvec3(0u, 0u, 0u)))))) | (~ (uvec3(0u, 0u, 0u)))))) | (gl_NumWorkGroups)))).x) * (0u ^ 1u)))))), (min((~ ((((~ ((((~ (~ (~ (~ (gl_NumWorkGroups)))))) | uvec3(0u, 0u, 0u))))) | ((~ ((((~ (~ (~ (~ (gl_NumWorkGroups)))))) | uvec3(0u, 0u, 0u)))))))), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (((((min((((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)) | (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)))), gl_WorkGroupID))) + uvec3(0u, 0u, 0u))) | (gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (min(workgroup_base + (((min(subgroup_id, subgroup_id))) >> 0u) * subgroup_size + subgroup_local_id, ((workgroup_base + (((min(subgroup_id, subgroup_id))) >> 0u) * subgroup_size + subgroup_local_id) + 0u)));
 uint next_virtual_gid = ((((min(((uint(uint(workgroup_base + subgroup_id * subgroup_size))) | (uint(uint(workgroup_base + subgroup_id * subgroup_size)))), uint(uint(workgroup_base + subgroup_id * subgroup_size))))) >> uint((injectionSwitch.x)))) + (~ (~ (((((~ (~ (((((true && ((false || (((((injectionSwitch.x > injectionSwitch.y)) || (((((injectionSwitch.x < injectionSwitch.y)) && (bool(bool(true))))) || false)))))))) ? (((subgroup_local_id + 1) % (~ (~ (subgroup_size))))) | uint(((((max(injectionSwitch.x, ((clamp(((true ? ((true ? (mix(float((224.584)), float(mix(float((- 753.062)), float((((false ? (vec2((mix(float(5.6), float((3.5)), bool(((injectionSwitch.x > injectionSwitch.y))))), 4.6)) : vec2(vec2((vec2(0.0, 0.0) + (injectionSwitch))))))).x), bool((bool(bool(true)))))), bool(((injectionSwitch.x < injectionSwitch.y))))) : (- 4852.5794))) : (1.0))), mix(float((- 753.062)), float((((false ? (vec2(5.6, 4.6)) : vec2(vec2((vec2(0.0, 0.0) + (injectionSwitch))))))).x), bool((bool(bool((bool((bool(bvec2(bool(true), false)))))))))), mix((1.0 * (float((- 753.062)))), float((((false ? (vec2(5.6, 4.6)) : vec2(vec2((vec2(0.0, 0.0) + (injectionSwitch))))))).x), bool((bool(bool(true))))))))))) / 1.0))) : (((bool(bool(true))) ? (workgroup_size) : (subgroup_size)))) | ((uint(uvec3((false ? (subgroup_id) : (((bool(bool((true && ((false || (((bool(bool(true))) || false))))))))) ? (((subgroup_local_id + 1) % (min((~ (~ (subgroup_size))), (~ (~ (subgroup_size))))))) | uint(((((max(injectionSwitch.x, ((clamp(((false ? (- 993.208) : ((true ? ((true ? mix(float((- 753.062)), float((((false ? (vec2(5.6, 4.6)) : vec2(vec2((vec2(0.0, 0.0) + (injectionSwitch))))))).x), bool((bool(bool(true))))) : (- 4852.5794))) : (1.0))))), mix(float((- 753.062)), float((((false ? (vec2(5.6, 4.6)) : vec2(vec2(((max((clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0))) + ((vec2(injectionSwitch[0], injectionSwitch[1]))))))))).x), bool((bool(bool(true))))), mix(float((- 753.062)), float((((false ? (vec2(5.6, 4.6)) : vec2(vec2((vec2(0.0, 0.0) + (injectionSwitch))))))).x), bool((bool(bool(true))))))))))) / 1.0))) : (((bool(bool(true))) ? (workgroup_size) : (subgroup_size))))), 0u, 1u))))))))))))));
 buf[virtual_gid] = (min(1, 1));
 if(subgroup_local_id + 1 < (((((clamp(subgroup_size, subgroup_size, subgroup_size)))) >> (0u & 73344u)) | (subgroup_size)))
  {
   atomicStore(buf[next_virtual_gid], uint((~ (~ ((((min(((((((false ? (((clamp((int((min(int((- 76213)), int((- 76213)))))), (0 ^ ((int((min(int((- 76213)), int((- 76213)))))))), ((min(int((min(int((- 76213)), int((- 76213))))), int((min(int((- 76213)), int((- 76213)))))))))) >> 0)) : 2)))) * 1) >> 0) / 1, ((((((false ? (((clamp((int((min(int((- 76213)), int((- 76213)))))), (0 ^ ((int((min(int((- 76213)), int((- 76213)))))))), ((min(int((min(int((- 76213)), int((- 76213))))), int((min(int((- 76213)), int((- 76213)))))))))) >> 0)) : 2)))) * 1) >> 0) / 1)))))))), 4, 64, 0);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), (max(((((1 * (min(4, 4)))) * 1)), 4)), 64, 0);
   subgroupAll(true);
  }
}
