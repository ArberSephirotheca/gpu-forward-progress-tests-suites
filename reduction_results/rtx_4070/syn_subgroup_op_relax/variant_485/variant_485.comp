#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > ((true ? injectionSwitch : (vec2(2.7, - 4.5)))).y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) | 0); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id;
 do
  {
   if((false))
    return;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if(false)
      {
      }
     else
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(((false || (false))))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z = subgroup_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   while(false);
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((! (! ((((! (! (true)))) && true)))))
        {
         if((false))
          {
           if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           return;
          }
         if((false))
          barrier();
         return;
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           return;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > ((true ? injectionSwitch : (radians(vec2(2072.4981, - 8.8))))).y))))
          return;
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 if((false))
  barrier();
 (0u + (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w = ((false ? (subgroup_size) : ((true ? subgroup_local_id : (subgroup_size)))))));
 if(false)
  {
   do
    {
     if(((bool(bool(false)))))
      {
       if((false))
        barrier();
       return;
      }
    }
   while(false);
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    return;
   if(((bool(bvec4(false, false, false, false)))))
    return;
   if((((false)) || false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(((! (bool(bvec2((! (! ((! ((false || (((injectionSwitch.x > injectionSwitch.y))))))))), false))))))
            {
             for(int _injected_loop_counter = ((0 | ((clamp((int((injectionSwitch.y)) << (int(0))) >> (int(0)), (int((injectionSwitch.y)) << (int(0))) >> (int(((0) | (0)))), (clamp((int((injectionSwitch.y)) << (int(0))) >> (int(0)), (int((injectionSwitch.y)) << (int(0))) >> (int(0)), (int((((injectionSwitch.y)) / 1.0)) << (int(0))) >> (int(0))))))))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         return;
        }
       if((false))
        return;
       if(((bool(bvec3(false, true, true)))))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if(((((injectionSwitch.x > injectionSwitch.y) || false))))
      {
       if((false))
        {
         do
          {
           barrier();
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
              }
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     else
      {
       do
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              return;
            }
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(true)
        {
         do
          {
           if((((bool(bvec3(true, true, false))) && true)))
            {
             barrier();
            }
           else
            {
            }
          }
         while(false);
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((false || (bool(bvec2(false, false)))))))
        {
         if((bool(bvec2(((false || (false))), ((injectionSwitch.x < injectionSwitch.y))))))
          return;
         return;
        }
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((false ? (51789) : int(7))))) >> ((((0 + (int(7)))) / 1))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             barrier();
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((false))
            return;
           do
            {
             if((false))
              {
               if((false))
                barrier();
               return;
              }
            }
           while(false);
          }
         else
          {
           for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
         if((false))
          barrier();
        }
      }
    }
   if(true)
    {
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(false);
    }
   else
    {
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if(((((false || (false)) || false))))
      {
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((true ? injectionSwitch.x : (mix(2844.8851, - 73.18, 9131.1349)))) > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(true)
      {
       if((((false) && true)))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
      }
     if((false))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          break;
         barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        continue;
      }
     if((false))
      continue;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        break;
       if((false))
        return;
       if((false))
        continue;
       if((false))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 78886); _injected_loop_counter --)
          {
           return;
          }
        }
       return;
      }
     while(((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))));
    }
  }
 while(false);
 if(false)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1 << (((int(4)) * 1))) >> (int(4))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! ((! (! (! (false))))))))
        return;
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((bool(bvec4(false, true, true, false)))))
    {
     do
      {
       return;
       if((false))
        return;
       if((false))
        {
         if(((false || (false))))
          continue;
         barrier();
         if((false))
          barrier();
        }
      }
     while(false);
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((! (! ((false || (((false) || false))))))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     barrier();
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = num_workgroup;
 do
  {
   if((false))
    {
     do
      {
       for(int _injected_loop_counter = (clamp((0 | (int((injectionSwitch.x)))), int((injectionSwitch.x)), int((injectionSwitch.x)))); (true && (_injected_loop_counter < (((((1 | 1) << ((int(ivec4(int(0), 1, 0, 0))))) >> (int(0))) << (int(0))) >> (int(0))))); _injected_loop_counter ++)
        {
         if(((((! ((true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     while(((false) || false));
    }
   if((false))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (((((1 << (int(2))) >> (int(2)))) << 0) & ((1 << (int(1))) >> (int(1)))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    continue;
   if((false))
    {
     if(((false || (false))))
      {
       if((false))
        barrier();
       if((false))
        return;
       for(int _injected_loop_counter = int((injectionSwitch.y)); ((true && (((bool(bvec3(_injected_loop_counter != 0, true, false))) && true)))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       break;
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
        {
         if(((((float(mat3x4(injectionSwitch.x, 1.0, 0.0, 0.0, (injectionSwitch.x), 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))))
          barrier();
        }
       continue;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((0) + 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((bool(bvec4((false), true, false, false))))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     do
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        {
         if(((((vec2(mat3x2(injectionSwitch, cos(0.0), 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     while(false);
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 if((bool(bool((((! (! (true)))) && true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if(false)
        {
        }
       else
        {
         do
          {
           if(((false || ((! (! (((false) && true))))))))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              break;
             for(int _injected_loop_counter = 1; ((_injected_loop_counter > 0) && true); _injected_loop_counter --)
              {
               if((false))
                {
                 if(((! (! (false)))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((bool((bvec3(bvec4(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, true), false))))))
                {
                 if((false))
                  barrier();
                 continue;
                }
               if(true)
                {
                 if(true)
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   if((false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if((false))
              break;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
      }
     if(true)
      {
       do
        {
         for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); (true && (_injected_loop_counter < ((1 << (int(1))) >> (int(1))))); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (! (false)))))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(false)
  {
  }
 else
  {
   if((false))
    return;
  }
 if(true)
  {
   for(int _injected_loop_counter = ((false ? (- 85335) : 1)); (((bool(bool(_injected_loop_counter > (clamp((((0 | 0)) | ((0 | 0))), (0 ^ ((0 | 0))), (0 | 0))))))) || false); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          break;
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         do
          {
           if((false))
            continue;
           return;
           if((false))
            barrier();
          }
         while(false);
         if(((bool(bvec2(false, true)))))
          {
           if((false))
            {
             if(((! (! (false)))))
              barrier();
             break;
             if(((((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))) || false)))
              break;
            }
           barrier();
           if((false))
            barrier();
          }
        }
       while(false);
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
  }
 else
  {
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((bool(bvec4(false, false, false, false))))
        {
        }
       else
        {
         barrier();
        }
      }
     if((bool(bool(((injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
              }
             while(false);
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(false);
        }
       do
        {
         return;
         if((false))
          barrier();
        }
       while(false);
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 else
  {
   if((false))
    return;
   if(((! (! ((bool(bvec4(false, true, false, false))))))))
    barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (((int(8)) | (int(8))))); _injected_loop_counter --)
    {
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   do
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      return;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while((bool(bvec3(false, true, true))));
    }
   if((false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(((((bool(bool((bool(bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y))))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
          barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(((((bool(bool(false)))) && true)))
    barrier();
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((false || (bool(bvec2((bool(bvec4((! (! (injectionSwitch.x > injectionSwitch.y))), true, true, false))), false)))))))))
    return;
   barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
      break;
     if((false))
      {
       if((false))
        continue;
       return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      continue;
     if((false))
      barrier();
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(((true && ((((float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, ((true ? 0.0 : (- 2550.1289))), 1.0))) > injectionSwitch.y))))))
  {
   if((false))
    return;
   barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     return;
     if((false))
      return;
    }
   while((true && ((((injectionSwitch.x > (1.0 * (injectionSwitch.y)))) || (false)))));
  }
 if(true)
  {
   if(((false || (false))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if(((! (! ((! (! (false))))))))
      barrier();
     do
      {
       barrier();
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(false);
    }
  }
 else
  {
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(false)
  {
  }
 else
  {
   if(((! (! (! (((false || (! (false))))))))))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     barrier();
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = (((((false || (injectionSwitch.x < injectionSwitch.y)))) ? workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * subgroup_size + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w : (workgroup_size)));
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = (0 | ((0) | 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if((false))
      continue;
    }
  }
 if(((bool(bvec3(false, true, true)))))
  {
   if(((((bool(((bool((false || (false)))) && true))) || false))))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   return;
  }
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * subgroup_size + ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + 1) % subgroup_size);
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = next_virtual_gid;
       if(true)
        {
         if((false))
          {
           if((false))
            return;
           if((! (! (false))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((bool(bool((false)))))
      barrier();
     for(int _injected_loop_counter = ((0 & - 86063) << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   if((false))
    {
     if(((false || (false))))
      return;
     if((false))
      barrier();
     if(true)
      {
       do
        {
         return;
         if((false))
          barrier();
        }
       while(false);
      }
     else
      {
      }
    }
   do
    {
     if((! (! ((false)))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          continue;
         barrier();
        }
       if(true)
        {
         if((false || (true)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > (clamp(((int((injectionSwitch.x))) - 0), ((int((injectionSwitch.x))) | (int((injectionSwitch.x)))), int((injectionSwitch.x)))); _injected_loop_counter --)
              {
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
           if((false))
            barrier();
          }
        }
       else
        {
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      continue;
    }
   while(false);
   for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ (1 & 1)); _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
    {
     barrier();
    }
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((((injectionSwitch.x > injectionSwitch.y))) && true))
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     while(false);
     if((false))
      return;
    }
   else
    {
     if((false))
      barrier();
     if((((((false)) && true)) && true))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
     if((false))
      return;
     do
      {
       if(true)
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            {
             if(((bool(bvec2(false, false)))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         do
          {
           if(((false || ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(((true && (false))))
              barrier();
             if((((bool((bvec3(bvec3(bvec3((((false)) || ((injectionSwitch.x > injectionSwitch.y))), false, ((injectionSwitch.x < injectionSwitch.y)))))))) && true)))
              continue;
             barrier();
            }
          }
         while(false);
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           continue;
          }
        }
       else
        {
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if((min((max((((false ? (uvec4(51232u, 68020u, 147310u, 191787u)) : (false ? (uvec4(88303u, 175709u, 5230u, (max(((186174u) | (((true ? 186174u : (workgroup_base))))), (0u + (186174u)))))) : GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id)))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id)).w + 1 < subgroup_size)
  {
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             do
              {
               return;
              }
             while(false);
            }
           if(true)
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if((false))
            return;
          }
         if(((! (! (false)))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           barrier();
           if((false))
            return;
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((! (! (false)))))
      {
       if(((bool(bvec2((! (! (bool((bvec2(bvec3(bvec2((false), false), true))))))), true)))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       return;
      }
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      {
       if((false))
        barrier();
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      {
       if((((injectionSwitch.x > (float((max(vec2((min(injectionSwitch.y, injectionSwitch.y)), 0.0), vec2((min(injectionSwitch.y, injectionSwitch.y)), 0.0)))))))))
        return;
       barrier();
      }
     do
      {
       if(((! (! (false)))))
        return;
      }
     while(false);
     if(false)
      {
      }
     else
      {
       if(((bool((bvec2(bvec4(bvec2(false, true), true, false)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (((1 << (int(1))) >> (int(1))) & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   return;
                  }
                }
               barrier();
              }
            }
          }
         do
          {
           barrier();
          }
         while(false);
         if((false))
          return;
        }
       if((false))
        {
         if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
     if((((injectionSwitch.x > (((max((mat2(1.0) * (injectionSwitch)), injectionSwitch))) - sin(vec2(0.0, 0.0))).y))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 53228); _injected_loop_counter --)
        {
         return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (5925 & 0); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     if(false)
      {
       if(((false || (false))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        return;
      }
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], uint(2), 4, 64, 0);
   if((false))
    return;
   if(((true) && true))
    {
     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 ^ (1 ^ 1)); _injected_loop_counter --)
      {
       subgroupAll(false);
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if(((bool(bool(false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         return;
        }
      }
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       return;
       if((false))
        barrier();
      }
     if(((! (! ((false || (false)))))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
    }
  }
 else
  {
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((((injectionSwitch.x > ((false ? (- 6.9) : injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         if(((false || (false))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
             if((false))
              {
               if((false))
                barrier();
               return;
              }
            }
           if((false))
            return;
           if((false))
            barrier();
          }
         else
          {
          }
        }
       return;
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false || (true)))
        {
         if((false))
          return;
        }
       else
        {
        }
       if((((((false) || false)) && true)))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & - 16735); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if(false)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
      }
    }
   else
    {
     if(((((min((((max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], uint(2), 4, 64, ((0) * 1));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > ((false ? (min(injectionSwitch, 2695.1993)) : injectionSwitch)).y))))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
        }
       return;
      }
    }
   subgroupAll(true);
  }
 if((((injectionSwitch.x > (vec2(((mat3(injectionSwitch, 0.0, cos(0.0), 1.0, 0.0, 0.0, 0.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
  barrier();
}
