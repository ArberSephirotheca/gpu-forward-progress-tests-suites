#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((((uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)) + (gl_NumWorkGroups))) | (((gl_NumWorkGroups) >> uvec3(0u, 0u, (clamp(0u, 0u, (0u | ((max(0u, 0u)))))))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((false ? (subgroup_id) : workgroup_size)) * workgroup_id;
 uint virtual_gid = (min(((workgroup_base + ((subgroup_id * ((((false ? (uvec3(123407u, 115093u, 37378u)[2]) : subgroup_size))) << (0u ^ 0u))) | (subgroup_id * subgroup_size))) * 1u), workgroup_base + ((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((((((subgroup_local_id) | ((uint(uvec4(subgroup_local_id, ((((((1u << (uint(2u))) >> (uint(2u)))) | 0u)) ^ 0u), (~ (~ ((clamp(0u, 0u, 0u))))), 1u))))) + (clamp(1, (clamp(((0 | ((((((1)) | ((1)))) >> 0))) / 1), ((0 | ((1))) / 1), (clamp(((0 | ((1))) / 1), ((0 | ((1))) / 1), ((((0) ^ 0) | ((((1) ^ 0)))) / 1))))), 1)))) - 0u) % subgroup_size)) >> 0u);
 if(false)
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (int((injectionSwitch.x)) >> (int(3))); _injected_loop_counter --)
      {
       if(((injectionSwitch.x < ((false ? (vec2(- 6522.5599, - 98.90)) : injectionSwitch)).y)))
        {
         for(int _injected_loop_counter = ((((1 << (int(0))) >> (int(0)))) ^ 0); _injected_loop_counter != (0 & - 55463); _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if((((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), (! (! (false)))))) && true)))
              {
              }
             else
              {
               for(int _injected_loop_counter = ((max(0, 0)) << (int(3))); _injected_loop_counter < 1; ((false ? (- 47361) : ((((true ? _injected_loop_counter ++ : (atomicOr(_injected_loop_counter, 83563)))) << (0 << (int(8))))))))
                {
                 do
                  {
                   if((((vec2(injectionSwitch[0], injectionSwitch[1])).x < (((true ? (injectionSwitch) * mat2(1.0) : (vec2(- 963.184, - 54.27))))).y)))
                    {
                     buf[virtual_gid] = 1;
                    }
                   else
                    {
                    }
                  }
                 while((bool(bool(false))));
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
   while(((bool(((bool((((injectionSwitch.x < injectionSwitch.y)) && (false)))) || false))) || ((true && (bool(bvec3((false), ((injectionSwitch.x > injectionSwitch.y)), true)))))));
  }
 if(((((((! (! (bool(bool(((((false ? (vec2(- 9.8, - 3642.8887)) : injectionSwitch)).x > (mix(float((- 652.842)), float(injectionSwitch.y), bool(((true) && true)))))))))))) && true)) || ((injectionSwitch.x > injectionSwitch.y)))))
  {
  }
 else
  {
   if(((true) || false))
    {
     if(false)
      {
      }
     else
      {
       do
        {
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             do
              {
               if(true)
                {
                 if((((clamp(subgroup_local_id, ((((((subgroup_local_id) | ((0u | (subgroup_local_id)))) >> 0u))) ^ 0u), subgroup_local_id)) | (~ ((max(0u ^ ((~ ((~ (~ ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))))), 0u ^ ((~ ((~ (~ ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))))))))))) + 1 < (min(((subgroup_size) ^ 0u), subgroup_size)))
                  {
                   do
                    {
                     for(int _injected_loop_counter = (0 << (((max((false ? (60086) : (((! ((bool(bvec2(! (((false) && true)), false))))) ? (bitCount(subgroup_id)) : int((max(5, 5)))))), (false ? (60086) : ((false ? (bitCount(subgroup_id)) : int((max((~ (~ (5))), 5))))))))))); ((((true && ((((((bool(bvec4((((! (! (false || ((false || (_injected_loop_counter != 1)))))))) || false, false, true, false))) || false))) || false))))) || (bool(bool(false)))); _injected_loop_counter ++)
                      {
                       do
                        {
                         atomicStore(buf[next_virtual_gid], (~ (~ ((((1u * ((min(((uint(2)) >> 0u), uint(2)))))) - 0u)))), 4, 64, 0);
                        }
                       while(false);
                      }
                    }
                   while(false);
                   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((! (! (true))))
                        {
                         if(true)
                          {
                           do
                            {
                             subgroupAll(false);
                            }
                           while(false);
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                   if((! ((bool(bvec3((false || (! (false))), false, false))))))
                    {
                    }
                   else
                    {
                     atomicStore(buf[next_virtual_gid], uint((min(((0 >> (int(3))) ^ (~ (~ ((2))))), (clamp(2, ((0 + (min(2, ((2) >> 0))))), ((((int((clamp(ivec4((int(ivec4((((((~ (~ (min(((((false ? (- 94983) : ((((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0)))) | (((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0)))))))) | 0), ((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0))))))))) / ((1 << (int(7))) >> ((max(int(7), int(7)))))) - ((1 ^ 1) | ((0 | 0)))), 0, (int(ivec3(0, 0, 0))), 1))), 1, 1, 0), ivec4((int(ivec4((((((~ (~ (min(((((false ? (- 94983) : ((((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0)))) | (((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0)))))))) | 0), ((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0))))))))) / ((1 << (int(7))) >> ((max(int(7), int(7)))))) - ((1 ^ 1) | ((0 | 0)))), 0, (int(ivec3(0, 0, 0))), 1))), 1, 1, 0), ivec4((int(ivec4((((((~ (~ (min(((((false ? (- 94983) : ((((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0)))) | (((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0)))))))) | 0), ((min(((((clamp(2, 2, 2))) / 1)), ((((clamp(2, 2, 2))) / 1)))) | (((((max(false ? (- 59475) : (int(ivec2((2), 0))), ((((false ? (- 59475) : (int(ivec2((2), 0)))) | 0)) | 0))))) << 0))))))))) / ((1 << (int(7))) >> ((max(int(7), int(7)))))) - ((1 ^ 1) | ((0 | 0)))), 0, (int(ivec3(0, 0, 0))), 1))), 1, 1, 0))))) / 1)))))))), ((4) / (max((clamp(1, 1, 1)), (clamp(1, 1, 1))))), 64, 0);
                    }
                   if((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec4((! ((false || ((bool(bvec2(! (((injectionSwitch.x < injectionSwitch.y))), true))))))), false, false, (! (! ((! (! (false))))))))))))
                    {
                     for(int _injected_loop_counter = 0; ((((_injected_loop_counter) << int((injectionSwitch.x)))) / 1) < int(((clamp(injectionSwitch, injectionSwitch, (min(injectionSwitch, injectionSwitch)))).y)); _injected_loop_counter ++)
                      {
                       subgroupAll(true);
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             while(false);
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   else
    {
    }
  }
}
