#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((bool(bool(false)))))
  barrier();
 if(false)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(((false) || false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        continue;
      }
     else
      {
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
            break;
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            break;
           if((false))
            return;
          }
         else
          {
           if((false))
            continue;
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(((bool(bvec4(false, true, false, true)))))
        {
         if((false))
          {
           if((false))
            continue;
           continue;
          }
         if((false))
          {
           if((false))
            {
             do
              {
               if((false))
                break;
               if((false))
                barrier();
               return;
              }
             while(false);
            }
           if((false))
            barrier();
           if(((! ((false || (! (((injectionSwitch.x > injectionSwitch.y)))))))))
            continue;
           if((false))
            return;
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           do
            {
             if((((false) && true)))
              barrier();
            }
           while(false);
           if((false))
            barrier();
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           do
            {
             barrier();
             if((((false) && true)))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            break;
           do
            {
             if((false))
              continue;
             if((false))
              {
               if((! ((bool(bvec4(! (true), true, true, true))))))
                {
                 if((false))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               else
                {
                }
              }
             return;
            }
           while(false);
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  return;
                 continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               return;
              }
             barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          continue;
         if((false))
          continue;
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         return;
         if((false))
          break;
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
         if((((! (! (bool((bvec3(bvec4(bvec3(false, true, true), false))))))))))
          continue;
        }
       else
        {
         if((false))
          return;
         if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if((false))
          barrier();
        }
      }
    }
  }
 if((false))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      return;
    }
   return;
   if((false))
    return;
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((false) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       barrier();
      }
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            {
             if(((true && (false))))
              barrier();
             return;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          return;
         if((false))
          return;
        }
      }
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      barrier();
     do
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      break;
     if((false))
      barrier();
    }
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 if(((true && (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if((false))
      barrier();
     do
      {
       return;
      }
     while(false);
     if((false))
      continue;
     if((false))
      return;
    }
   while(false);
   if((false))
    barrier();
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((! (! (bool(bvec3(false, true, true))))))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((((false) || false)))
    barrier();
   return;
  }
 buf[virtual_gid] = 1;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = ((0 | 0) | 0); _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           if((false))
            {
             if(((false || (false))))
              continue;
             continue;
            }
           if((false))
            {
             if((false))
              break;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            {
             if((false))
              break;
             continue;
            }
           do
            {
             if((false))
              continue;
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            {
             if((false))
              break;
             if(false)
              {
              }
             else
              {
               if((false))
                return;
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              continue;
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              continue;
             continue;
            }
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
        }
       while(false);
       if((false))
        continue;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
        }
       while((! ((! (! (! (false)))))));
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (((int(8)) ^ 0))); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          return;
        }
       return;
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  barrier();
                 if((((false) && true)))
                  continue;
                 barrier();
                }
               return;
              }
             return;
            }
          }
         while(false);
        }
       if((false))
        return;
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
    }
   if((false))
    return;
   do
    {
     if((false))
      {
       if((((false) || false)))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
   if((false))
    return;
   if((false))
    return;
   if((false || (false)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         continue;
        }
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
         if((false))
          return;
        }
      }
    }
   barrier();
   if((false))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     do
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
       if((false))
        {
         if((false))
          continue;
         break;
        }
      }
     while(false);
     if((false))
      barrier();
     if((false))
      return;
     if(false)
      {
       for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        return;
       if((false))
        barrier();
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         if(true)
          {
           if((true && (true)))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
           if((false))
            return;
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         subgroupAll(false);
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((((false) && true)))
            return;
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while((bool(bool(((injectionSwitch.x > injectionSwitch.y))))));
      }
    }
   else
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             continue;
            }
           do
            {
             return;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  continue;
                 break;
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if((false))
              break;
            }
           while(false);
           if((false))
            barrier();
          }
         if((false))
          continue;
         for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 << (int(7))) << (int(6))); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          break;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            return;
           if((false))
            continue;
           continue;
          }
         if((((false) || false)))
          continue;
         for(int _injected_loop_counter = (6319 & 0); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
          {
           if((false))
            return;
          }
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                return;
               barrier();
              }
             else
              {
               if((false))
                barrier();
               if((false))
                return;
              }
            }
           if((false))
            return;
           if((false))
            {
             if((false))
              return;
             return;
             if((false))
              barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           do
            {
             if((false))
              {
               if(((! (! (false)))))
                barrier();
               if((false))
                return;
               return;
              }
            }
           while(false);
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
               return;
              }
            }
           if((false))
            return;
          }
        }
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if(true)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             return;
             if((false))
              return;
            }
           else
            {
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((! (! (false)))))
      return;
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        return;
       if((false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              barrier();
             if((false))
              barrier();
             if((false))
              return;
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
             if((false))
              break;
            }
           if((false))
            continue;
           barrier();
           if((false))
            continue;
          }
        }
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if(((bool(bool(false)))))
      return;
     if(((false || (false))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if(((true && (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((bool(bool(false)))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         do
          {
           if((false))
            return;
           if((false))
            return;
           do
            {
             if((false))
              return;
             if((false))
              break;
            }
           while(((((injectionSwitch.x > injectionSwitch.y))) || false));
          }
         while(false);
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
        }
      }
     else
      {
       if(((bool(bvec2(false, true)))))
        {
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 >> (int(2))); _injected_loop_counter --)
          {
           if((false))
            return;
          }
        }
       if((false))
        return;
      }
     subgroupAll(true);
     if((false))
      {
       if(((bool(bvec2((true && (false)), true)))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if((false))
          {
           if((false))
            barrier();
           return;
          }
        }
       return;
      }
     do
      {
       if((((false) && true)))
        return;
      }
     while(false);
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
          {
           if((false))
            continue;
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((false) && true)))
              barrier();
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((false))
                  return;
                 barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           return;
           if((false))
            break;
          }
         return;
         if((false))
          continue;
         if((false))
          {
           if((false))
            continue;
           continue;
          }
         if((((false) && true)))
          return;
         if((false))
          {
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            barrier();
           barrier();
           if((false))
            break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          return;
        }
      }
     if((false))
      return;
     if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y)), false)))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((0 | 0) ^ 1); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          {
           if(false)
            {
             if(((true && (false))))
              return;
            }
           else
            {
             return;
             if((false))
              barrier();
             if((false))
              continue;
            }
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           barrier();
          }
         if((false))
          continue;
         barrier();
         if((false))
          continue;
        }
       if((false))
        continue;
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
         if((false))
          {
           if((false))
            continue;
           continue;
           if((false))
            break;
          }
        }
      }
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if((false))
          return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        {
         if((false))
          return;
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    {
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
          }
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
          }
        }
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(((bool(bvec2(false, false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
    }
  }
 if((false))
  {
   do
    {
     return;
    }
   while(false);
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
  }
 if(false)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 do
  {
   if((false))
    break;
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if(((bool(bvec3(bool(bvec3(true, false, true)), false, false)))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              break;
             barrier();
            }
           if((false))
            continue;
           if((false))
            return;
          }
         else
          {
           if((false))
            return;
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(((bool(bool(false)))))
      continue;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((bool(bvec2((bool(bvec4(false, true, true, false))), false))))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((((false) && true)))
        return;
      }
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if(((bool(bvec3(false, true, false)))))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = ((1) << 0); _injected_loop_counter != ((0) | (0)); _injected_loop_counter --)
    {
     if(((bool((bvec3(bvec4(bvec3(false, true, false), false)))))))
      return;
     if((false))
      barrier();
     return;
    }
  }
 do
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((false))
        continue;
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         do
          {
           if(((false || ((false || (false))))))
            continue;
           return;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     barrier();
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        break;
       barrier();
      }
     return;
    }
   if((false))
    barrier();
  }
 while((bool(bvec2(false, false))));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
}
