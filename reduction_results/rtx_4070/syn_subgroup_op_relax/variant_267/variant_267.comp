#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((true ? gl_NumWorkGroups.x : (154293u)));
 if(((((! (! ((bool(bvec4(((! (! (bool((bvec3(bvec4(bvec3((((false || (false || ((true && ((injectionSwitch.x > injectionSwitch.y))))))) || false), true, false), false)))))))), true, true, false))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((true ? injectionSwitch : (vec2(- 886.348, 54.10)))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = ((min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) ^ ((uvec3(gl_WorkGroupID[0], (0u ^ ((min(((gl_WorkGroupID[1]) - 0u), ((false ? (clamp((num_workgroup), (num_workgroup), (max((num_workgroup), (num_workgroup))))) : gl_WorkGroupID[1])))))), gl_WorkGroupID[2])))).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 if(((bool(bvec2(false, false)))))
  barrier();
 uint virtual_gid = ((clamp(min(workgroup_base + ((subgroup_id) << 0u) * subgroup_size, (~ (~ ((min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))), min(workgroup_base + ((subgroup_id) << 0u) * subgroup_size, (~ (~ ((min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))), min(workgroup_base + ((subgroup_id) << 0u) * subgroup_size, (~ (~ ((min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * ((subgroup_size) | (subgroup_size))))))))))) + subgroup_local_id;
 if((false))
  barrier();
 uint next_virtual_gid = ((1u ^ 0u) * (workgroup_base)) + subgroup_id * subgroup_size + (((clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), (((min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) - 0u)))) * 1u);
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((1u * ((0u + (((((false ? (((uint(uvec3((~ (~ ((true ? next_virtual_gid : (subgroup_local_id))))), 0u, 1u))))) : subgroup_local_id))) | (((subgroup_local_id) | (clamp((subgroup_local_id), ((true ? ((((((uint(((true ? uvec3(uint(uvec4(clamp(((subgroup_local_id)), ((subgroup_local_id)), ((subgroup_local_id))), uint((injectionSwitch.x)), 1u, (1u & 1u))), 1u, 1u) : (uvec3(26586u, 21848u, 167400u)))))))) | ((subgroup_local_id)))) ^ 0u) : (((atomicXor(workgroup_size, subgroup_local_id))) >> (150991u & 0u)))), (subgroup_local_id)))))) + 1)))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(((2) | (2))), 4, (((0 | (((64) << (max((0 ^ (0)), ((0) ^ 0)))) / ((1 << (((false ? (76795) : int(6))))) >> (int(6))))))), 0);
   if((false))
    barrier();
   subgroupAll(false);
   if((false))
    {
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if((((((((((((((max(float((transpose(transpose(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat4(log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, (mix(float((483.665)), float((min(0.0, 0.0))), bool(((injectionSwitch.x < injectionSwitch.y))))), 0.0)), 0.0, 0.0, length(vec4(0.0, ((0.0) - 0.0), 0.0, 0.0)), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 0.0))))), float((transpose(transpose(mat4x3(injectionSwitch.x, 1.0, (min(1.0, ((1.0) - 0.0))), 1.0, determinant(((mat4(log((max(1.0, (clamp(1.0, 1.0, (clamp(1.0, 1.0, 1.0))))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, ((true ? 0.0 : (- 2.8))), 0.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat3(((1.0) - 0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 0.0)))))))) - abs(0.0))) / 1.0)) > injectionSwitch.y))) || false))) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   if((bool((bvec3(bvec4(bvec3((false), false, true), true))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   atomicStore(buf[((clamp((0u ^ ((next_virtual_gid))), (next_virtual_gid), (next_virtual_gid))) + 0u)], uint(2), 4, (min(64, 64)), 0);
   if((false))
    barrier();
   subgroupAll(true);
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((bool(bvec4(false, true, true, false)))))
  {
   if((((((0.0 + (mix(float(injectionSwitch.x), float((((((false ? (40.69) : ((- 78.43) - 0.0)))) + 0.0))), bool(false))))) > (determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (((injectionSwitch.y) * 1.0)))))))
    barrier();
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   barrier();
   if((false))
    barrier();
   if(((((false || ((! (! (false))))))) && true))
    barrier();
  }
}
