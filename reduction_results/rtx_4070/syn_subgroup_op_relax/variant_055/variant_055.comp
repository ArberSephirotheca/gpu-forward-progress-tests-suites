#version 460

struct _GLF_struct_4 {
 mat2x3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 ivec2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 mat2x4 _f1;
 int _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 mat4 _f1;
 mat2 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 mat4x3 _f1;
 mat2 _f2;
 mat2x3 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_6 {
 uint num_workgroup;
 _GLF_struct_5 _f0;
 float _f1;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 uint next_virtual_gid;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     do
      {
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
         if((false))
          return;
         if((false))
          barrier();
        }
      }
     while(false);
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((bool(bvec4(false, false, false, false)))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((false) || false)))
    {
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ int((injectionSwitch.y))); _injected_loop_counter != (0 << (int(5))); _injected_loop_counter --)
        {
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         barrier();
        }
      }
     do
      {
       if((false))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     return;
     if((false))
      barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << ((~ (~ (((true ? int(0) : (- 49422)))))))); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
      }
     return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         do
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
             if((false))
              barrier();
            }
          }
         while(false);
         if((false))
          return;
        }
      }
     if((false))
      barrier();
    }
   if(true)
    {
     if((((false) && true)))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            break;
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((bool(bvec2(false, true)))))
          barrier();
         if((false))
          barrier();
        }
       while(false);
       if(((false || (false))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         return;
        }
      }
    }
   else
    {
    }
   if((false))
    {
     do
      {
       return;
      }
     while(false);
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(false);
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_NumWorkGroups.x, _GLF_struct_5(_GLF_struct_1(mat4(1.0), mat4(1.0), mat2(1.0), mat4x3(1.0)), mat4x3(1.0), mat2(1.0), mat2x3(1.0), _GLF_struct_2(bvec3(true), mat2x4(1.0), 1, ivec4(1)), _GLF_struct_3(vec4(1.0), ivec2(1), uvec4(1u)), _GLF_struct_4(mat2x3(1.0), mat4x2(1.0))), 1.0);
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      continue;
     if((false))
      barrier();
     if(true)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(((true && (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = ((false ? ((_injected_loop_counter --)) : 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        return;
       for(int _injected_loop_counter = (0 & - 89466); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if((false))
  {
   do
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   barrier();
   do
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      barrier();
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 while(false);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat3x2(1.0), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false || (false)))
      {
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              return;
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((((bool(bvec2(bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))), true))))))
            {
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 return;
                }
              }
             while(((false) || false));
             if((false))
              return;
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(false);
          }
         else
          {
          }
         if(((bool(bvec3(false, true, true)))))
          barrier();
         if((false))
          barrier();
        }
       if(true)
        {
         return;
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        return;
       if(true)
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
               if((false))
                return;
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
        }
       else
        {
        }
       if(((false || (false))))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if(((((false || (false))) || false)))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
      {
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
           return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if((false))
          barrier();
         if(((false || (false))))
          return;
         if((false))
          barrier();
         if((false))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if(true)
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(((false) && true));
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   return;
                  }
                }
               else
                {
                }
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                  return;
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if((false))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((false))
              return;
             barrier();
            }
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
          }
         barrier();
        }
      }
     return;
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          return;
        }
      }
     for(int _injected_loop_counter = ((((1 << (int(1))) >> (int(1))) << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if(((bool(bvec4(false, false, true, false)))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if((false))
      {
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(false);
       if((false))
        return;
       if(false)
        {
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          barrier();
        }
       else
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
          }
         else
          {
           if((false))
            {
             do
              {
               return;
              }
             while(false);
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
            }
           else
            {
            }
           if(true)
            {
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if(((! (! (false)))))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   barrier();
                  }
                 if((((! (! (bool(bvec2((! (! (false))), false))))))))
                  return;
                 barrier();
                }
              }
             while(false);
            }
           else
            {
             if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
            }
           if(((! (! ((bool(bvec4(false, true, true, false))))))))
            barrier();
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
        }
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
          }
        }
       while(false);
       barrier();
      }
    }
   if(((bool(bvec3(false, true, false)))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(((true && (false))))
  {
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   do
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((false) || false)))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       break;
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   while(false);
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     if(false)
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         return;
        }
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             return;
             if((false))
              return;
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         do
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             do
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             while(false);
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if((false))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > (0 << (int(6))); _injected_loop_counter --)
            {
             if((false))
              return;
             if((false))
              continue;
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                return;
              }
             barrier();
            }
          }
         while(false);
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      return;
     barrier();
    }
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((false || (false))))
        barrier();
       if((false))
        return;
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 else
  {
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   do
    {
     buf[virtual_gid] = 1;
    }
   while(false);
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (int((injectionSwitch.x)) << (int(1))); _injected_loop_counter --)
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if((false))
      continue;
     atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(2), 4, 64, 0);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if((false))
        barrier();
       do
        {
         subgroupAll(false);
         if(((! (((! (false)) || false)))))
          break;
         for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          break;
         if(true)
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             break;
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(false);
      }
     else
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(0))); _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = (~ (~ (1))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              return;
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          break;
         barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      barrier();
     if(((bool(bvec2(false, true)))))
      {
       if(true)
        {
         barrier();
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = (0 | 1); _injected_loop_counter != (clamp(0, 0, 0)); _injected_loop_counter --)
      {
       if((false))
        return;
       if((false))
        barrier();
       atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(2), 4, 64, 0);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
           barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         barrier();
        }
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if((false))
            barrier();
           continue;
          }
         if((false))
          {
           if(true)
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 if((bool(bvec2(((((injectionSwitch.x > injectionSwitch.y))) && true), true))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           else
            {
            }
           continue;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         continue;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         else
          {
           if((false))
            barrier();
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            continue;
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         return;
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           continue;
          }
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  break;
                }
              }
             if((false))
              barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             continue;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          continue;
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          continue;
         do
          {
           if((false || (true)))
            {
             barrier();
             if((false))
              return;
            }
           else
            {
            }
          }
         while(false);
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(true);
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
     if((false))
      continue;
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     return;
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((false) && true)))
            barrier();
           barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if((false))
            return;
          }
         else
          {
           if((((false) || false)))
            barrier();
          }
         if((false))
          return;
         if((false))
          return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if(((false || ((true && (false))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if((false))
            continue;
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(false);
          }
         barrier();
        }
       while((bool(((bool(false)) && true))));
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (false))))
        return;
       if((false))
        barrier();
       barrier();
      }
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              return;
             barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       return;
       if((false))
        barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
         if((false))
          return;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         return;
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     barrier();
     if(((bool(bvec2(false, false)))))
      barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
}
