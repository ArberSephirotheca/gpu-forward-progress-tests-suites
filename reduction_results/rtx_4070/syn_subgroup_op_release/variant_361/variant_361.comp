#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((uint(uint(((((false ? (subgroup_local_id) : (0u + ((min((0u ^ (0u)), 0u)) ^ (gl_NumWorkGroups.x))))) * ((false ? (atomicExchange(subgroup_local_id, subgroup_id)) : 1u))))))) | 0u)));
 uint workgroup_size = (((max(gl_WorkGroupSize, gl_WorkGroupSize))) | (((uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)) | uvec3(((0u) ^ (1u * (((((true ? 0u : (subgroup_local_id)))) - 0u)))), 0u, 0u))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + ((subgroup_id * subgroup_size) << 0u) + subgroup_local_id;
 uint next_virtual_gid = (0u | (((((((((((((true ? (clamp(workgroup_base, workgroup_base, workgroup_base)) : (uvec2(179192u, 80142u).y)))) >> 0u) + (0u ^ ((((true ? ((clamp(subgroup_id * subgroup_size, ((clamp(((((~ (~ ((0u + (subgroup_id * subgroup_size)))))) >> 0u) | 0u), (~ (((true ? ~ (((~ (~ ((0u + (subgroup_id * subgroup_size)))))) >> 0u) : (workgroup_base))))), ((38612u & 0u) + (((~ (~ ((0u + (subgroup_id * subgroup_size)))))) >> 0u))))), subgroup_id * subgroup_size))) | ((false ? (atomicCompSwap(subgroup_id, (workgroup_base ^ subgroup_size), subgroup_id)) : (min((((~ (~ ((subgroup_id * subgroup_size))))) / 1u), (((~ (~ ((subgroup_id * subgroup_size))))) / 1u))))) : (num_workgroup))))))) ^ 0u) ^ 0u)) | 0u)) * 1u)))) + ((false ? (workgroup_size) : ((subgroup_local_id + 1) % subgroup_size)));
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(true)
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
   else
    {
    }
   do
    {
     subgroupAll(false);
    }
   while((((((((true && (! (! (((false || ((((clamp(((((clamp(((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) * mat2(1.0), ((((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) - (max((mix(vec2((- 82.99), (- 73.54)), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true))), vec2(0.0, 0.0))))) * mat2(1.0), ((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) * mat2(1.0)))))).x, ((((clamp(((min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))) / vec2(1.0, 1.0)) * mat2(1.0), ((((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))) * mat2(1.0), ((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) * mat2(1.0)))))).x, (mix((min((float(mat4x2(float((389.281)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), float((389.281)))), float(((true ? ((((clamp(((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) * mat2(1.0), ((((mat2(1.0) * (max((injectionSwitch), (vec2(((true ? mat3x4((injectionSwitch), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0) : (mat3x4(- 6.1, 445.948, - 0.8, 69.44, - 11.99, 5.5, - 7.1, 898.343, - 8.4, - 168.844, 8.2, 20.77))))))))) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))) * mat2(1.0), ((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) * mat2(1.0)))))) : (injectionSwitch))).x), bool(true))))) > injectionSwitch.y)))))))))) || (bool(bool(false))))) && (false || ((bool((bvec2(bvec3(bvec2(true, false), true)))))))) || ((injectionSwitch.x > injectionSwitch.y)))));
  }
 else
  {
   atomicStore(buf[next_virtual_gid], (((((~ ((uint(((uvec3(~ (uint((((max((((0 ^ (false ? (((((injectionSwitch.x > injectionSwitch.y)) ? (599) : ((17184)) + 0))) : (((clamp(2, (clamp(2, 2, (max(((2) | 0), 2)))), 2))) - 0))))), (min(((2) - 0), ((0 | 1) * (((((((2) - 0)) | ((0) | (0)))) >> 0)))))))) * 1))), 1u, uint((injectionSwitch.x)))) | uvec3(0u, 0u, 0u))))))) + 0u)) * 1u), 4, 64, 4);
   subgroupAll(true);
  }
}
