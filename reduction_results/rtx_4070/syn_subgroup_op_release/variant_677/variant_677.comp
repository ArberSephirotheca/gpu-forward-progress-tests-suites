#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if((false))
    break;
   do
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   while(false);
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
  }
 while(false);
 if((false))
  return;
 if((false || ((((((false) || ((injectionSwitch.x > injectionSwitch.y))))) || false))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      break;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       break;
      }
     if((false))
      break;
     for(int _injected_loop_counter = 0; _injected_loop_counter < (((min((~ (~ (((1) - 0)))), 1))) | 0); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((false || (bool(bool(bool(bvec4((false), false, false, false)))))))))
        {
         if((false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(1)) << (clamp(0, ((false ? (_injected_loop_counter) : 0)), 0))))) >> ((((int(int(int(1))))) - 0))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              return;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((! (! ((false)))))
              {
               for(int _injected_loop_counter = (min((((((min(((1) ^ 0), ((1) ^ 0)))) * 1)) << 0), (((min(((1) ^ 0), ((1) ^ 0)))) * 1))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((false) && true)))
          {
           if((false))
            {
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             while((bool(bvec4((true && (((injectionSwitch.x > injectionSwitch.y)))), false, true, true))));
             continue;
            }
           barrier();
          }
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       break;
       if((false))
        break;
      }
    }
   if((false))
    {
     if((false))
      barrier();
     if(false)
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if(((bool(bool(false)))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         continue;
        }
      }
     else
      {
       if(true)
        {
         if((false))
          {
           if(((false || (false))))
            barrier();
           break;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         return;
        }
       else
        {
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       if(((true && (false))))
        return;
       if((false))
        barrier();
       if((false))
        continue;
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         break;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   if(((bool(bvec2(false, true)))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     do
      {
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        break;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       return;
      }
     if((false))
      barrier();
     if((false))
      continue;
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
  }
 if((false))
  barrier();
 if((! (! ((false)))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if(((! (! (false)))))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    return;
   do
    {
     do
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if(((! (! (false)))))
                {
                 do
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 while(false);
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
             break;
            }
           if((false))
            barrier();
           if(true)
            {
             if(((((bool(bvec3(false, false, true)))) || false)))
              {
               if((false))
                barrier();
               continue;
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = ((1 ^ 1) << (int(0))); _injected_loop_counter < (((1 << (int(5))) >> ((clamp(int(5), int(5), int(5))))) & 1); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((vec2(injectionSwitch[0], ((injectionSwitch[1]) - 0.0))).x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                 barrier();
                 if((false))
                  continue;
                }
               if((false))
                continue;
              }
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; (false || (_injected_loop_counter > (0 | 0))); _injected_loop_counter --)
                {
                 if((false))
                  break;
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                 if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                }
               return;
              }
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; ((((injectionSwitch.x > injectionSwitch.y)) ? (- 66887) : _injected_loop_counter ++)))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(((((bool((bvec2(bvec3(bvec2(false, true), true))))) || false))))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((false))
                {
                 if(false)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   return;
                  }
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != ((min((1 ^ 1), (1 ^ 1))) ^ 0); _injected_loop_counter --)
                  {
                   return;
                   if((false))
                    barrier();
                  }
                }
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               break;
              }
             do
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             while(false);
             if(((! ((false || (! (false)))))))
              break;
             if((false))
              {
               if((false))
                barrier();
               if((false))
                break;
               if((false))
                barrier();
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != (((((((1 << (int(7))) >> ((min(int(7), int(7)))))) | 0) & int((injectionSwitch.y))) << ((clamp(int(2), (int(ivec4(int(2), 1, 1, 0))), int(2))))) >> (int(2))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           if(false)
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               barrier();
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if(true)
              {
               return;
               if((false))
                {
                 do
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 while(false);
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(((true && (false))))
                  barrier();
                }
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             continue;
             if((false))
              barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                   if((false))
                    barrier();
                   if((false))
                    continue;
                  }
                }
              }
             if((false))
              barrier();
             return;
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           else
            {
             if((false))
              continue;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               return;
              }
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              barrier();
             barrier();
            }
           return;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               return;
               if((false))
                barrier();
              }
             if((((false) && true)))
              {
               if(true)
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             barrier();
             if((false))
              break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((true && ((false))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               break;
              }
             if((bool(bool(true))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
              }
             if(true)
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                 barrier();
                }
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            continue;
           if((false))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(((true && (false))))
              barrier();
             continue;
            }
           do
            {
             if((bool((bvec2(bvec2(bvec2((false), true)))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              break;
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if(((false || (false))))
            {
             if((false))
              return;
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           return;
          }
        }
       if(((false || (false))))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               if((false))
                {
                 if(((true && (bool((bvec3(bvec4(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), true), true))))))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  return;
                 if((false))
                  barrier();
                 return;
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                return;
               barrier();
              }
             if((false))
              barrier();
            }
          }
        }
       while(false);
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if(true)
        {
         do
          {
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               return;
               if((false))
                barrier();
              }
             if((false))
              return;
             if((false))
              barrier();
             if(((true) || false))
              {
               if((false))
                barrier();
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((bool(bvec2((! (! ((false)))), true))))
              return;
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(false)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                    }
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  break;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if((false))
                  continue;
                }
               while(((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y)));
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             while(false);
             if(true)
              {
               barrier();
              }
             else
              {
               if((! (! ((((false)) || false)))))
                barrier();
              }
             if((false))
              {
               for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != ((((1) | (1))) + 0); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           if(((((min((max((float(vec2(injectionSwitch.x, 0.0))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           if(((! (! ((! (! (false))))))))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              {
               if(((! (! (((false) && true))))))
                barrier();
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
           if((false))
            break;
          }
         if((((false) && true)))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((true && (bool(bvec2(false, true)))))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              continue;
             barrier();
            }
           barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((false || (false))))
            continue;
           barrier();
          }
         if((false))
          barrier();
        }
       else
        {
        }
      }
     while(false);
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((! (! (((false) || false))))))
  {
   if(((false || ((false || (false))))))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((true && (false)))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
        }
       while(false);
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     barrier();
     do
      {
       if((((false) || false)))
        return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (((((int(ivec2((int(ivec3(1, 1, 1))), ((1 << (int(2))) >> (((int(2)) / 1)))))) | 0)) << ((int(ivec2(int(4), 1))))) >> (int(4))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 if((! (! ((false)))))
  return;
 if((false))
  barrier();
 if((true && ((bool(bvec3((! (! ((false)))), false, true))))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > (max(injectionSwitch.y, ((injectionSwitch.y) + 0.0)))))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false || ((false))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = (clamp(((1) ^ 0), 1, 1)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 | (int((injectionSwitch.y)))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         if((false))
          barrier();
         break;
         if((false))
          continue;
        }
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if((false))
          break;
         if((false))
          barrier();
         do
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         while(false);
         if((false))
          break;
        }
       barrier();
       if((false))
        barrier();
      }
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((false))
        barrier();
       if((false))
        continue;
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       while((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), true, false))));
       if(((((! (! ((false || (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((false)) && true))
          break;
         if((false))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((((bool(bvec2((false || ((true && (false)))), true)))) && true)))
          {
           if((false))
            barrier();
           continue;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          continue;
         if((false))
          barrier();
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((! (! (false)))))
            {
             if((false))
              barrier();
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((((mix(float(((9.0 - - 74.43))), float(((injectionSwitch.x) - 0.0)), bool(true))) > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
         if((false))
          barrier();
         if((false))
          continue;
         if(false)
          {
           if((false))
            {
             if((false))
              break;
             if((((false || (((! (! (bool(bool((true && ((injectionSwitch.x > injectionSwitch.y))))))))))))))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((false) || false)))
            barrier();
           if(((((false || (((injectionSwitch.x > injectionSwitch.y))))) && true)))
            return;
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            return;
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((false) || false)))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        {
         if(((bool(bvec3(false, true, true)))))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if((((false) || false)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         do
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 << ((int(ivec2(int(4), 1))))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               barrier();
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if(((! (! (false)))))
          {
           if((false))
            barrier();
           continue;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
    }
   if((false))
    continue;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      {
       if((! ((true && (! ((false)))))))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             do
              {
               barrier();
               if(((true && (false))))
                barrier();
              }
             while(false);
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if(((! (! ((bool(bvec3(false, true, false))))))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       continue;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
     if((false))
      barrier();
     if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, false, true))))
      {
       for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != ((((1 << (int(2))) >> (int(2))) << (int(1))) >> (int(1))); _injected_loop_counter ++)
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((false || (false))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((true && (false))))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec2(false, false)))))
      barrier();
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((((false) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
  }
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = (((clamp(((gl_WorkGroupID) - uvec3(0u, 0u, 0u)), gl_WorkGroupID, gl_WorkGroupID))) << uvec3(0u, 0u, 0u)).x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > (clamp((mix(float((- 62.98)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y))))))
    return;
   do
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     do
      {
       do
        {
         barrier();
        }
       while(false);
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_base = workgroup_size * ((((workgroup_id) / 1u)) << 0u);
 if((false))
  {
   if((((min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))
    {
     do
      {
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(false)
              {
               if(((bool(bvec3(false, false, true)))))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             return;
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (((true ? int(7) : (127))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
          }
         if((false))
          continue;
        }
      }
     while(false);
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((! (! (false)))))
      {
       do
        {
         if((false))
          return;
         barrier();
        }
       while(((((true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))));
      }
     barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(((! (! (false)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         do
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((((((true ? injectionSwitch : (vec2(47.17, - 9.4)))).x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if((((false) || false)))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(((! (((! ((false || (false)))) || false)))))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       do
        {
         barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if(((true) || ((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         else
          {
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((bool(bool((! (! ((true && (false))))))))))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
         if(((true && (false))))
          barrier();
        }
      }
     if((false))
      return;
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if(true)
      {
       for(int _injected_loop_counter = int((mix(float(((+ - 654.661))), float((injectionSwitch.x)), bool(true)))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((false || ((! (! (false)))))))
          return;
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(((! ((bool(bvec3(! (false), true, true)))))))
        return;
      }
     if(((false || (false))))
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
      }
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; (0 ^ (_injected_loop_counter ++)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         return;
        }
       else
        {
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
         if((false))
          return;
        }
      }
     if((false))
      barrier();
    }
  }
 do
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((false))
        return;
       if((bool((! (! (bool((false))))))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((((bool((false || (bool(false))))) && ((injectionSwitch.x < injectionSwitch.y))))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((((false) && true)))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; ((_injected_loop_counter ++) >> 0))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(false);
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if(true)
    {
     if((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), false))))
      {
      }
     else
      {
       barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (((uint((uint(uvec4(((uint(((subgroup_local_id) ^ 0u))) | (uint(subgroup_local_id))), 1u, 1u, 0u))))) + 1) % subgroup_size);
 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   buf[virtual_gid] = 1;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if(((false || (((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))) || false)))))
  {
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     do
      {
       if((false))
        barrier();
       if((((false) || false)))
        {
         if(((((! (! (injectionSwitch.x > ((injectionSwitch.y) / 1.0))))))))
          {
           if((false))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((false || (bool(bvec4(false, false, true, false)))))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             continue;
            }
           return;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((! (! (false)))))
            barrier();
          }
         barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            continue;
           if((false))
            {
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if(((false) || false))
        {
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; (false || (_injected_loop_counter > 0)); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if((false))
            {
             if(((bool(bool(false)))))
              barrier();
             if((false))
              continue;
             barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             if(((bool(bvec3(false, true, false)))))
              {
               if((false || (((injectionSwitch.x > injectionSwitch.y)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(true)
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             continue;
            }
           for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              continue;
             barrier();
            }
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > (float((transpose(transpose(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, abs(1.0), 1.0, 0.0, sqrt(1.0)))))))))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
         if((false))
          barrier();
        }
       if(true)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((! (! (true))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(((bool(bool(false)))))
            barrier();
          }
         else
          {
          }
         continue;
        }
       if((false))
        barrier();
       if(((((bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if(((true && (false))))
              barrier();
             barrier();
            }
          }
         else
          {
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if(((bool(bvec2(false, true)))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if(((! (! (false)))))
              barrier();
            }
           barrier();
           if((false))
            {
             if((false))
              barrier();
             break;
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
      }
     while(false);
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 if(true)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if(true)
          {
           if((false))
            {
             if((false))
              {
               if((false))
                return;
               if((false))
                barrier();
               return;
              }
             do
              {
               barrier();
              }
             while(((((injectionSwitch.x > injectionSwitch.y)) && true)));
             if((false))
              {
               if((false))
                barrier();
               return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if((((false) && true)))
          barrier();
         do
          {
           barrier();
          }
         while((bool(bvec4(false, (((max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false, false))));
        }
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < (int((injectionSwitch.y)) ^ 0); _injected_loop_counter ++)
          {
           if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            barrier();
           if((((! (! ((true && (false))))) || (false))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((bool(bvec2(false, false)))))
                  continue;
                 barrier();
                }
               if(((bool(bvec2(false, true)))))
                {
                 if((false))
                  barrier();
                 continue;
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 return;
                }
               if((((false) && true)))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         barrier();
         if((false))
          {
           if(((bool(bool(false)))))
            barrier();
           return;
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           do
            {
             if((false))
              barrier();
             return;
            }
           while((((true && (bool(bvec4((((((injectionSwitch.x > injectionSwitch.y) && true)) || false)), true, false, true)))))));
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
       if(false)
        {
         if((false))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if((((false) && true)))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             return;
             if(((((bool(bvec2((! (! (false))), ((injectionSwitch.x < injectionSwitch.y))))) || false))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
               if(((! (! (((false) && (bool(bool(true)))))))))
                {
                 if((((false) && true)))
                  return;
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if(true)
              {
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); ((true ? (~ (~ (_injected_loop_counter --))) : (_injected_loop_counter))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if(false)
              {
               if((false))
                return;
              }
             else
              {
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(true)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(false)
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (((int(0)) + 0))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (52007 & (0 ^ 0)); _injected_loop_counter --)
                  {
                   if((((false) || false)))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = int((((injectionSwitch) + vec2(0.0, 0.0)).x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   barrier();
                  }
                }
               else
                {
                 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       do
                        {
                         barrier();
                         if((false))
                          barrier();
                        }
                       while(false);
                      }
                     if(((! (! (false)))))
                      barrier();
                    }
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  return;
                 for(int _injected_loop_counter = ((((1) | (1)) << (int(5))) >> (((((max((int(5)) ^ 0, (int(5)) ^ 0))) | 0)))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; (bool(bvec2(_injected_loop_counter != 1, false))); _injected_loop_counter ++)
                    {
                     return;
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(((((bool(bvec2(false, false)))) && true)))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((! (! (true))))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 barrier();
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(true)
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   do
                    {
                     barrier();
                     if((false))
                      {
                       if((false))
                        continue;
                       barrier();
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    return;
                  }
                 if(((true) && true))
                  {
                   if((false))
                    {
                     if((false))
                      return;
                     if((false))
                      barrier();
                     return;
                    }
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                }
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    barrier();
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    return;
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((false))
                  return;
                }
               if((false))
                {
                 if(((true) && true))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
               if((false))
                {
                 if((true && (true)))
                  {
                   barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
              }
             else
              {
               if((! (! (false))))
                {
                }
               else
                {
                 if(((bool(bvec3(false, false, false)))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                {
                 if((((((bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false)))))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       continue;
                      }
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(true)
            {
             if((false))
              {
               if((false))
                barrier();
               do
                {
                 barrier();
                }
               while(false);
              }
             if((((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               return;
              }
             if((false))
              barrier();
            }
           else
            {
            }
          }
         do
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = (((max(1, 1))) + 0); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if(((! (! ((! (! (bool(bool((false)))))))))))
                {
                 if((false))
                  {
                   if(((true && (false))))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   barrier();
                  }
                 return;
                }
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 break;
                }
               if((false))
                {
                 if(((bool(bool(false)))))
                  barrier();
                 barrier();
                }
              }
             if(((true && (false))))
              barrier();
            }
          }
         while(false);
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
         if((false))
          barrier();
         for(int _injected_loop_counter = (int((injectionSwitch.y)) | 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       subgroupAll(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       if((false))
        return;
       if((false))
        {
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(true)
            {
             if((false))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while((true && (false)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((! (! ((true && (false)))))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if(false)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            return;
           if((! (! ((false)))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
          }
         while(false);
         if((false))
          barrier();
         for(int _injected_loop_counter = (~ (~ (1))); _injected_loop_counter > (0 & - 72878); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((((false) && true)))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         do
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
           if((false))
            barrier();
           if((((false) || false)))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(4))); _injected_loop_counter --)
              {
               return;
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
            }
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if(true)
                  {
                   if((true && (true)))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     do
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(false);
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
              }
            }
           while(false);
           if((false))
            barrier();
          }
         while(false);
         if(false)
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             do
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); (! (! ((! (! ((bool(bool(_injected_loop_counter > ((0 & 80762) | 0)))))))))); _injected_loop_counter --)
                {
                 return;
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                return;
               barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
           if((false))
            {
             if(((! (! (false)))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if(((((true && (false))) || false)))
            return;
           do
            {
             if((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 do
                  {
                   if((((false || (bool((bvec3(bvec4(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true), false)))))))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                 while(false);
                }
               else
                {
                }
               if((false))
                {
                 if(((true && (false))))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if(true)
                {
                 if(((bool(bvec3(false, false, false)))))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       barrier();
                      }
                     if((false))
                      return;
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                }
               if((true && (((injectionSwitch.x > injectionSwitch.y)))))
                {
                }
               else
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                   if(((! (! ((injectionSwitch.x < injectionSwitch.y))))))
                    {
                     do
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                  }
                 if(((((float((mat3x2(mat4(mat3x2((float(mat2x3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))))), 1.0, determinant(mat2(0.0, 0.0, (min(1.0, 1.0)), 0.0)), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0)))))) > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   barrier();
                  }
                 return;
                 for(int _injected_loop_counter = 1; (max(_injected_loop_counter, _injected_loop_counter)) != (0 | int(((vec2(mat2((vec2(mat4x3((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 1.0))).x))); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                         return;
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                       if((false))
                        barrier();
                      }
                    }
                   while(((false) && true));
                  }
                }
               if(((! (! (false)))))
                barrier();
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while((bool(bvec2(false, true))));
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false || ((((false)) || false))))
              {
               if(((bool(bvec2(false, false)))))
                {
                 if((false))
                  return;
                 barrier();
                }
               barrier();
              }
             do
              {
               if((false))
                {
                 for(int _injected_loop_counter = (0 << (((int(5)) | (int(5))))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                    {
                     if((false))
                      barrier();
                     return;
                    }
                  }
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while((! (! (false))));
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                }
              }
             if((false))
              return;
             if((false))
              barrier();
             if((! (! ((bool(bvec2(false, true)))))))
              {
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
             if((false))
              return;
             barrier();
             if((false))
              return;
            }
           do
            {
             if((false))
              {
               if((! ((bool(bvec4(! (false), false, true, true))))))
                {
                 if((((injectionSwitch.x > (clamp(((injectionSwitch.y) / 1.0), (min(injectionSwitch.y, injectionSwitch.y)), (1.0 * (injectionSwitch.y))))))))
                  continue;
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 return;
                }
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           do
            {
             barrier();
            }
           while((true && (false)));
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            return;
          }
         if((((bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, (! (! (true)))))))))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << ((~ (~ (int(0)))))); _injected_loop_counter --)
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if(((((! (! ((bool(bvec4((false || (injectionSwitch.x > injectionSwitch.y)), true, false, false))))))))))
                      return;
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       break;
                      }
                    }
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if(((false || (((injectionSwitch.x > ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : (1384.2586)))))))))
                  continue;
                 barrier();
                }
               if((false))
                {
                 if((! (! ((false)))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   continue;
                  }
                 if(((true && (false))))
                  barrier();
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  break;
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((((((float(mat2(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, (injectionSwitch.y), 1.0, 0.0)), 1.0, 1.0, 0.0)))) > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     continue;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     return;
                    }
                   return;
                   if((false))
                    barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = ((0 | (0 << (int(7)))) << (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if((false))
          barrier();
         do
          {
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             return;
             if((false))
              barrier();
            }
           while(((false) || false));
          }
         while(false);
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((false))
          barrier();
         do
          {
           if((false))
            return;
           if((false))
            return;
           if((false))
            barrier();
          }
         while(false);
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         if((((false) || false)))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             if((((false) || false)))
              {
               if((false))
                {
                 if((false))
                  return;
                 if((false))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 barrier();
                }
               return;
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) ^ int((injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             barrier();
             if((false))
              barrier();
             if(((bool(bvec2(((false) || false), false)))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if(true)
              {
               if(((true && (false))))
                {
                 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             else
              {
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(((true && ((false || (((injectionSwitch.x > injectionSwitch.y))))))))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                }
              }
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               barrier();
               if((false))
                barrier();
              }
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               return;
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   return;
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if(((true && (false))))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if((! (! (false))))
              {
               if((((false) && true)))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = (1 & (1 | 1)); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                 if(((bool(bvec4((bool(bvec2(false, true))), true, false, false)))))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((((! (! ((injectionSwitch.x > (mat2((injectionSwitch.y)) * (injectionSwitch)).y)))))))
                  continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (82308 & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   return;
                  }
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                   if(true)
                    {
                     if((false))
                      {
                       do
                        {
                         return;
                        }
                       while(false);
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(((true && (false))))
                return;
              }
             else
              {
               if((false))
                barrier();
               return;
               if((false))
                barrier();
              }
             if((false))
              return;
             if(((! (! (false)))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           do
            {
             if((false))
              return;
            }
           while(false);
           barrier();
          }
         if((false))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter != int(((min(injectionSwitch.x, injectionSwitch.x)))); _injected_loop_counter --)
          {
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1) + int((injectionSwitch.x))); _injected_loop_counter ++)
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((false) && true)))
              continue;
            }
           else
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      break;
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (0 | (0)); _injected_loop_counter < ((((injectionSwitch.x < injectionSwitch.y)) ? 1 : (_injected_loop_counter))); _injected_loop_counter ++)
              {
               if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                {
                 if((true && (true)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 else
                  {
                  }
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               subgroupAll(true);
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if((true && ((! (((! (false)) && true))))))
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              return;
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if((false))
              barrier();
             if((false))
              return;
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       else
        {
         if((! (! ((((false)) && true)))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
}
