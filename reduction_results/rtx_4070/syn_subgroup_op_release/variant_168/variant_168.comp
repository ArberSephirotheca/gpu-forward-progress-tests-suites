#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((uint(uvec2(0u + ((min((uvec3(0u, 0u, 0u) ^ (((~ (~ ((gl_NumWorkGroups)))) ^ uvec3(0u, 0u, 0u)))).x, ((((gl_NumWorkGroups) ^ uvec3(0u, (~ (((~ (((0u) | (0u)))) * 1u))), 0u)).x) | (clamp((((((gl_NumWorkGroups) ^ uvec3(0u, (~ (((~ (((0u) | (0u)))) * 1u))), 0u))) << uvec3(0u, 0u, 0u)).x), (((((gl_NumWorkGroups) ^ uvec3(0u, (~ (((~ (((0u) | (0u)))) * 1u))), 0u))) << uvec3(0u, 0u, 0u)).x), (min((((((gl_NumWorkGroups) ^ uvec3(0u, (~ (((~ (((0u) | (0u)))) * 1u))), 0u))) << uvec3(0u, 0u, 0u)).x), (((((gl_NumWorkGroups) ^ uvec3(0u, (~ (((~ (((0u) | (0u)))) * 1u))), 0u))) << uvec3(0u, 0u, 0u)).x))))))))), 1u)))) / ((min(((1u ^ 0u) ^ ((((clamp((0u | ((((0u | 0u) * 1u)) << (uint(4u)))), (min((((((0u | 0u) * 1u)) << (uint(4u))) / 1u), (((0u | 0u) * 1u)) << (uint(4u)))), (((((0u | 0u) * 1u)) << (uint(4u))) / 1u))))) | 0u)), ((1u ^ 0u) ^ ((((0u | 0u) * 1u)) << (uint(4u)))))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (clamp(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), ((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), ((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))).x;
 uint workgroup_base = ((workgroup_size) >> (0u << (uint(8u)))) * workgroup_id;
 uint virtual_gid = (~ (~ (((((true ? (true ? ((uint(uint(true ? workgroup_base + (min(((true ? subgroup_id * subgroup_size : ((subgroup_local_id ++)))), (~ ((((clamp(~ ((0u | (subgroup_id * subgroup_size))), ~ ((0u | (((subgroup_id * subgroup_size) ^ 0u)))), ~ (((true ? (0u | (subgroup_id * subgroup_size)) : (num_workgroup))))))) | (~ ((0u | (subgroup_id * subgroup_size))))))))) : (subgroup_size))))) : (~ (~ ((max((uvec2(((false ? (subgroup_id) : (~ (~ (93526u))))), 199315u).g), (uvec2(93526u, 199315u).g))))))) : ((workgroup_id / num_workgroup))))))))) + subgroup_local_id;
 uint next_virtual_gid = ((((uint(uint((~ (~ ((workgroup_base))))))) >> ((true ? ((false ? (workgroup_id) : 0u)) : (floatBitsToUint(- 327.003)))))) | ((0u | (((((((false ? (147444u) : workgroup_base))))) | 0u))) ^ 0u)) + subgroup_id * subgroup_size + (0u ^ ((uint((injectionSwitch.x)) ^ (((uint(((uvec2(((((~ (~ ((max(subgroup_local_id + 1, subgroup_local_id + 1)))))) % ((true ? subgroup_size : (virtual_gid)))) / uint((injectionSwitch.y))), 0u)) | (max((uvec2(((((~ (~ ((max(subgroup_local_id + 1, subgroup_local_id + 1)))))) % ((true ? subgroup_size : (virtual_gid)))) / uint((injectionSwitch.y))), 0u)), (uvec2(((((~ (~ ((max(subgroup_local_id + 1, subgroup_local_id + 1)))))) % ((true ? subgroup_size : (virtual_gid)))) / uint((injectionSwitch.y))), 0u))))))))))));
 ((~ ((~ (((true ? ~ (~ ((buf[virtual_gid] = 1))) : (virtual_gid))))))) << (min(((~ (~ ((0u) << 0u)))), ((((0u) | 0u)) | (((0u) | 0u))))));
 if((! (! ((bool(bvec4(subgroup_local_id + 1 < subgroup_size, true, false, false)))))))
  {
   atomicStore(buf[next_virtual_gid], (clamp(((((uint((0 | ((clamp((((((int(ivec2(2, (0 ^ 1)))) >> (0 ^ int((injectionSwitch.x)))))) | ((0) | 0)), (int(ivec2(2, (0 ^ 1)))), ((0 | (int(ivec2(2, (0 ^ 1)))))))))))) >> 0u)) | (uint((0 | ((clamp((((((int(ivec2(2, (0 ^ 1)))) >> (0 ^ int((injectionSwitch.x)))))) | ((0) | 0)), (int(ivec2(2, (0 ^ 1)))), ((0 | (int(ivec2(2, (0 ^ 1))))))))))))), uint((0 | ((clamp((((((int(ivec2(2, (0 ^ 1)))) >> (0 ^ int((injectionSwitch.x)))))) | ((0) | 0)), (int(ivec2(2, (0 ^ 1)))), ((0 | (int(ivec2(2, (0 ^ 1))))))))))), uint((0 | ((clamp((((((int(ivec2(2, (0 ^ 1)))) >> (0 ^ int((injectionSwitch.x)))))) | ((0) | 0)), (int(ivec2(2, (0 ^ 1)))), ((0 | (int(ivec2(2, (0 ^ 1))))))))))))), 4, (max(64, ((64) ^ 0))), 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}
