#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((mix(float(injectionSwitch.x), float((- 4.3)), bool(false))) > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID) - (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u))).x;
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * (~ (~ (workgroup_id)));
 uint virtual_gid = (((min(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) << uint((sqrt(abs(1.0)) * ((injectionSwitch.x)))));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (min(((~ (~ (((((injectionSwitch.x < injectionSwitch.y)) ? (((((((((((bool(((bvec3(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(! ((bool(bool(! (true))))), false, (bool(bool((bool(bvec3(false, false, false))))))))))))))))))) ? (((0u | (0u | ((subgroup_local_id + 1)))) - uint((injectionSwitch.x)))) : (subgroup_id)))) / 1u)) ^ 0u)) % subgroup_size) / 1u) : (workgroup_id))))))), ((((clamp(((((((injectionSwitch.x < injectionSwitch.y)) ? (((((((((bool(((bvec3(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(! ((bool(bool(! (true))))), false, false))))))))))))) ? (0u | (0u | ((subgroup_local_id + 1)))) : (subgroup_id)))) ^ 0u)) % subgroup_size) / 1u) : (workgroup_id))))) * 1u, ((((((injectionSwitch.x < injectionSwitch.y)) ? (((((((((bool(((bvec3(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(! ((bool(bool(! (true))))), false, false))))))))))))) ? (0u | (0u | ((subgroup_local_id + 1)))) : (subgroup_id)))) ^ 0u)) % subgroup_size) / 1u) : (workgroup_id))))) * 1u, ((((((injectionSwitch.x < injectionSwitch.y)) ? (((((((((bool(((bvec3(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(! ((bool(bool(! (true))))), false, false))))))))))))) ? (0u | (0u | ((subgroup_local_id + 1)))) : (subgroup_id)))) ^ 0u)) % subgroup_size) / 1u) : (workgroup_id))))) * 1u))) << 0u))));
 if(((((bool(bvec4(false, (false || ((! (! (false))))), true, true))) || false))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    barrier();
   int i = 0;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], (((uint(uvec4(uint(2), 0u, 0u, (0u ^ (0u)))))) ^ 0u), 4, 64, 4);
  }
 if((false))
  barrier();
}
