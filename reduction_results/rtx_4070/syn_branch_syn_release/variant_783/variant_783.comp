#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + (clamp(subgroup_id, subgroup_id, (min(subgroup_id, ((true ? subgroup_id : ((0u ^ (((uint(uvec3(((((((~ (~ (max(((~ (~ (((0u ^ ((~ (min((0u | ((((~ ((workgroup_size))) / 1u)))), (((~ (((((min(workgroup_size, workgroup_size))) | (workgroup_size))))) / 1u))))) - 0u))) >> 0u)))), (clamp((~ (min((uint(uvec3((((0u | ((((~ ((workgroup_size))) / 1u))))) - 0u), uint((injectionSwitch.y)), 1u))), (((~ ((workgroup_size))) / 1u))))) - 0u, (~ (min((0u | ((((~ ((workgroup_size))) / 1u)))), (((~ (((~ (((~ (workgroup_size)) << 0u)))))) / 1u))))) - 0u, (~ (min((0u | (((((false ? (subgroup_local_id) : (~ ((workgroup_size))))) / 1u)))), (((((true ? ((~ ((workgroup_size))) / 1u) : (subgroup_id)))) - 0u))))) - 0u)))))))))) | (0u << (uint(1u)))), uint((injectionSwitch.y)), 1u))) - 0u)))))))))) * ((((subgroup_size) / (0u ^ (1u)))) >> 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + (min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + (((max(((subgroup_local_id) * 1u), ((false ? (workgroup_size) : subgroup_local_id)))) + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], ((((false ? (workgroup_id) : uint(2)) | 0u))), (~ (~ (4))), (~ (~ (64))), 4);
  }
 else
  {
   if((bool(bvec3((((((((bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)))) && ((injectionSwitch.x < injectionSwitch.y)))))) || ((((((injectionSwitch.x > injectionSwitch.y)) || ((false))) || (! (! ((bool(bvec4((((((((clamp((max(((min((injectionSwitch) - vec2(0.0, (min(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0))) * mat2(1.0)), min((injectionSwitch) - vec2(0.0, (min(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0)))), min((injectionSwitch) - vec2(0.0, (min(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0)), ((max(vec2(vec3(min((injectionSwitch) - vec2(0.0, (min(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0)), 1.0)), vec2(vec3(min((injectionSwitch) - vec2(0.0, (min(0.0, 0.0))), (injectionSwitch) - vec2(0.0, (((0.0 + (0.0))) + 0.0))), 1.0))))))))).x > ((true ? injectionSwitch : (injectionSwitch))).y) && true))), true, true, false)))))))) && (bool(bvec2((! (! (true))), false))))), false, ((false) || (! (! ((! (! (((((false) || false)) && true))))))))))))
    {
     atomicStore(buf[(min(next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, 4);
    }
   else
    {
    }
  }
}
