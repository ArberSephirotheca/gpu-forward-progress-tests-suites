#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_id;
 uvec3 GLF_merged2_0_2_49_2_1_14GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec4 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid;
 uvec4 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_baseworkgroup_id;
 uvec4 GLF_merged2_0_3_79_3_1_12GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizeworkgroup_id;
 uvec4 GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_local_id;
 uvec4 GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid;
 uvec4 GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 uvec4 GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size;
 GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_id.xyz = GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_size;
 do
  {
   do
    {
     GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_local_id.xyz = GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_id.xyz;
    }
   while(false);
  }
 while(false);
 GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.xyz = GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_local_id.xyz;
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 do
  {
   GLF_merged2_0_2_49_2_1_14GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_size.xy = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
  }
 while(false);
 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.xy = GLF_merged2_0_2_49_2_1_14GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_size.xy;
 GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy = GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.xy;
 if((false))
  barrier();
 GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.xy = GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uvec4 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id;
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size;
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size;
 if((false))
  barrier();
 do
  {
   GLF_merged2_0_3_79_3_1_12GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizeworkgroup_id.xyz = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz;
  }
 while(false);
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
  }
 while(false);
 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz = GLF_merged2_0_3_79_3_1_12GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizeworkgroup_id.xyz;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << ((min(int(1), int(1))))); _injected_loop_counter --)
    {
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_id.w = subgroup_id;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 if(((false || (false))))
  barrier();
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if((false))
      {
       do
        {
         do
          {
           barrier();
          }
         while(false);
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.xyz.x = GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_id.w;
 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w = GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.xyz.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.x = GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w;
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while(false);
 if(((bool((bvec2(bvec2(bvec2(((false) && true), true))))))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 do
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((false))
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
    }
   if((false))
    barrier();
  }
 while((bool(bvec3(false, true, true))));
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(false);
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.xy.x = subgroup_size;
  }
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.z = GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.xy.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_local_id.w = subgroup_local_id;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(true)
    {
     GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y = GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizesubgroup_local_id.w;
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 & 1) << (int(6))) >> (int(6))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
       barrier();
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((false || (true)))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
       if(((bool(bvec4((false || (false)), ((injectionSwitch.x > injectionSwitch.y)), false, false)))))
        barrier();
      }
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (((1 | 0) << (int(6))) >> (int(6))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(((false) || false));
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.y = GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y;
     if(true)
      {
       if(true)
        {
         if((false))
          barrier();
         if((false))
          {
           if(true)
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = (((1 << (int(6))) >> (int(6))) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   while(false);
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.x = num_workgroup;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(true)
  {
   do
    {
     if((false))
      barrier();
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.y = GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.x;
     if(((true && (false))))
      barrier();
     if((false))
      barrier();
    }
   while((bool(bool(false))));
  }
 else
  {
   if(((true && (false))))
    barrier();
   if((false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_2_49_2_1_14GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_size.z = workgroup_size;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = GLF_merged2_0_2_49_2_1_14GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_size.z;
 GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.y = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y;
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   do
    {
     GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.xyz.z = GLF_merged2_0_2_49_2_2_52GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.y;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
  }
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.xyz.z;
    }
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       if((false))
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (int(5))) >> (int(5))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(false);
          }
         while(false);
        }
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      {
       do
        {
         for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
           if((false || (true)))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(((((true && (false))) || false)))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
             if((((false) && true)))
              barrier();
             do
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (int(ivec3((clamp(1, 1, 1)), 1, 0))); _injected_loop_counter ++)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
        }
      }
    }
   if(true)
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (min(0, (int(ivec3(0, 1, 1))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       barrier();
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(((false || (false))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.w = GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z;
        }
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w = workgroup_id;
 GLF_merged2_0_3_79_3_1_12GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizeworkgroup_id.w = GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w;
 if((false))
  barrier();
 for(int _injected_loop_counter = ((0 << (int(2))) | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.w = GLF_merged2_0_3_79_3_1_12GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizeworkgroup_id.w;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.w * GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.w;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z = workgroup_base;
  }
 if(true)
  {
   GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.xyz.y = GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z;
   if((((false) || false)))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       barrier();
      }
     while(((false) || false));
    }
  }
 else
  {
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     do
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
          barrier();
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.w = GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.xyz.y;
          }
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((false) && true)))
                barrier();
              }
             do
              {
               if((false))
                barrier();
              }
             while(false);
             barrier();
             if((false))
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (int(ivec3(0, 0, 0))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 barrier();
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
      }
     while(false);
    }
  }
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.x * GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.z + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.y;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
 if(((((bool(bool(false))) || false))))
  {
   if(((true) || false))
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.w = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x;
  }
 if((false))
  {
   for(int _injected_loop_counter = (((1 << (int(4))) >> (int(4))) ^ 0); _injected_loop_counter > (0 | (43724 & 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 << (((false ? (45753) : int(7))))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.z = GLF_merged2_0_3_71_3_1_11GLF_merged3_0_1_11_1_1_14_2_1_14subgroup_idworkgroup_baseworkgroup_sizevirtual_gid.w;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     do
      {
       if((false))
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((((1 << (int(5))) >> (int(5))) << ((((~ (~ (int(2))))) >> 0))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
       if((false))
        barrier();
      }
     while(false);
     if(false)
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     while(false);
    }
  }
 GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.xy.y = GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.z;
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     do
      {
       if((false))
        {
         if(false)
          {
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(((((false) && true)) && true));
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
               do
                {
                 if(true)
                  {
                   if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                    {
                     if((false))
                      barrier();
                     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     if(false)
                      {
                       if((((false) && true)))
                        barrier();
                       if((false))
                        barrier();
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = (((0 | (0))) << 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                            {
                             barrier();
                             if((false))
                              barrier();
                            }
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((((1 << (int(5))) >> (int(5))) << ((int(ivec4(int(0), 1, 0, 0))))) >> (int(0))); _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
         if((false))
          barrier();
         if(((! (! (false)))))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          barrier();
        }
       if((((false) && true)))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     barrier();
     for(int _injected_loop_counter = (- 16196 & 0); _injected_loop_counter < ((1 << ((~ (~ (int(1)))))) >> ((((max(int(1), int(1)))) | (int(1))))); _injected_loop_counter ++)
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.z = GLF_merged3_0_2_49_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidvirtual_gidworkgroup_id.xy.y;
   do
    {
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       do
        {
         do
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
       do
        {
         if((false))
          barrier();
        }
       while(false);
      }
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((((int(7)) * 1)) >> 0))) >> (int(7))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.x * GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.z + ((GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.z);
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
 do
  {
   GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.w;
   do
    {
     if((false))
      barrier();
    }
   while(false);
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((true && (((injectionSwitch.x < injectionSwitch.y)))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(true)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.x = GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x;
  }
 else
  {
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((false || (false))))
    barrier();
   if(true)
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.z] = 1;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if((false))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               do
                {
                 do
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
         if((false))
          barrier();
        }
       while(false);
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (((int(0)) >> 0))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     do
      {
       barrier();
      }
     while(false);
    }
  }
 if(false)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = (0 | ((1 << ((0 ^ (int(4))))) >> ((int(int(int(4))))))); _injected_loop_counter != (~ (~ (0))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         while(false);
         if((false))
          barrier();
        }
      }
    }
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_size.z)
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if(false)
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
              }
            }
           else
            {
             if((false))
              barrier();
             buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.x] = 2;
            }
          }
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
          }
         while(false);
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           subgroupAll(false);
          }
         else
          {
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             while(false);
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             if(((true && (false))))
              {
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(false);
              }
             if((false))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
          }
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((true) && true))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
            }
           while(false);
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << ((1 * (int(4))))); _injected_loop_counter --)
            {
             if(true)
              {
               if((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))
                {
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((false))
                  {
                   if(true)
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         if((false))
                          {
                           do
                            {
                             if((! (! (true))))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           while(false);
                          }
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(false)
                    {
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   else
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((((1 << (int(2))) >> (int(2))) << (int(3))) >> (int(3))); _injected_loop_counter ++)
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             if((false))
                              barrier();
                             barrier();
                             if((false))
                              barrier();
                            }
                           if((false))
                            barrier();
                          }
                        }
                      }
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(((bool(bool(false)))))
              barrier();
            }
          }
         do
          {
           do
            {
             buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupvirtual_gidworkgroup_base.x] = 2;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((bool(bvec2(bool(bvec2(true, false)), true)))))
                {
                 if(((! (! ((! (! (false))))))))
                  barrier();
                 barrier();
                }
               else
                {
                }
               if((false))
                barrier();
              }
            }
           while(false);
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 do
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           subgroupAll(true);
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         while(false);
         do
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               barrier();
              }
            }
          }
         while(false);
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((! (! (false))))
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               for(int _injected_loop_counter = (0 << ((clamp(int(2), int(2), ((false ? (_injected_loop_counter) : int(2))))))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(false);
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = ((((1 << (int(2))) >> (int(2))) << (int(6))) >> ((0 | (int(6))))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             for(int _injected_loop_counter = ((0 << (int(5))) ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(false);
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
  }
 while(false);
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if((false))
  {
   if(((((((injectionSwitch.x > injectionSwitch.y))) || false)) && true))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((! (! ((! (! (true)))))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if((false))
              barrier();
             barrier();
            }
           else
            {
             if(((bool((bvec3(bvec4(bvec3(false, false, true), false)))))))
              barrier();
            }
          }
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((0 << (int(3))) << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 do
  {
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if(true)
        {
         if((false))
          {
           if(((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   do
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
}
