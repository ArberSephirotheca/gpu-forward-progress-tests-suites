#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((! (! (false))) || ((false))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((bool(bool((! (! (! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if(((((bool(bvec3((bool(bool(injectionSwitch.x > injectionSwitch.y))), true, false)))))))
  barrier();
 if((false))
  {
   if(((true && (false))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((false) || false)))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((! ((bool(bvec2((true && (! ((false)))), ((true && ((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))
    {
     if((false))
      barrier();
     barrier();
     if(((bool(bvec3(((false) || false), true, false)))))
      barrier();
    }
   barrier();
   if(((((mix(float((float(mat2x4((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 1.0, determinant((transpose(transpose(mat2(1.0, 0.0, 1.0, 1.0))))), 1.0, 0.0, 1.0, 0.0, 1.0)))), float((- 6.2)), (false || (bool(false))))) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false || ((false))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((! ((((false || (! ((((injectionSwitch.x > injectionSwitch.y))))))) || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > ((false ? (uintBitsToFloat(uvec2(133960u, 132925u))) : injectionSwitch)).y))))
  barrier();
 if((false))
  {
   if(((! (! (bool(bvec4((((bool(bool((false))))) || false), true, false, false)))))))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    {
     if(((false || (((false) || false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((false) || false)))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((! ((true && ((! (! (! ((true && ((bool(bvec3((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, true, false))), true, true)))))))))))))) && true))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((((! (! (bool(bool(((((injectionSwitch.x > injectionSwitch.y)) && true))))))))))
      barrier();
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((! ((true && (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if((((false || (false)) || (bool(bool((false)))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((((false) || false)))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(((! (! (false)))))
  barrier();
 if(((((((bool(bvec4(injectionSwitch.x > ((injectionSwitch.y) + 0.0), false, false, true)))))) && true)))
  {
   if((! (! (! ((! (! (! ((bool(bvec4(((true && (true)) && (((! ((bool(bvec3(! ((((((true ? injectionSwitch.x : (- 13.42))) > (vec2(mat2x4((max(injectionSwitch, injectionSwitch)), 0.0, log(1.0), (((dot(vec4(0.0, 1.0, 0.0, ((false ? (- 7.7) : 0.0))), vec4(0.0, 1.0, 0.0, 0.0))) - (mix(float((- 5.0)), float(0.0), bool(true))))), 0.0, (clamp(0.0, 0.0, ((0.0) / 1.0))), tan(0.0)))).y)))), true, false)))))))), false, false, true))))))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((false) || false)))
  barrier();
 if(((((bool(bool((true && ((max(injectionSwitch.x, ((min(float(((false ? (mat3x2(- 48.93, (max(6.5, 6.5)), 4.4, 36.33, - 7536.8808, 330.235)) : mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, cos(0.0), 1.0)))), float(((false ? (mat3x2(- 48.93, 6.5, 4.4, 36.33, - 7536.8808, ((330.235) * 1.0))) : mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, (mix(float(cos(0.0)), float((- 564.845)), bool(false))), 1.0))))))))) > injectionSwitch.y)))))))))
  barrier();
 if((false))
  barrier();
 if((((false) && true)))
  {
   if(((((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true))) && true))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bool(false)))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false || ((((injectionSwitch.x > (max(injectionSwitch, (min(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])))))).y))))))
    barrier();
  }
 if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint virtual_gid = ((workgroup_base) | ((clamp(workgroup_base, workgroup_base, workgroup_base)))) + ((subgroup_id * subgroup_size) ^ 0u) + subgroup_local_id;
 if((false))
  barrier();
 uint next_virtual_gid = ((((0u | uint((injectionSwitch.x))) ^ ((1u * (workgroup_base))))) - 0u) + subgroup_id * ((0u | ((((true && ((((! (! (false || ((((mix(vec2((- 2324.2148), (402.291)), vec2(((((mix(vec2(((false ? 5.5 : 2.8)), (((injectionSwitch) * mat2(1.0)))[1]), (max(vec2((injectionSwitch)[0], (900.837)), ((false ? (vec2(- 7.6, - 33.30)) : vec2((injectionSwitch)[0], (900.837)))))), bvec2(true, false))))[0]) - 0.0), ((mix(vec2((((! (! (false))) ? 5.5 : 2.8)), (((injectionSwitch) * mat2(1.0)))[1]), (max(vec2((max((mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2((16.34), (- 4.9)), bvec2(false, false))), (injectionSwitch)))[0], (900.837)), ((false ? (vec2(- 7.6, - 33.30)) : vec2((injectionSwitch)[0], (900.837)))))), bvec2(true, false))))[1]), bvec2(true, true))).x < injectionSwitch.y))))))) && true)))) ? subgroup_size : (atomicAdd(workgroup_id, (0u | (((subgroup_size) / 1u))))))))) + (((0u | (subgroup_local_id)) + 1) % subgroup_size);
 if((((false) || false)))
  barrier();
 if(((bool(bvec3((! (! (false))), false, true)))))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((((~ ((min((uint(uvec2(~ (((true ? (1u * (subgroup_local_id + 1)) : (next_virtual_gid)))), 0u))), (uint(uvec2(~ (((true ? (1u * (subgroup_local_id + 1)) : (next_virtual_gid)))), 0u)))))))) ^ 0u) < subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((true && (false || (((false || (bool(bvec4((bool((bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, (bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), true, true)))))))), false, false, false))))))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   buf[next_virtual_gid] = 2;
   if((false))
    barrier();
   subgroupAll(false);
   if((((false) && true)))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   buf[next_virtual_gid] = 2;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   subgroupAll((bool(bvec3(true, true, false))));
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   if((false))
    barrier();
   if((false || ((((false)) || false))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > (vec2((transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, determinant(mat4(1.0, 1.0, abs(0.0), 1.0, 0.0, (injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))))).y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > (mix((vec2(0.0, 0.0) + (vec2((injectionSwitch)[0], (0.0)))), vec2((9961.5586), (injectionSwitch)[1]), bvec2(false, true))).y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(((true && (false))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
}
