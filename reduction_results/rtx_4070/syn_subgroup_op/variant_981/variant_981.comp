#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((((injectionSwitch.x < injectionSwitch.y)) ? gl_WorkGroupSize : ((uvec3(33807u, 56166u, 17941u) * uvec3(133654u, 94511u, 56084u))))).x;
 uint workgroup_id = ((gl_WorkGroupID) << uvec3(0u, 0u, 0u)).x;
 uint workgroup_base = (((max(workgroup_size, (clamp(workgroup_size, workgroup_size, workgroup_size)))) >> uint((injectionSwitch.x)))) * ((true ? (((((max((clamp(workgroup_id, ((~ (~ ((workgroup_id) | ((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_size) : (workgroup_id))))))), workgroup_id)), (uint(uvec2(((((((uint(uint(1u))) + (0u << (uint(2u))))) * ((clamp(workgroup_id, ((~ (~ ((max((workgroup_id) | (workgroup_id), ((false ? (subgroup_id) : (~ (~ ((workgroup_id)))))) | (workgroup_id))))))), workgroup_id))))) / 1u), 1u)))))) | ((max((clamp(workgroup_id, ((~ (~ ((workgroup_id) | ((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_size) : (workgroup_id))))))), workgroup_id)), (uint(uvec2(((((((uint(uint(1u))) + (0u << (uint(2u))))) * ((clamp(workgroup_id, ((~ (~ ((max((workgroup_id) | (workgroup_id), ((false ? (subgroup_id) : (~ (~ ((workgroup_id)))))) | (workgroup_id))))))), workgroup_id))))) / 1u), 1u)))))))) >> 0u) : (workgroup_id)));
 uint virtual_gid = (((0u ^ (workgroup_base + ((((false ? (workgroup_base) : ((true ? subgroup_id : (atomicAnd(num_workgroup, subgroup_size)))))) - 0u)) * subgroup_size))) ^ 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(false);
  }
 else
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(true);
  }
}
