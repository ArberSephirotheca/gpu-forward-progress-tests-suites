#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((! ((! (! (((! ((true && (false)))) || false))))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((((true ? (max(workgroup_size, workgroup_size)) : (write_val))) * workgroup_id) / ((1u) ^ (0u ^ 0u)));
 uint virtual_gid = workgroup_base + ((((((min(((((true && ((true && (false)))) ? (subgroup_size) : ((subgroup_id * ((max(((((clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size)) * 1u)) | (((clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size)) | 0u))), clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size))))) - 0u)))) | ((clamp(subgroup_id, subgroup_id, (0u ^ (subgroup_id)))) * (clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size))), (((false ? (subgroup_size) : subgroup_id * (clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size))))) | (((clamp((subgroup_id * ((((true) || false) ? (max((clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size)), (clamp((clamp(((subgroup_size) / 1u), subgroup_size, ((0u | (((clamp(subgroup_size, subgroup_size, subgroup_size))) | (subgroup_size)))))), (clamp(((uint(uvec2((0u ^ ((subgroup_size) / 1u)), ((0u << (uint(5u))) << (uint(4u))))))), subgroup_size, subgroup_size)), (clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size)))))) : (subgroup_id)))), ((uint((0u | ((~ (~ (((true ? uint((((max(~ (((true ? ~ ((subgroup_id * (clamp((((0u ^ ((~ (~ (subgroup_size)))))) / 1u), ((subgroup_size) >> 0u), subgroup_size)))) : (num_workgroup)))), ~ (((true ? ~ ((subgroup_id * (clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size)))) : (num_workgroup))))))) * 1u)) : (workgroup_id))))))))))), (subgroup_id * (clamp(((subgroup_size) / 1u), subgroup_size, subgroup_size))))) | ((0u ^ (min((subgroup_id * (clamp(((~ (~ ((uint(uvec3((max((subgroup_size) / 1u, (subgroup_size) / 1u)), 0u, (((min(1u, 1u))) ^ 0u)))))))), subgroup_size, subgroup_size))), (subgroup_id * (clamp(((~ (~ ((uint(uvec3((max((subgroup_size) / 1u, (subgroup_size) / 1u)), 0u, (((min(1u, 1u))) ^ 0u)))))))), subgroup_size, subgroup_size))))))))))))) * 1u) | (max(((((false ? ((clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_id * (clamp(((subgroup_size) / ((clamp((1u), (((1u)) | ((1u))), (1u))) | 0u)), subgroup_size, subgroup_size))))) | (~ (0u ^ ((uint(uvec4((~ (((min(subgroup_id, (((clamp((uint(uint(subgroup_id))), (uint(uvec4((uint(((uint(subgroup_id)) + uint((injectionSwitch.x))))), 1u, (min(0u, 0u)), 0u))), (uint(uint(subgroup_id))))) | (uint(uint((max((uint(uvec2(subgroup_id, 0u))), ((true ? subgroup_id : (subgroup_id)))))))))))) * (clamp(((subgroup_size) / 1u), (((0u | (subgroup_size))) | uint((injectionSwitch.x))), subgroup_size))))), (1u | 1u), 1u, 0u))))))), ((clamp((((false ? (subgroup_size) : subgroup_id * (clamp(((((subgroup_size)) | ((subgroup_size))) / 1u), subgroup_size, subgroup_size))))), (((false ? (subgroup_size) : subgroup_id * (clamp(((((subgroup_size)) | ((subgroup_size))) / 1u), subgroup_size, subgroup_size))))), (((false ? (subgroup_size) : subgroup_id * (clamp(((((subgroup_size)) | ((subgroup_size))) / 1u), subgroup_size, subgroup_size))))))) | (~ (~ ((subgroup_id * (clamp((((1u * (uint(uvec4((((subgroup_size)) | ((subgroup_size))), 0u, 1u, 0u))))) / 1u), subgroup_size, subgroup_size))))))))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 ((0u ^ ((0u >> (uint(8u))))) | (buf[virtual_gid] = (0u | (uint(subgroupAllEqual(write_val))))));
 if((false))
  return;
}
