#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! ((bool((bvec2((bvec2((bvec2(bvec2(bvec2(bvec2(((bvec2(bvec4(bvec2(bvec4(((bvec2(bvec3(bvec2((bvec2(bvec4(bvec2((bvec2((bvec3(bvec3((bvec3(bvec4((bvec3(bvec4(bvec3(bvec2(! ((! (! (! (((false || (! (false)))))))) || ((! (! ((! ((! (! (! (((true && (bool(bvec3((! (! (false))), true, true)))))))))))))))), false), true), false))), false))))))))), false, false)))), true)))), false, false)), true, true))))))))))))))))))))
  {
   if((false))
    barrier();
   if(((((float(mat3x4((clamp(injectionSwitch.x, (float(vec3(injectionSwitch.x, 0.0, 1.0))), injectionSwitch.x)), 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sqrt(1.0), 0.0, 0.0, 0.0, abs(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((! (! (((bool((bvec3(bvec4(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y))), false))))))))))
  barrier();
 if((false))
  barrier();
 if(((true && (false))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((! (! ((false))))) || false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((! (! (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((! (((! (! ((! (((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))) && ((injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (0u | ((((max(((((((workgroup_size) | ((max(workgroup_size, workgroup_size)))) | ((1u | 1u) * ((((0u | 0u)) + 0u))))) * workgroup_id) * 1u), ((((((workgroup_size) | ((max(workgroup_size, workgroup_size)))) | ((1u | 1u) * ((((0u | 0u)) + 0u))))) * workgroup_id) * 1u)))) * 1u)));
 if((false))
  barrier();
 uint virtual_gid = (max((~ (~ (workgroup_base))), (~ (~ (workgroup_base))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(write_val, (uint(uvec4(uint(virtual_gid), 1u, uint(((vec2(injectionSwitch[0], ((false ? (- 220.892) : injectionSwitch[1])))).y)), (1u & 1u)))), 4, 64, 0);
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((((injectionSwitch.x > (max((1.0 * (injectionSwitch.y)), injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > (vec2(0.0, 0.0) + (injectionSwitch)).y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}
