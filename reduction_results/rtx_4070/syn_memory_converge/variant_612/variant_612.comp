#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((bool(bvec2(((((((vec2(vec2((min(injectionSwitch, injectionSwitch)))))) / vec2(1.0, 1.0)).x > injectionSwitch.y) || false)), false))))))
  return;
 if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x > injectionSwitch.y))))), true, false, true))))
  return;
 if((((bool(bvec2((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y), false))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((false) || false)))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  {
   if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    return;
   if((false))
    {
     if(((! (! (false)))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if(((! (! (false)))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > ((false ? (- 0.9) : ((((((true ? (min(injectionSwitch, injectionSwitch)) : (vec2(8415.7170, 70.11))))) * mat2(1.0))) - sqrt(vec2((mix(float((- 3014.1748)), float((mix(float(0.0), float((5.4)), bool(false)))), bool(true))), 0.0))).y))))))
      {
       if(((bool(bvec4((bool(bvec3(false, false, false))), false, true, false)))))
        {
         if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if((false))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            return;
           return;
          }
         return;
         if((((((injectionSwitch.x > injectionSwitch.y))) && ((true) || false))))
          return;
        }
       return;
      }
     return;
    }
   if((! (! ((false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((bool(bvec3(((true) && true), (((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)))), (true && (false))))) && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 uint workgroup_size = ((((((((((uvec3(1u, 1u, 1u) * (clamp(((((uvec3(0u, 0u, 0u) ^ (((((bool(bvec2(true, false))) ? gl_WorkGroupSize : (uvec3(94670u, 183006u, 197868u))))))) / uvec3(1u, 1u, ((1u) ^ 0u)))) * uvec3(1u, ((((1u) | (1u))) | 0u), 1u)), gl_WorkGroupSize, gl_WorkGroupSize)))) * uvec3(1u, 1u, 1u))) + uvec3(0u, 0u, 0u))).x) ^ 0u)) | 0u);
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
    {
     if((false))
      return;
     if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if(((((! (! (injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y)))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((! (! (bool(bvec4(false, false, true, true))))))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((true && ((false))))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false) || false)))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((! ((! (! (! ((! (! (false)))))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((((false || (((! (! ((false || ((((false) || false)) && (! (! (true)))))))))))) || false)))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
   if(((bool(bvec3(false, false, true)))))
    {
     if(((false || (false))))
      return;
     if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((((((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y)))) || false)) || false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((false) || false)))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((false) && true)))
  {
   if((false))
    return;
   return;
  }
 uint virtual_gid = (~ (~ (workgroup_base + (max(subgroup_id, subgroup_id)) * subgroup_size))) + subgroup_local_id;
 if(((bool((bvec3(bvec4(bvec3((((! ((! ((! (! (! (! (((! (! (bool(bvec2((((clamp(injectionSwitch, injectionSwitch, (vec2(0.0, 0.0) + (injectionSwitch)))).x > (min(injectionSwitch, injectionSwitch)).y)), true)))))))))))))))) || false), true, false), true)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec3(false, true, true)))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  return;
 if((((injectionSwitch.x > (((max(injectionSwitch.y, injectionSwitch.y))) + 0.0)))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(((((((mix(vec2((8.4), (3681.0620)), vec2((false ? (vec2(7521.2178, 0.0)) : injectionSwitch)[0], (false ? (vec2(7521.2178, 0.0)) : injectionSwitch)[1]), bvec2(true, true))))).x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 buf[virtual_gid] = (((((true && ((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) ? ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) : (0u + (uint(subgroupAllEqual(write_val)))))) ^ 0u));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
}
