#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false || ((false))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((((((bool((bvec3(bvec3(bvec3((true && (false)), true, true)))))) || false)) || false)))) && true))
  {
   if(((((((injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false || ((false))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > ((true ? injectionSwitch.y : (- 6.7)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((bool(bool((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(((bool(bvec4(false, false, false, true)))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (((((uint((injectionSwitch.x))) | (((uint((injectionSwitch.x))) >> 0u)))) << 0u) + ((max(workgroup_id, workgroup_id))));
 if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if((! (! ((false)))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if(((((true && (false))) && true)))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 uint virtual_gid = ((((((((((((~ ((((((0u + ((~ (~ (~ (true ? uint(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : (workgroup_size))))))) | (0u + ((~ (~ (~ (true ? uint(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : (workgroup_size))))))))) | (0u + ((~ (~ (~ (true ? uint(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : (workgroup_size))))))))))) | (~ ((((((0u + ((~ (~ (~ (true ? uint(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : (workgroup_size))))))) | (0u + ((~ (~ (~ (true ? uint(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : (workgroup_size))))))))) | (0u + ((~ (~ (~ (true ? uint(uint(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : (workgroup_size)))))))))))))) + 0u) - 0u)))))) ^ uint(((min(injectionSwitch.x, injectionSwitch.x)))));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(write_val, ((uint(virtual_gid)) - 0u), 4, 64, 0);
 (1u * (buf[virtual_gid] = uint(subgroupAllEqual(write_val))));
}
