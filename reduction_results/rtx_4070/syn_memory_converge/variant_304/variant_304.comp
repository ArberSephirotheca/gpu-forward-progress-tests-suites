#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(((false || (bool(bvec2((((! (! ((false))))) || ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   barrier();
   if((((((false ? (- 146.373) : injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 if(((((vec2((transpose(transpose(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))))).x > (max(injectionSwitch, injectionSwitch)).y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((false) || false)))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((false || ((false))))
  {
   if((false))
    {
     if(((false || (bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(((! (((! (false)) && true)))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(((((min((1.0 * (((injectionSwitch) * vec2(1.0, 1.0)).x)), ((injectionSwitch) * vec2(1.0, 1.0)).x)) > injectionSwitch.y))))
        return;
       return;
      }
     if((true && ((false || ((((injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
      barrier();
     return;
     if((false))
      return;
    }
   return;
   if((false))
    return;
  }
 if((((((injectionSwitch.x) * abs(1.0)) > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((! (! (bool(bvec3((((! ((true && (! ((((false || ((false || (bool(bool((false || (false || (false)))))))))))))))) || false)), false, true))))))))
  return;
 if((((((bool((bvec2(bvec3(bvec2(((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true), false)))))) && ((injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 if((false))
  return;
 uint num_workgroup = (min((~ (~ ((clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))), (0u ^ (gl_NumWorkGroups.x))));
 if((((bool(bvec3(((! ((bool(bvec4(! (false), true, ((injectionSwitch.x > injectionSwitch.y)), false)))))) || false, true, false))))))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_size = ((((min((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))) | ((uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[(int(int(1)))], gl_WorkGroupSize[2])).x))) - 0u);
 if((false))
  {
   if((false))
    {
     if(((((clamp(injectionSwitch, injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((true && ((false))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((! (! ((((false)) || false)))))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * (uint(uint((1u * ((max((~ (~ ((((1u * (workgroup_id))) | (workgroup_id))))), ((max(((~ (~ ((((1u * (workgroup_id))) | (workgroup_id))))) << 0u), ~ (~ ((((1u * (workgroup_id))) | (workgroup_id))))))))))))));
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((bool(bvec2(bool(((! (! (bool((((injectionSwitch.x < injectionSwitch.y)) && (bool(bool(((((! (! (((((false) && true)))))) || false)) && true))))))))))), false))) && true))))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 uint virtual_gid = (0u ^ (workgroup_base + subgroup_id * subgroup_size)) + ((true ? subgroup_local_id : (num_workgroup)));
 if((false))
  return;
 if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec2(((false) || false), true)))))
      {
       if((((false) && true)))
        barrier();
       barrier();
      }
     return;
    }
   return;
  }
 atomicStore(write_val, (((~ (~ ((true ? ((((false || (true)) ? uint(virtual_gid) : (38493u)))) : (subgroup_id)))))) | 0u), 4, 64, 0);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false) && (((max(injectionSwitch.x, injectionSwitch.x)) < ((true ? injectionSwitch : (refract(vec2(8.0, - 69.89), injectionSwitch, - 8.3)))).y)))))
    barrier();
   if((false))
    {
     if(((! ((bool(bvec4(! (false), true, false, false)))))))
      return;
     if((false))
      {
       if((false))
        return;
       if((! (! ((false)))))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((((injectionSwitch.x) / 1.0) > (clamp(((false ? (5.8) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((true && ((false))))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((((((((((injectionSwitch.x > injectionSwitch.y)) || ((! (! ((injectionSwitch.x > injectionSwitch.y))))))) && true))) || false)))
  {
   if((false))
    {
     if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    barrier();
   if(((((mix(float((426.790)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     if(((bool(bvec2(false, false)))))
      return;
     barrier();
    }
   if((false))
    return;
   if(((((bool(bvec3(false, true, true))) || false))))
    barrier();
   if(((! ((bool(bvec3(! (((injectionSwitch.x > injectionSwitch.y))), false, ((injectionSwitch.x < injectionSwitch.y)))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((bool(bvec2((((((false)) && ((injectionSwitch.x < injectionSwitch.y))) && true)), (! (! (! (! ((true))))))))))
  barrier();
 if((false || ((false))))
  return;
 if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, ((injectionSwitch.x < injectionSwitch.y)), true)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((((vec2(0.0, 0.0) + ((max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))) || false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false)) && true))
    return;
   return;
  }
 if((((injectionSwitch.x > (mix(vec2((170.748), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 22.53)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))).y))))
  barrier();
}
