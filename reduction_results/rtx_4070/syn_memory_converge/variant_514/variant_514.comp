#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    {
     if((true && (((((((((min(false ? (vec2(5.2, - 5202.9093)) : ((false ? (injectionSwitch) : (vec2(injectionSwitch[0], injectionSwitch[1])))), false ? (vec2(5.2, - 5202.9093)) : ((false ? (injectionSwitch) : (vec2(injectionSwitch[0], injectionSwitch[1])))))))).x > injectionSwitch.y)))) || false))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 82.58), (- 2388.2613)), bvec2(false, false))).x > injectionSwitch.y))))
  barrier();
 if(((! (! ((true && (false)))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max(gl_NumWorkGroups.x, ((gl_NumWorkGroups.x) ^ 0u)));
 uint workgroup_size = (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((((true ? (max(injectionSwitch, ((injectionSwitch) + vec2(0.0, 0.0)))) : (injectionSwitch))).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(((false || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((((false) || false)))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((((! ((true && (! ((! (! (((bool(bvec3(((((injectionSwitch.x > injectionSwitch.y))) && true), true, true))))))))))))) || false)) && true))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if((((! (! ((((false)) || false) && true))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = ((gl_WorkGroupID) | (gl_WorkGroupID)).x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((false) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * ((0u | 0u) | (workgroup_id));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((((! (! (! ((bool(bool((! (! (! (bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))))))))))))))
  {
   if(((bool(bvec3(bool((bvec2(bvec2(bvec2((false), false))))), false, false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((bool((bvec3(bvec3(bvec3(false, (true && (true)), true))))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint virtual_gid = (~ (~ (workgroup_base))) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 ((((true ? ((false ? ((-- workgroup_base)) : buf[virtual_gid] = uint(subgroupAllEqual(write_val)))) : (subgroup_size)) ^ 0u)));
 if((false))
  barrier();
 if((false))
  barrier();
}
