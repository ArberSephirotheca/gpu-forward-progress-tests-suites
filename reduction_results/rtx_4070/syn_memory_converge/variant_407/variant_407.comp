#version 460

struct _GLF_struct_18 {
 bvec2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_17 {
 ivec4 _f0;
 vec2 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 mat2 _f1;
 uint _f2;
 vec4 _f3;
 ivec4 _f4;
 uint _f5;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
} ;

struct _GLF_struct_14 {
 uvec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_19 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 ivec2 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_18 _f5;
} ;

struct _GLF_struct_12 {
 bvec3 _f0;
 uvec4 _f1;
 ivec3 _f2;
 bvec3 _f3;
 bvec3 _f4;
 bvec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
 bvec2 _f1;
 mat2x3 _f2;
 uvec2 _f3;
 mat3 _f4;
 int _f5;
 vec2 _f6;
} ;

struct _GLF_struct_10 {
 bvec3 _f0;
 mat2 _f1;
 bvec4 _f2;
 uvec2 _f3;
 mat4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
 ivec4 _f3;
 uvec2 _f4;
 mat4x3 _f5;
 _GLF_struct_12 _f6;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 mat4x3 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 uint _f1;
 mat2x3 _f2;
 bvec4 _f3;
 bvec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 mat2 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 vec3 _f1;
 mat4x2 _f2;
 mat2x4 _f3;
 bool _f4;
 vec4 _f5;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 int _f1;
 mat4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_2 {
 int _f0;
 mat2 _f1;
 mat3 _f2;
 ivec3 _f3;
 mat3x2 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_5 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_19 _f3;
 ivec3 _f4;
 uint workgroup_id;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 uint virtual_gid;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 uint workgroup_size;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((false ? (uvec3(30062u, 139196u, 137676u)) : gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)).x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((! (! (true))))
    {
     do
      {
       if(((! (! (bool(bool(((((false ? (injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))))))))
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if(((injectionSwitch.x > ((false ? (injectionSwitch) : (min(injectionSwitch, injectionSwitch)))).y)))
                      {
                      }
                     else
                      {
                       if(true)
                        {
                         do
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = (int((injectionSwitch.x)) & - 45072); _injected_loop_counter < 1; _injected_loop_counter ++)
                              {
                               do
                                {
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     do
                                      {
                                       if(((injectionSwitch.x < injectionSwitch.y)))
                                        {
                                         if((((false) || false)))
                                          {
                                           if(true)
                                            {
                                             for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                                              {
                                               for(int _injected_loop_counter = 0; (max(_injected_loop_counter, (max(_injected_loop_counter, (max(_injected_loop_counter, _injected_loop_counter)))))) != ((1 << (int(5))) >> (((int(5)) >> 0))); _injected_loop_counter ++)
                                                {
                                                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 << (((int(6))) - 0)) >> ((((true ? (int(6)) : (_injected_loop_counter)))) | 0)) << (int(0))) >> (int(0))); _injected_loop_counter ++)
                                                  {
                                                   do
                                                    {
                                                     for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != 0; _injected_loop_counter --)
                                                      {
                                                       if(((injectionSwitch.x < injectionSwitch.y)))
                                                        {
                                                         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & (33889 & 80128)); _injected_loop_counter --)
                                                          {
                                                           for(int _injected_loop_counter = ((1) | (0 | (((((int(ivec3(false ? ((~ (~ (70293)))) : 1, 0, int((injectionSwitch.x))))))))))); _injected_loop_counter != 0; _injected_loop_counter --)
                                                            {
                                                             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
                                                              {
                                                               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((1 * ((min(int(4), int(4))))))) >> ((~ (~ (((clamp((0 ^ (0)), 0, (clamp(0, 0, 0)))) ^ (int(4)))))))); _injected_loop_counter ++)
                                                                {
                                                                 return;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   while(false);
                                                  }
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(false);
                                    }
                                   while(false);
                                  }
                                }
                               while(false);
                              }
                            }
                          }
                         while(false);
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
           while((((! (! (((false) || false))))) || false));
          }
         else
          {
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
    }
  }
 else
  {
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec3(1u), gl_WorkGroupSize.x);
 if(true)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((((injectionSwitch.y)) * 1.0)); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(true)
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               for(int _injected_loop_counter = ((1 << ((~ (~ (((((int((max(2, 2))))) | ((int(2)))))))) | 0)) >> (int(2))); _injected_loop_counter > (0 | ((~ (~ (0 >> (int(1))))))); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = 0; (bool(bvec4(_injected_loop_counter != (1 | 0), true, true, false))); _injected_loop_counter ++)
                        {
                         do
                          {
                           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                {
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(false)
                                      {
                                      }
                                     else
                                      {
                                       if(true)
                                        {
                                         do
                                          {
                                           if(true)
                                            {
                                             do
                                              {
                                               if((bool((bool(bvec2(bool((((! (((! (((injectionSwitch.x > (vec2(0.0, 0.0) + (injectionSwitch)).y) && true))) && true)))))), false))))))
                                                {
                                                }
                                               else
                                                {
                                                 if(true)
                                                  {
                                                   if(false)
                                                    {
                                                    }
                                                   else
                                                    {
                                                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                                                      {
                                                       if(false)
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(true)
                                                          {
                                                           if(true)
                                                            {
                                                             do
                                                              {
                                                               for(int _injected_loop_counter = 0; ((_injected_loop_counter < (1 & int((((injectionSwitch.y) + 0.0))))) && true); _injected_loop_counter ++)
                                                                {
                                                                 if((((bool((bvec3(bvec4(bvec3((bool(bvec4((! (! (bool(bvec4((((injectionSwitch.x < injectionSwitch.y))), false, true, ((injectionSwitch.x < injectionSwitch.y))))))), false, true, false))), true, false), (((true && (true))) || false))))))) || false))
                                                                  {
                                                                   if(((injectionSwitch.x < injectionSwitch.y)))
                                                                    {
                                                                     if((false))
                                                                      {
                                                                       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                                                                        {
                                                                         if(((! (! ((bool(bvec3(((! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x < ((injectionSwitch.y) - 0.0))), false))))))))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           if(true)
                                                                            {
                                                                             if(true)
                                                                              {
                                                                               do
                                                                                {
                                                                                 do
                                                                                  {
                                                                                   for(int _injected_loop_counter = ((1 << ((min(int(3), ((int(3)) | 0))))) >> ((((~ (~ (int(3))))) >> 0))); _injected_loop_counter != (int((float(vec4((clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))), 1.0, 0.0, 1.0)))) << (int(2))); _injected_loop_counter --)
                                                                                    {
                                                                                     if(((injectionSwitch.x > injectionSwitch.y)))
                                                                                      {
                                                                                      }
                                                                                     else
                                                                                      {
                                                                                       if(false)
                                                                                        {
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                         if(true)
                                                                                          {
                                                                                           if(false)
                                                                                            {
                                                                                            }
                                                                                           else
                                                                                            {
                                                                                             do
                                                                                              {
                                                                                               if(true)
                                                                                                {
                                                                                                 if(((true) && true))
                                                                                                  {
                                                                                                   do
                                                                                                    {
                                                                                                     for(int _injected_loop_counter = (0 & 19872); _injected_loop_counter < 1; _injected_loop_counter ++)
                                                                                                      {
                                                                                                       if((bool((bvec3(bvec3(bvec3((bool(bool((! (! (true)))))), ((injectionSwitch.x > (((max(((true ? injectionSwitch.y : (680.228))), injectionSwitch.y))) - sqrt((dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))), true)))))))
                                                                                                        {
                                                                                                         if(true)
                                                                                                          {
                                                                                                           if(true)
                                                                                                            {
                                                                                                             if(((injectionSwitch.x > injectionSwitch.y)))
                                                                                                              {
                                                                                                              }
                                                                                                             else
                                                                                                              {
                                                                                                               do
                                                                                                                {
                                                                                                                 if(((bool(bvec4(((((true && (injectionSwitch.x > (mix(float((float((mat2x4(- 88.44, - 9.0, - 5541.3841, - 977.636, ((2964.0941) + 0.0), 6.4, 0.0, - 34.37) != mat2x4(- 40.47, (1.0 * (3.9)), 63.58, 5.0, - 731.881, - 2601.6421, 9.5, 397.977))))), float((clamp((vec2(0.0, ((0.0) * 1.0)) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))))) || ((false) || false))), false, (((((bool(bvec4(bool(((true && (! (! (bool((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), false, true, true))) || false)))), true)))))
                                                                                                                  {
                                                                                                                  }
                                                                                                                 else
                                                                                                                  {
                                                                                                                   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) << 0); _injected_loop_counter ++)
                                                                                                                    {
                                                                                                                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((~ (~ (int(4)))))) >> (int(4))); _injected_loop_counter ++)
                                                                                                                      {
                                                                                                                       do
                                                                                                                        {
                                                                                                                         do
                                                                                                                          {
                                                                                                                           if(((injectionSwitch.x > injectionSwitch.y)))
                                                                                                                            {
                                                                                                                            }
                                                                                                                           else
                                                                                                                            {
                                                                                                                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                                                                                                              {
                                                                                                                               if(((injectionSwitch.x > injectionSwitch.y)))
                                                                                                                                {
                                                                                                                                }
                                                                                                                               else
                                                                                                                                {
                                                                                                                                 do
                                                                                                                                  {
                                                                                                                                   if(true)
                                                                                                                                    {
                                                                                                                                     if(false)
                                                                                                                                      {
                                                                                                                                      }
                                                                                                                                     else
                                                                                                                                      {
                                                                                                                                       if(true)
                                                                                                                                        {
                                                                                                                                         if(false)
                                                                                                                                          {
                                                                                                                                          }
                                                                                                                                         else
                                                                                                                                          {
                                                                                                                                           for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                                                                                                                                            {
                                                                                                                                             if(true)
                                                                                                                                              {
                                                                                                                                               if(true)
                                                                                                                                                {
                                                                                                                                                 for(int _injected_loop_counter = 1; _injected_loop_counter > ((false ? (_injected_loop_counter) : 0)); _injected_loop_counter --)
                                                                                                                                                  {
                                                                                                                                                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                                                                                                                                                    {
                                                                                                                                                     if((! (! (false))))
                                                                                                                                                      {
                                                                                                                                                      }
                                                                                                                                                     else
                                                                                                                                                      {
                                                                                                                                                       for(int _injected_loop_counter = ((- 43796 / - 8708) & (0 | 0)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                                                                                                                                                        {
                                                                                                                                                         for(int _injected_loop_counter = 0; ((! ((false || (! (bool((((bool(bvec4(bool((false || (bool(bool(bvec4(bool(_injected_loop_counter != (clamp(int(((clamp((max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)), (min(int(((clamp((max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)), int(((clamp((max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))), int(((clamp((max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))))), true, false, true)))))), true, false, true)))))))))))); _injected_loop_counter ++)
                                                                                                                                                          {
                                                                                                                                                           do
                                                                                                                                                            {
                                                                                                                                                             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                                                                                                                                              {
                                                                                                                                                               return;
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                           while(false);
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                               else
                                                                                                                                                {
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                             else
                                                                                                                                              {
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                       else
                                                                                                                                        {
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                   else
                                                                                                                                    {
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                 while(false);
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                         while(false);
                                                                                                                        }
                                                                                                                       while(((injectionSwitch.x > injectionSwitch.y)));
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                               while(((injectionSwitch.x > injectionSwitch.y)));
                                                                                                              }
                                                                                                            }
                                                                                                           else
                                                                                                            {
                                                                                                            }
                                                                                                          }
                                                                                                         else
                                                                                                          {
                                                                                                          }
                                                                                                        }
                                                                                                       else
                                                                                                        {
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                   while(((injectionSwitch.x > injectionSwitch.y)));
                                                                                                  }
                                                                                                 else
                                                                                                  {
                                                                                                  }
                                                                                                }
                                                                                               else
                                                                                                {
                                                                                                }
                                                                                              }
                                                                                             while(false);
                                                                                            }
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                 while((((min(((mix(float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(((false ? - 8.9 : 608.767))), bool(false)))), (max(((mix(vec2((mat2(1.0) * (injectionSwitch))[0], (4811.6746)), vec2((546.185), (mat2(1.0) * (injectionSwitch))[1]), bvec2(false, true)))).x, (0.0 + (injectionSwitch.x)))))) > injectionSwitch.y)));
                                                                                }
                                                                               while(false);
                                                                              }
                                                                             else
                                                                              {
                                                                              }
                                                                            }
                                                                           else
                                                                            {
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                   else
                                                                    {
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             while(false);
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                             while(false);
                                            }
                                           else
                                            {
                                            }
                                          }
                                         while(((((bool((bvec2(bvec2(bvec2(false, true)))))) || ((bool(bvec3(false, ((true) && true), false)))))) && true));
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   while(false);
                                  }
                                }
                              }
                            }
                          }
                         while((bool(bvec3(false, (true && (true)), true))));
                        }
                      }
                     else
                      {
                      }
                    }
                   while(false);
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
            }
          }
         else
          {
          }
        }
       while(false);
      }
     while(((((injectionSwitch.x) - 0.0) > injectionSwitch.y)));
    }
  }
 else
  {
  }
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_5(_GLF_struct_2(1, mat2((0.0 + (1.0))), mat3(1.0), (max(((false ? (ivec3(- 91676, 26563, 14677)) : ivec3((((~ ((min(~ (1), ~ (1))))) - 0))))), ivec3((~ (~ (1)))))), mat3x2(1.0), (((transpose(transpose(mat4(1.0))))) - mat4((injectionSwitch.x), (injectionSwitch.x), ((mix(float(injectionSwitch.x), float((- 7901.5953)), bool(false)))), ((float((mat3x4(mat3x4(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, (max(0.0, 0.0)), 1.0, 1.0, 0.0))))))), (injectionSwitch.x), (injectionSwitch.x), ((clamp((mix(float((8.3)), float(injectionSwitch.x), bool(true))), (mix(float((902.857)), float(injectionSwitch.x), bool(true))), ((((true ? injectionSwitch.x : (- 408.185)))) - 0.0)))), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))), bvec4(true)), _GLF_struct_3(uvec4(1u), 1, mat4((min(1.0, ((true ? 1.0 : (1.9)))))), mat3x2(1.0)), _GLF_struct_4(uvec4(1u), vec3((mix(float(1.0), float((- 94.22)), bool(false)))), mat4x2(1.0), mat2x4(1.0), true, (vec4(1.0, 1.0, 1.0, 1.0) * (vec4((((min(1.0, 1.0))) - 0.0)))))), _GLF_struct_9(mat3x4(1.0), _GLF_struct_6(mat3(1.0), 1u, mat2x3(1.0), bvec4(true), bvec2(true), uvec4(1u)), _GLF_struct_7(ivec2(1), mat4x3(1.0), mat4x3(((1.0) - 0.0)), mat4x2(1.0)), mat2(((true ? 1.0 : (- 1.3)))), _GLF_struct_8(vec3((((max(((min(max(false ? (min((1.2), (1.2))) : (mix(float((float(47130))), float(1.0), bool(true))), (! (((! (false)) || false))) ? (length(vec4(0.0, 0.0, 0.0, 0.0)) + ((1.2))) : 1.0), (mix(float((25.45)), float(max(false ? (min((1.2), (1.2))) : 1.0, false ? (1.2) : 1.0)), bool(true)))))), false ? (max((1.2), ((max((mix(float((- 99.30)), float(1.2), bool(true))), 1.2))))) : 1.0))))), ivec3(1))), _GLF_struct_13(mat4x3((max(1.0, 1.0))), _GLF_struct_10(bvec3(true), mat2(1.0), bvec4(true), uvec2(1u), ((mat4(1.0)) * mat4(1.0)), vec3(1.0)), _GLF_struct_11(mat2x3(((true ? 1.0 : (3.5)))), bvec2(true), mat2x3(1.0), uvec2((clamp(1u, 1u, ((1u) - 0u)))), ((false ? ((- mat3(- 96.02, 7.8, - 2761.9159, - 32.31, 98.76, ((min(float(vec3(3.0, (injectionSwitch.y), 0.0)), float(vec3(3.0, (injectionSwitch.y), 0.0))))), - 737.263, 187.670, - 5.6))) : mat3(1.0))), 1, vec2(1.0)), ivec4(1), uvec2(((1u) << 0u)), mat4x3(1.0), _GLF_struct_12(bvec3(true), uvec4((1u * (1u))), ivec3(((1) | 0)), bvec3((((true && (true)) && true))), bvec3(true), bvec4(true), mat3x2(1.0))), _GLF_struct_19(_GLF_struct_14(uvec3(1u), bvec3((! (! ((((bool(bvec4(! (! (((bool(bool(true)))) || ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))))))), _GLF_struct_15(bvec3((false || ((bool(bvec4((! (! (true))), false, false, false))))))), ivec2((min(1, 1))), _GLF_struct_16(ivec4(1), mat2((min(1.0, ((false ? ((mix(float(determinant(mat3(0.0, - 390.418, 9473.8900, - 4.4, - 6.5, - 4.7, 540.716, 2.1, 7.0))), float((- 6.5)), bool(false)))) : 1.0))))), ((true ? (uint(uvec3(1u, 0u, 1u))) : (((0u ^ ((write_val)))) >> 0u))), vec4(1.0), ivec4(1), ((false ? (write_val) : (~ (~ (((1u) - 0u))))))), _GLF_struct_17(ivec4(1), vec2(1.0), mat4x2(1.0)), _GLF_struct_18(bvec2(true), bvec4(true))), ivec3(1), gl_WorkGroupID.x);
 uint workgroup_base = _GLF_struct_replacement_0.workgroup_size * ((_GLF_struct_replacement_20.workgroup_id) / 1u);
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(mat3x4(1.0), ((workgroup_base) << uint((injectionSwitch.x))) + (1u * ((min(((((subgroup_id) | 0u)) << (0u | 0u)), subgroup_id)))) * subgroup_size + subgroup_local_id);
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((mix(vec2((injectionSwitch)[0], (- 989.571)), vec2((- 278.384), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)))
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((((! (! (true)))) || false))
        {
         for(int _injected_loop_counter = (max((~ (~ (0))), 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(true)
                {
                 do
                  {
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(((injectionSwitch.x > ((min(mix(((((injectionSwitch.x < injectionSwitch.y)) ? ((vec2((injectionSwitch)[0], (- 639.533))) - log(vec2(1.0, 1.0))) : (injectionSwitch))), vec2(((mix(float((- 7.4)), float(57.40), bool(true)))), (injectionSwitch)[1]), bvec2(false, true)), mix(((((injectionSwitch.x < injectionSwitch.y)) ? ((vec2((injectionSwitch)[0], (- 639.533))) - log(vec2(1.0, (clamp(1.0, ((1.0) - 0.0), (mix(float(1.0), float((- 62.36)), bool(false)))))))) : (injectionSwitch))), vec2((clamp((57.40), (57.40), (57.40))), (injectionSwitch)[1]), bvec2(false, (! (! (true)))))))).y)))
                        {
                        }
                       else
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                              {
                               if(true)
                                {
                                 atomicStore(write_val, uint(_GLF_struct_replacement_1.virtual_gid), 4, (((((((min(64, 64))) | ((min(64, 64)))) + 0) >> 0))), 0);
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   while(((((injectionSwitch.x > injectionSwitch.y))) && true));
                  }
                 while((bool(bvec2((true && (false)), (! (((! (false)) && ((injectionSwitch.x < injectionSwitch.y)))))))));
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 if((bool(bvec4(false, false, true, true))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if(((true && ((injectionSwitch.x < injectionSwitch.y)))))
      {
       for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); ((bool(bvec4((bool(bvec4(true && (_injected_loop_counter != int((injectionSwitch.y))), false, false, ((injectionSwitch.x < injectionSwitch.y))))), false, (bool(bvec4(false, (bool(bool((true && (false))))), true, ((injectionSwitch.x > injectionSwitch.y))))), true)))); ((0 >> (int(((3) ^ (0 | 0))))) ^ (_injected_loop_counter ++)))
              {
               buf[_GLF_struct_replacement_1.virtual_gid] = uint(subgroupAllEqual(write_val));
              }
            }
           while(false);
          }
        }
      }
     else
      {
      }
    }
  }
}
