#version 460

struct _GLF_struct_0 {
 bvec3 _f0;
 uint workgroup_size;
 bool _f1;
 bvec3 _f2;
 mat2x4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 _GLF_struct_0 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 mat2x4 _f1;
 ivec3 _f2;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(((bool((bvec2(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))))))
      return;
    }
   if((false))
    return;
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size;
 if(false)
  {
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        continue;
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     return;
    }
  }
 if((false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base;
 if((false))
  {
   do
    {
     if((false))
      break;
     barrier();
     if(((false || (false))))
      barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   do
    {
     do
      {
       GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.y = subgroup_id;
      }
     while(false);
     if((false))
      break;
     if(((bool(bool(false)))))
      barrier();
    }
   while(false);
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
   if((false))
    {
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(false)
  {
   if(true)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
   do
    {
     GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w = subgroup_size;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((false) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          break;
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if(((((true && (false))) && true)))
          return;
         barrier();
        }
       if((false))
        continue;
       if(((true && (false))))
        barrier();
      }
    }
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
               if((false))
                return;
              }
             if(((bool(bvec2(false, true)))))
              return;
            }
          }
        }
       if((false))
        barrier();
       if(((bool(bvec3(false, true, true)))))
        {
         if((false))
          barrier();
         barrier();
        }
       return;
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          return;
         barrier();
        }
      }
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   do
    {
     if(true)
      {
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
             if(((bool(bvec4(false, false, false, ((injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(((! (! ((true && (false)))))))
                break;
               barrier();
              }
            }
          }
         if(true)
          {
           if((false))
            {
             do
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 if((false))
                  continue;
                 if((false))
                  barrier();
                 continue;
                }
               if((false))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  break;
                 if((false))
                  break;
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  continue;
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                }
               barrier();
               if((false))
                barrier();
              }
             while((true && (false)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if(true)
              {
               if((false))
                continue;
               if(((true && (false))))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((false))
              {
               if(false)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != (int((injectionSwitch.y)) | 0); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(false);
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   break;
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    break;
                   for(int _injected_loop_counter = (0 ^ (0 | 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                 if((false))
                  continue;
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  break;
                }
               if((false))
                barrier();
              }
            }
           if((false))
            return;
           if((false))
            barrier();
          }
         else
          {
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
         if(((! (((! (false)) || false)))))
          barrier();
        }
       while(false);
      }
     else
      {
      }
     if((false))
      break;
    }
   while(false);
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) << 0); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.z = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w;
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(false);
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if(true)
            {
             if((false))
              break;
             return;
             if((false))
              return;
            }
           else
            {
            }
          }
        }
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if((false))
    break;
   if((false))
    barrier();
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((false) && true)))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
         if((false))
          break;
         if((false))
          {
           if((false))
            break;
           return;
          }
        }
      }
    }
  }
 else
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 if(((((bool(bvec3(false, false, false))) || false))))
  barrier();
 if((false))
  return;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.y = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.z;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if((false))
  return;
 if(true)
  {
   do
    {
     if(((false || (false))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 do
  {
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(false);
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     if((false))
      return;
     if((false))
      return;
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.x = num_workgroup;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if(true)
        {
         if(((bool(bvec4(false, true, false, false)))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        barrier();
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((! (! (false)))))
            {
             if((false))
              return;
             if((false))
              return;
             barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            barrier();
           if(true)
            {
             if(((bool(bvec3((bool(bvec3(false, true, true))), false, false)))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (! (false)))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
         if(true)
          {
           return;
          }
         else
          {
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((false))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if((false))
            continue;
           if((false))
            {
             if(((! (((! (false)) && true)))))
              break;
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                continue;
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  continue;
                }
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             barrier();
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              continue;
             if((false))
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             do
              {
               if((false))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             if((false))
              {
               if((((false) && true)))
                barrier();
               return;
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(((true && ((false || (false))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (0 >> ((min(int(0), int(0))))); _injected_loop_counter < (~ (~ (1))); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   return;
                  }
                 return;
                 if((false))
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                }
              }
            }
           while(false);
          }
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((bool(bool(false)))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        return;
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((false))
            return;
           barrier();
           if((false))
            break;
          }
        }
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(((! (! (false)))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    return;
   if(((bool(bvec3(((false) && true), ((injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(true)
  {
   GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.x = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.x;
  }
 else
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(bvec4(true), _GLF_struct_0(bvec3(true), gl_WorkGroupSize.x, true, bvec3(true), mat2x4(1.0), ivec4(1)), mat3(1.0)), mat2x4(1.0), ivec3(1));
 if((false))
  barrier();
 if((false))
  {
   if((((false || (bool(bvec4(false, true, false, false)))))))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_2._f0._f1.workgroup_size * workgroup_id;
 if((false))
  return;
 for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(true)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((false) && true)))
            continue;
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         if((false))
          {
           if(false)
            {
             if((false))
              {
               if((false))
                return;
               return;
              }
            }
           else
            {
             if((false))
              return;
             do
              {
               if(((! (! (false)))))
                continue;
               barrier();
               if((false))
                return;
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   while(false);
                   if((false))
                    continue;
                  }
                }
               else
                {
                }
              }
             while(false);
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        continue;
       if(true)
        {
         if((false))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     if((false))
      barrier();
    }
   else
    {
    }
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(false);
   barrier();
   if(((false || (false))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     while(((false) || false));
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(false)
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((false) && true))
          {
          }
         else
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(((! ((! (! (! (false))))))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         while((bool(bvec3(false, true, false))));
         if((false))
          barrier();
         if((false))
          break;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        break;
      }
     while(false);
     if((false))
      barrier();
     if((false))
      continue;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
  }
 else
  {
   if((false))
    return;
   if((false))
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
      }
     while(false);
    }
   do
    {
     if(false)
      {
       if(((! (! (false)))))
        {
         if((false))
          continue;
         return;
        }
      }
     else
      {
       if((bool(bvec2(true, true))))
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            continue;
           do
            {
             if((false))
              continue;
             barrier();
            }
           while(false);
          }
         GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
         if(true)
          {
           if((false))
            {
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             if((false))
              continue;
             if((false))
              break;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               do
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
          }
         else
          {
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            continue;
          }
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   while(false);
   if((false))
    {
     for(int _injected_loop_counter = ((1 << (((int(1)) | (int(1))))) >> (int(1))); _injected_loop_counter != (15470 & 0); _injected_loop_counter --)
      {
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            continue;
           return;
           if((false))
            break;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((! (! ((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false))))))))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if(((true && (false))))
        barrier();
       barrier();
       if((false))
        return;
       if((false))
        barrier();
      }
     if(((false || (false))))
      {
       if((false))
        return;
       barrier();
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = (0 & - 83400); _injected_loop_counter != ((1 << (((int(6)) ^ 0))) >> (int(6))); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if((false))
          continue;
         return;
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              continue;
             return;
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              continue;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
             if((false))
              break;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((false))
    {
     if(((bool(bvec4((! (! (false))), false, true, false)))))
      {
       if((((false) || false)))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > (~ (~ (0))); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        break;
       barrier();
      }
     barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     else
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((((false) && true)))
        {
         if((false))
          barrier();
         break;
        }
       barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
     if((false))
      return;
    }
   barrier();
   if((((false) || false)))
    return;
  }
 if(((true && (false))))
  return;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   for(int _injected_loop_counter = (0 | ((int((injectionSwitch.x))) >> 0)); _injected_loop_counter != ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((false) || false)))
          barrier();
         barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = (0 >> ((clamp(int(8), int(8), int(8))))); _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           if(((true) || false))
            {
             barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((false))
              break;
             barrier();
            }
          }
         if((false))
          return;
         return;
        }
      }
     barrier();
     if(true)
      {
       if((bool(bool(false))))
        {
         if((false))
          return;
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              {
               if(((((true && (false))) && true)))
                return;
               return;
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    {
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        {
         if((false))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (((int(0)) ^ 0))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((! (! (false)))))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if(((! (! (false)))))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if((false))
  barrier();
 uint virtual_gid = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.z + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.y;
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(((true && (((false) && true)))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(false)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       do
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            continue;
          }
        }
       while(false);
      }
     else
      {
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
         if((false))
          barrier();
        }
      }
    }
   while(false);
   if((false))
    {
     if((false))
      return;
     if(((bool(bvec4(false, true, true, false)))))
      return;
     return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        {
         if((false))
          break;
         if((false))
          break;
         if((false))
          {
           for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
        }
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         barrier();
        }
       if((false))
        continue;
       if((false))
        break;
      }
     while(false);
     if((false))
      {
       if((false))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((false || (bool(bvec2(false, false)))))))
          {
           if((false))
            continue;
           barrier();
          }
         continue;
        }
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           if((false))
            continue;
           barrier();
          }
        }
       else
        {
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         if((false))
          {
           if((false))
            {
             if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  break;
                 return;
                }
              }
             barrier();
            }
           barrier();
           if((false))
            {
             if(((bool(bvec2(false, true)))))
              break;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
              }
             if((false))
              return;
            }
          }
        }
       if(((true) && true))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((bool(bvec2(false, true))))
      {
      }
     else
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if(((false || (false))))
        barrier();
      }
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if((((bool(bvec4(bool((bvec2(bvec2(bvec2(false, true))))), false, false, false))))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 barrier();
                }
               barrier();
              }
            }
           while(false);
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
            barrier();
          }
         barrier();
         if((false))
          return;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       return;
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
       if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
        return;
      }
    }
  }
 if((false))
  barrier();
 if(((false || (false))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = ((((1 << (int(1))) >> (int(1))) << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            break;
          }
        }
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(false)
  {
  }
 else
  {
   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
   if((false))
    return;
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != (((~ (~ (1)))) << 0); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
      {
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(true)
          {
           if((false))
            break;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ int((injectionSwitch.y))); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      break;
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((false))
    {
     if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
      {
       return;
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
       if((false))
        continue;
      }
    }
   if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
    return;
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
     if(((bool(bvec3(false, false, false)))))
      barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((false) || false)))
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if(false)
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        return;
      }
    }
   else
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = (((0 | int((injectionSwitch.y))) << (int(6))) >> ((min(int(6), int(6))))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
       if((false))
        barrier();
      }
    }
  }
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((((false) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      barrier();
     if((false))
      break;
    }
   while(false);
   for(int _injected_loop_counter = ((1) ^ 0); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
         if((false))
          return;
        }
       if(((! (! (false)))))
        return;
       if(true)
        {
         if(((false) || false))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(((false || (false))))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          {
           if((false))
            break;
           if(((false || (false))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(((bool(bvec4(false, true, false, true)))))
              continue;
             barrier();
             if((false))
              break;
            }
           if((false))
            {
             if(((true && (false))))
              barrier();
             if(((! (! (false)))))
              continue;
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if(false)
              {
              }
             else
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 continue;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          return;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((! ((! (! (! (true)))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                break;
               if((false))
                barrier();
               if((false))
                return;
               barrier();
              }
             if((false))
              barrier();
             if((false))
              break;
            }
           else
            {
             if((false))
              break;
            }
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              return;
             break;
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           continue;
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
          }
         do
          {
           if((false))
            {
             do
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   if((false))
                    return;
                   barrier();
                  }
                }
               while(false);
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          break;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((false))
          {
           if(((bool(bvec3(false, true, false)))))
            continue;
           barrier();
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((false))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            return;
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((false) && true)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           return;
          }
         if((false))
          barrier();
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < (clamp(1, 1, 1)); _injected_loop_counter ++)
                {
                 if((((bool(bvec3(false, false, true)))) || false))
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  return;
                }
              }
            }
           else
            {
            }
           barrier();
          }
         if((false))
          return;
         return;
         if((false))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((false || (false))))
          {
           do
            {
             barrier();
            }
           while(false);
           if((false))
            return;
          }
         if((false))
          return;
        }
       if((false))
        {
         do
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         while(false);
         barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(false);
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = (clamp(0, 0, (clamp(0, 0, 0)))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                continue;
               do
                {
                 barrier();
                }
               while((bool(bvec4(false, true, true, true))));
              }
            }
           if((false))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((false) || false)))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
             if(((bool(bvec4((bool(bvec4(false, true, false, true))), ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false)))))
              return;
             if((false))
              barrier();
             if((false))
              return;
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
           if((false))
            barrier();
          }
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          return;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = ((int((injectionSwitch.x))) | (int((injectionSwitch.x)))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                break;
               barrier();
              }
            }
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != (1 | ((0 ^ 0) ^ 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if((false))
        return;
      }
    }
   else
    {
     if(((! (! (false)))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 & int((injectionSwitch.y))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
             if((false))
              return;
             if((false))
              return;
            }
          }
        }
       else
        {
         if(false)
          {
           if(((! (! (false)))))
            barrier();
          }
         else
          {
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            return;
           if(false)
            {
             if((false))
              break;
            }
           else
            {
             barrier();
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             return;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & 57004); _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          continue;
        }
       if((false))
        continue;
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
      }
     if((false))
      break;
    }
   if((false))
    return;
   if(false)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         if((false))
          return;
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   do
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    return;
   if((false))
    barrier();
  }
}
