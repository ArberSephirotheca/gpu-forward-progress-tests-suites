#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((bool(bvec3(false, false, (false || (false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((false || ((bool(bvec2(bool(bvec3((false || ((bool(bvec4((false), true, true, true))))), true, false)), false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 if(((bool(bvec4(((false) || false), true, (((! (! (injectionSwitch.x < injectionSwitch.y))))), true)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if(((((vec2(mat3x4(injectionSwitch, 0.0, (((false ? (- 491.802) : dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      return;
    }
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((! (! ((false)))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(((((1.0 * (((min(float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (clamp(float(mat3x4((float(((false ? (mat2(- 9873.4987, 2994.8472, 6866.5697, - 3.4)) : (transpose(transpose(mat2(injectionSwitch.x, 0.0, 1.0, 1.0)))))))), 1.0, 1.0, (clamp(((false ? (- 0.5) : 1.0)), (mix(float(1.0), float((- 7148.0452)), bool(false))), 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))))) > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(((((vec2(injectionSwitch[0], (float(vec2(injectionSwitch[1], 1.0))))).x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         return;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 if((false))
  return;
 if(((((! (! (false))) && true))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if((((bool((bvec3(bvec4(bvec3(bool(bvec3(false, false, true)), true, ((injectionSwitch.x < injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x < injectionSwitch.y)) && ((((((((injectionSwitch.x > injectionSwitch.y)))) && true)) || false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((! ((((true && (bool((bvec3(bvec3((bvec3(bvec4(bvec3((true && ((false || (bool(bvec4(! ((false)), false, false, false)))))), true, true), false))))))))))))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   barrier();
   if((((false) || false)))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if(((((float(vec2((mix(float((clamp(((injectionSwitch.x) * abs(1.0)), ((injectionSwitch.x) * abs(1.0)), ((injectionSwitch.x) * abs(1.0))))), float((7294.2116)), bool(false))), 0.0))) > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((false) || false)))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   return;
  }
 if(((((bool(bvec4(bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)), true)), false, false, false)))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   return;
  }
 if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > ((injectionSwitch.y) - abs(0.0))))))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > (max((mix(vec2((- 8.2), (5.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, ((injectionSwitch.x < injectionSwitch.y))))), injectionSwitch)).y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((true && ((false || (((! (((! (false))) || false)))))))) && ((injectionSwitch.x < (mix(vec2((injectionSwitch)[0], (58.92)), vec2((- 2787.8059), (injectionSwitch)[1]), bvec2(false, true))).y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      return;
    }
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((false || ((((injectionSwitch.x > injectionSwitch.y)) || (((((bool((bvec3(bvec3(bvec3((bool(bvec3(((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), false, ((injectionSwitch.x < injectionSwitch.y))))), true, true)))))))) && true)))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = (min((((((((min(((workgroup_size) >> 0u), ((workgroup_size) >> 0u)))) - ((0u) | (((0u) | ((~ (~ (0u))))))))) + 0u) - 0u)), (~ ((((((0u + (~ (workgroup_size)))) - ((((0u) + 0u)) >> 0u))) | (clamp(0u, ((true ? 0u : (subgroup_id))), ((true ? 0u : (subgroup_size)))))))))) * workgroup_id;
 uint virtual_gid = ((workgroup_base + (((((~ ((((clamp((0u | ((~ (~ (~ (subgroup_id * subgroup_size)))))), (~ (~ (~ (subgroup_id * subgroup_size)))), (~ ((max(~ (~ (subgroup_id * subgroup_size)), ~ (~ (subgroup_id * subgroup_size))))))))) + 0u)))) >> 0u)) - 0u) + (((min(max(((0u ^ (subgroup_local_id))), (((((min(0u, (max((clamp(0u, 0u, 0u)), 0u))))) | uint((injectionSwitch.x))) ^ (((0u << (((uint(8u)) >> 0u))) + (subgroup_local_id)))))), max(((0u ^ (subgroup_local_id))), ((((0u) | uint((injectionSwitch.x))) ^ (subgroup_local_id))))))) >> 0u)) / 1u);
 if((false))
  return;
 if((((false) && ((injectionSwitch.x < (vec2((mix(float((- 631.992)), float(1.0), bool(true))), 1.0) * (injectionSwitch)).y)))))
  return;
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < ((injectionSwitch) * sqrt(vec2(1.0, 1.0))).y)))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if((false))
    return;
  }
 if((true && ((((((injectionSwitch.x > injectionSwitch.y))) && true)))))
  {
   if((false))
    return;
   if((false))
    return;
   if(((((! (! (false)))) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(((bool(bvec2(false, false)))))
    barrier();
  }
 if((((((bool(bvec2(bool((bvec3(bvec4(bvec3((! (! (injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)), (! (! (false)))), true)))), true))))))))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false || ((((((injectionSwitch.x > injectionSwitch.y))) && true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   barrier();
  }
 if((bool((true && (((bool((false))) || false))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((false)) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if((false))
    return;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
   if(((bool((bvec3(bvec3(bvec3(false, true, false))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
  }
 if(((false || (false))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((bool(((bvec3(bvec4(((bvec3(bvec3(bvec3(bvec4((bvec3(bvec4((bvec3(bvec4(bvec3(bvec4(bvec3((! (! ((((vec2(vec2((vec2(vec3(mat2((injectionSwitch.y)) * (injectionSwitch), 0.0))))))).x > injectionSwitch.y)))), false, false), true)), true))), false))), false)))))), true)))))))))
  barrier();
 if((true && ((false))))
  return;
 atomicStore(write_val, ((uint((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(((uint(uvec4((~ (~ (uint(((true ? virtual_gid : (subgroup_size))))))), (1u ^ 0u), 0u, 1u))) / 1u), 0u, 0u, 0u)))))), 4, 64, 0);
 if((false))
  barrier();
 if((((false) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false)) && true))
    return;
   barrier();
  }
 if(((true && (false))))
  barrier();
 if(((((true && (((false) || false))) || (((vec2(((mat4x3(injectionSwitch, 1.0, (max(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0)) - mat4x3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), ((max(injectionSwitch.x, injectionSwitch.x))), (injectionSwitch.x), (injectionSwitch.x))))).x > injectionSwitch.y))))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((bool(bool(bool(bvec3((false), true, true)))))))
  return;
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((false))
  {
   if((((! (! (((true && (false))))))) && ((injectionSwitch.x < injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false)) || (false || (false))))
      {
       if((((((injectionSwitch.x > ((false ? (injectionSwitch) : (min(injectionSwitch, injectionSwitch)))).y)))) && (false || (true))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        {
         if(((bool(bvec4((! ((((false || (! (((injectionSwitch.x > injectionSwitch.y)))))) || ((injectionSwitch.x > injectionSwitch.y))))), true, true, false)))))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if(((bool(bvec4((true && (false)), false, true, true)))))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  return;
}
