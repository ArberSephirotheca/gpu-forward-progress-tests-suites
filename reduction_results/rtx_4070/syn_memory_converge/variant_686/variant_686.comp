#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) | uvec3(0u, 0u, 0u))).x;
 uint workgroup_size = (uint((uint((min(uvec2((((max(((uint((uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x)) | ((((0u) >> 0u)) | (0u))), (~ (~ (((uint((uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x)) | 0u))))))) << 0u), 0u), ((uvec2(((uint(gl_WorkGroupSize.x)) | 0u), ((0u) | 0u))) << uvec2(((vec2(1.0, 1.0) * (injectionSwitch)).x), (((((injectionSwitch.x)) / 1.0)) - tan(0.0))))))))));
 uint workgroup_id = ((~ ((max((~ (~ (~ (uint(uint(gl_WorkGroupID.x)))))), ~ (((uint(uint((max(gl_WorkGroupID, gl_WorkGroupID)).x))) | ((clamp(uint(uint(gl_WorkGroupID.x)), uint(uint(gl_WorkGroupID.x)), uint(uint(gl_WorkGroupID.x))))))))))));
 uint workgroup_base = (((((min(workgroup_size, ((~ (~ (((((~ (~ (min(true ? uint(uvec4(workgroup_size, 1u, ((((false ? (packHalf2x16(ceil(injectionSwitch))) : 0u))) / (max((~ (~ ((0u ^ 1u)))), (0u ^ 1u)))), 0u)) : (workgroup_size), true ? uint(uvec4(workgroup_size, 1u, ((0u) / (max((~ (~ ((((uint(((false ? (uvec3(109724u, 197478u, 107778u)) : uvec3((0u ^ 1u), 1u, (0u | 0u)))))) << 0u))))), (((((((max(((0u ^ (0u ^ 1u))), (~ (~ (((0u ^ (0u ^ 1u)))))))) | (0u ^ 1u)))) ^ 0u)) | ((((max(((0u ^ (0u ^ 1u))), (~ (~ (((0u ^ (0u ^ 1u)))))))) | (0u ^ 1u)))))))), 0u)) : (workgroup_size)))))))))))))) * workgroup_id) | (~ (((~ (((min(workgroup_size, ((~ (~ (((((true ? uint(uvec4(workgroup_size, 1u, ((0u) / (((max((max((0u ^ 1u), (0u ^ 1u))), (0u ^ 1u))) | ((((clamp(0u ^ 1u, 0u ^ 1u, (((clamp(0u ^ 1u, 0u ^ 1u, 0u ^ 1u)) ^ 0u)))) << uint(((clamp(injectionSwitch, (min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)))))))), (uint(uint(0u))))) : (workgroup_size)) ^ (~ (~ (uint((injectionSwitch.x)))))))))))))) * workgroup_id)))) | ((~ (((((clamp((((min(workgroup_size, ((~ (~ (((true ? uint(uvec4(workgroup_size, 1u, ((0u) / (((0u ^ 1u) | ((((clamp(0u ^ 1u, 0u ^ 1u, (clamp(0u ^ 1u, 0u ^ 1u, 0u ^ 1u)))) << uint((injectionSwitch.x)))))))), 0u)) : (workgroup_size))))))))) * 1u)), (min(workgroup_size, ((~ (~ (((true ? uint(uvec4(workgroup_size, 1u, ((0u) / (((0u ^ 1u) | ((((clamp(0u ^ 1u, 0u ^ 1u, (clamp(0u ^ 1u, 0u ^ 1u, 0u ^ 1u)))) << uint((injectionSwitch.x)))))))), 0u)) : (workgroup_size))))))))), (min(workgroup_size, ((~ (~ (((true ? uint(uvec4(workgroup_size, 1u, ((0u) / (((true ? ((0u ^ 1u) | ((((clamp(0u ^ 1u, 0u ^ 1u, (clamp(0u ^ 1u, 0u ^ 1u, 0u ^ 1u)))) << uint((injectionSwitch.x)))))) : (subgroup_id))))), 0u)) : (((workgroup_size) | (workgroup_size)))))))))))))) << 0u) * workgroup_id)))))))) - (0u | 0u));
 uint virtual_gid = (0u ^ (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, (((0 ^ (64))) >> 0), 0);
 (1u * (buf[virtual_gid] = uint(subgroupAllEqual(write_val))));
}
