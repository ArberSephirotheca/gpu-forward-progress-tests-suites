#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((false || ((bool((((((true) || false) && true)) && (((bool(((false || (((injectionSwitch.x > injectionSwitch.y))))))) && true)))))))) || ((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((true && ((false)))) || false))
    {
     if(((((false || (false))) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((bool((((bvec3(bvec4(bvec3(bvec4((bvec3(bvec4(bvec3(bvec3((bvec3(bvec3(bvec3((bool((bvec2(bvec2((bvec2(bvec2(bvec2((false || (((false || (true)) && ((true && ((false))))))), false))))))))), ((! (! (bool(bool(false)))))), (((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))), true))), true)), true))))))))
    {
     if(((((cos(vec2(0.0, 0.0)) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((false || (false))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(((((bool(bool(false)))) || false)))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((false || ((((injectionSwitch.x > injectionSwitch.y)) && true))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((false || ((bool(bool(bool((bvec3(bvec4((bvec3(bvec4(bvec3(false, false, true), true))), true))))))))))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (0u | (((gl_NumWorkGroups) ^ (uvec3(0u, 0u, 0u) << ((uvec3(0u, 0u, 0u) ^ (uvec3(7u)))))).x));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = ((gl_WorkGroupSize.x) ^ 0u);
 if(((false || (false))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if(((((vec2(mat3(((injectionSwitch) / abs(vec2(1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = ((1u * (min(workgroup_base + ((((subgroup_id * ((subgroup_size) + 0u)) ^ 0u)) | (subgroup_id * subgroup_size)) + (((((~ ((min(~ ((uint(uint(((false ? (atomicExchange(subgroup_id, workgroup_id)) : (((((0u) / 1u)) | ((uint(uvec3(((0u) / 1u), 0u, 1u))))) ^ (subgroup_local_id)))))))), ~ ((uint(uint((((0u) / 1u) ^ (subgroup_local_id)))))))))) + 1) ^ 0u)) % subgroup_size), ((true ? workgroup_base + ((((subgroup_id * ((subgroup_size) + 0u)) ^ 0u)) | (min((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) + (((((~ (~ ((uint(uint((((0u) / 1u) ^ (subgroup_local_id)))))))) + 1) ^ 0u)) % subgroup_size) : (num_workgroup)))))));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((false || (false))))
  barrier();
 if(((bool((bvec2((bvec2(bvec2(bvec2(bvec2(false, false)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((((! ((! (! ((bool(bool(! (! ((! (! (! ((! (! (false))))))))))))))))))))
  barrier();
 if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((! (((((! ((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) && true)) && true)))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((bool(bvec3(((false || ((false) || false))), false, true)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 buf[next_virtual_gid] = 2;
}
