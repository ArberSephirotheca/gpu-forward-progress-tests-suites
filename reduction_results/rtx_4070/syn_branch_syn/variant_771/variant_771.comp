#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint num_workgroup = ((gl_NumWorkGroups) | ((((uvec3(0u, (((min(((0u) | (0u)), 0u))) | 0u), 0u)) << uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u))).x;
 if(((bool(bvec4((true && ((! (! (((bool(bvec3((bool(bvec3(bool(bool(false)), false, false))), ((injectionSwitch.x > injectionSwitch.y)), true))))))))), true, ((injectionSwitch.x < injectionSwitch.y)), false)))))
  {
   if((false))
    return;
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > (- 51513 & 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_size = (max(gl_WorkGroupSize.x, (clamp(gl_WorkGroupSize.x, (clamp(((gl_WorkGroupSize.x) * 1u), gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((((((injectionSwitch.x > ((true ? (mix(vec2((- 18.00), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 828.761)), bvec2(true, false))).y : (- 6634.6894))))))) && true)) || ((injectionSwitch.x > ((max(vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))).y))))
  return;
 uint workgroup_base = workgroup_size * (uint(uvec3(workgroup_id, 1u, 0u)));
 if(((((! (((((bool(bvec3((! ((false || ((min(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, (float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))))))) > injectionSwitch.y)))) || false, true, false))) && true)))))))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * ((subgroup_size) | ((min(subgroup_size, subgroup_size)))) + subgroup_local_id;
 if((false))
  return;
 if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((clamp(((max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (((subgroup_local_id + 1) % subgroup_size) / 1u), (((((((subgroup_local_id + 1) | ((uint(uvec3(subgroup_local_id + 1, 0u, 0u))))))) >> 0u) % subgroup_size) / 1u)))) | ((subgroup_local_id + ((1) | ((0 ^ ((((int(ivec2(1, int((injectionSwitch.x)))))) / 1)))))) % subgroup_size)));
 if(true)
  {
   if((false))
    return;
   do
    {
     if((false))
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((((mix(float((mat2(1.0) * (injectionSwitch)).x), float((2.4)), bool(false))) > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    {
     if((((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, ((injectionSwitch.x > injectionSwitch.y))))))) && true)))
      return;
     return;
    }
   return;
  }
 if(((bool((bvec3(bvec4(bvec3(false, ((false || (bool((bvec3(bvec3(bvec3((false || (false)), false, false)))))))), false), true)))))))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((! (! (false))))
  {
  }
 else
  {
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(((((((false ? (- 9.2) : float(mat3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 0.0, (injectionSwitch.y), 1.0, 0.0, 1.0))))) > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 do
  {
   ((true ? buf[virtual_gid] = (~ ((((max(~ ((clamp((~ (~ ((min((max(((0 | (((~ (~ (1))))))) | ((min((1), (1)))), ((0 | ((1)))) | (max((0 + (((min((1), (1)))))), ((min((1), (1)))))))), (((min(((0 | ((1)))) | ((min((1), (1)))), ((0 | ((1)))) | ((min((1), (1))))))) >> 0)))))), (min((max(((0 | ((1)))) | ((min((1), (1)))), ((((0 | ((1)))) | ((0 | ((1)))))) | ((min((1), (1)))))), ((0 | ((1)))) | ((min(((max(1, ((1) << 0)))), (1)))))), (0 + ((min((max(((0 | ((((int((injectionSwitch.x)) >> (int(7))) ^ (1)))))) | ((min((1), (1)))), ((0 | ((1)))) | ((min((1), (1)))))), ((0 | ((1)))) | ((min((((1) | ((0 ^ (1))))), (1))))))))))), (((((int(ivec2(~ (1), 0)))) << 0)) >> 0))))) | (((max(~ ((clamp((~ (~ ((min((max(((0 | ((1)))) | ((min((1), (1)))), ((0 | ((1)))) | ((min((1), (1)))))), ((0 | ((1)))) | ((min((1), (1))))))))), (min((max(((0 | ((1)))) | ((min((((1)) / 1), (1)))), ((0 | ((1)))) | ((min((1), (1)))))), ((0 | ((1)))) | ((min((1), (1)))))), (0 + ((min((max(((0 | ((1)))) | ((min((1), (1)))), ((0 | ((min((1), (1)))))) | ((min((1), (1)))))), (((0 ^ (0 | ((1)))))) | ((min((1), (1))))))))))), ((int(((((int((0 | (((int(ivec2(~ (1), 0)))) >> 0)))) - 0)) | 0)))))))))) : (subgroup_local_id)));
  }
 while(false);
 if(((((! (! (((bool(bvec4((((! (! (((bool(bvec2((! (! (((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))), true)))))))) || false), true, (false || (true)), false)))))))) || false) && true))
  {
   if(((! (! ((! (! (false))))))))
    {
     if((false))
      return;
     if((((((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y)))) && ((false || ((injectionSwitch.x < (((min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))))
      {
       do
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
        }
       while(false);
      }
     return;
     for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter < ((1 << (int(7))) >> (int(7)))))); _injected_loop_counter ++)
      {
       if(((true) || ((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((true && (false))))
          return;
        }
       else
        {
        }
      }
     if((((((injectionSwitch.x > (float(mat2x4(injectionSwitch.y, 0.0, (injectionSwitch.x), 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0))))))) && true))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((! (! ((true && (((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > ((injectionSwitch.y) / abs(1.0)))))))))))
      return;
     return;
    }
   if(true)
    {
     if((! (! (((((true) || false)) && true)))))
      {
       if((false))
        return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       while(false);
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
      }
    }
   else
    {
     if((false))
      return;
    }
   if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
   if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if((bool(bvec3((((vec2(vec2(injectionSwitch))).x < injectionSwitch.y)), false, false))))
    {
     if(false)
      {
       if((false))
        return;
       if((((injectionSwitch.x > (((vec2(injectionSwitch[0], (mat2(1.0) * (injectionSwitch))[1]))) / vec2(1.0, 1.0)).y))))
        return;
      }
     else
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((((1) | (((1) - (55987 & 0)))) << ((clamp(int(5), ((int(5)) >> 0), int(5))))) >> (int(5))); _injected_loop_counter ++)
        {
         if((false))
          continue;
         if((false))
          return;
         for(int _injected_loop_counter = ((int((max((ivec4(0, 0, 0, 0) | (ivec4(0 >> (int(3)), 0, 0, 0))), ivec4((min(0, 0)) >> (int(3)), 0, 0, 0)))))); _injected_loop_counter != (((min((max(1, (int(int((0 | (1))))))), 1)) * 1)); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              return;
             break;
            }
           if((false))
            return;
          }
         if(((((false || ((true && (((! (! ((true && ((((((injectionSwitch.x > injectionSwitch.y))) && true)))))))) && true))))) || false)))
          return;
        }
       if((false))
        return;
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   int i = 0;
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       return;
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((true && ((bool(bvec4((((true && ((((injectionSwitch.x > (float(mat2((clamp((vec2(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, abs(sqrt(0.0)), 0.0, 0.0))).y, (vec2(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, abs(sqrt(0.0)), 0.0, 0.0))).y, (vec2(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, abs(sqrt((((float(vec3(0.0, 1.0, (min((injectionSwitch.x), (injectionSwitch.x))))))) + tan(0.0)))), 0.0, 0.0))).y)), exp(0.0), (mix(float((5935.8379)), float(1.0), bool(true))), sqrt(tan(0.0))))))))))) && true), false, true, true))))))
      return;
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(((true && (false))))
      continue;
     for(int _injected_loop_counter = 0; (bool(bvec2((((clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 1) || false), false))); _injected_loop_counter ++)
      {
       do
        {
         buf[next_virtual_gid] = 2;
        }
       while(false);
      }
     if(((((((false || ((((vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y) || false)))))) && true)))
      continue;
    }
   if(true)
    {
     if(((! (! (false)))))
      return;
    }
   else
    {
    }
   if((((bool(bvec2(bool(bvec2(false, false)), ((injectionSwitch.x < injectionSwitch.y))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; (0 | (_injected_loop_counter --)))
    {
     for(int _injected_loop_counter = 1; (((int(ivec4(_injected_loop_counter, 0, (1 & 1), 1))) | 0)) != ((0) - 0); _injected_loop_counter --)
      {
       if((false))
        {
         do
          {
           return;
          }
         while((true && (false)));
        }
       if(((bool(bvec4(false, false, true, ((injectionSwitch.x > injectionSwitch.y)))))))
        continue;
      }
     for(int _injected_loop_counter = 0; (bool(bvec2((true && (_injected_loop_counter < 1)), true))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             do
              {
               if((((true && ((false || (! (! (bool(bvec2(false, true)))))))))))
                {
                }
               else
                {
                 if((false))
                  return;
                }
               return;
              }
             while((((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))) && true)));
             if((false))
              {
               do
                {
                 return;
                }
               while((bool(bool(false))));
              }
            }
          }
        }
      }
     if(((((false || (false)) && true))))
      {
       if(((((false || (! ((bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, false))))))))))
        break;
       if((false || (((injectionSwitch.x > injectionSwitch.y)))))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       break;
      }
     if((false))
      {
       if((false))
        continue;
       continue;
      }
     buf[next_virtual_gid] = 2;
     if((((((((bool(bvec4(bool(bvec2((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true)), false, false, false)))) || false))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
       if((false))
        {
         if((false))
          continue;
         return;
        }
      }
    }
   for(int _injected_loop_counter = 0; ((false || (((bool(bvec3((true && ((bool(bvec4(_injected_loop_counter < 1, (((injectionSwitch.x < injectionSwitch.y)) && (false)), true, true))))), true, true)))) && true))); (0 | (_injected_loop_counter ++)))
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            break;
           break;
          }
         if((! (! ((bool(bvec4(bool(bvec2(((bool((bvec3(bvec3(bvec3((! (! ((! (! ((((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x > injectionSwitch.y)))))) || false))))))), true, false))))))), false)), false, true, true)))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if((((false) && true)))
          continue;
        }
       return;
       if((((bool(bool((! ((false || (! (((! (! ((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))))))))))))))))
        {
         if((! (! (false))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
}
