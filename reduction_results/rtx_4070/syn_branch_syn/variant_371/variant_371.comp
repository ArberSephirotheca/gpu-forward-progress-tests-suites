#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(2))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ 1); (((true && ((bool(bvec3(_injected_loop_counter != 1, true, true)))))) || false); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     do
      {
       if(true)
        {
         if(true)
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(false);
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       continue;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 do
  {
   if((false))
    barrier();
  }
 while(false);
 do
  {
   if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 while(false);
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << ((0 + (int(3))))); _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    barrier();
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if(true)
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if((false))
          barrier();
         return;
        }
       do
        {
         if((false || ((false))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
       while(false);
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                break;
              }
             else
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((1 << (int(1))) >> ((max(int(1), int(1))))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if(true)
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if((false))
              barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > (min(injectionSwitch, (vec2((mat3x4(mat4(mat3x4((((bool(((bvec2(bvec2(bvec2(bvec2((bvec2(bvec4(bvec2((! (! (false))), true), false, true))))))))))) ? ((- 1.4 + vec2(893.005, 4.7))) : injectionSwitch)), 1.0, 0.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))))))).y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((false || (false))))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               barrier();
               if(true)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     if((! (! ((true && (true))))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             if((false))
              return;
             if(true)
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                }
              }
             if((false))
              return;
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         else
          {
           if(((! ((true && ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))))
            {
             if((false))
              continue;
             return;
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((bool(bvec4((bool(bvec3((false), false, false))), true, true, (bool(bool(((! (! (bool(bvec3(false, false, false)))))))))))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((true ? (int(ivec2(int(4), 0))) : (_injected_loop_counter))))) >> (int(4))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           continue;
          }
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
            {
             if((false))
              {
               if((false))
                barrier();
               if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                return;
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(false)
          {
          }
         else
          {
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if(true)
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = (~ (~ (1))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((((true && ((((injectionSwitch.x > injectionSwitch.y)) || false))))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   do
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if((false))
                  barrier();
                 if((false))
                  break;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((bool(bvec2(true, true))))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((((bool(bvec4((false || (false || (false))), false, true, true))))))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if((false))
                      barrier();
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                     return;
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(false);
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
               if(false)
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      break;
                     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                      }
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > int((((injectionSwitch) - vec2(0.0, 0.0)).x)); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       continue;
                      }
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 barrier();
                 if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
                  barrier();
                 do
                  {
                   if(((true && (false))))
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                     if((((((((injectionSwitch.x > injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y))))) && true)))
                      return;
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                      }
                     if((false))
                      continue;
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       if((((false)) && true))
                        barrier();
                      }
                     barrier();
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  continue;
                }
               if((false))
                break;
              }
             if((false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((! (! ((false || ((false)))))))
                barrier();
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         if((false))
          continue;
        }
      }
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (((clamp(1, 1, 1))) >> 0); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((! (! (false))))
            {
            }
           else
            {
             barrier();
            }
          }
         return;
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((bool(bool((false)))))
  {
   if((false))
    barrier();
   if((((! (! (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) ^ 0); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          continue;
         if((false))
          {
           do
            {
             if((false))
              return;
            }
           while(false);
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                }
               if((false))
                barrier();
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(false);
    }
   else
    {
     do
      {
       do
        {
         if((false))
          barrier();
         if(((! (! (((false) && true))))))
          {
           if((((max(injectionSwitch.x, (1.0 * (injectionSwitch.x)))) > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
        }
       while(false);
      }
     while(false);
     if(true)
      {
       return;
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if((false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              break;
            }
           while(false);
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((! (! (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int((min(ivec3((int(7)), 0, 1), ivec3((int(7)), 0, 1)))))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if((false))
      {
       do
        {
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
       while(false);
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     if(false)
      {
      }
     else
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if(true)
      {
       if(((! (! ((((! (! (false)))) && true))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           while(false);
          }
         return;
        }
       if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if((((false) || false)))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = ((0 | 0) ^ 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   barrier();
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> ((1 * (int(0))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(true)
  {
   if((false))
    {
     do
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               return;
              }
             else
              {
              }
            }
          }
        }
      }
     while(false);
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         return;
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           do
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
        }
       else
        {
        }
      }
     if(((true) || false))
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if(true)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((((1 << (int(7))) >> (int(7))) << (((int(0)) | ((max(int(0), int(0))))))) >> (int(0))); _injected_loop_counter ++)
      {
       if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     if((false))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         do
          {
           do
            {
             if((false))
              {
               if((false))
                {
                 if((((false)) || false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 return;
                 if((false))
                  barrier();
                }
               barrier();
              }
             if((false))
              barrier();
            }
           while(false);
          }
         while(false);
         barrier();
        }
      }
    }
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((bool(bvec4(true, false, false, false))))
  {
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(true)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(true)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(true)
            {
             if((bool(bvec3(true, true, true))))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       if((false))
        barrier();
      }
     if((false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((! (! ((false)))))
            {
             if(true)
              {
               if(((true && ((bool(bvec4(false, false, false, false)))))))
                barrier();
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
        }
       while(false);
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if((false))
  {
   if(true)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((min(float(mat4x2((mix(float(injectionSwitch.x), float((- 1849.4826)), bool(false))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)), (min(float(mat4x2((mix(float(injectionSwitch.x), float((- 1849.4826)), bool(false))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x2((mix(float(injectionSwitch.x), float((- 1849.4826)), bool(false))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))))) > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((0) - 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             do
              {
               do
                {
                 do
                  {
                   if((true && ((false))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(true)
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != (min(0, 0)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                         if((false))
                          return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     if((false))
                      barrier();
                     return;
                    }
                   for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (((int(7)) | (int(7))))); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   barrier();
                   if((false))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   break;
                  }
                }
               while(false);
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
            }
          }
        }
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       if(((! (((! (false)) || false)))))
        {
         if((false))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           return;
          }
         if(((! (! ((((bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
          {
           do
            {
             if(true)
              {
               barrier();
               if((false))
                return;
               if((false))
                return;
              }
             else
              {
              }
            }
           while(false);
          }
         if((false))
          return;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(false);
         barrier();
        }
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         return;
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter != ((((1) << 0)) / 1)))); _injected_loop_counter ++)
    {
     return;
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(true)
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     return;
    }
  }
 if((bool((bvec3(bvec4(bvec3((((bool(bvec2((false), false)))) || false), ((((injectionSwitch.x < injectionSwitch.y))) || false), false), true))))))
  {
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      return;
    }
   return;
   if((false))
    return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    {
     if((false))
      break;
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if(true)
        {
         return;
         if(true)
          {
           if((false))
            {
             do
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(false);
            }
          }
         else
          {
          }
        }
       else
        {
         if((false))
          {
           if(((! (! (false)))))
            continue;
           continue;
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(false);
           for(int _injected_loop_counter = ((int((injectionSwitch.y)) << ((clamp(int(7), int(7), int(7))))) >> (int(7))); _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 & (- (- 63504 / 74319))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (((1) | (1)) | (0 & - 73155)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
          }
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((((injectionSwitch.x > (((float(mat4x3(injectionSwitch.y, abs((dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)))), cos(0.0), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))) / 1.0))))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           if((false))
            barrier();
          }
         while(false);
         if(true)
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
              {
               if(((false) || false))
                {
                }
               else
                {
                 if((! (! ((false)))))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            continue;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = 1; (! (! (_injected_loop_counter != 0))); _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         else
          {
          }
         if((false))
          continue;
         if(((! (! (false)))))
          barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        break;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(true)
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if((false))
        return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        continue;
       if((false))
        {
         if((bool(bvec4(true, ((((! (! ((bool(bvec3(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), true, false))))))))), true, false))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(true)
      {
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          barrier();
         continue;
        }
      }
     else
      {
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     continue;
                    }
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((true) && true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
          }
         while((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))));
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           do
            {
             barrier();
            }
           while(false);
           for(int _injected_loop_counter = ((0 << (((int(3)) - 0))) & int((false || false))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
        }
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((false) && true)))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((bool(bool(false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         return;
         if((((false) || false)))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(false);
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if(((true) && true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(((bool(bvec2(false, true)))))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(7))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if((false))
  return;
 uint next_virtual_gid = (~ (~ (workgroup_base))) + ((((subgroup_id) | 0u)) + 0u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((((! (! (true))) && (false))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(false)
  {
   for(int _injected_loop_counter = (0 >> (int(5))); _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
    {
     if(((! (! (false)))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 ^ 0)) ^ 0); _injected_loop_counter ++)
      {
       if(((true && (false))))
        barrier();
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       while(false);
      }
    }
   if((false))
    return;
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    return;
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  return;
 if(true)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(((subgroup_local_id + 1) | (1u ^ 1u)) < subgroup_size)
      {
       if((false))
        barrier();
       if(((bool(bvec2((bool(bvec3((((((vec2(mat2x4(injectionSwitch, 1.0, (injectionSwitch.x), 1.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y)) && true)), true, false))), (((! (((! (injectionSwitch.x < injectionSwitch.y)) && (((bool(bool(true))) || false))))))))))))
        {
         for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(5))) >> (int(5))); (false || (_injected_loop_counter != ((max((int(int((min(0, 0)) >> ((0 + (int(1))))))), (min(((((0) | (0))) << 0), 0)) >> ((0 + (int(((1) + 0)))))))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((((false) && true)))
          {
           if((false))
            barrier();
           break;
          }
        }
       if((false))
        barrier();
       int i = 0;
       for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter != (min(1, 1)); _injected_loop_counter ++)
        {
         buf[next_virtual_gid] = 2;
        }
       if(((((false || (false))) && true)))
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 ^ ((1 << (int(6))) >> (int(6)))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) | 0); _injected_loop_counter ++)
          {
           do
            {
             barrier();
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 do
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(false);
                }
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > (min((((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))), injectionSwitch)).y)))
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 do
                  {
                   if((((false) && true)))
                    break;
                   do
                    {
                     barrier();
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    barrier();
                  }
                 while(false);
                }
              }
            }
           while(((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < (min(injectionSwitch.y, injectionSwitch.y))))));
          }
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           while(false);
           if((false))
            break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                barrier();
               return;
              }
            }
           else
            {
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            continue;
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 << (int(8))) & 87614); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         break;
        }
       if(true)
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             barrier();
            }
           do
            {
             if((false))
              barrier();
             if((false))
              {
               if(((false) || false))
                {
                }
               else
                {
                 if(false)
                  {
                   if((false))
                    {
                     if((false))
                      break;
                     return;
                    }
                  }
                 else
                  {
                   do
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(false);
                  }
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
                barrier();
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                break;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 if((false || (false)))
                  {
                  }
                 else
                  {
                   if(((((mix(float(injectionSwitch.x), float((6.7)), bool(false))) > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             if((false))
                              break;
                             if((false))
                              barrier();
                             barrier();
                             if((false))
                              barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                     if((! (! ((! (! (false)))))))
                      {
                       if((false))
                        break;
                      }
                     else
                      {
                       do
                        {
                         barrier();
                         if((false))
                          {
                           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 & - 9558); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         do
                          {
                           if((false))
                            return;
                          }
                         while(false);
                         barrier();
                         if((false))
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       if((false))
                        barrier();
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       barrier();
                      }
                    }
                   if((false))
                    barrier();
                  }
                }
               else
                {
                 if((false))
                  continue;
                 if((false))
                  break;
                }
              }
            }
           while(false);
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               else
                {
                }
              }
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 return;
                }
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
               barrier();
              }
             continue;
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          continue;
         if(true)
          {
           if(((false || (false))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != ((0) / 1); _injected_loop_counter --)
            {
             if(((! ((! (! (! (false))))))))
              {
               if((false))
                continue;
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((false))
            {
             if((false))
              {
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(false);
              }
             if(true)
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             else
              {
               if((false))
                barrier();
              }
            }
           if(false)
            {
            }
           else
            {
             do
              {
               if((false))
                barrier();
               if((((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                break;
               if((! (! ((true && (true))))))
                {
                 if(true)
                  {
                   if(true)
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
               do
                {
                 if(true)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) ^ 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   do
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((! (! (bool((bvec2(bvec2(bvec2(((injectionSwitch.x > ((false ? (43.78) : injectionSwitch.y)))), false)))))))))))
                  {
                   if((false))
                    barrier();
                   if(((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))
                    {
                     if((false))
                      {
                       if((false))
                        break;
                       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     if(((injectionSwitch.x < (min(injectionSwitch, injectionSwitch)).y)))
                      {
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       if(false)
                        {
                        }
                       else
                        {
                         do
                          {
                           do
                            {
                             barrier();
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         while(false);
                        }
                      }
                     else
                      {
                      }
                     if(((! (! (false)))))
                      barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       do
                        {
                         if(((! (! (false)))))
                          {
                           if(true)
                            {
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     continue;
                    }
                   do
                    {
                     barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       if((false))
                        return;
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   while(false);
                   if(((! (! (false)))))
                    break;
                  }
                 if((((injectionSwitch.x > (vec2(injectionSwitch[0], (min(injectionSwitch[1], injectionSwitch[1])))).y))))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     if(true)
                      {
                       if((false))
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     do
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     while(false);
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     while(false);
                     if((((((true && (bool(bvec4((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))), true, true, true)))))))))
                      barrier();
                     if((false || (false)))
                      {
                      }
                     else
                      {
                       return;
                      }
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
                      return;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if(false)
                    {
                     if((false))
                      {
                       if(true)
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | int((injectionSwitch.x))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      {
                       if(true)
                        {
                         if((false))
                          barrier();
                         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      break;
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if((false))
                        return;
                       barrier();
                      }
                     if(((true && (false))))
                      barrier();
                     if((false))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       continue;
                      }
                     if(((false || (false))))
                      {
                       do
                        {
                         if((false))
                          barrier();
                        }
                       while(false);
                       if(true)
                        {
                         barrier();
                         if((false))
                          break;
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      barrier();
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(((bool(bool(false)))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     return;
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   if((false))
                    continue;
                   buf[next_virtual_gid] = 2;
                  }
                 while(((injectionSwitch.x > (min(((true ? injectionSwitch : (vec2(1254.2795, - 1.6)))).y, ((true ? injectionSwitch : (vec2(1254.2795, - 1.6)))).y)))));
                 if(((! (! (bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), ((false || (bool(bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))))), true, false)))))))
                  {
                   for(int _injected_loop_counter = ((0) * int((injectionSwitch.y))); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     do
                      {
                       for(int _injected_loop_counter = (0 ^ (0)); _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           if((false))
                            barrier();
                           if((false))
                            {
                             if(true)
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                  barrier();
                }
               while(false);
               if(false)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(((false || ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
                    barrier();
                  }
                }
               else
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if((false))
                    continue;
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(false);
            }
          }
         while(false);
         if((false))
          barrier();
        }
       else
        {
        }
       if(((bool(bool(false)))))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(false)
          {
           if((false))
            break;
          }
         else
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(false)
        {
         if((false))
          {
           do
            {
             return;
             do
              {
               if(((bool(bvec3(false, true, true)))))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           while(false);
          }
         if((((false) || false)))
          barrier();
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                continue;
               barrier();
              }
            }
          }
        }
      }
     if((false))
      barrier();
    }
   while(false);
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if(((((((bool(bvec2((((injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), false))) && true))))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     do
      {
       do
        {
         do
          {
           if(true)
            {
             do
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != ((~ (~ (0))) >> (int(7))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(false);
            }
           else
            {
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
     if((false))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  barrier();
}
