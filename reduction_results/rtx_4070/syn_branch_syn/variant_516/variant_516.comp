#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((false) || false)))
  barrier();
 if(((((true && ((bool(bvec2((! (! (injectionSwitch.x > injectionSwitch.y))), true)))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((((bool(((bvec2(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true))))))) && ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if(((true && (false))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((false) && true)))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > (min((vec2(vec4(injectionSwitch, 0.0, 0.0))), injectionSwitch)).y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && (false))))
  {
   if((bool((bvec2(bvec4(bvec2((((injectionSwitch.x > injectionSwitch.y))), true), false, false))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((((bool(bvec3(false, true, true)))) || false)))
    barrier();
   if((((injectionSwitch.x > (vec2(0.0, 0.0) + (injectionSwitch)).y))))
    barrier();
   if((false || ((false))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((! (! (true))) && ((bool(bvec2(false, false)))))))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((((! (! (false || ((false)))))) || false)))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((((injectionSwitch.x < injectionSwitch.y)) && (false))) && ((injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((injectionSwitch.x > injectionSwitch.y)) || ((! (! (false))))) || ((((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((true && ((((false)) || false))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = (min((uint(uint(gl_WorkGroupID.x))), ((0u + ((gl_WorkGroupID.x))) / 1u)));
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = (0u | ((uint((~ (~ (((uvec3(workgroup_base, 0u, 0u)) / uvec3(1u, 1u, 1u))))))) + ((subgroup_id) >> 0u) * subgroup_size)) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((false ? (dot(- 449.596, - 75.76)) : ((injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((clamp(((((~ (~ ((((((((bool(bvec3((((mix(float((97.26)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)), false, ((injectionSwitch.x < (mix(float(injectionSwitch.y), float((- 839.410)), bool(false)))))))) && true)) && true)) ? subgroup_local_id + (max((clamp(1, 1, 1)), (min(1, 1)))) : (num_workgroup))))))) % subgroup_size) - (0u & (uint(((uint(164602u)) | (uint(164602u))))))), ((~ (~ ((((((((bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y))))) && true)) && true)) ? subgroup_local_id + 1 : (num_workgroup))))))) % subgroup_size, (((((false ? (bitfieldReverse(workgroup_size)) : min(((~ (((~ ((((((true && ((bool(bvec4(((((bool(bvec2((false || (bool(bool(bool(bool(((((bool(bvec3(((bool(bvec2(((float(mat4x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))) < injectionSwitch.y), (bool(bool((false || (false))))))))), false, ((injectionSwitch.x < injectionSwitch.y)))))) && true) && true))))))), false)))))), false, false, false))))) && true)) ? subgroup_local_id + 1 : (num_workgroup)))))) | ((~ (((((((((bool((bvec2(bvec2(bvec2(bool(bool(bool(bool(((bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y))))) && true))))), false))))))))) && true)) ? subgroup_local_id + 1 : (num_workgroup))))))))) % subgroup_size, ((~ (~ (((((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)) || ((bool(bvec3((bool(bvec3((((bool(bvec3((((((bool(bvec3((((max((min(injectionSwitch, (max(injectionSwitch, injectionSwitch)))), injectionSwitch)).x < injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y))))) && true)) && true)), true, true)))) || ((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))), (bool(bvec2(true, false))), (bool(bvec3(true, true, false)))))), false, true))))) ? subgroup_local_id + 1 : (num_workgroup))))))) % subgroup_size)))) / 1u)))));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((true && (((((! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((false || ((bool(bool((bool(bvec3(((injectionSwitch.x > (((((injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch) : (vec2(832.411, - 13.18)))) * vec2(1.0, 1.0)).y)), true, true))))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((bool(bool(((((! (! (injectionSwitch.x < injectionSwitch.y))))) && ((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))))))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false || ((((false)) && true))))
  barrier();
 buf[virtual_gid] = ((1) | 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
  {
   if((false))
    {
     if((((! (! (((true && (false))) || false))))))
      {
       if(((! (! ((false || (false)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if(subgroup_local_id + ((1) | (1)) < subgroup_size)
  {
   if((false))
    barrier();
   if((((((! (! ((false || ((injectionSwitch.x > injectionSwitch.y))))))) || false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(((true && (false))))
      barrier();
     if((((false)) || false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x < injectionSwitch.y)) && ((((! (! (((((bool(bool((bool(bool(bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false))))))))) || false)) && true))))))))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if(((((0.0 + (((((max((1.0 * (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) + 0.0)))) > injectionSwitch.y))))
      {
       if((false))
        {
         if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((false) && true)))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
   int i = 0;
   if(((((true && (((false)))) && true) || false)))
    barrier();
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   buf[next_virtual_gid] = 2;
   if((false))
    {
     if((false))
      {
       if((((false) && true)))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   buf[next_virtual_gid] = 2;
   if((false))
    barrier();
   if(((((vec2((min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > ((injectionSwitch.y) / 1.0)))))
    barrier();
   if((false))
    barrier();
  }
 if(((((! (((! (injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)))) || false)))))))
  {
   if((! ((false || ((! (! (((! ((((false) || false)))) || false)))))))))
    barrier();
   if(((((vec2((((1.0 * (injectionSwitch[0]))) / (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, ((((injectionSwitch.x < injectionSwitch.y)) ? 0.0 : (5.7))))))), injectionSwitch[1])).x > (vec2(((mat2(injectionSwitch, 1.0, cos(0.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).y))))
    {
     if((false))
      barrier();
     if((((false) && true)))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((((false) || false)))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((((abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if((false))
  barrier();
 if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > ((vec2(mat3x4((max((injectionSwitch), (injectionSwitch))), 0.0, 1.0, 1.0, 0.0, 0.0, (injectionSwitch.x), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), abs(sqrt(1.0)), 0.0))) * vec2(1.0, 1.0)).y))))
  barrier();
}
