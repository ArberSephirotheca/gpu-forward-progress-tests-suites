#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups.x) * 1u);
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID.x) << (0u << (uint(5u))));
 uint workgroup_base = workgroup_size * ((workgroup_id) | (workgroup_id));
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (((((mix(float((58.81)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)) ? workgroup_base + subgroup_id * ((uint(((uvec4((max(~ (~ (subgroup_size)), ~ (~ (subgroup_size)))), 0u, 1u, 1u)) | (((uvec4((max(~ (~ (subgroup_size)), ~ (~ (subgroup_size)))), 0u, 1u, 1u)) + uvec4(0u, 0u, 0u, 0u))))))) + ((((subgroup_local_id) ^ (0u | 0u)) + ((1) >> 0)) % subgroup_size) : ((false ? (((0u | (bitfieldReverse(subgroup_local_id))) | (0u | (bitfieldReverse(subgroup_local_id))))) : workgroup_size))));
 ((buf[virtual_gid] = 1) + ((true ? 0u : (uvec2(51635u, 132298u).r))));
 if((false))
  barrier();
 if((false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint((0 + (2))), 4, 64, 0);
}
