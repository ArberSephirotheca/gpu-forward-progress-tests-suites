#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if(((bool((bvec3((bvec3(bvec4((bvec3(bvec4(bvec3((bvec3(bvec4(bvec3(((true && ((false || ((((injectionSwitch.x < injectionSwitch.y)) && (! (! ((false || (false))))))))))), true, true), false)))), (! (! (false)))))), false)))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if(((bool(bvec3(((false) && ((injectionSwitch.x < (((((max(injectionSwitch, injectionSwitch))) + sin(vec2(0.0, 0.0)))) + vec2(0.0, 0.0)).y))), false, (! (! (false))))))))
  barrier();
 if((false))
  barrier();
 if((bool(bvec4(((((! ((bool(bvec3(! ((true && ((min((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))), (((((((! (! (injectionSwitch.x > injectionSwitch.y))))) && true)) && true)), (! (! (true))))))))))), (((((! (! (true)))) && ((injectionSwitch.x < injectionSwitch.y)))) && true), true, true))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = ((false ? (uvec3(67226u, 162648u, 38921u)) : gl_NumWorkGroups)).x;
 uint workgroup_size = (max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 uint workgroup_id = (0u + (((max(((((((((max(gl_WorkGroupID.x, gl_WorkGroupID.x))) | (gl_WorkGroupID.x)))) - 0u) >> 0u)), (gl_WorkGroupID.x))) | (max(((((((((max(gl_WorkGroupID.x, gl_WorkGroupID.x))) | (gl_WorkGroupID.x)))) - 0u) >> 0u)), (gl_WorkGroupID.x))))));
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = (~ (~ (((0u | 0u) ^ (workgroup_base + subgroup_id * ((max(0u, (~ (~ (0u))))) ^ ((((uint(uint(subgroup_size))))) | 0u)))) + subgroup_local_id)));
 uint next_virtual_gid = workgroup_base + (((false ? (virtual_gid) : ((1u << (((uint((~ (~ (0u)))))) | ((uint((~ (~ (0u)))))))) >> (((((uint((((((((max(true ? 0u : (195393u), true ? 0u : (195393u))))) | ((true ? 0u : (195393u)))))) | (0u)))) / 1u) | ((uint((((((true && (true)) ? 0u : (195393u)))) | (0u)))) / 1u))))) * ((min(subgroup_id, subgroup_id)) * subgroup_size)))) + (((uint(uvec2(subgroup_local_id + 1, 0u)))) % subgroup_size);
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 atomicStore(buf[(0u | ((((((0u | (((((next_virtual_gid) | ((clamp(((true ? (((uint((((uvec2(0u, 0u) ^ (((uvec2(next_virtual_gid, ((1u << ((((injectionSwitch.x < injectionSwitch.y)) ? (uint(3u)) : (subgroup_local_id)))) >> (uint(3u))))) >> uvec2(((false ? (workgroup_size) : (~ (~ (0u))))), 0u))))) / uvec2(1u, 1u)))) << 0u)) : (atomicAnd(subgroup_size, workgroup_size)))), next_virtual_gid, (clamp((min(next_virtual_gid, next_virtual_gid)), (min(next_virtual_gid, next_virtual_gid)), (((min(next_virtual_gid, next_virtual_gid))) | ((min(next_virtual_gid, next_virtual_gid))))))))))) >> 0u)))) << (0u >> (uint(1u))))) << 0u)))], uint(2), ((4) | (4)), (clamp(64, 64, ((64) | 0))), 0);
}
