#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((workgroup_base + subgroup_id * subgroup_size) ^ 0u) + subgroup_local_id;
 uint next_virtual_gid = (((((bool(bvec2(true, false))) ? ((false ? (workgroup_id) : ((((true ? workgroup_base : ((((clamp((clamp(subgroup_size, subgroup_size, ((true ? subgroup_size : (atomicAnd(subgroup_id, workgroup_size)))))), subgroup_size, subgroup_size))) << 0u))))) / 1u))) : (subgroup_id)))) * 1u) + (0u ^ (subgroup_id)) * subgroup_size + ((((uint((uvec2(0u, 0u) | (uvec2(((~ (((true ? ((((~ ((max((clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + (((min(1, 1))) | (((1) << 0))))), (((min(subgroup_local_id, subgroup_local_id)) + 1) - 0u)))))) + uint((injectionSwitch.x))) | (((~ ((max((clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + (((min(1, 1))) | (((1) << 0))))), (min(subgroup_local_id, subgroup_local_id)) + 1))))) + uint((injectionSwitch.x)))) : ((((uint(((((true ? uvec2((~ (~ (uint((max((~ (~ (uvec3(num_workgroup / workgroup_size, ((1u) * 1u), uint((injectionSwitch.y)))))), uvec3(num_workgroup / workgroup_size, ((1u) * 1u), uint((injectionSwitch.y))))))))), 0u) : (uvec2(((((192498u) | (192498u))) / 1u), 9355u))) ^ (uvec2(0u, 0u) >> (uvec2(8u)))))))))))))))) % subgroup_size, (47161u & (max(0u, 0u)))))))) >> 0u)));
 buf[virtual_gid] = ((1) >> 0);
 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, (max((((((((((max((((1 * (64))) ^ 0), (~ (~ (64))))))) | 0) | (0 >> (int(3))))) >> 0)) / 1), (max((((1 * (64))) ^ 0), (~ (~ (64))))))), 4);
  }
}
