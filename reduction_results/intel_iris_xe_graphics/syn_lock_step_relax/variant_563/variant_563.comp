#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((0u + (((uint(uvec3(clamp(0u, 0u, 0u), 1u, 0u)))) << ((min(uint(((0u) | (((0u) | (0u))))), uint(0u))))))) | (((((clamp(((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), (clamp(((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), ((min((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x))), (max(((((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)) / 1u))), ((min(((gl_NumWorkGroups) | uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))).x, gl_NumWorkGroups.x))))))), ((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))) << (0u ^ 0u))) | (gl_NumWorkGroups.x))));
 uint workgroup_size = (((uvec3(uvec3((~ (~ (((gl_WorkGroupSize) << uvec3(0u, 0u, 0u))))))))) ^ uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (uint(uvec3(((workgroup_base) ^ 0u), 0u, 0u))) + subgroup_id * subgroup_size + ((subgroup_local_id) | (subgroup_local_id));
 uint next_virtual_gid = ((workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size + (((min(((subgroup_local_id) | (((((uint((injectionSwitch.x)) | ((1u * (((false ? (atomicCompSwap(subgroup_id, subgroup_local_id, virtual_gid)) : (subgroup_local_id))))))) >> 0u)) ^ (max(0u, 0u))))), ((subgroup_local_id) | (clamp(((((min(((((uint(uint((((~ (~ ((subgroup_local_id) >> 0u)))) << 0u))))) | ((~ (~ ((subgroup_local_id) >> 0u)))))), ((((((((~ ((~ (~ (~ ((subgroup_local_id) >> 0u))))))) - 0u)) | ((~ ((~ (~ (~ ((subgroup_local_id) >> 0u))))))))) | ((~ ((~ (~ (~ ((subgroup_local_id) >> 0u)))))))))))) ^ (max(0u, 0u)))), ((((min(((~ (~ ((subgroup_local_id) >> 0u)))), ((~ (~ ((subgroup_local_id) >> 0u))))))) ^ (max(0u, 0u)))), ((((min(((~ (~ ((min((subgroup_local_id), (subgroup_local_id))) >> 0u)))), (clamp(((~ (~ ((subgroup_local_id) >> 0u)))), (0u | (((~ (~ ((subgroup_local_id) >> 0u)))))), ((~ (~ ((subgroup_local_id) >> 0u))))))))) ^ (max(0u, 0u))))))))) + 1) % subgroup_size);
 buf[virtual_gid] = (int((max((float((clamp(float(((true ? ((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) : (- 21.40)))), float(((true ? (injectionSwitch.x) : (- 21.40)))), float(((true ? ((1.0 * ((clamp(injectionSwitch.x, ((injectionSwitch.x) / 1.0), (min(injectionSwitch.x, injectionSwitch.x))))))) : (- 21.40)))))))), ((mix(float((((false ? (- 14.45) : (injectionSwitch.x)) * 1.0))), float((6.7)), bool(false))))))) | (((1) + 0)));
 atomicStore(buf[next_virtual_gid], (min((((0u + (0u + ((((min(0u | (uint(2)), 0u | (uint(2))))) - 0u)))))), uint(2))), 4, ((64) / (clamp(((min((1), (1))) ^ 0), ((0 | ((((1)) >> 0))) << 0), (((~ (~ (max(((max(1, 1))), ((max(1, 1)))))))) | ((max((0 ^ ((max(1, 1)))), (((((max(1, 1))) / 1)) / 1)))))))), 0);
}
