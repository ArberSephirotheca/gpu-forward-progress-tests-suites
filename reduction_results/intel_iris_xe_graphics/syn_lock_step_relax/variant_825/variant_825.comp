#version 460

struct _GLF_struct_13 {
 mat2x3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_14 {
 vec2 _f0;
 bvec3 _f1;
 _GLF_struct_13 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_11 {
 uint _f0;
 uvec3 _f1;
 uvec4 _f2;
 uint _f3;
 float _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_10 {
 float _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_9 {
 bool _f0;
 mat2x3 _f1;
 uint _f2;
 mat3x4 _f3;
 ivec3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_8 {
 float _f0;
 float _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 uvec3 _f3;
 mat3x2 _f4;
 _GLF_struct_11 _f5;
 uint subgroup_local_id;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
 uint _f1;
 _GLF_struct_12 _f2;
 bvec2 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 bvec4 _f1;
 uvec3 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 int _f1;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 uint _f1;
 _GLF_struct_3 _f2;
 ivec3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_1 {
 uint subgroup_size;
 mat4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_0 _f0;
 mat3x4 _f1;
 bvec2 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_6 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((bool(bvec2((! (! (true))), false))))
    {
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((1 << (int(3))) >> (((int(3)) ^ 0))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((false))
        return;
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > ((injectionSwitch.y) + tan(0.0))))))
  {
   if(((bool((bvec2(bvec2(bvec2(false, true))))))))
    {
     if((((float(float(injectionSwitch.x))) > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
   if((((false)) || false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_0(((((injectionSwitch.x < injectionSwitch.y)) ? ivec2(1) : (clamp((ivec2(0, 0) + ((max((max((ivec2((((min(0, 0))) >> (1 ^ 1)), 0) ^ (((ivec2(- 34618, 32658) ^ (0 ^ (- 63977)))))), ((true ? ((ivec2(- 34618, 32658) ^ - 63977)) : (ivec2(- 19501, - 87309)))))), (max((ivec2((min(0, 0)), 0) ^ (((ivec2(- 34618, 32658) ^ (0 ^ (- 63977)))))), ((true ? ((ivec2(- 34618, 32658) ^ - 63977)) : ((max(ivec2(- 19501, - 87309), ivec2(- 19501, - 87309)))))))))))), ((ivec2(- 34618, 32658) ^ - 63977)), (((~ ((~ (~ (~ (((false ? ((ivec2(97499, - 56014))) : ivec2(- 34618, 32658) ^ - 63977))))))))))))))), mat3x4(1.0), bvec2((bool(bvec2((! ((true && ((bool(bool(! (true)))))))), true)))), _GLF_struct_1(gl_SubgroupSize, mat4(1.0), mat4x2((max((float(((mat3x2(1.0, length(0.0), abs(1.0), 0.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0)))), _GLF_struct_6(_GLF_struct_2(mat4x2(1.0), (max(((int(ivec3(int(ivec2(1, 0)), 1, 1)))), ((1) ^ 0)))), 1u, _GLF_struct_3(ivec3(1), mat3x4(1.0), mat2x4((((float(vec2(1.0, 1.0))) - ((float(mat3(injectionSwitch.x, cos(0.0), (((injectionSwitch.x) * 1.0)), ((float(mat2x4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))))), uvec2(1u)), ivec3(1), _GLF_struct_4(vec3((max(1.0, (max((clamp(((((1.0) / 1.0)) / 1.0), ((1.0) / 1.0), ((clamp((1.0) / (min(1.0, (1.0 * (1.0)))), (1.0) / 1.0, (min((1.0) / 1.0, (mix(float((- 8.4)), float((1.0) / 1.0), bool(true)))))))))), (1.0 * (((1.0) / 1.0)))))))), mat3(1.0)), _GLF_struct_5(ivec4((int(((ivec3((0 | ((clamp(1, (int(int(1))), (0 ^ ((~ (~ (1))))))))), 0, 1)) * ((ivec3(1, 1, 1) << (ivec3(7))) >> (((((ivec3(7))) * ivec3(1, 1, 1))) / ivec3(1, 1, 1))))))), bvec4(true), uvec3(1u), mat4x2(1.0), uvec4(1u), uvec2(1u))));
 if((false))
  {
   if((((((true && (((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) && true)))))))) || false))
    barrier();
   barrier();
  }
 if(((bool(bvec4(false, true, false, false)))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((bool(bvec4((((bool(bvec4((false), false, true, false)))) && ((injectionSwitch.x < injectionSwitch.y))), true, true, ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(((bool(bvec3(false, true, false)))))
      {
       do
        {
         return;
        }
       while(false);
      }
     if(true)
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(bvec2(((true) && true)), 1u, _GLF_struct_12(_GLF_struct_8(1.0, 1.0, mat3x4(1.0)), _GLF_struct_9(true, mat2x3((max(1.0, 1.0))), (clamp(1u, 1u, 1u)), mat3x4(1.0), ivec3(1), (transpose(((transpose(mat2(1.0))) - mat2(0.0, 0.0, 0.0, 0.0))))), _GLF_struct_10((clamp(1.0, 1.0, 1.0)), mat2x3(1.0)), uvec3(1u), mat3x2((clamp(1.0, 1.0, 1.0))), _GLF_struct_11(1u, ((uvec3((~ (~ (1u))))) << uvec3(0u, 0u, 0u)), uvec4(1u), 1u, 1.0, mat3x2(1.0)), gl_SubgroupInvocationID), ((bvec2((bvec3((bvec3(bvec4(bvec3(bvec3(bvec2((bvec2(bvec3(bvec2(bvec2(true)), false)))), true)), false)))))))), _GLF_struct_14(vec2(1.0), bvec3(true), _GLF_struct_13(mat2x3(1.0), ((false ? (ivec2(70016, 23526)) : ((((ivec2(1)) / ivec2(1, 1))) + ivec2(0, 0))))), (min(uvec2(((1u) ^ 0u)), uvec2(1u)))));
 if((bool(bvec4((! (! ((((injectionSwitch.x > injectionSwitch.y)))))), true, true, true))))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((! (! (((! (! ((((false ? (- 4.2) : ((injectionSwitch) * vec2(1.0, 1.0)).x)) > injectionSwitch.y))))))))))
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   do
    {
     if((((false || ((! (! ((false || (! (! ((bool(bvec3(false, true, false)))))))))))))))
      barrier();
     if((false))
      continue;
     barrier();
    }
   while(((! (! (bool(bvec4(false, true, false, true)))))));
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(((false || (false))))
        barrier();
       return;
      }
     if((((true && ((false || (true && (false))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              {
               if((bool((bvec2(bvec3(bvec2(((((bool(bool(false)))) && true)), false), false))))))
                barrier();
               barrier();
              }
             return;
             if((false))
              barrier();
            }
           break;
          }
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       while(((false || (false || (((injectionSwitch.x > injectionSwitch.y)))))));
       if((false))
        barrier();
       if(((bool(bool(false)))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(false);
        }
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      {
       if(((! ((bool(bvec3(! ((bool(bvec3(false, false, false)))), true, false)))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       return;
      }
     while(false);
    }
   return;
   do
    {
     if(((bool(bool(false)))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((! ((! (! (! (false))))))))
    return;
  }
 uint num_workgroup = ((gl_NumWorkGroups.x) ^ (max(((uint(uvec4(((min(0u, (((uint(uvec3(((0u) | 0u), 1u, 1u)))) ^ ((0u ^ 0u) << (uint(3u))))))) | (0u), (1u | 0u), 1u, 1u)))), (max(0u, 0u)))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if(false)
          {
           if((false))
            barrier();
           if((false))
            continue;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if((false))
          barrier();
        }
       barrier();
      }
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((((false) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
    }
   if((false))
    barrier();
  }
 while(false);
 if((((true && (bool((bvec3(bvec3((bvec3(bvec4(bvec3(false, false, false), ((injectionSwitch.x > injectionSwitch.y))))))))))))))
  barrier();
 if((false))
  return;
 if(false)
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((((((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
    {
     if((((false)) && true))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      return;
     barrier();
    }
   if(true)
    {
     if((((false) || false)))
      {
       if((false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if((false))
  barrier();
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
    }
   else
    {
    }
  }
 if((false || ((false))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_base = ((workgroup_size * workgroup_id) | (workgroup_size * workgroup_id));
 if((false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_7._f3.subgroup_size + _GLF_struct_replacement_15._f2.subgroup_local_id;
 uint next_virtual_gid = ((false ? (virtual_gid) : workgroup_base + subgroup_id * ((_GLF_struct_replacement_7._f3.subgroup_size) | ((uint(uvec4(_GLF_struct_replacement_7._f3.subgroup_size, uint((((((true ? (vec2(injectionSwitch[0], (clamp(injectionSwitch[1], (min(injectionSwitch, injectionSwitch))[1], injectionSwitch[1])))) * mat2((injectionSwitch.y)) : (injectionSwitch))))).x)), (max(1u, 1u)), 1u))))))) + ((((_GLF_struct_replacement_15._f2.subgroup_local_id + 1) % _GLF_struct_replacement_7._f3.subgroup_size)) / 1u);
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   buf[virtual_gid] = 1;
  }
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(true)
    {
     if((((true && ((((bool(bvec4(bool(bool(((((injectionSwitch.x > (mix(float((- 2.8)), float((mat2(1.0) * (injectionSwitch)).y), bool(true)))))) && true))), false, true, true))))) || false)))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          break;
         if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
        }
       if(((true && (false))))
        return;
       if((false))
        barrier();
       if((((false) && true)))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((((((mix(float(injectionSwitch.x), float((86.98)), bool(false))) > injectionSwitch.y)))) || false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((false || ((injectionSwitch.x > injectionSwitch.y)))))
        {
         if((false))
          return;
         if((false))
          return;
         if((false))
          return;
         if((false))
          barrier();
         do
          {
           if((false))
            {
             if((((bool(bool(bool(bool((bool(bvec4((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))), true, true, false)))))))))))
              barrier();
             return;
             if((false))
              barrier();
            }
           if((false))
            continue;
          }
         while(false);
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
         for(int _injected_loop_counter = ((0 >> (int(7))) ^ (0 | 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            return;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x < injectionSwitch.y)) && (((((bool(bvec4((max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, true, true, true)))))))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
        }
      }
     if((! (! ((((! (! ((((injectionSwitch.x > injectionSwitch.y)) || false))))))))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       do
        {
         return;
        }
       while((! ((true && ((bool(bool(! (((false || (bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true))))))))))))));
       if(((true && (false))))
        barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((false)) || false)) || false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((! ((! (true && ((! (((! (bool(((bool((false))) || false))))) || false)))))))))
  return;
 if((! (! ((((((! (! (injectionSwitch.x < injectionSwitch.y)))))) && true)))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((! (! ((false)))))
    barrier();
   if((((((injectionSwitch) * (vec2(1.0, 1.0) * (vec2((((min((injectionSwitch.y), (injectionSwitch.y)))) + sin(0.0)), (injectionSwitch.y))))).x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(((injectionSwitch.x < (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))
        {
         for(int _injected_loop_counter = (0 ^ ((1) | 0)); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            continue;
           return;
           if((((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), false)))) || false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
     barrier();
     if((false))
      return;
     if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
         if((false))
          barrier();
         if((false))
          break;
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(false);
    }
   if((false))
    {
     if((((((injectionSwitch.x > ((true ? ((min((vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))), (((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))))).y : (- 564.843)))))) || false)))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
     if((! (! ((! (((! ((((injectionSwitch.x > injectionSwitch.y))))) || false)))))))
      barrier();
    }
   if((false))
    return;
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    return;
   atomicStore(buf[(((bool(bvec4(false, true, true, true))) ? ((any(bvec4(false, true, false, false)) ? virtual_gid : num_workgroup)) : next_virtual_gid))], uint(2), 4, 64, (((0 + (0))) | 0));
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    {
     if((bool(bvec4(((((injectionSwitch.x > injectionSwitch.y))) || false), ((injectionSwitch.x < injectionSwitch.y)), false, true))))
      {
       if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (((int(0)) / 1))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
          }
         barrier();
        }
      }
     else
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) || false)))
        return;
       barrier();
      }
     barrier();
    }
  }
 while(false);
 do
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    break;
  }
 while(false);
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(5))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     if(true)
      {
       return;
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(((! (! ((bool(bool(false))))))))
        return;
      }
    }
  }
}
