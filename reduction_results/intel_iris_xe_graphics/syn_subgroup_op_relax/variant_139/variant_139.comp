#version 460

struct _GLF_struct_41 {
 ivec2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_40 {
 bvec2 _f0;
} ;

struct _GLF_struct_39 {
 mat3 _f0;
 vec4 _f1;
 uint _f2;
} ;

struct _GLF_struct_42 {
 mat2x3 _f0;
 uint next_virtual_gid;
 ivec2 _f1;
 mat2 _f2;
 _GLF_struct_39 _f3;
 mat2x4 _f4;
 _GLF_struct_40 _f5;
 _GLF_struct_41 _f6;
} ;

struct _GLF_struct_43 {
 _GLF_struct_42 _f0;
 uvec3 _f1;
 bool _f2;
 mat3 _f3;
 uvec2 _f4;
 mat3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_36 {
 mat4x2 _f0;
 ivec2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_35 {
 vec4 _f0;
 mat4x2 _f1;
 mat4x2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_34 {
 mat3x4 _f0;
 mat3 _f1;
 ivec4 _f2;
 uint _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_33 {
 mat4 _f0;
 bvec2 _f1;
 mat4x3 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_37 {
 _GLF_struct_33 _f0;
 _GLF_struct_34 _f1;
 _GLF_struct_35 _f2;
 uvec3 _f3;
 _GLF_struct_36 _f4;
} ;

struct _GLF_struct_31 {
 vec4 _f0;
} ;

struct _GLF_struct_32 {
 _GLF_struct_31 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_29 {
 mat3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_28 {
 mat4 _f0;
 bvec4 _f1;
 bool _f2;
 float _f3;
} ;

struct _GLF_struct_30 {
 _GLF_struct_28 _f0;
 _GLF_struct_29 _f1;
 vec3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_26 {
 mat2 _f0;
} ;

struct _GLF_struct_27 {
 _GLF_struct_26 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_24 {
 bvec4 _f0;
 float _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_23 {
 ivec4 _f0;
 mat3x2 _f1;
 uint _f2;
 mat2 _f3;
} ;

struct _GLF_struct_22 {
 ivec3 _f0;
 uvec2 _f1;
 bvec4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_25 {
 _GLF_struct_22 _f0;
 ivec3 _f1;
 _GLF_struct_23 _f2;
 _GLF_struct_24 _f3;
 bvec4 _f4;
 uint _f5;
} ;

struct _GLF_struct_20 {
 float _f0;
 float _f1;
 float _f2;
 uint _f3;
} ;

struct _GLF_struct_19 {
 ivec4 _f0;
 bvec4 _f1;
 int _f2;
 mat4x3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_18 {
 mat4x2 _f0;
 uvec4 _f1;
 vec3 _f2;
 vec4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_21 {
 _GLF_struct_18 _f0;
 ivec3 _f1;
 mat4 _f2;
 _GLF_struct_19 _f3;
 _GLF_struct_20 _f4;
} ;

struct _GLF_struct_38 {
 _GLF_struct_21 _f0;
 _GLF_struct_25 _f1;
 _GLF_struct_27 _f2;
 uint subgroup_size;
 _GLF_struct_30 _f3;
 bvec4 _f4;
 _GLF_struct_32 _f5;
 _GLF_struct_37 _f6;
} ;

struct _GLF_struct_15 {
 bool _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_14 {
 int _f0;
 vec3 _f1;
 int _f2;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_16 {
 mat2 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
 uint _f4;
} ;

struct _GLF_struct_17 {
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 ivec2 _f0;
 _GLF_struct_16 _f1;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
 mat2x4 _f1;
 bvec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_12 {
 bool _f0;
 uint subgroup_local_id;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_5 {
 uint _f0;
 vec3 _f1;
 mat3x2 _f2;
 vec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_4 {
 bool _f0;
 vec4 _f1;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 _GLF_struct_4 _f1;
 mat2 _f2;
 _GLF_struct_5 _f3;
 mat3x2 _f4;
 ivec2 _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
} ;

struct _GLF_struct_0 {
 int _f0;
 bvec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_8 {
 _GLF_struct_0 _f0;
 _GLF_struct_2 _f1;
 uint workgroup_base;
 _GLF_struct_3 _f2;
 _GLF_struct_7 _f3;
 mat2 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 _GLF_struct_17 _GLF_struct_replacement_17;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((((((float(vec2(injectionSwitch.x, 0.0)))) + sin(0.0)) > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((false) && true)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(true)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 << (int(5))) >> ((((clamp(int(5), int(5), ((int(5)) >> 0))))) + 0)); ((_injected_loop_counter != 0) && true); _injected_loop_counter --)
    {
     do
      {
       _GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = subgroup_id;
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 do
  {
   if((false))
    barrier();
   do
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(((false || (false))))
          barrier();
         if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       while(false);
      }
     while(false);
    }
   while(false);
   if((false))
    barrier();
  }
 while(false);
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_struct_38 _GLF_struct_replacement_38 = _GLF_struct_38(_GLF_struct_21(_GLF_struct_18(mat4x2((((true ? (mix(float(((max((min(1.0, 1.0)), 1.0))) + 0.0), float((- 3.8)), bool(false))) : (1069.1465))))), uvec4(1u), vec3(1.0), vec4(1.0), mat4(1.0)), ivec3(1), mat4(1.0), _GLF_struct_19(ivec4(1), bvec4(true), 1, mat4x3(1.0), mat4x2(1.0)), _GLF_struct_20(1.0, 1.0, 1.0, 1u)), _GLF_struct_25(_GLF_struct_22(ivec3(1), uvec2(1u), bvec4(true), mat4x3(1.0)), ivec3(1), _GLF_struct_23(ivec4(1), mat3x2(1.0), 1u, mat2(1.0)), _GLF_struct_24(bvec4(true), 1.0, (bvec2(bvec4(bvec2((bool(bvec3(true, false, false)))), true, true)))), bvec4(true), 1u), _GLF_struct_27(_GLF_struct_26(mat2(1.0)), uvec3(1u)), gl_SubgroupSize, _GLF_struct_30(_GLF_struct_28(mat4(1.0), bvec4(true), true, 1.0), _GLF_struct_29(mat3(1.0), bvec3(true)), vec3(1.0), ivec2(1)), bvec4(true), _GLF_struct_32(_GLF_struct_31(vec4(1.0)), uvec3(1u)), _GLF_struct_37(_GLF_struct_33(mat4(1.0), bvec2(true), mat4x3(1.0), bvec2(true)), _GLF_struct_34(mat3x4(1.0), mat3(1.0), ivec4(1), 1u, mat2x3(1.0)), _GLF_struct_35(vec4(1.0), mat4x2((mix(float((48.49)), float(1.0), bool(true)))), mat4x2(1.0), vec3(1.0)), uvec3(1u), _GLF_struct_36(mat4x2(1.0), ivec2(1), ivec2(1))));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if(((false || (false))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   barrier();
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(true, gl_SubgroupInvocationID, _GLF_struct_11(_GLF_struct_9(uvec4(1u)), _GLF_struct_10(mat2(1.0), mat2x4((clamp(1.0, 1.0, 1.0))), bvec4(true), uvec3(1u)), mat3x4(1.0)));
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((false))
          barrier();
         if(((true) || false))
          {
           if(((bool(bvec3((bool(bvec3(false, true, false))), true, false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           do
            {
             barrier();
            }
           while(false);
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if((false))
      barrier();
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (int((injectionSwitch.x)) ^ 1); _injected_loop_counter ++)
  {
   if(((true && (false))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     while(false);
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((! ((! (! (! (true)))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(((! (! (false)))))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(true)
      {
       if((false))
        barrier();
       if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((false) && true))
        {
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((int((injectionSwitch.y)) << (int(0))) >> (int(0))); _injected_loop_counter ++)
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           if((((false) || false)))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
         for(int _injected_loop_counter = ((0 | (0 >> (int(7))))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((bool(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          {
           do
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((((false)) && true))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((bool(bvec4((false), false, true, true))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(((! (! (false)))))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if((((true && (bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))))
          barrier();
        }
       while(((false) && ((injectionSwitch.x < injectionSwitch.y))));
      }
     for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(true)
        {
         GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size.y = _GLF_struct_replacement_12.subgroup_local_id;
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if((false))
    barrier();
  }
 _GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size.y;
 if(((! (((! (false)) || false)))))
  barrier();
 for(int _injected_loop_counter = ((1 << (int(1))) >> (((int(ivec3((int(1)), 1, int((injectionSwitch.x)))))) | ((int(1))))); _injected_loop_counter > (0 >> ((min(((true ? int(7) : ((52717 + - 8474)))), ((true ? int(7) : ((52717 + - 8474)))))))); _injected_loop_counter --)
  {
   if((false))
    {
     do
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     while(false);
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 if((((! (! (bool(bvec3(false, true, true))))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size.x = num_workgroup;
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(((false || (false))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   while(false);
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if(true)
        {
         barrier();
         if((((false) || false)))
          barrier();
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(false)
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if(((true && (false))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
        }
       while(false);
       if((false))
        barrier();
      }
     else
      {
       GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size.w = (~ ((max(~ (workgroup_size), ~ (workgroup_size)))));
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(5))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           do
            {
             if(((bool(bvec4(false, true, true, true)))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
            }
           while(false);
           if((false))
            {
             if(((true && (false))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if(false)
            {
             if(((! (! (false)))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(((bool(bvec3(false, true, true)))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(false)
  {
   if(((! ((bool(bvec2(! (false), true)))))))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((true && ((! (! (injectionSwitch.x > (min((max(injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)))).y)))))))))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = ((gl_WorkGroupID.x) / 1u);
 if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if((bool(bvec2(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), false))))
  {
   if((false))
    barrier();
   if((! (! (true))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (~ (~ ((int(7)))))) >> (int(7))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (((injectionSwitch)[1]) * 1.0)), vec2((2.9), (5.4)), bvec2(false, false))).y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((vec2((max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
               if((! ((bool(bvec4(! ((false)), ((injectionSwitch.x < injectionSwitch.y)), true, false))))))
                barrier();
              }
             while(((((injectionSwitch.x > injectionSwitch.y))) || false));
            }
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    {
     if((((bool(bvec3(false || (false), true, false))))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(6))) >> ((~ (((true ? ~ (int(6)) : (- 65648))))))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > (mix(float(((- 87.18))), float(injectionSwitch.y), bool(true)))))))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size.z = workgroup_id;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(((false || (false))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((true && (true)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((false) && true)))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        barrier();
       barrier();
       if((((false) && true)))
        barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, false, false))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (37.31) : injectionSwitch.y))))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((true && (false))))
        barrier();
       barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((! (! (false)))))
          barrier();
         barrier();
        }
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while((! (! (false))));
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_0((min(1, 1)), bvec3(true), mat3(1.0)), _GLF_struct_2(_GLF_struct_1(ivec2(1), bvec3(true))), GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size.w * GLF_merged4_0_1_13_1_1_17_2_1_12_3_1_14num_workgroupsubgroup_local_idworkgroup_idworkgroup_size.z, _GLF_struct_3(uvec2(((1u) | (((1u) | uint((injectionSwitch.x))))))), _GLF_struct_7(bvec2(true), _GLF_struct_4(true, vec4(1.0)), mat2(1.0), _GLF_struct_5(1u, vec3((max(((1.0) - 0.0), 1.0))), mat3x2(1.0), vec4(1.0), vec4(1.0)), mat3x2(1.0), ivec2(1), _GLF_struct_6(ivec4(1), mat3x2(1.0))), mat2((max(((1.0) / 1.0), 1.0))));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = (max(_GLF_struct_replacement_8.workgroup_base + _GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * _GLF_struct_replacement_38.subgroup_size + _GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y, _GLF_struct_replacement_8.workgroup_base + _GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * _GLF_struct_replacement_38.subgroup_size + (max(_GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, _GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id)).y));
 _GLF_struct_43 _GLF_struct_replacement_43 = _GLF_struct_43(_GLF_struct_42(mat2x3(1.0), _GLF_struct_replacement_8.workgroup_base + _GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * ((true ? _GLF_struct_replacement_38.subgroup_size : (workgroup_size))) + ((((((((max((_GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1), (_GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + (1 * (1)))))) >> 0u)) - 0u)) / 1u) % _GLF_struct_replacement_38.subgroup_size), ivec2(1), (mat2(mat3(mat2(1.0)))), _GLF_struct_39(mat3(1.0), vec4(1.0), 1u), mat2x4(1.0), _GLF_struct_40(bvec2(true)), _GLF_struct_41(ivec2(1), mat2x4((clamp(1.0, ((1.0) / 1.0), 1.0))))), uvec3((((uint((uvec3(0u, 0u, 0u) ^ (uvec3(((1u) | (1u)), 1u, 0u)))))) >> 0u)), true, mat3(1.0), uvec2(1u), mat3(1.0), mat3x4(1.0));
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = ((0) | (0)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (1 & int((injectionSwitch.y))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(_GLF_struct_replacement_17.GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1 < _GLF_struct_replacement_38.subgroup_size)
  {
   do
    {
     if(((((((mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           do
            {
             if(((bool(bvec2((bool(bool(false))), true)))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while((! (! ((! (! (false)))))));
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((false) && true)))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((! (((! (((injectionSwitch.x < injectionSwitch.y)))) && true))))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                {
                 if(true)
                  {
                   if((((((false ? (injectionSwitch) : (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 << ((int(ivec4(int(7), 0, 0, 0))))); ((_injected_loop_counter < 1) && true); _injected_loop_counter ++)
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
            }
           else
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(false);
          }
         if((false))
          barrier();
         if(((bool(bvec3(false, true, true)))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((((bool(bvec3(false, true, true))) || ((! (! (false)))))))
            {
             do
              {
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
             while(false);
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         if(((! (! ((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))))
          {
          }
         else
          {
           if(true)
            {
             if(((((injectionSwitch.x > injectionSwitch.y))) && true))
              {
              }
             else
              {
               do
                {
                 if((((clamp(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(((((! (! (false)))) && true)))
                    barrier();
                  }
                }
               while(false);
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
      }
    }
   while(((((injectionSwitch.x > injectionSwitch.y)) && true)));
   atomicStore(buf[_GLF_struct_replacement_43._f0.next_virtual_gid], uint(2), 4, 64, 0);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      barrier();
     subgroupAll(false);
    }
   while(((((injectionSwitch.x) / 1.0) > injectionSwitch.y)));
   for(int _injected_loop_counter = ((0 & 15829) >> (min((((int(1))) << 0), (int(1))))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(true)
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       barrier();
      }
     if((false))
      barrier();
    }
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > ((true ? (min(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])))) : (vec2(- 8469.4885, - 461.918)))).y))))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; (! (! (_injected_loop_counter > (0 << ((0 | (int(7)))))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   do
    {
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (((int(0)) - 0))); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((((int(4)) | (int(4))) + 0)))) >> (int(4))); _injected_loop_counter ++)
              {
               do
                {
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if(((false || (false))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
   for(int _injected_loop_counter = ((0 >> (int(6))) >> (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if((false))
              barrier();
             if(((false) && true))
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                   if(((! (! (false)))))
                    {
                     if(((bool(bvec2(false, false)))))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((false) || false)))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if(((true && (false))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                   do
                    {
                     if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
                      {
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(false);
                          }
                         barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                  }
                 if((false))
                  barrier();
                }
              }
             if((false))
              barrier();
            }
           else
            {
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(true)
              {
               if((false))
                {
                 do
                  {
                   if(((true) || ((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(false);
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while((false || (false)));
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((((true && (! (! (false)))))))
                barrier();
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if((false))
                      barrier();
                     do
                      {
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                       do
                        {
                         barrier();
                        }
                       while(false);
                       if(((! (! ((! (! (false))))))))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
               while(false);
              }
             while(false);
             barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
           atomicStore(buf[(~ (~ (_GLF_struct_replacement_43._f0.next_virtual_gid)))], uint(2), ((4) | 0), 64, 0);
           if((false))
            barrier();
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           while(((! ((bool(((bool((false || (! ((bool(bool((injectionSwitch.x > injectionSwitch.y))))))))) || false)))))));
           if((false))
            barrier();
           if((false))
            barrier();
           do
            {
             if((((false || (bool((! (! (bool(false))))))))))
              barrier();
            }
           while(((false) || false));
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x < injectionSwitch.y)))))
            {
             barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if(((((((((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y)))) || ((false) || false))))))
          {
           do
            {
             if((false))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   do
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                }
               barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                        {
                         if(((! (! (false)))))
                          barrier();
                         barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           if((false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 if((((injectionSwitch.x > (1.0 * (injectionSwitch.y))))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if((false))
                barrier();
              }
            }
           while(false);
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while((true && (((((! (((! (true)) || false)))) && true) && (false)))));
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, ((injectionSwitch.x > injectionSwitch.y)), false)))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(((bool(bvec4(false, true, false, false)))))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (- 84802 & 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       subgroupAll(true);
      }
     else
      {
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false || (true)))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if((((injectionSwitch.x > (vec2(1.0, 1.0) * (injectionSwitch)).y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false || (true)))
    {
     barrier();
     if((false))
      barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
}
