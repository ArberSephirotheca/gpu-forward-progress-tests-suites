#version 460

struct _GLF_struct_7 {
 uint num_workgroup;
 mat2x4 _f0;
 mat3x4 _f1;
 int _f2;
 ivec4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
 _GLF_struct_7 _f1;
} ;

struct _GLF_struct_5 {
 bvec3 _f0;
 uint _f1;
 bvec4 _f2;
 vec4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 bvec2 _f1;
 bool _f2;
 mat2x3 _f3;
 vec4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_2 {
 uint _f0;
 mat3x4 _f1;
 bvec4 _f2;
 mat2x3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 ivec3 _f3;
 uvec4 _f4;
 _GLF_struct_5 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 vec3 _f1;
 vec3 _f2;
 _GLF_struct_0 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_1 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_8 _f2;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _injected_loop_counter > (58359 & 0); _injected_loop_counter --)
  {
   if((false))
    {
     if((((false) || false)))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
  }
 while(false);
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(((! (! (false)))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if(true)
  {
   if(((! (! (false)))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(true)
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(false);
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(2))); _injected_loop_counter --)
        {
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if(((false) || false))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
  }
 else
  {
   for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        barrier();
       barrier();
      }
     while(false);
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((! (! (true))))
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 do
  {
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             do
              {
               barrier();
               if((false))
                barrier();
               if((false))
                barrier();
              }
             while(false);
            }
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(((true && (false))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = ((0) << 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if(false)
              {
              }
             else
              {
               if((((bool(bvec3(bool(bvec3(false, false, false)), false, false))))))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if((false || (false)))
          {
          }
         else
          {
           for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(((! (! (false)))))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         do
          {
           if(((true && (false))))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((bool(bvec2(false, true)))))
                barrier();
               barrier();
              }
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> ((max(int(0), int(0))))); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
              }
             if((false))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
             if((false))
              barrier();
             if((! (! (false))))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (0 + (1)); _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
           if((false))
            barrier();
           if(true)
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = ((1) * 1); _injected_loop_counter != (int(ivec3(0, ((1 << (int(6))) >> (int(6))), 1))); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   do
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   while((bool(bvec2(false, true))));
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                  }
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             if(((bool(bvec2(false, true)))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            barrier();
          }
         if(((bool((bvec3(bvec3(bvec3(false, true, true))))))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          barrier();
         if(((bool(bvec2(false, false)))))
          barrier();
         if((false))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             do
              {
               barrier();
              }
             while(false);
             if((((false) || false)))
              barrier();
            }
          }
         if((((false) && true)))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          barrier();
         barrier();
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
        }
      }
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(false);
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_1(mat4(1.0), vec3(1.0), vec3(1.0), _GLF_struct_0(mat2x4(1.0), mat4x2(1.0)), uvec2(1u)), _GLF_struct_6(_GLF_struct_2(1u, mat3x4(1.0), bvec4(true), mat2x3(1.0), uvec4(1u)), _GLF_struct_3(mat3x4(1.0), bvec2(true), true, mat2x3(1.0), vec4(1.0), mat2x4(1.0)), _GLF_struct_4(ivec4(1), mat4x3(1.0)), ivec3(1), uvec4(1u), _GLF_struct_5(bvec3(true), 1u, bvec4(true), vec4(1.0), ivec2(1)), vec4(1.0)), _GLF_struct_8(mat4x2(1.0), _GLF_struct_7(gl_NumWorkGroups.x, mat2x4(1.0), mat3x4(1.0), 1, ivec4(1), mat4(1.0))));
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((true && (false))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 while(false);
 if(false)
  {
  }
 else
  {
   if(((bool(bvec4(false, true, ((injectionSwitch.x < injectionSwitch.y)), false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if((false))
          barrier();
        }
      }
     do
      {
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(((! (! (false)))))
        barrier();
       if(((true && (false))))
        barrier();
      }
     while(false);
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(false);
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (int((injectionSwitch.x)) | ((1 << (int(7))) >> (int(7)))); _injected_loop_counter ++)
    {
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  barrier();
 if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if(((true && (false))))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(true)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   buf[virtual_gid] = 1;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((false || (false))))
    barrier();
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(true)
    {
     barrier();
    }
   else
    {
     if(((bool(bvec4(false, false, true, false)))))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(false)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
          }
         while(false);
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         do
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if(false)
          {
          }
         else
          {
           if(true)
            {
             for(int _injected_loop_counter = (((1 << (int(6))) >> (int(6))) & 1); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = (((1 << (int(3))) >> (int(3))) & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if(((false || (bool((! (! (bool(true)))))))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 72604); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if(false)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              {
               if(((! ((bool(bool(! ((false || (false))))))))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                {
                 do
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (1 ^ (0 | 1)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (false)))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false) && true)))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(false)
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     while(false);
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                 barrier();
                }
               while(false);
              }
             barrier();
             if((false))
              {
               if((((false) || false)))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) * 1); _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (~ (~ ((28304 & 0)))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = ((1 << (int(6))) >> (((int(6)) << 0))); _injected_loop_counter > (0 >> (int(3))); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               do
                {
                 if((false))
                  barrier();
                }
               while((bool(bvec2(false, false))));
               if((false))
                barrier();
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (~ (~ (0))); _injected_loop_counter --)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(((! (! (false)))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(false);
             for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if(true)
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         subgroupAll(false);
         for(int _injected_loop_counter = 1; _injected_loop_counter > ((false ? (_injected_loop_counter) : 0)); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 << ((max(int(4), int(4))))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(((bool(bvec4(bool(bvec3(true, true, true)), true, true, false)))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           do
            {
             barrier();
            }
           while(((false) || false));
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               do
                {
                 do
                  {
                   if((false || (false)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(false);
                }
               while(false);
              }
             while(((false) || false));
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(false)
        {
        }
       else
        {
         if(((! (! (false)))))
          {
           if(((! (! (false)))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = ((1 << ((max(int(0), int(0))))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
         else
          {
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(true)
            {
             if(((bool(bvec3(false, true, false)))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((0 << (int(2))) >> (int(3))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if(((bool(bvec2(false, false)))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((0 + (0)) << (int(5))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     subgroupAll(true);
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (~ (~ (0))); _injected_loop_counter --)
    {
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
        }
       if(((! (! (false)))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         do
          {
           do
            {
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               barrier();
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(false);
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              {
               if(((bool(bvec3(false, true, true)))))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(false);
           if((false))
            barrier();
           for(int _injected_loop_counter = (0 << ((~ (~ (int(2)))))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (0 << (int(4))); _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((false || (false))))
              barrier();
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(((true && (false))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             barrier();
             if(true)
              {
               if(((bool(bvec2(false, true)))))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((true && (true)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
          }
         else
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if(true)
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     do
      {
       if((false))
        barrier();
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (1 ^ (0 << (int(6)))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if(true)
        {
         do
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     if((((false) || false)))
      {
       for(int _injected_loop_counter = (0 ^ (min(1, 1))); _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
        {
         if(((false || (((false) && true)))))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           do
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if(((true && (false))))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           if((false))
            barrier();
           if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         while(false);
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
        }
      }
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (1 | (94548 & 0)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) && true)))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (clamp(0, 0, 0)); _injected_loop_counter --)
  {
   do
    {
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(false);
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((true && (false))))
        barrier();
       barrier();
      }
    }
   if(((bool((bvec2(bvec2(bvec2(false, false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = ((1 << (((int(6)) << 0))) >> (int(6))); _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
    {
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> ((~ (~ (int(4)))))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((bool((true && (bool(false)))))))
      barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
}
