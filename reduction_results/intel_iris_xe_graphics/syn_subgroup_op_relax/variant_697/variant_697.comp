#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (max(gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = ((((workgroup_size) + 0u) * workgroup_id) - 0u);
 uint virtual_gid = workgroup_base + (max(((max((((subgroup_id * ((subgroup_size) | (((subgroup_size) | (subgroup_size))))) | 0u)), (0u | ((((((subgroup_id * subgroup_size) | 0u) | ((subgroup_id * subgroup_size) | 0u)))))))) << 0u), subgroup_id * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = ((((workgroup_base + (max(subgroup_id, subgroup_id)) * subgroup_size + ((((((((subgroup_local_id + ((((1) ^ 0)) / 1)) | (subgroup_local_id + 1)) / (min((1u & 1u), (1u & 1u)))))) % subgroup_size) - 0u))) >> 0u)) + (0u | 0u));
 buf[virtual_gid] = 1;
 if(((! (! (((bool(bvec4(subgroup_local_id + 1 < subgroup_size, ((injectionSwitch.x > injectionSwitch.y)), true, false))) && true))))))
  {
   atomicStore(buf[next_virtual_gid], uint(2), ((0 << (int(8))) | (4)), 64, 0);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, (min((0 + (64)), (((0 + (64))) >> 0))), 0);
   subgroupAll(true);
  }
}
