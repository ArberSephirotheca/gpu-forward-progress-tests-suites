#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((true && ((((false)) && true))))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = (min((clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * ((workgroup_id) ^ 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         barrier();
        }
       barrier();
       if(((bool(bvec2((! (! (false))), true)))))
        barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + (max(subgroup_id * subgroup_size, (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (((0u | (((((subgroup_local_id + 1) | 0u))) / 1u))) % subgroup_size);
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((bool(bool(false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = 1;
 if(((false || ((false || ((bool(bvec3(false, true, true)))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((min((mix(vec2((mix(vec2((injectionSwitch)[0], (1.5)), vec2(((85.47 - - 3.3)), (injectionSwitch)[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))[0], (mix(vec2((injectionSwitch)[0], (1.5)), vec2(((85.47 - - 3.3)), (injectionSwitch)[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))[1]), vec2((- 4.4), ((false ? 2.3 : 5.6))), bvec2(false, false))), mix(vec2((injectionSwitch)[0], (1.5)), vec2(((85.47 - - 3.3)), (injectionSwitch)[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))))).x > injectionSwitch.y))))
  barrier();
 if((! (! (((bool((bvec3(bvec3(((bvec3(bvec4(bvec3((bvec3(bvec3(bvec3(bvec3((((bool(bvec3((bool(bool(((((((((((injectionSwitch.x) - 0.0) > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y)))))) && true)) && true)))), true, true))) && true)), false, false)))))), false))))))))))))))
  barrier();
 if((! (! ((false || (subgroup_local_id + ((0 >> (int(6))) | (((1) | (1)))) < subgroup_size))))))
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   subgroupAll(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((false ? (vec2(- 441.167, - 14.20)) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   atomicStore(buf[(((clamp(false ? (workgroup_size) : ((min((next_virtual_gid) | (next_virtual_gid), (next_virtual_gid) | (next_virtual_gid)))), false ? (workgroup_size) : ((min((next_virtual_gid) | (next_virtual_gid), (next_virtual_gid) | (next_virtual_gid)))), (uint(uvec3(false ? (workgroup_size) : ((min((next_virtual_gid) | (next_virtual_gid), (next_virtual_gid) | (next_virtual_gid)))), 0u, 1u)))))))], uint(2), 4, 64, 0);
   subgroupAll(((true) || ((false) || ((injectionSwitch.x > injectionSwitch.y)))));
   if(((false || (false))))
    barrier();
   if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
    barrier();
  }
}
