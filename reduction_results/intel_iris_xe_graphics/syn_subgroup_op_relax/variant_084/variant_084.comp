#version 460

struct _GLF_struct_56 {
 vec3 _f0;
 mat3x2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_57 {
 uvec2 _f0;
 mat3 _f1;
 mat3x4 _f2;
 uvec2 _f3;
 _GLF_struct_56 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_58 {
 _GLF_struct_57 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_53 {
 uvec3 _f0;
 uvec2 _f1;
 uint _f2;
 mat3x2 _f3;
 int _f4;
 mat3x4 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_52 {
 mat3 _f0;
 ivec2 _f1;
 float _f2;
 vec3 _f3;
 ivec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_51 {
 mat2x4 _f0;
 ivec2 _f1;
 float _f2;
 mat4x3 _f3;
 mat3x2 _f4;
 uint _f5;
 mat2 _f6;
} ;

struct _GLF_struct_54 {
 _GLF_struct_51 _f0;
 _GLF_struct_52 _f1;
 mat3 _f2;
 mat4x3 _f3;
 mat3x2 _f4;
 _GLF_struct_53 _f5;
 bool _f6;
} ;

struct _GLF_struct_50 {
 mat2x4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_49 {
 mat2x4 _f0;
} ;

struct _GLF_struct_55 {
 bvec4 _f0;
 _GLF_struct_49 _f1;
 mat2 _f2;
 _GLF_struct_50 _f3;
 uint workgroup_base;
 _GLF_struct_54 _f4;
} ;

struct _GLF_struct_46 {
 vec4 _f0;
 mat2x3 _f1;
 mat4x2 _f2;
 mat4x2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_47 {
 _GLF_struct_46 _f0;
 ivec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_45 {
 uint subgroup_size;
 mat2 _f0;
 bool _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_43 {
 uint _f0;
} ;

struct _GLF_struct_42 {
 mat2 _f0;
 uint _f1;
 mat3x2 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_44 {
 _GLF_struct_42 _f0;
 mat2x3 _f1;
 vec3 _f2;
 _GLF_struct_43 _f3;
} ;

struct _GLF_struct_48 {
 _GLF_struct_44 _f0;
 _GLF_struct_45 _f1;
 mat3x2 _f2;
 _GLF_struct_47 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_39 {
 mat2 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 vec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_40 {
 uvec4 _f0;
 vec4 _f1;
 bvec3 _f2;
 bvec2 _f3;
 _GLF_struct_39 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_37 {
 uvec2 _f0;
 bvec4 _f1;
 mat4x2 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_38 {
 ivec3 _f0;
 ivec4 _f1;
 _GLF_struct_37 _f2;
 int _f3;
} ;

struct _GLF_struct_41 {
 mat3x2 _f0;
 _GLF_struct_38 _f1;
 _GLF_struct_40 _f2;
} ;

struct _GLF_struct_34 {
 mat2 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 mat4x3 _f3;
 bool _f4;
} ;

struct _GLF_struct_35 {
 uvec4 _f0;
 _GLF_struct_34 _f1;
} ;

struct _GLF_struct_32 {
 vec3 _f0;
 ivec2 _f1;
 uint _f2;
} ;

struct _GLF_struct_31 {
 mat3x4 _f0;
 ivec4 _f1;
 ivec3 _f2;
 uint _f3;
 vec2 _f4;
 ivec4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_30 {
 ivec2 _f0;
 uvec3 _f1;
 ivec3 _f2;
 ivec2 _f3;
 mat4x3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_33 {
 uvec3 _f0;
 mat4x3 _f1;
 vec3 _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
 _GLF_struct_32 _f5;
} ;

struct _GLF_struct_36 {
 uint next_virtual_gid;
 _GLF_struct_33 _f0;
 _GLF_struct_35 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_28 {
 bvec4 _f0;
} ;

struct _GLF_struct_26 {
 bvec4 _f0;
 mat2 _f1;
 ivec3 _f2;
 vec4 _f3;
 uint _f4;
 mat3 _f5;
} ;

struct _GLF_struct_25 {
 uvec2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_24 {
 vec2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_27 {
 _GLF_struct_24 _f0;
 _GLF_struct_25 _f1;
 _GLF_struct_26 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_22 {
 bvec3 _f0;
} ;

struct _GLF_struct_21 {
 uvec2 _f0;
} ;

struct _GLF_struct_23 {
 _GLF_struct_21 _f0;
 _GLF_struct_22 _f1;
} ;

struct _GLF_struct_20 {
 mat3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
 bvec4 _f1;
 uvec3 _f2;
 mat4x2 _f3;
 mat3 _f4;
 mat3 _f5;
 uint _f6;
} ;

struct _GLF_struct_17 {
 bool _f0;
 vec2 _f1;
 bvec4 _f2;
 ivec4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_19 {
 _GLF_struct_17 _f0;
 _GLF_struct_18 _f1;
} ;

struct _GLF_struct_15 {
 vec3 _f0;
 mat3x2 _f1;
 int _f2;
 mat3x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 uint _f1;
} ;

struct _GLF_struct_29 {
 _GLF_struct_16 _f0;
 uint num_workgroup;
 _GLF_struct_19 _f1;
 _GLF_struct_20 _f2;
 _GLF_struct_23 _f3;
 _GLF_struct_27 _f4;
 _GLF_struct_28 _f5;
} ;

struct _GLF_struct_12 {
 float _f0;
} ;

struct _GLF_struct_13 {
 int _f0;
 uint workgroup_size;
 mat4x2 _f1;
 ivec4 _f2;
 _GLF_struct_12 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_11 {
 mat4x2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 bvec3 _f1;
 bvec4 _f2;
 vec3 _f3;
 float _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_7 {
 float _f0;
 uvec4 _f1;
 bvec4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_10 {
 bvec2 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 bvec4 _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_13 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 mat3x2 _f1;
 vec2 _f2;
 mat2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 uint workgroup_id;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 uint _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((false || (false))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec2(false, true)))))
          continue;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
        }
      }
     while(false);
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     barrier();
    }
   while(false);
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
     if((false))
      barrier();
    }
   for(_GLF_struct_58 _GLF_struct_replacement_58 = _GLF_struct_58(_GLF_struct_57(uvec2(1u), mat3(1.0), mat3x4(1.0), uvec2(1u), _GLF_struct_56(vec3(1.0), mat3x2(1.0), bvec3(true)), vec2(1.0)), 1); _GLF_struct_replacement_58._injected_loop_counter != int((injectionSwitch.x)); _GLF_struct_replacement_58._injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 _GLF_struct_48 _GLF_struct_replacement_48 = _GLF_struct_48(_GLF_struct_44(_GLF_struct_42(mat2(1.0), 1u, mat3x2(1.0), mat4x2(1.0)), mat2x3(1.0), vec3(1.0), _GLF_struct_43(1u)), _GLF_struct_45(gl_SubgroupSize, mat2(1.0), true, uvec4(1u)), mat3x2(1.0), _GLF_struct_47(_GLF_struct_46(vec4(1.0), mat2x3(1.0), mat4x2(1.0), mat4x2(1.0), bvec3(true)), ivec4(1), bvec2(true)), uvec4(1u));
 if((false))
  {
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(((bool(bvec3(false, false, true)))))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(((bool(bvec4(false, false, true, true)))))
          barrier();
         if((false))
          {
           if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))
            break;
           break;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             while(false);
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              continue;
            }
           if((false))
            return;
           continue;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) << (int(7))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 & 1) << (int(2))) >> (int(2))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           barrier();
           if(((((bool(bvec2(false, false)))) && ((injectionSwitch.x < injectionSwitch.y)))))
            barrier();
          }
        }
      }
     else
      {
      }
     if((false))
      continue;
     if((false))
      continue;
     if(((bool(bvec4(false, false, true, true)))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (~ (~ (1))); _injected_loop_counter ++)
        {
         return;
         if(((true && (false))))
          return;
         if((false))
          break;
        }
       if((false))
        return;
      }
     do
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           break;
           if((false))
            return;
          }
         return;
        }
       if(((bool(bvec4(false, true, false, true)))))
        {
         if((false))
          continue;
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        continue;
      }
     while(false);
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if(true)
        {
         if((false))
          return;
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        return;
       if((false))
        return;
       for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != (2146 & 0); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             do
              {
               barrier();
               if((false))
                barrier();
              }
             while(false);
            }
           if((false))
            break;
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
            }
           if((false))
            break;
          }
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if((false))
        return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if(((bool(bool((bool(bvec4(false, true, true, false))))))))
          barrier();
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         return;
        }
       if((false))
        continue;
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(((false || (false))))
    barrier();
   if((false))
    return;
   if(((bool(bvec2(false, false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((false) && true)))
  return;
 if((((false) || false)))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if(false)
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(4))) >> ((max(int(4), int(4))))); _injected_loop_counter ++)
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 ^ int((injectionSwitch.x))); _injected_loop_counter --)
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
       if((false))
        continue;
      }
    }
  }
 if((false))
  barrier();
 if((false))
  {
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      continue;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(false);
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   do
    {
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     if((false))
      continue;
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((false) && true)))
          barrier();
         do
          {
           barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((false) || false)))
        {
         if((false))
          {
           if(((bool(bvec3(false, true, true)))))
            break;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              break;
            }
           if((false))
            break;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             barrier();
            }
           else
            {
             if((false))
              continue;
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          continue;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((false) || false));
  }
 if(((bool(bool(false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if(true)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     else
      {
       if((false))
        return;
      }
     return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((((false) && true)))
        break;
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    return;
   if(false)
    {
     if(((true && (false))))
      return;
    }
   else
    {
     if((false))
      barrier();
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(_GLF_struct_16(_GLF_struct_15(vec3(1.0), mat3x2(1.0), 1, mat3x4(1.0), ivec3(1)), 1u), gl_NumWorkGroups.x, _GLF_struct_19(_GLF_struct_17(true, vec2(1.0), bvec4(true), ivec4(1), bvec2(true)), _GLF_struct_18(mat4x3(1.0), bvec4(true), uvec3(1u), mat4x2(1.0), mat3(1.0), mat3(1.0), 1u)), _GLF_struct_20(mat3(1.0), uvec4(1u)), _GLF_struct_23(_GLF_struct_21(uvec2(1u)), _GLF_struct_22(bvec3(true))), _GLF_struct_27(_GLF_struct_24(vec2(1.0), mat2(1.0)), _GLF_struct_25(uvec2(1u), uvec2(1u)), _GLF_struct_26(bvec4(true), mat2(1.0), ivec3(1), vec4(1.0), 1u, mat3(1.0)), mat4x3(1.0)), _GLF_struct_28(bvec4(true)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_5(_GLF_struct_4(mat2x4(1.0))), _GLF_struct_6(mat2x4(1.0), uvec2(1u)), _GLF_struct_10(bvec2(true), _GLF_struct_7(1.0, uvec4(1u), bvec4(true), mat3(1.0)), _GLF_struct_8(bvec3(true), bvec3(true), bvec4(true), vec3(1.0), 1.0, mat3x2(1.0)), bvec4(true), _GLF_struct_9(mat4(1.0), ivec3(1))), _GLF_struct_11(mat4x2(1.0), mat2(1.0)), _GLF_struct_13(1, gl_WorkGroupSize.x, mat4x2(1.0), ivec4(1), _GLF_struct_12(1.0), mat4x3(1.0)), ivec2(1));
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(uvec4(1u)), _GLF_struct_1(ivec4(1), mat3x2(1.0), vec2(1.0), mat2(1.0), vec4(1.0)), gl_WorkGroupID.x), 1u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((bool(bvec2(false, false))))
        {
         if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           return;
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
           if((false))
            barrier();
          }
        }
       else
        {
         return;
        }
      }
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if((false))
        continue;
       barrier();
      }
     barrier();
    }
   while(false);
   if((false))
    return;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   return;
  }
 if((false))
  return;
 _GLF_struct_55 _GLF_struct_replacement_55 = _GLF_struct_55(bvec4(true), _GLF_struct_49(mat2x4(1.0)), mat2(1.0), _GLF_struct_50(mat2x4(1.0), mat3(1.0)), _GLF_struct_replacement_14._f4.workgroup_size * _GLF_struct_replacement_3._f0.workgroup_id, _GLF_struct_54(_GLF_struct_51(mat2x4(1.0), ivec2(1), 1.0, mat4x3(1.0), mat3x2(1.0), 1u, mat2(1.0)), _GLF_struct_52(mat3(1.0), ivec2(1), 1.0, vec3(1.0), ivec3(1), bvec4(true)), mat3(1.0), mat4x3(1.0), mat3x2(1.0), _GLF_struct_53(uvec3(1u), uvec2(1u), 1u, mat3x2(1.0), 1, mat3x4(1.0), vec2(1.0)), true));
 if((false))
  barrier();
 if(((! (! (false)))))
  return;
 uint virtual_gid = _GLF_struct_replacement_55.workgroup_base + subgroup_id * _GLF_struct_replacement_48._f1.subgroup_size + subgroup_local_id;
 _GLF_struct_36 _GLF_struct_replacement_36 = _GLF_struct_36(_GLF_struct_replacement_55.workgroup_base + subgroup_id * _GLF_struct_replacement_48._f1.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_48._f1.subgroup_size), _GLF_struct_33(uvec3(1u), mat4x3(1.0), vec3(1.0), _GLF_struct_30(ivec2(1), uvec3(1u), ivec3(1), ivec2(1), mat4x3(1.0), mat4x2(1.0)), _GLF_struct_31(mat3x4(1.0), ivec4(1), ivec3(1), 1u, vec2(1.0), ivec4(1), mat2(1.0)), _GLF_struct_32(vec3(1.0), ivec2(1), 1u)), _GLF_struct_35(uvec4(1u), _GLF_struct_34(mat2(1.0), ivec3(1), mat2x4(1.0), mat4x3(1.0), true)), mat3x4(1.0));
 buf[virtual_gid] = 1;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
     do
      {
       barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      return;
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bool(false)))))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   do
    {
     if(true)
      {
       if((false))
        break;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         barrier();
        }
       if((false))
        continue;
      }
     else
      {
      }
    }
   while(false);
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((bool(bvec3(((true) || false), true, true))))
        {
         if((false))
          barrier();
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(subgroup_local_id + 1 < _GLF_struct_replacement_48._f1.subgroup_size)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         do
          {
           if((false))
            {
             if((false))
              continue;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
            }
           else
            {
             atomicStore(buf[_GLF_struct_replacement_36.next_virtual_gid], uint(2), 4, 64, 0);
            }
          }
         while(false);
         if((((! (! (bool(bool((true && (false))))))))))
          {
           if((false))
            return;
           barrier();
          }
        }
       else
        {
        }
       do
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             do
              {
               barrier();
              }
             while(false);
            }
           break;
          }
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                return;
               if(true)
                {
                 barrier();
                 if((false))
                  return;
                }
               else
                {
                }
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             return;
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if((false))
              {
               if((false))
                return;
               return;
              }
             if((false))
              continue;
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                 if((false))
                  continue;
                }
              }
             if((false))
              break;
             if((false))
              {
               if(((true && ((true && (false))))))
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  break;
                }
               for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               continue;
               if((false))
                break;
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               continue;
              }
             if((false))
              continue;
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                 if((false))
                  return;
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    {
                     if((false))
                      break;
                     break;
                    }
                   if((false))
                    barrier();
                   continue;
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    continue;
                   if((false))
                    barrier();
                   if((false))
                    break;
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      break;
                     barrier();
                    }
                   barrier();
                  }
                }
              }
             if((false))
              {
               if((((false) && true)))
                return;
               if((false))
                barrier();
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if((false))
              return;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                break;
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  {
                   if(true)
                    {
                     if((false))
                      return;
                     if((false))
                      barrier();
                     return;
                    }
                   else
                    {
                     if((false))
                      continue;
                    }
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (0 >> (int(0))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  return;
                 continue;
                }
               return;
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
               if((false))
                return;
              }
             if((false))
              barrier();
             if((false))
              continue;
            }
           while(false);
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((! (! (((((injectionSwitch.x > injectionSwitch.y))) || false))))))
              barrier();
             barrier();
            }
           if((false))
            return;
           if((false))
            barrier();
           for(_GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(mat3x2(1.0), _GLF_struct_38(ivec3(1), ivec4(1), _GLF_struct_37(uvec2(1u), bvec4(true), mat4x2(1.0), (0 | 0)), 1), _GLF_struct_40(uvec4(1u), vec4(1.0), bvec3(true), bvec2(true), _GLF_struct_39(mat2(1.0), mat2x4(1.0), mat3x2(1.0), vec2(1.0), bvec3(true)), ivec2(1))); _GLF_struct_replacement_41._f1._f2._injected_loop_counter < 1; _GLF_struct_replacement_41._f1._f2._injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             if((false))
              {
               for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 if((false))
                  return;
                }
               if(false)
                {
                }
               else
                {
                 barrier();
                 if((false))
                  break;
                }
               if((false))
                return;
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 continue;
                }
               if(((true && (false))))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 while((! (! (false))));
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                 break;
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             break;
            }
           if((false))
            break;
          }
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        break;
       if(true)
        {
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((true && (true)))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(true)
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                   if((false))
                    return;
                  }
                }
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 if((((false) && true)))
                  return;
                 if((false))
                  barrier();
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         while(false);
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          continue;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            break;
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       do
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           subgroupAll(false);
           if((false))
            barrier();
          }
         while(false);
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             if((false))
              continue;
             do
              {
               return;
              }
             while(false);
            }
          }
         if((false))
          break;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         do
          {
           if((false))
            return;
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
        }
       if((false))
        return;
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            break;
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       if(true)
        {
         if(((bool(bvec4(false, false, false, false)))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         continue;
        }
       do
        {
         if((((false) && true)))
          continue;
         if((false))
          barrier();
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           atomicStore(buf[_GLF_struct_replacement_36.next_virtual_gid], uint(2), 4, 64, 0);
           if((false))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          continue;
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             return;
            }
           while(false);
           if((false))
            break;
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            break;
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (int((injectionSwitch.x)) << (((int(0)) - 0))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((false))
              break;
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            {
             if((((false) || false)))
              {
               if((false))
                break;
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
               if((false))
                barrier();
               return;
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       subgroupAll(true);
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       if(false)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                continue;
               return;
              }
             barrier();
            }
          }
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           do
            {
             if((false))
              return;
             if((false))
              break;
            }
           while(false);
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          return;
         if((false))
          {
           if((false))
            break;
           barrier();
          }
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      continue;
     barrier();
    }
   if((false))
    continue;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(true)
      {
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((true && (false))))
      barrier();
     return;
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
      }
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        {
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
       if((false))
        return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
    }
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  {
   do
    {
     return;
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
}
