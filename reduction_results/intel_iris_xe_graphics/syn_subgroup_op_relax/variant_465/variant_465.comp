#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (max(((false ? (num_workgroup) : (((uint(uvec4((uvec3(0u, 0u, 0u) + ((max((uvec3(uvec3(((gl_WorkGroupID) * uvec3(1u, 1u, ((1u) - 0u)))))), (uvec3(uvec3(((gl_WorkGroupID) * uvec3(1u, 1u, ((1u) - 0u)))))))))).x, 0u, 0u, 0u)))) - ((false ? (subgroup_id) : ((min(~ (~ ((clamp((min(0u, 0u)), (((min(0u, ((0u) | (0u))))) << 0u), (min((min(0u, 0u)), 0u)))))), ~ (~ ((clamp((min(0u, 0u)), (((min(0u, ((0u) | (0u))))) << 0u), (min((min(0u, 0u)), 0u)))))))))))))), gl_WorkGroupID.x));
 uint workgroup_base = (clamp((max(workgroup_size, (clamp(workgroup_size, ((workgroup_size) | (max((((workgroup_size)) | ((workgroup_size))), (((workgroup_size)) | 0u)))), workgroup_size)))) * workgroup_id, (min((((max(workgroup_size, workgroup_size)) * workgroup_id) | ((max(workgroup_size, workgroup_size)) * workgroup_id)), (max(((false ? (subgroup_local_id) : (min(workgroup_size, workgroup_size)))), workgroup_size)) * workgroup_id)), (1u * ((max(workgroup_size, workgroup_size)) * workgroup_id))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (max((min((~ (~ (((min((subgroup_local_id), (~ ((min((0u ^ (~ ((subgroup_local_id)))), ~ ((subgroup_local_id))))))))) | 0u))), (~ (~ (((min((subgroup_local_id), (~ ((min((0u ^ (~ ((subgroup_local_id)))), ~ ((subgroup_local_id))))))))) | 0u))))), (~ (~ (((min((subgroup_local_id), (~ ((min((0u ^ (~ ((subgroup_local_id)))), ~ ((subgroup_local_id))))))))) | 0u)))));
 uint next_virtual_gid = (min(workgroup_base + subgroup_id * subgroup_size + (((min(subgroup_local_id + 1, subgroup_local_id + (int(((min((ivec4(1, int((injectionSwitch.x)), ((1 << ((((true ? int(((true ? int(((int(1)) + (~ (((~ (0)) << 0))))) : (81484)))) : (- 64652)))))) >> (((int(1)) ^ 0))), 1)), (ivec4(1, int((injectionSwitch.x)), ((1 << ((((((true ? int(((true ? int(((int(1)) + (~ (((~ (0)) << 0))))) : (81484)))) : (- 64652))))) | ((max((max((((((true ? int(((true ? int(((int(1)) + (~ (((~ (0)) << 0))))) : (81484)))) : (- 64652))))) ^ 0), (((true ? int(((true ? int(((int(1)) + (~ (((~ (0)) << 0))))) : (81484)))) : (- 64652)))))), (((true ? int(((true ? int(((((int(1)) + (~ (((~ (0)) << 0))))) - 0)) : (81484)))) : (- 64652)))))))))) >> (((int(1)) ^ 0))), 1)))) >> ivec4(((0) ^ 0), 0, 0, 0))))))) % subgroup_size), workgroup_base + (0u | ((~ (~ (~ (((true ? ~ ((0u ^ ((0u ^ ((clamp((subgroup_id), ((false ? (workgroup_id) : (0u + ((subgroup_id))))), (subgroup_id)))))))) : (67946u))))))))) * subgroup_size + ((max((((~ (((false ? (uvec2(63115u, 52424u).x) : ~ (max(((subgroup_local_id) ^ 0u), ((subgroup_local_id) ^ 0u)))))))) + ((1) | (1))), ((max((uint(uint(((true ? ((subgroup_local_id) ^ 0u) : (uvec2(104816u, 91415u)[1])))))), ((((subgroup_local_id) ^ 0u) - 0u)))) + ((1) | (((1)) ^ (0 << (int(4)))))))) % subgroup_size)));
 ((true ? ((((buf[virtual_gid] = 1) >> 0u)) | 0u) : (next_virtual_gid)));
 if(((subgroup_local_id) | (subgroup_local_id)) + 1 < subgroup_size)
  {
   atomicStore(buf[(min(next_virtual_gid, next_virtual_gid))], ((true ? uint((max(2, 2))) : (workgroup_base))), (~ (((false ? (60624) : ~ ((clamp(4, (((0 | 0) | ((((4)) >> 0))) / 1), 4))))))), (clamp(64, ((((64)) | ((64))) + 0), (max(64, ((((((64) | (((64) >> ((0) << 0)))) >> 0))) ^ 0))))), 0);
   subgroupAll(((false) && (bool(((bvec3(bvec3(((bvec3(bvec3((bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3((bool(bvec4(true, false, false, ((! (! ((((((! (! (((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))) && true)))) || false)) || false)))))))), false, (((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true)), ((injectionSwitch.x < injectionSwitch.y)))), false)))))))))))))));
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint((int(((((true ? ivec2((((min(2, (0 ^ ((min(((2) << 0), ((2) << 0))))))) | (min((1 * (((2) << 0))), 2)))), 0) : (ivec2(1, 1) * (((ivec2(0, 0) << (ivec2(0))) | ((ivec2(- 49504, 9613))))))))) | (min((ivec2(- 45318, 15389) & ivec2(0, 0)), (ivec2(- 45318, 15389) & ivec2(0, 0)))))))), 4, 64, 0);
   subgroupAll(true);
  }
}
