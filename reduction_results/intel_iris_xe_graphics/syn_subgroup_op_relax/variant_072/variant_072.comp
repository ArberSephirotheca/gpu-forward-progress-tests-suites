#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   do
    {
     if(((false) && true))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           barrier();
          }
        }
       while((! (! (false))));
      }
     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((! (! (false)))))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = (~ (~ (1))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   while((false || (false)));
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
    }
   if(((! (! (false)))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     barrier();
    }
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if(true)
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if((false))
          barrier();
        }
       if(((bool(bvec2(false, true)))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 | 0) & int(false)); _injected_loop_counter --)
          {
           do
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(false);
           if((false))
            barrier();
          }
        }
       barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   while(false);
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       do
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((((false) && true)))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(((true && (false))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! ((false || (! (false)))))))
    barrier();
   barrier();
  }
 if(false)
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(((! (((! (false)) || false)))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        {
         if(((bool(bvec2(false, false)))))
          barrier();
         barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec2(false, false)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
       if((false))
        {
         if(true)
          {
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), true)))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = ((1 & ((1 << (int(4))) >> (int(4)))) ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if(((true && (false))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(((((injectionSwitch.x < injectionSwitch.y)) && (((false) && true)))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       barrier();
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(false);
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(((! (! (false)))))
      barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((false || (false))))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(false);
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(false);
        }
       barrier();
      }
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
             while(false);
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if(true)
      {
       barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 while((false || (false)));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while(false);
 do
  {
   if(((bool(bvec3(((((injectionSwitch.x > injectionSwitch.y))) || false), false, true)))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
       if(((! (! (false)))))
        barrier();
      }
    }
  }
 while((false || (false)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(false);
    }
   do
    {
     if((false))
      {
       do
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
      }
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        barrier();
       if((bool(bvec4(false, false, true, false))))
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     while(false);
    }
   for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(true)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << (((int(6)) | 0))) >> (int(6))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = 1;
 do
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((false) && true)))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         barrier();
         if((false))
          {
           if(((false || (false))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if(((! (! (false)))))
              barrier();
             barrier();
            }
          }
        }
      }
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
     subgroupAll(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(((bool(bvec3(false, true, false)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if((false))
              barrier();
             barrier();
             do
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
              }
             while(false);
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(((! (! (false)))))
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               if((false))
                barrier();
              }
             while(false);
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           do
            {
             do
              {
               if((false))
                barrier();
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               barrier();
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           while(false);
          }
        }
       if((false))
        barrier();
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(((! (! (false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != (((1 << (int(7))) >> (int(7))) ^ 1); _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if(true)
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((false) && true)))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
        }
       else
        {
         if(((false || (false))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
            }
          }
        }
       else
        {
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            barrier();
          }
        }
       if(((false || (((false) || false)))))
        barrier();
      }
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if(((bool(bool(false)))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if(((true && (false))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   do
                    {
                     if(((! ((! (! (! (false))))))))
                      {
                       for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < (clamp((~ (~ (1))), 1, 1)); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   while(false);
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 do
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 while(false);
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             if(((true && ((false || (false))))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         if((false))
          {
           do
            {
             if((false))
              barrier();
             barrier();
            }
           while(false);
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((false))
                barrier();
              }
             while(false);
             if((false))
              barrier();
             for(int _injected_loop_counter = (0 << ((~ (~ (int(7)))))); _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         subgroupAll(true);
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if(false)
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                barrier();
              }
             if((false))
              barrier();
             if(true)
              {
               barrier();
               if((((false) && true)))
                barrier();
              }
             else
              {
              }
            }
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(false);
         if(((bool(bvec3(false, true, true)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((! (! (false)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}
