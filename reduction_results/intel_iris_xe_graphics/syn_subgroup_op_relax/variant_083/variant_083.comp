#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(((true && (((! (! (! (! (((injectionSwitch.x > (float(vec2(((false ? (- 63.34) : injectionSwitch.y)), ((1.0) - log(1.0)))))))))))))))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       barrier();
       if((false))
        return;
      }
     if((false))
      return;
     if(((((! (! (false)))) || ((injectionSwitch.x > injectionSwitch.y)))))
      return;
     return;
    }
   return;
   if((bool((bool(bvec2(bool((((injectionSwitch.x > injectionSwitch.y)))), true))))))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bool(((((false) && true)) || false))))))
    return;
   return;
  }
 if(((((bool((bvec2(bvec3(bvec2(bool(bool((false || (bool(bvec3(((((false || ((((true) && true) && (! ((! (bool(bool((! (! (false))))))))))))))) || false, false, ((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y)))))))), false), false)))))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 uint num_workgroup = (uvec3((min(((gl_NumWorkGroups[(~ (~ (int(ivec3(((int((max(ivec4(0, 0, 0, (1 | 0)), ivec4(0, 0, (((~ (~ (0)))) | (0)), (1 | 0))))))), 1, 0)))))]) - (0u | 0u)), gl_NumWorkGroups[(~ (~ (int(ivec3(((int((max(ivec4(0, 0, 0, (1 | 0)), ivec4(0, 0, (((~ (~ (0)))) | (0)), (1 | 0))))))), 1, 0)))))])), gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((bool((bool((bvec2(bvec2(bvec2(bool(injectionSwitch.x > injectionSwitch.y), true))))))))))))
    return;
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if((false))
  return;
 if((((false) && true)))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * ((subgroup_size) | 0u) + subgroup_local_id;
 if(((((max((mix(vec2((injectionSwitch)[0], (8919.1775)), vec2((- 6495.5676), ((vec2(mat4x2((vec2(0.0, 0.0) + ((min((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))), 1.0, 1.0, length(vec3(0.0, 0.0, (float(mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), 0.0, tan(0.0), sin(0.0)))))[1]), bvec2(false, true))), injectionSwitch)).x > ((false ? (2.4) : injectionSwitch.y))))))
  {
   if((false))
    return;
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if((false))
  return;
 if(((((! (! (false)))) || false)))
  return;
 if((bool(bvec3((bool(bvec3((! (! (subgroup_local_id + 1 < (max(subgroup_size, subgroup_size))))), false, false))), false, false))))
  {
   if((false))
    {
     if(((((((true && ((bool(bvec4(true, ((injectionSwitch.x > injectionSwitch.y)), false, false))) && (((bool(bvec4(((injectionSwitch.x > injectionSwitch.y) && true), ((injectionSwitch.x > injectionSwitch.y)), false, false)))))))) && true)))))
      return;
     return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   subgroupAll(false);
   if(((false || (false))))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], (clamp(uint(2), uint((max(2, 2))), uint(2))), 4, 64, 0);
   if((false))
    {
     if((((bool(bool((false || (((max((min(injectionSwitch, (((vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) * mat2(1.0))))).x, (clamp((mat2((injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))))))
      return;
     barrier();
    }
   subgroupAll(true);
   if((false))
    return;
   if((! (! ((false)))))
    return;
   if((false))
    return;
   if((false))
    barrier();
  }
}
