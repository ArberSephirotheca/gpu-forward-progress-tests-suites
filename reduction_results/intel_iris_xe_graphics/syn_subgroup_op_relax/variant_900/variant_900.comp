#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if((false))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > (0 >> (int(4))); _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       return;
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(((false) || false));
       if((bool(bvec3(true, false, true))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bvec3(false, false, false)))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
       if((false))
        return;
      }
     else
      {
      }
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if((false))
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
          {
           if((false))
            break;
           do
            {
             return;
            }
           while(false);
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if((false))
    return;
  }
 while(false);
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false || (((injectionSwitch.x > injectionSwitch.y)))))
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & - 7987); _injected_loop_counter --)
        {
         barrier();
         if((false))
          continue;
        }
      }
    }
   if((false))
    return;
  }
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   do
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     do
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
      }
     while(false);
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((! (! (true))))
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   if((false))
    return;
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((false))
          return;
         barrier();
         if((false))
          barrier();
         if((false))
          return;
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     do
      {
       for(int _injected_loop_counter = (0 & - 84466); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(false);
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((false))
            barrier();
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
          }
         while(false);
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(7))) >> ((int(int(int(7)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((! (! (false)))))
        {
         do
          {
           return;
          }
         while(false);
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         continue;
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                break;
               continue;
              }
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
             barrier();
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                break;
               if((false))
                continue;
               return;
              }
             while(false);
             if((false))
              barrier();
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            break;
          }
         if(true)
          {
           if((((false) && true)))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        break;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      return;
     continue;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       for(int _injected_loop_counter = ((1 << (int(5))) >> ((min(int(5), int(5))))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       return;
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 << (int(7))) | 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   do
    {
     if((false))
      continue;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(true)
        {
         if(false)
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        return;
                       barrier();
                      }
                     return;
                     if((false))
                      barrier();
                    }
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    break;
                   if((false))
                    break;
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 return;
                }
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                return;
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((! (! (true))))
                      {
                       if((false))
                        continue;
                       if(((bool(bvec3(false, false, true)))))
                        break;
                       if(false)
                        {
                        }
                       else
                        {
                         do
                          {
                           if(((true && ((! (! (false)))))))
                            continue;
                           if((false))
                            return;
                           barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                      }
                     else
                      {
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((false))
                    continue;
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        return;
                       break;
                      }
                     break;
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     continue;
                    }
                   barrier();
                  }
                 if((false))
                  return;
                 for(int _injected_loop_counter = ((0 >> (int(6))) >> (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while((bool(bvec3(false, true, true))));
                    }
                  }
                 else
                  {
                  }
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            {
             if(true)
              {
               if((false))
                break;
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  return;
                }
               else
                {
                 barrier();
                }
               if((false))
                return;
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   do
                    {
                     return;
                     if((false))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if((false))
                break;
              }
             else
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  continue;
                 if((false))
                  {
                   if(false)
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        break;
                       if((false))
                        barrier();
                       if((false))
                        break;
                      }
                    }
                  }
                }
              }
             else
              {
              }
             return;
            }
           if((false))
            barrier();
           if(((false || (false))))
            {
             if((false))
              {
               if((false))
                continue;
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             continue;
             if((false))
              {
               if((false))
                return;
               continue;
              }
             if(((false || (false))))
              return;
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             continue;
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if(true)
              {
               if((((false) || false)))
                return;
               if(false)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((false))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | int((injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   while(false);
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 >> ((clamp(int(1), int(1), (min(int(1), int(1))))))); _injected_loop_counter --)
                    {
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if(false)
                      {
                       if((false))
                        break;
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    {
                     for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > (0 >> (int(6))); _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                      }
                     continue;
                    }
                  }
                 while(false);
                 if((false))
                  barrier();
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    break;
                  }
                 while(false);
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     break;
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    continue;
                   if(((false || (false))))
                    barrier();
                  }
                 if((false))
                  break;
                }
               else
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 while(false);
                 if((false))
                  barrier();
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     return;
                     if((false))
                      break;
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (((0 | 0)) << 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 if(((bool(bvec2(false, false)))))
                  continue;
                }
              }
             else
              {
              }
             if((false))
              barrier();
             if((false))
              continue;
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
            }
           if(((true && (false))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                continue;
               break;
              }
             do
              {
               if((false))
                return;
              }
             while(false);
             do
              {
               if((false))
                break;
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
           if((false))
            continue;
           if((false))
            {
             if((false))
              return;
             return;
            }
           if(true)
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               barrier();
              }
             if((false))
              {
               if((false))
                return;
               if((false))
                barrier();
               continue;
              }
             buf[virtual_gid] = 1;
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             if((false))
              return;
            }
           else
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
              }
             if((false))
              return;
            }
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                break;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 if((false))
                  return;
                 if((false))
                  barrier();
                 if(true)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 continue;
                }
               barrier();
              }
             if((false))
              {
               if((false))
                break;
               return;
               if((false))
                return;
              }
             if((false))
              {
               if((false))
                break;
               continue;
              }
             return;
             if((false))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((bool((bvec3(bvec3(bvec3(false, true, false))))))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if(((! (! (false)))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 if((false))
                  barrier();
                 barrier();
                }
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
   while(false);
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     if((false))
      barrier();
     if((false))
      return;
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if((false))
        break;
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
                }
               if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
                return;
              }
            }
           else
            {
            }
           if((false))
            continue;
           if((false))
            {
             if((false))
              barrier();
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              return;
             continue;
            }
          }
         if((false))
          continue;
        }
       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
        {
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             continue;
            }
          }
         else
          {
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             do
              {
               barrier();
              }
             while(false);
             if((false))
              continue;
            }
           else
            {
            }
          }
         break;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((false))
              barrier();
             if((false))
              break;
             barrier();
            }
           while(false);
          }
         do
          {
           if((false))
            return;
          }
         while(false);
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                       barrier();
                      }
                     return;
                    }
                   barrier();
                  }
                 barrier();
                }
              }
             if((false))
              return;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             continue;
            }
           if(true)
            {
             if((false))
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(true)
            {
             if((false))
              return;
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               barrier();
              }
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(false)
                {
                }
               else
                {
                 do
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                return;
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if(((false || ((! (! (false)))))))
            continue;
          }
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((! (! (false))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(3))); _injected_loop_counter --)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              continue;
            }
           else
            {
             for(int _injected_loop_counter = ((1 << (int(2))) >> ((clamp(int(2), int(2), (~ (~ (int(2)))))))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     break;
                    }
                   if((false))
                    return;
                   continue;
                   if((false))
                    break;
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if(((bool(bool(false)))))
                      return;
                    }
                  }
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                    {
                     do
                      {
                       for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((false))
                          {
                           if((false))
                            continue;
                           continue;
                          }
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            return;
                          }
                         if((false))
                          break;
                         if((false))
                          return;
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           if(((true && (false))))
                            barrier();
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     while(false);
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(false);
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                      }
                     else
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          return;
                        }
                       else
                        {
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             continue;
            }
          }
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if(true)
          {
           subgroupAll(false);
          }
         else
          {
          }
         if(((! (! ((! (! (false))))))))
          {
           if((false))
            barrier();
           continue;
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             continue;
             if((false))
              break;
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
      }
     else
      {
       do
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             barrier();
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                return;
               continue;
              }
            }
           return;
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            {
             if(((false) && true))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              break;
             if((false))
              return;
             barrier();
            }
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if(((false || ((true && (false))))))
          barrier();
         if((false))
          barrier();
         do
          {
           if((false))
            continue;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((bool(bool(bool(bvec3((! (! (false))), true, true))))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         while(false);
         if((false))
          {
           if((false))
            break;
           if(true)
            {
             if((false))
              barrier();
             if((false))
              return;
             if((false))
              return;
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
        }
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          break;
         if((false))
          return;
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
        }
       while(false);
       if((((false) || false)))
        continue;
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((false))
            continue;
           if(false)
            {
             if((false))
              {
               do
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while((! (! (false))));
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if((false))
                  break;
                 return;
                }
               do
                {
                 barrier();
                 if(((! (! (((false) && true))))))
                  return;
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           while(((((injectionSwitch.x > injectionSwitch.y))) && true));
           if(true)
            {
             if((false))
              return;
            }
           else
            {
            }
          }
         if((false))
          break;
         barrier();
         if((false))
          break;
        }
       do
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
              }
             if(true)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if(((! (! (false)))))
                        barrier();
                       if((false))
                        continue;
                       barrier();
                      }
                     continue;
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   do
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(false);
                  }
                 else
                  {
                  }
                }
               if((false))
                continue;
               if((false))
                barrier();
               if(true)
                {
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = (0 + ((~ (~ (0))))); _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(false);
                       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                        barrier();
                       if((false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & (((1 << (int(5))) >> (int(5))) & 1)); _injected_loop_counter ++)
                    {
                     if((false))
                      break;
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                         if((false))
                          return;
                        }
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        break;
                      }
                     else
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                          barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            {
                             if((false))
                              continue;
                             continue;
                            }
                           if((false))
                            break;
                           do
                            {
                             do
                              {
                               if((false))
                                break;
                               return;
                               if((false))
                                return;
                              }
                             while(false);
                            }
                           while(false);
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(((false || (false))))
                              return;
                             barrier();
                            }
                          }
                         do
                          {
                           for(int _injected_loop_counter = (0 >> (((false ? (_injected_loop_counter) : int(6))))); _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             barrier();
                            }
                           if(((true && (false))))
                            barrier();
                          }
                         while(false);
                        }
                       if((false))
                        continue;
                       if(false)
                        {
                        }
                       else
                        {
                         do
                          {
                           do
                            {
                             return;
                            }
                           while((! (! (false))));
                           if((false))
                            {
                             if((false))
                              barrier();
                             return;
                            }
                          }
                         while(false);
                        }
                      }
                     if((false))
                      {
                       if((false))
                        break;
                       continue;
                      }
                    }
                   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 if((false))
                  return;
                }
               else
                {
                 if((false))
                  {
                   if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))
                    barrier();
                   if((false))
                    continue;
                   break;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if((false))
                {
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      break;
                     barrier();
                    }
                  }
                 continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((false))
                    return;
                   break;
                  }
                 do
                  {
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 while(false);
                }
              }
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(((true && (false))))
                return;
              }
            }
           while(false);
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((! (! (true))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               if((false))
                break;
               if((false))
                barrier();
               return;
              }
             barrier();
             if((false))
              barrier();
             if((false))
              break;
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          break;
        }
       if((false))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         return;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if(((bool(bvec2(false, true)))))
        break;
       if((false))
        barrier();
       if(((! (! (false)))))
        continue;
       if(((false || (false))))
        {
         if((((((false) || false)) && true)))
          break;
         barrier();
        }
       if((false))
        {
         if((false))
          break;
         barrier();
        }
       subgroupAll(true);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(true)
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((false) || false)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
         do
          {
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       do
        {
         if((false))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             continue;
            }
           if((((false) && true)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             return;
            }
           do
            {
             if((false))
              continue;
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(false);
           if((false))
            continue;
           if(false)
            {
             if((false))
              break;
            }
           else
            {
             return;
            }
          }
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
             if((false))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               if((false))
                break;
               return;
              }
             if((false))
              return;
            }
           if((false))
            break;
           if((false))
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
             break;
            }
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            continue;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((false) || false)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             continue;
            }
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  barrier();
                }
               continue;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
               if((false))
                barrier();
              }
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                {
                 if((false))
                  break;
                 barrier();
                }
               if((false))
                {
                 if((false))
                  continue;
                 barrier();
                 if((false))
                  {
                   if((false))
                    continue;
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  break;
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(false);
                }
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((! (! (false)))))
                    {
                     if((((! (! (bool(bvec2(false, true))))))))
                      barrier();
                     return;
                    }
                   if((false))
                    barrier();
                   break;
                  }
                 if((false))
                  continue;
                 barrier();
                 if((((false) && true)))
                  barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                 continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((false) && true)))
                  {
                   do
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       return;
                      }
                    }
                   while(false);
                   barrier();
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                }
              }
             if((false))
              return;
             if((false))
              {
               if((false))
                break;
               barrier();
               if((false))
                break;
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 do
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         break;
                        }
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(false);
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                return;
               if((false))
                barrier();
               if((false))
                continue;
               if((false))
                barrier();
               break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               barrier();
              }
             break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            break;
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              {
               if(((true && (false))))
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    break;
                   return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               return;
              }
             continue;
             if((false))
              break;
            }
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             continue;
            }
           if((false))
            break;
           if((false))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               break;
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   return;
                  }
                 if(false)
                  {
                   if((false))
                    break;
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     return;
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((false))
              barrier();
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 if((false))
                  barrier();
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               do
                {
                 do
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     break;
                    }
                   return;
                   if((((false) || false)))
                    {
                     if((false))
                      return;
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                       if(true)
                        {
                         if((false))
                          continue;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          return;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        {
                         if((false))
                          continue;
                         return;
                        }
                       if((false))
                        {
                         if((false))
                          break;
                         barrier();
                        }
                      }
                     else
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                         if((false))
                          break;
                        }
                      }
                    }
                   if((false))
                    barrier();
                  }
                 while((((! (! (false)))) && true));
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                break;
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if((false))
              return;
             if((false))
              {
               if(((bool(bool(false)))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    continue;
                  }
                 else
                  {
                   barrier();
                  }
                }
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                }
               else
                {
                }
              }
            }
           while(false);
           do
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false || (true)))
                {
                 barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    return;
                  }
                 else
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
            }
           while(false);
           if((false))
            continue;
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(true)
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           if((false))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      continue;
     if((false))
      continue;
     if((false))
      break;
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            break;
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           continue;
          }
         continue;
        }
       if((false))
        return;
       return;
       if((false))
        return;
      }
    }
   while(false);
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     return;
     if((false))
      barrier();
    }
   while((bool(bvec4(((false) && true), true, true, ((injectionSwitch.x > injectionSwitch.y))))));
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 do
  {
   if((((false) && true)))
    continue;
   if((false))
    continue;
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if(true)
              {
               if(((bool(bvec2((bool(bvec4(false, true, false, true))), true)))))
                barrier();
               barrier();
              }
             else
              {
              }
             if(((((false || (((injectionSwitch.x > injectionSwitch.y))))) || false)))
              {
               if((false))
                break;
               if(true)
                {
                 if((false))
                  break;
                 barrier();
                }
               else
                {
                }
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               break;
              }
            }
           if((false))
            {
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           break;
          }
         if((false))
          break;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((((false) && true)))
        barrier();
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if((false))
              return;
             return;
            }
          }
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                break;
               if((false))
                continue;
               if((false))
                barrier();
               if(true)
                {
                 if((false))
                  break;
                 if(((false) && true))
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     if((false))
                      continue;
                    }
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 if((false))
                  break;
                 if((false))
                  barrier();
                 barrier();
                }
               else
                {
                }
               if((false))
                break;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if((false))
              break;
             if(true)
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 if(((bool(bvec4(false, true, false, false)))))
                  {
                   do
                    {
                     return;
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
              }
             else
              {
               if((false))
                barrier();
              }
             if(((! (! (false)))))
              continue;
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(false)
          {
          }
         else
          {
           return;
          }
         do
          {
           if((false))
            continue;
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            continue;
          }
         while((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))));
         if((false))
          barrier();
         if((false))
          break;
        }
       if((false))
        {
         if((false))
          continue;
         if(((false || (false))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if((false))
        {
         if((false))
          break;
         continue;
        }
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            continue;
           if((false))
            {
             if((false))
              {
               if((false))
                return;
               continue;
              }
             break;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               continue;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            break;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               return;
              }
             break;
            }
          }
         if((false))
          break;
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
           if((false))
            barrier();
          }
         barrier();
        }
       if((false))
        break;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         do
          {
           if((false))
            return;
           if((false))
            barrier();
           return;
          }
         while((true && (false)));
        }
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(((false) || false));
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           if(false)
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               continue;
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
            }
           else
            {
             if((false))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(6))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(false);
         break;
        }
       if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(((bool(bvec4(false, false, false, false)))))
        break;
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        break;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((int((injectionSwitch.y)) << (int(1))) >> (((int(1)) + 0))); _injected_loop_counter ++)
              {
               barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if(((bool(bvec3(false, false, true)))))
                continue;
               if((false))
                break;
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         do
          {
           return;
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
           if((false))
            break;
          }
         if((false))
          continue;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        break;
       do
        {
         if((false))
          break;
         if((false))
          {
           for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
            {
             if((false || (false)))
              {
              }
             else
              {
               barrier();
              }
             if((false))
              break;
            }
          }
         if((false))
          break;
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         for(int _injected_loop_counter = ((1 << (((int(0)) - 0))) >> (int(0))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = (((1) - 0) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 >> (((int(4)) | (int(4))))); _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          barrier();
         continue;
         if((false))
          barrier();
        }
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           for(int _injected_loop_counter = ((1 << ((int(ivec4(int(0), (0 ^ 1), 1, int((injectionSwitch.y))))))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (~ (~ (1))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
          }
         while(false);
         if((false))
          {
           if(false)
            {
             if((false))
              return;
            }
           else
            {
             if((false))
              break;
             do
              {
               barrier();
              }
             while(false);
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((bool((bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false), true)))))))
            {
             if((false))
              break;
             continue;
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
          }
         if((((false) && true)))
          continue;
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((false))
          {
           if(((bool(bool(false)))))
            barrier();
           break;
          }
         barrier();
        }
       if((false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            continue;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              break;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       return;
                      }
                    }
                   if((false))
                    continue;
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 return;
                }
              }
             else
              {
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            break;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if((false))
          return;
        }
       while(false);
       if((false))
        return;
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
            }
           break;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if((false))
          return;
         if(((false) || false))
          {
          }
         else
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              continue;
             return;
             if((false))
              continue;
            }
          }
        }
      }
     if((false))
      break;
    }
   do
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   while(false);
  }
 while(false);
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
  }
 if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
  }
}
