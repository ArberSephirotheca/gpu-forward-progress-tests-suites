#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((((((injectionSwitch.x > injectionSwitch.y)))) || ((((false ? ((mat3x2(- 9.2, - 1033.2150, 9.9, 57.24, 8.4, 93.84) * vec3(- 1.7, 5985.2449, 28.32))) : ((injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if(((bool((bvec2(bvec3(bvec2(false, true), false)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
   if((((((false) && (! (! ((bool(bvec3(true, true, true)))))))) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((! ((((! (! (! (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > (mix(float(((injectionSwitch.y) + (injectionSwitch.x))), float((- 6.4)), bool(((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if((((true && ((true && ((! ((true && (! ((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && true)))))))))))))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((((false)) && ((injectionSwitch.x < injectionSwitch.y))) && true)))
    barrier();
   barrier();
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((! (! (false)))))
  barrier();
 if((false))
  {
   if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((((false)) || false))
      barrier();
     if((false || (((true && (false))))))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((true && ((false))))
  return;
 if((bool(bvec4(((((! (! ((((((! (! (false))))) || false)))))) || ((injectionSwitch.x > injectionSwitch.y))) || false), true, false, true))))
  {
   if((false))
    barrier();
   if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((((false) || false)))
    return;
  }
 uint num_workgroup = (~ (~ (gl_NumWorkGroups.x)));
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((false || (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))
  {
   if((true && ((bool(bvec3((((false)) && true), true, false))))))
    {
     if((false))
      barrier();
     if((((((bool(bvec3(bool(bvec4(((bool(bvec4((true && ((injectionSwitch.x > injectionSwitch.y))), true, false, true))) || false), true, false, false)), true, false))))))))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((true && (false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((((((((injectionSwitch.x < injectionSwitch.y)) && (false)) && ((injectionSwitch.x < injectionSwitch.y)))))) || false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((false) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   barrier();
  }
 if(((false || ((! (! ((! (((bool(bvec4(bool(bvec3((! (! (((! ((! (! (((bool(bvec4(bool(bool(bool((bvec3(bvec3(bvec3(((! (! (false)))), (! (! (true))), false))))))), false, true, (((((false ? (vec2(4.3, 11.47)) : (false ? (vec2(- 3.5, - 4.1)) : injectionSwitch)))).x < (max((max(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))))))))) && true)))), true, ((injectionSwitch.x > injectionSwitch.y)))), true, true, false)))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * ((true ? workgroup_id : ((subgroup_size))));
 if(((! (! ((false || (((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 uint virtual_gid = (~ (~ (workgroup_base + subgroup_id * subgroup_size))) + subgroup_local_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((uint(((((((((uvec4((min(((0u | (((min(1u, 1u))) ^ (0u >> (uint(8u))))) * (((true ? (subgroup_local_id + 1) % subgroup_size : ((min((uint(((uvec4(subgroup_local_id, 0u, 1u, 0u)) * uvec4(1u, 1u, 1u, 1u)))), subgroup_local_id))))))), (((((uint((uvec4(0u, 0u, 0u, 0u) + (uvec4(0u, 1u, 0u, 0u)))))) * ((1u << ((~ (~ (uint(1u)))))) >> (uint(1u)))) | 1u) * (((true ? (subgroup_local_id + 1) % subgroup_size : (subgroup_local_id))))))), 0u, (1u | 1u), 0u)) << uvec4(0u, 0u, 0u, (max(0u, 0u)))) | (uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u)))) >> ((uvec4(0u, 0u, 0u, 0u)) ^ uvec4(0u, 0u, 0u, 0u))))) | uvec4(0u, 0u, 0u, 0u)))));
 buf[virtual_gid] = 1;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((! (! ((false)))) && ((injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 (~ (~ (buf[next_virtual_gid] = 2)));
 if((false))
  barrier();
}
