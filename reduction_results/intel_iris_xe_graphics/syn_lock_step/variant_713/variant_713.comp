#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > ((min(float(mat4x2((min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, abs(0.0), 1.0, 1.0, 0.0, 0.0)), float(mat4x2((min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, abs(0.0), 1.0, 1.0, 0.0, 0.0)))))))))
  {
   if((true && ((false))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = (0u + (workgroup_size)) * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (! (((injectionSwitch.x > (float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, (injectionSwitch.y)))))))))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * (max(subgroup_size, subgroup_size)) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false || ((false))))
    barrier();
   barrier();
   if(((((injectionSwitch.x > injectionSwitch.y)) || ((bool(((bool(((injectionSwitch.x > injectionSwitch.y)))) || false)))))))
    barrier();
  }
 if((false))
  barrier();
 uint next_virtual_gid = (((min((((min((((0u | (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))) / ((1u << ((max(uint(1u), uint(1u))))) >> (uint(1u)))), ((true ? ((true ? ((true ? (uint(uvec3(workgroup_base + (min(subgroup_id * subgroup_size, (0u ^ (subgroup_id * subgroup_size)))), ((((0u)) << 0u) | (0u)), 0u))) : (subgroup_id))) : (workgroup_size))) : (workgroup_id))) + ((((((true ? subgroup_local_id : (workgroup_base))) + 1)) / 1u) % subgroup_size)))) << 0u), workgroup_base + subgroup_id * (((max(subgroup_size, subgroup_size))) - 0u) + ((((subgroup_local_id + 1) % subgroup_size) | (((max(0u, 0u))) | ((clamp(0u, ((0u) | (0u)), 0u))))))))) | 0u);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((false) && ((injectionSwitch.x < ((injectionSwitch) - log(exp(vec2(0.0, 0.0)))).y)))))
    barrier();
   if(((((bool(bvec4(false, false, true, ((((max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x < injectionSwitch.y)))))) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = 1;
 buf[next_virtual_gid] = 2;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))) || false)))
  barrier();
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if(((! (! ((((! (! (bool((bvec3(bvec4(bvec3((true && (((! (! (! ((! (! (! ((false || (((true && ((bool(bool((false || (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))), true, false), ((injectionSwitch.x > injectionSwitch.y))))))))))))))))
    barrier();
   if(((((bool(bvec2(((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)))), false))) || false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
}
