#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 while(false);
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false))))
    {
     if((false))
      return;
    }
   else
    {
     do
      {
       if(((true) || false))
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if(false)
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                   if(true)
                    {
                     do
                      {
                       if(((false || ((false || (false))))))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                          {
                           if((false))
                            break;
                           return;
                           if((false))
                            {
                             if((false))
                              continue;
                             break;
                            }
                          }
                         if((false))
                          continue;
                        }
                      }
                     while(false);
                    }
                   else
                    {
                    }
                  }
                 return;
                 if((false))
                  return;
                 if((false))
                  return;
                 if((((injectionSwitch.x > (mix(float(((injectionSwitch) * mat2(1.0)).y), float(((min(- 2.7, - 2.7)))), bool(false)))))))
                  return;
                }
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != (int(((1.0 * (injectionSwitch.x)))) ^ 1); _injected_loop_counter ++)
            {
             if((((((((((injectionSwitch.x > injectionSwitch.y) && true) && ((true) && true)))) && (true && (true)))))))
              {
               if((false))
                continue;
               break;
              }
             if((false))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(true)
                {
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                 if((false))
                  continue;
                }
               else
                {
                 if((false))
                  break;
                }
              }
             return;
            }
          }
         if((((((injectionSwitch.x > ((injectionSwitch.y) / sqrt(1.0))) || false)))))
          {
           if((false))
            break;
           continue;
          }
        }
       else
        {
        }
      }
     while(((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))) && true));
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      return;
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       do
        {
         do
          {
           if((((((injectionSwitch.x < injectionSwitch.y)) && (false || (((((bool(bvec4(true, true, true, true))) && ((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))) || (false || (((injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if((false))
              break;
             for(int _injected_loop_counter = 0; _injected_loop_counter < (~ (~ (((false ? (_injected_loop_counter) : 1))))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((((! ((! (! (! ((bool(bvec3((! ((bool(bvec4(! ((! (! (false)))), false, true, false))))), false, false))))))))))) && ((injectionSwitch.x < injectionSwitch.y))) || false))
                {
                 if((false))
                  continue;
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     if((false))
                      break;
                     continue;
                    }
                   if(true)
                    {
                     if(((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), false)))))
                      return;
                     if(false)
                      {
                      }
                     else
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           break;
                          }
                         if((false))
                          return;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          break;
                         break;
                        }
                       if((false))
                        return;
                       if((false))
                        return;
                       if(((false || (((((injectionSwitch.x > injectionSwitch.y)) && true))))))
                        {
                         if((false))
                          return;
                         if((false))
                          return;
                         if((false))
                          return;
                         for(int _injected_loop_counter = (1 & (0 | 1)); _injected_loop_counter != ((clamp((max(0 ^ ((min(((false ? (- 37466) : 0)), 0)) ^ 0), 0 ^ ((min(((false ? (- 37466) : 0)), 0)) ^ 0))), 0 ^ ((min(((false ? (- 37466) : 0)), 0)) ^ 0), (~ (~ ((0 ^ (0 ^ ((min(((false ? (- 37466) : 0)), 0)) ^ 0))))))))); _injected_loop_counter --)
                          {
                           if((false))
                            return;
                          }
                         for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter != 1))); _injected_loop_counter ++)
                          {
                           return;
                           if((false))
                            return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         if((false))
                          return;
                        }
                      }
                     if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
                      {
                       if((false))
                        continue;
                       break;
                      }
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  continue;
                }
               else
                {
                 if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 1.9), (- 5.6)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))).y))))
                  return;
                 if((false))
                  continue;
                 do
                  {
                   if((! ((! (! ((bool(bvec2(! (true), false)))))))))
                    {
                     if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
                      continue;
                     if((false))
                      {
                       if((false))
                        continue;
                       if((false))
                        return;
                       return;
                       if((false))
                        break;
                      }
                    }
                   else
                    {
                    }
                  }
                 while(false);
                 if((((bool(bvec2(((injectionSwitch.x < injectionSwitch.y)), false))) && ((! (! (! (! ((bool(bvec2(((((bool((true && (bool(((((((! ((! (! (! (true && (((((false)) && true) && true))))))))) || false))) && true))))))) || false)), false))))))))))))
                  {
                   if((! (! ((bool(bvec2(false, true)))))))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if((false))
                        continue;
                       if((((injectionSwitch.x > ((true ? ((injectionSwitch.y) - 0.0) : (- 650.782)))))))
                        {
                         do
                          {
                           return;
                          }
                         while((true && (false)));
                        }
                       continue;
                      }
                    }
                   else
                    {
                     return;
                     if(((((true && (false)) && true))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       continue;
                      }
                    }
                  }
                }
              }
             if((false))
              {
               if((false))
                return;
               if((((false) || false)))
                continue;
               continue;
              }
             if((false))
              break;
            }
          }
         while(false);
        }
       while(((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)))));
       if((false))
        break;
       if((false || ((bool(bvec2((false), false))))))
        break;
       if((false))
        {
         if((false))
          return;
         if((false))
          break;
         continue;
        }
      }
    }
   if((false))
    return;
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     else
      {
      }
    }
  }
 while(false);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(true)
  {
   if(((! (! ((bool(bvec2(false, false))))))))
    return;
   if((false))
    return;
   for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != (- 88999 & int((injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((true && ((false))))
        return;
       if((((bool((bvec2(bvec3(bvec2((((((! (! ((bool(((bool(((injectionSwitch.x < injectionSwitch.y)))) && true)))))))) && (bool(bvec3(true, true, false)))) || false), false), false)))))) && true))
        {
         if(((false) && true))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((! (! (false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = int((((mix(vec2((mat2(1.0) * (injectionSwitch))[0], (48.22)), vec2((- 6548.6149), (mat2(1.0) * (injectionSwitch))[1]), bvec2(false, true)))).y)); _injected_loop_counter != int(((max(injectionSwitch, (max(injectionSwitch, injectionSwitch)))).x)); _injected_loop_counter --)
                {
                 do
                  {
                   if(false)
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                     if((bool(bvec4((((max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false, false, ((injectionSwitch.x > injectionSwitch.y))))))
                      {
                       if(((! (! (false)))))
                        continue;
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            {
                             if((false))
                              break;
                             return;
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                           return;
                          }
                        }
                       while(false);
                       if(((bool(bool(false)))))
                        {
                         if((false))
                          return;
                         continue;
                        }
                       if((((((((false ? (9.1) : injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
                        continue;
                       if(((bool(bvec4(false, true, true, true)))))
                        continue;
                      }
                     else
                      {
                      }
                    }
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   continue;
                  }
                }
              }
             while(false);
             if((false))
              continue;
             if((false))
              break;
            }
          }
         if(((bool((bvec2(bvec3(bvec2(false, true), true)))))))
          return;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            break;
           if((! (! (((((((true && ((false || (((false ? (9.3) : injectionSwitch.x)) > injectionSwitch.y)))))))) || false)))))
            {
             if((false))
              continue;
             return;
            }
           if((false))
            return;
          }
         else
          {
          }
         if(((false || (false))))
          continue;
         if((false))
          {
           if((false))
            continue;
           if((false))
            return;
           if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              continue;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if((false))
          continue;
         if((false))
          {
           if(((false || ((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))))))))
            continue;
           if((false))
            {
             if((false))
              return;
             if((((injectionSwitch.x > (max(injectionSwitch.y, (clamp((min((float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, (max(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), (max((float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, (max(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), (float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, (max(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))), injectionSwitch.y, injectionSwitch.y))))))))
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              return;
             if(((((! (! ((! (! (! (! (bool(bool(((((injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))))))))))))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
             if((false))
              return;
             if((false))
              break;
            }
           if((false))
            return;
           if(((! (! (false)))))
            break;
           if(false)
            {
             if((((true && (bool(bool(((bool(bool(bool(bvec2(false, true)))))))))))))
              {
               if((false))
                return;
               if((false))
                continue;
               if((false))
                continue;
               if((false))
                return;
               continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 continue;
                }
              }
             if((false))
              {
               if(((((injectionSwitch.x > injectionSwitch.y))) || false))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
             if((false))
              break;
             if((false))
              continue;
             if((false))
              break;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              {
               if((false))
                return;
               continue;
               if((false))
                return;
              }
             if((((injectionSwitch.x > (float(((mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, sqrt(1.0), round(length(normalize(1.0))), 0.0, 1.0, 1.0, 0.0, round(((injectionSwitch.y) * (length(normalize((vec3(1.0, 1.0, 1.0) * (((vec3(1.0, 1.0, 1.0)) - tan(vec3(0.0, 0.0, 0.0)))))))))), 0.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))
              {
               if((false))
                return;
               if(((((clamp(injectionSwitch.x, ((injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
                continue;
               break;
               if((false))
                return;
              }
             if((false))
              {
               if((false))
                break;
               if(((true && (false))))
                continue;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   if((false))
                    break;
                   if(false)
                    {
                     if((false))
                      break;
                     if((false))
                      return;
                     if(true)
                      {
                       if((false))
                        return;
                       if((false))
                        break;
                       if((false))
                        {
                         if((false))
                          {
                           if(((((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))) || false)))
                            {
                             if((false))
                              return;
                             break;
                            }
                           continue;
                          }
                         if((false))
                          continue;
                         return;
                        }
                       if((false))
                        return;
                      }
                     else
                      {
                      }
                     if(((bool(bvec4(false, false, false, true)))))
                      return;
                     if((false))
                      break;
                     if((false))
                      return;
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               while(false);
               if((false))
                continue;
               if(((! (((bool(bvec2((((((! (((((injectionSwitch.x) + 0.0) > injectionSwitch.y)))) && true))) || false), true)))) && ((injectionSwitch.x < injectionSwitch.y))))))
                continue;
               for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(((! (! (false)))))
                  return;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             if((false))
              {
               if(((((float(mat3(((injectionSwitch.x) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), round(length(normalize(round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0))) > injectionSwitch.y))))
                break;
               do
                {
                 for(int _injected_loop_counter = 1; ((_injected_loop_counter > 0) && true); _injected_loop_counter --)
                  {
                   if((false))
                    return;
                  }
                }
               while(false);
               if((((((false) && true)) || false)))
                {
                 if(((((true && (((injectionSwitch.x > injectionSwitch.y) && true)))))))
                  return;
                 if((((injectionSwitch.x > (((true ? (injectionSwitch) : (fma(vec2(4969.2980, - 692.262), vec2(- 8.6, 2593.0918), vec2(- 833.182, - 4549.9749))))) * mat2(1.0)).y))))
                  {
                   if((false))
                    break;
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   do
                    {
                     if((false))
                      continue;
                     if((false))
                      return;
                     if(((injectionSwitch.x > (((mix(float(injectionSwitch.y), float((2.4)), bool(false)))) * 1.0))))
                      {
                      }
                     else
                      {
                       return;
                      }
                     if(((false || (false))))
                      return;
                    }
                   while(false);
                  }
                 continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    break;
                   break;
                  }
                 continue;
                }
               continue;
               if((false))
                continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(false)
              {
              }
             else
              {
               if((false))
                return;
               if(false)
                {
                 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                }
               else
                {
                 if((((injectionSwitch.x > ((true ? (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : (- 8540.6958)))))))
                  return;
                }
              }
             if((false))
              continue;
             if((false))
              {
               if((false))
                continue;
               return;
              }
             do
              {
               if((false))
                return;
               if((! (((! (false)) && true))))
                {
                 if((false))
                  continue;
                }
               else
                {
                 return;
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if((false))
                  break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
               if((false))
                continue;
              }
             while(false);
             if((false))
              {
               if(((true && ((bool(bool(false)))))))
                return;
               continue;
              }
             if((false))
              break;
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if((false))
              {
               if((((((true ? injectionSwitch.x : (clamp(- 3115.1526, - 493.356, - 157.968)))) > injectionSwitch.y))))
                break;
               if((true && ((false))))
                break;
               break;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(false)
                  {
                   if(((false || (((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
                    continue;
                  }
                 else
                  {
                   if((! (! ((((mix(vec2((3545.6535), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 9.1)), bvec2(true, false))).x < injectionSwitch.y))))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if((false))
                continue;
              }
             if((false || (true)))
              {
               if((false))
                {
                 if((false))
                  continue;
                 break;
                }
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                   if((false))
                    return;
                   if((false))
                    return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 if(true)
                  {
                   if((! (! (true && (((((injectionSwitch.x > injectionSwitch.y)))))))))
                    return;
                   return;
                   if((false))
                    {
                     if((false))
                      return;
                     continue;
                    }
                  }
                 else
                  {
                  }
                }
               if((false))
                return;
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(true)
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        return;
                      }
                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((false))
                        return;
                       return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                   if((false))
                    continue;
                  }
                 else
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     continue;
                    }
                  }
                }
               if((false))
                return;
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               if((false))
                break;
               continue;
              }
            }
          }
         if((false))
          break;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              break;
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             do
              {
               return;
               if((false))
                break;
              }
             while((((bool(bvec3(false, true, false)))) && true));
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(((bool(bvec2((false || (false)), ((injectionSwitch.x < injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (((int(1)) + 0))) >> (((int(1)) >> 0))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if((false))
            {
             if(true)
              {
               return;
               if((false))
                break;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 continue;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if((false))
    return;
   do
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      continue;
     if(((false || (bool(bvec3(((true && (false))), ((injectionSwitch.x < injectionSwitch.y)), true))))))
      {
       if((false))
        return;
       if(true)
        {
         if((false))
          continue;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if((false))
              break;
             if((false))
              return;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false || (true)))
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
          }
         if((false))
          break;
        }
       else
        {
         if((false))
          break;
         if((false))
          return;
        }
       if((false))
        break;
       if((false))
        continue;
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       if((bool(bvec4((false || ((false))), false, false, (bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), false, true)))))))
        {
         if((true && (true)))
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        return;
       if((false))
        return;
      }
     else
      {
      }
    }
   if(((true && (false))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((bool(bvec4((false), true, false, true))))
  {
   if((false))
    return;
   do
    {
     return;
    }
   while(false);
  }
 do
  {
   if((false))
    break;
   if((false))
    break;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((false) && true)))
      break;
     return;
    }
   if((false))
    continue;
  }
 while(false);
 if((false))
  {
   if((bool(bvec4(false, true, false, true))))
    {
    }
   else
    {
     if(((! ((! (! (! ((! (! (false)))))))))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > (((0 & - 88709)) | ((min((((true ? (int(int(0 & - 88709))) : ((false ? _injected_loop_counter : atomicXor(_injected_loop_counter, _injected_loop_counter)))))), (0 & - 88709))))); _injected_loop_counter --)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      break;
     do
      {
       if((false || ((false))))
        {
         if((((false) && true)))
          return;
         return;
        }
       if((false))
        {
         do
          {
           do
            {
             if((! (((! (false)) && true))))
              {
               if((false))
                break;
               if((false))
                continue;
              }
             else
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 return;
                }
               if((false))
                return;
              }
             if((false))
              break;
            }
           while(false);
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if(true)
            {
             if((false))
              return;
             return;
             if((false))
              {
               do
                {
                 if((false))
                  return;
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if(true)
              {
               if((false))
                return;
              }
             else
              {
               if(((! (! (false)))))
                break;
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((false))
      break;
     if((false))
      return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = (clamp(gl_WorkGroupSize, gl_WorkGroupSize, (min(gl_WorkGroupSize, ((gl_WorkGroupSize) + uvec3(0u, 0u, 0u)))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
     for(int _injected_loop_counter = ((0) | (0)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((! (! (false))))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint workgroup_base = (clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id;
 uint virtual_gid = (uint(uvec4(((workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), (0u | 1u), 1u, 0u))) + subgroup_local_id;
 if(((! ((! (((! (! (bool(bool((false)))))) && true)))))))
  {
   for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != ((0 >> (((int(6))) | ((int(6))))) | (0 + (0))); _injected_loop_counter --)
    {
     if((false))
      continue;
     if((false))
      break;
     return;
    }
   if((false))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if((false))
    {
     if((false))
      return;
     if(false)
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
      }
     else
      {
       return;
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (~ (~ (((1 << (int(6))) >> (int(6)))))); _injected_loop_counter ++)
          {
           return;
          }
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
   if((! (! (true))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        continue;
       if((false))
        continue;
       if((false))
        {
         do
          {
           return;
           if((false))
            continue;
          }
         while(((injectionSwitch.x > (((false ? (7.4) : float(mat3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0))))))));
        }
      }
    }
   else
    {
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 if(((bool(bvec3(false, false, true)))))
  return;
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if((false || ((false))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(false)
        {
        }
       else
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       return;
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if((false))
          return;
         return;
        }
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.x)); ((true && (! (! (((_injected_loop_counter != int((injectionSwitch.y))) && true)))))); ((_injected_loop_counter ++) ^ 0))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        continue;
       break;
      }
     if((false))
      break;
     do
      {
       if((false))
        break;
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 uint next_virtual_gid = (((1u << (uint(3u))) >> (uint(3u))) * ((((0u + (uint(uvec4((workgroup_base + ((((true ? subgroup_id : (workgroup_size)))) | (subgroup_id)) * subgroup_size), 0u, 0u, uint((injectionSwitch.y)))))) + (((max((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)) << 0u)));
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(false)
      {
       if(true)
        {
         if((false))
          {
           if((bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), true, true))))
            {
             if((false))
              return;
            }
           else
            {
            }
           if((false))
            return;
           if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if((false))
          continue;
        }
       else
        {
         if((false))
          continue;
        }
       if((false))
        break;
       do
        {
         if((false))
          {
           if((false))
            break;
           if((false))
            break;
           continue;
           if((false))
            break;
          }
         if((false))
          break;
         if((false))
          {
           if((false))
            continue;
           break;
           if((false))
            return;
          }
         if((false))
          break;
         if((false))
          continue;
         if((false || ((false))))
          {
           if((false))
            continue;
           if((! (((((! (false)) || ((false) && true)))) && true)))
            {
            }
           else
            {
             if((false))
              break;
             if((false))
              {
               if((false))
                return;
               return;
              }
             return;
             if(((bool(bool((! (! (false))))))))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
            }
          }
        }
       while(false);
       if((false))
        return;
      }
     else
      {
       if(((((! (((false || ((! (false || ((! (! (((true && (true)))))))))))) || false))) || false) && ((bool(bvec2((! ((bool(bool(! (false)))))), false))))))
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          continue;
         if(((((((injectionSwitch.x > injectionSwitch.y)))) || false) && true))
          {
           if(((! (! ((false || (false)))))))
            break;
           if((false))
            {
             if((false))
              break;
             return;
            }
          }
         else
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               break;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
            }
           else
            {
             do
              {
               if((false))
                continue;
               do
                {
                 if(((bool(bvec4(false, true, true, true)))))
                  continue;
                 if((false))
                  continue;
                 if((false))
                  break;
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 buf[virtual_gid] = 1;
                 if((false))
                  continue;
                 do
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        return;
                      }
                     if((false))
                      return;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while((! (! (false))));
                }
               while(false);
              }
             while(false);
             if((false))
              {
               if((false))
                break;
               break;
              }
            }
           if((false))
            {
             if((false))
              return;
             return;
            }
           if((false))
            break;
           if(true)
            {
             if((! (! (((((bool(bool(false))) && true)))))))
              return;
            }
           else
            {
             if((false))
              break;
            }
          }
         if(((((min(injectionSwitch.x, (float(mat2(injectionSwitch.x, (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0))))) > injectionSwitch.y))))
          {
           if((((! (! ((false || (bool(bvec4((bool((bvec2(bvec2(bvec2(false, true)))))), false, false, true))))))))))
            {
             if((((((true ? injectionSwitch.x : (- 1.8))) > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
              break;
             if(false)
              {
              }
             else
              {
               return;
              }
             if((false))
              return;
             for(int _injected_loop_counter = int((injectionSwitch.y)); ((_injected_loop_counter != 0) && true); _injected_loop_counter --)
              {
               if((((false) && true)))
                return;
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((! (! (true))))
            {
             do
              {
               do
                {
                 if((false))
                  return;
                 if((false))
                  return;
                 return;
                 if(((((bool((bool(bvec2(bool(injectionSwitch.x > (min(injectionSwitch.y, (((((max(injectionSwitch.y, (0.0 + (injectionSwitch.y))))) / 1.0) / 1.0))))), true))))))) || (((bool((bvec2(bvec2((bvec2(bvec2(bvec2((! (! ((((! (! (((bool(bvec2(((clamp(injectionSwitch.x, injectionSwitch.x, ((true ? injectionSwitch.x : (- 94.14))))) > injectionSwitch.y), true)))))))) || false)))), false)))))))))))))
                  break;
                 if(((! (! (false)))))
                  return;
                 if((false))
                  {
                   if(true)
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                   if(((bool(bvec2(false, true)))))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                     for(int _injected_loop_counter = ((clamp(1 | 0, (0 + (1 | 0)), 1 | 0))); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if((false))
                        break;
                       return;
                      }
                    }
                   continue;
                  }
                 if((false))
                  return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(false);
             if((false))
              continue;
             if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, ((injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               do
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   return;
                  }
                 return;
                }
               while(false);
              }
            }
           else
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > ((1 * (((true ? (((0 ^ 0) >> (int(2))) << 0) : (- 37329)))))); _injected_loop_counter --)
              {
               if((false))
                {
                 if(((! (! (false)))))
                  continue;
                 return;
                }
              }
             if((false))
              return;
            }
           for(int _injected_loop_counter = (0 & 30332); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if(false)
              {
              }
             else
              {
               if((false))
                break;
               if((false))
                {
                 if((false))
                  return;
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(((bool(bvec2(false, false)))))
            return;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((false || (! ((bool(bvec2(! (((false))), true))))))) && true))
              {
               if((bool(bvec4(true, true, true, ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    return;
                   if(true)
                    {
                     if((false))
                      return;
                     if((false))
                      {
                       if((false))
                        return;
                       break;
                      }
                    }
                   else
                    {
                     if((false))
                      {
                       if((false))
                        break;
                       break;
                      }
                     if((false))
                      return;
                    }
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   do
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          break;
                         if(false)
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(false);
                   if((false))
                    break;
                   if((false))
                    break;
                   for(int _injected_loop_counter = ((int((injectionSwitch.y))) | 0); _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     return;
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(((false || (false))))
                      {
                       if(true)
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     do
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          return;
                         if((false))
                          break;
                        }
                       else
                        {
                        }
                      }
                     while(false);
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    break;
                   break;
                  }
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      continue;
                     return;
                    }
                   break;
                  }
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           else
            {
             do
              {
               if((false))
                return;
              }
             while(((bool(bool((injectionSwitch.x > injectionSwitch.y))))));
             if((false))
              continue;
             if((false))
              continue;
             if((((((injectionSwitch) - vec2((injectionSwitch.x), (injectionSwitch.x))).x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   if((false))
                    return;
                   if((false))
                    {
                     do
                      {
                       if((false))
                        return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                    {
                     return;
                    }
                   if((false))
                    continue;
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(((false || ((! (! (((((injectionSwitch.x > injectionSwitch.y)) || ((false))) && true))))))))
                {
                 if((false))
                  continue;
                 return;
                }
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if((false))
                      continue;
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(8))); _injected_loop_counter --)
                      {
                       return;
                      }
                     if((false))
                      continue;
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                 if((false))
                  break;
                }
               if(false)
                {
                 if((false))
                  return;
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((false))
                      return;
                     return;
                     if((false))
                      break;
                    }
                  }
                 while(false);
                }
               if((false))
                {
                 if((false))
                  continue;
                 break;
                }
              }
            }
          }
        }
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          continue;
         if((false))
          return;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if((false))
    break;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ ((1 << (int(0))) >> (((int(0))) + ((0 | 0) >> (int(4)))))); _injected_loop_counter --)
  {
   if((bool((false || ((bool(bool(bool((((clamp(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)))))))))))
    {
     buf[next_virtual_gid] = 2;
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       continue;
      }
    }
  }
}
