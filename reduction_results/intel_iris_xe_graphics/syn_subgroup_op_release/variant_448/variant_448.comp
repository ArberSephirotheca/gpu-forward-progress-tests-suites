#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if(((false) && true))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << (((int(6)) / 1))) >> (int(6))); _injected_loop_counter ++)
  {
   do
    {
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
      }
     while(false);
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID.x) >> 0u);
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
             do
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(false);
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if((false))
            barrier();
           if((false))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
       if((((false) || false)))
        barrier();
      }
    }
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((bool(bvec2(false, false))))
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if(((bool(bvec4(false, true, true, true)))))
          barrier();
        }
      }
    }
   while(false);
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if(((! (! (false)))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec3(false, true, true)))))
    barrier();
   for(int _injected_loop_counter = (~ (~ ((0 << (int(4)))))); _injected_loop_counter != ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
    {
     buf[virtual_gid] = 1;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter < ((1 << (int(0))) >> (((int(0)) >> 0))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              {
               do
                {
                 barrier();
                 if((((! (! (bool(bvec2((bool(bvec4(false, true, false, false))), true))))))))
                  barrier();
                }
               while(false);
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(((bool(bvec3(false, false, true)))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         if((((false) && true)))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((false) || ((injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if(false)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           do
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 if((false))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                }
              }
             if((false))
              barrier();
             do
              {
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
           while(false);
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1) << 0); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(((false || (((false) && true)))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if(false)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            barrier();
          }
         barrier();
         if((false))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = ((0 >> (int(3))) << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (max(((4) | (4)), 4)));
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(((! (! (false)))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(false);
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         if(true)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               if(((true && (false))))
                barrier();
               barrier();
              }
            }
           if((true && (true)))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     do
                      {
                       if((false))
                        {
                         if(false)
                          {
                           if((false))
                            barrier();
                           if((false))
                            barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                        }
                      }
                     while(false);
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                             barrier();
                            }
                           if((false))
                            barrier();
                           for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
                            {
                             if((false))
                              barrier();
                             if((false))
                              barrier();
                             barrier();
                            }
                           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                            {
                             if((false))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                             if((false))
                              barrier();
                             if((false))
                              barrier();
                            }
                          }
                         do
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         while(false);
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              barrier();
                             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                              {
                               if((false))
                                barrier();
                               barrier();
                               if((false))
                                barrier();
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                       while(false);
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     do
                      {
                       if(false)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           if((false))
                            barrier();
                           barrier();
                          }
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          {
                           if((! (! (false))))
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             do
                              {
                               if((false))
                                barrier();
                               if(true)
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 do
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                 while(((injectionSwitch.x > injectionSwitch.y)));
                                 if((false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if(true)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       if(((true && (false))))
                        barrier();
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                     if((false))
                      barrier();
                     if(true)
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(0))); _injected_loop_counter --)
                        {
                         if((false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     if(true)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             while(false);
            }
           else
            {
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((false) || ((injectionSwitch.x > injectionSwitch.y))));
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       else
        {
        }
       if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))
        barrier();
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         do
          {
           if((false))
            {
             if((false))
              barrier();
             do
              {
               barrier();
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((((false) || false)))
                    barrier();
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       if((((false) || false)))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
               if((((false) || false)))
                barrier();
              }
            }
          }
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             barrier();
             if((false))
              {
               if(((bool(bvec3(false, false, true)))))
                barrier();
               barrier();
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                barrier();
               if(((bool(bvec4(false, true, false, true)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         do
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if(((bool(bvec2((! (! (false))), true)))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                         if((false))
                          barrier();
                        }
                       barrier();
                       if((false))
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     while(false);
                     if((false))
                      barrier();
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  {
                   if(false)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
             while((! (! (false))));
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if(((bool(bvec2((bool(bvec2(false, true))), false)))))
                barrier();
               if((false))
                barrier();
              }
             while(false);
            }
           if((false))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((true && (false))))
          {
           if(false)
            {
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))
          barrier();
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 barrier();
                }
               if(((false || (false))))
                barrier();
              }
            }
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         barrier();
         if(((bool((bool(bool(bool(false))))))))
          barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(((! (! (false)))))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if(true)
            {
             if((false))
              barrier();
             if((false))
              {
               do
                {
                 if(true)
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         if((false))
                          {
                           if((false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(false);
                          }
                         do
                          {
                           if((false))
                            barrier();
                           do
                            {
                             if(((injectionSwitch.x < injectionSwitch.y)))
                              {
                               if((false))
                                {
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 barrier();
                                }
                               if(((bool(bvec3(false, false, true)))))
                                barrier();
                               if((false))
                                barrier();
                              }
                             else
                              {
                               if((false))
                                barrier();
                              }
                            }
                           while(false);
                           barrier();
                           if((false))
                            barrier();
                           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(false);
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(false);
                       if((false))
                        barrier();
                      }
                    }
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               while((((bool(bool(false)))) || false));
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if(true)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
             if(((false) || false))
              {
              }
             else
              {
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ (1 & 1)); _injected_loop_counter --)
                  {
                   subgroupAll(true);
                  }
                }
              }
            }
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(false)
          {
          }
         else
          {
           if(false)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              {
               for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if(((((injectionSwitch.x > injectionSwitch.y)) || ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(((false || (false))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         do
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 << ((~ (~ (int(4)))))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                    }
                   if(((! (! (false)))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             else
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < ((1 << (int(3))) >> (((int(3)) << 0))); _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while((! ((! (! (! (false)))))));
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((false || (false))))
            barrier();
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((false) && true)))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((int(ivec2(int(6), 1))))) >> (int(6))); _injected_loop_counter ++)
        {
         if(((false || (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           if(false)
            {
            }
           else
            {
             do
              {
               if((false))
                barrier();
               do
                {
                 do
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     if(((bool(bool(false)))))
                      barrier();
                     for(int _injected_loop_counter = ((0 >> (int(3))) >> ((0 ^ (int(5))))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               while(false);
               barrier();
               if((false))
                barrier();
              }
             while(false);
            }
          }
         while(false);
        }
      }
     if((false))
      barrier();
    }
   if(((bool(bvec4((! (! (((injectionSwitch.x > injectionSwitch.y))))), false, false, false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
