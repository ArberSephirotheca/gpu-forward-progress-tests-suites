#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((min(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)))) > ((min(clamp(((true ? injectionSwitch : (vec2(187.220, 910.557)))), injectionSwitch, injectionSwitch), clamp(((true ? injectionSwitch : (vec2(187.220, 910.557)))), injectionSwitch, injectionSwitch)))).y))))
  barrier();
 if((false))
  barrier();
 if(((! (((((! (false || ((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, ((injectionSwitch) * mat2(1.0)).y)))))))) && true)) || false)))))
  {
   if((((injectionSwitch.x > (float(mat4(injectionSwitch.y, abs(0.0), 1.0, 1.0, 0.0, 0.0, (dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)))))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false) || false)))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (~ ((0u >> (((uint(6u)) + (max(((0u) | 0u), 0u))))) + ((~ (((true ? (min(gl_WorkGroupID, (((clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))) | (min((gl_WorkGroupID), (gl_WorkGroupID)))))).x : (max((uint(uint(subgroup_size))), subgroup_id)))))))));
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * ((min(((~ (~ (workgroup_id))) / 1u), ~ (~ (workgroup_id)))));
 uint virtual_gid = workgroup_base + (min(subgroup_id, (clamp(subgroup_id, subgroup_id, subgroup_id)))) * (((clamp((0u | (clamp((~ (~ ((subgroup_size) | 0u))), (1u * ((subgroup_size) | 0u)), (subgroup_size) | 0u))), clamp((~ (~ ((subgroup_size) | 0u))), (1u * ((subgroup_size) | 0u)), (subgroup_size) | 0u), clamp((~ (~ ((subgroup_size) | 0u))), (1u * ((subgroup_size) | 0u)), (subgroup_size) | 0u))))) + subgroup_local_id;
 uint next_virtual_gid = (max((((((0u | (0u)) + (((((~ (((~ (workgroup_base)) >> 0u))) + subgroup_id * subgroup_size) - 0u))))) | 0u) | 0u), (((((0u | (0u)) + (((((~ (((~ (workgroup_base)) >> 0u))) + subgroup_id * subgroup_size) - 0u))))) | 0u) | 0u))) + (((((uint((max((mix((mix(float(float((float(false)))), float((- 3.8)), bool(false))), float(((((((mix(float((- 0.9)), float(((injectionSwitch.x)) - 0.0), bool(true))))) * 1.0)) * 1.0)), bool(true))), (injectionSwitch.x)))) | ((((min((((uint(uint(subgroup_local_id + 1))) - 0u)), (((uint(uint(subgroup_local_id + 1))) - 0u))))) | 0u)))) % subgroup_size)) - 0u);
 ((buf[virtual_gid] = 1) / 1u);
 if(((bool(bvec4(bool((false || (((bool((((injectionSwitch.x > injectionSwitch.y))))) && true)))), true, false, false)))))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    {
     if((false))
      barrier();
     if(((! (((injectionSwitch.x > injectionSwitch.y)) || ((((! (false)) && true)))))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], ((uint(2)) << 0u), 4, 64, 4);
   if((((((((injectionSwitch.x > injectionSwitch.y) || false)) && true)))))
    barrier();
   subgroupAll((((false || (bool(((bvec3(bvec4(bvec3(bvec3(bvec3((bool(bvec3(false, true, false))), true, true))), false)))))))) || (false || ((bool(bvec2((false), true)))))));
   if((false))
    barrier();
   if((((((true ? (mix(float(injectionSwitch.x), float(((- - 6982.9837))), bool(false))) : (- 2914.5081))) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((((((bool(bvec4((((injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(false, true, true)))), false, true, false)))))) && true))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   atomicStore(buf[((next_virtual_gid) | (next_virtual_gid))], uint(2), (((max(((true ? (min(4, 4)) : (96598))), ((true ? (min(4, 4)) : (96598)))))) | (((max((max(int(ivec4((0 | (~ (~ ((min((4), (4))))))), 1, 1, (clamp(0, (0 | (0)), 0)))), int(ivec4((0 | (4)), 1, 1, 0)))), int(ivec4(((~ (~ (0 | (max((max((4), (((0 ^ ((4))) ^ 0)))), (((clamp((min((((4)) - 0), (((4)) - 0))), (min((min((((4)) - 0), (((4)) - 0))), (min((((4)) - 0), (((4)) - 0))))), (min((((4)) - 0), (((4)) - 0)))))) - (0 << (int(5)))))))))), 1, 1, (max((1 * (((0)) | 0)), 0))))))))), (min(64, ((((64) | (64))) - 0))), 4);
   subgroupAll(true);
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
}
