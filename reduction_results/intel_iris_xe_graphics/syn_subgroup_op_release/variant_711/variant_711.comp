#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((true && ((bool((bvec2(bvec4(bvec2(((((true && (((false)))) || false)) || false), false), false, false))))))))
    {
     if((false))
      barrier();
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if(((bool(bvec4((false || (false)), false, false, true)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (((((false ? (10573) : (min(0 << (((max((0 | (max((0 | (((int(8)) >> 0))), int(8)))), max(((int(8)) >> 0), int(8)))))), 0 << ((max(((int(8)) >> 0), int(8))))))))) - 0)); (! (! (_injected_loop_counter < ((int(int((1 << ((0 ^ (int(4)))))))) >> (int(4)))))); _injected_loop_counter ++)
    {
     if((((! (! (false)))) || false))
      {
      }
     else
      {
       if((! (! (false))))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((((false) && true)))
          {
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
             barrier();
            }
           while(false);
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if(true)
            {
             if((false))
              barrier();
             if(((false || (true && ((false))))))
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((((((false ? (((68.79)) / 1.0) : injectionSwitch.x)) > injectionSwitch.y))) && ((injectionSwitch.x < ((false ? (smoothstep(3.4, 3.9, 5.2)) : injectionSwitch.y)))))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       while(((false) && true));
       if((((injectionSwitch.x > (clamp((clamp((vec2(injectionSwitch[0], injectionSwitch[1])).y, ((false ? (min((float(mat2x3((4.6), 1.0, 1.0, 1.0, 1.0, 0.0))), ((false ? (783.617) : (4.6))))) : injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y, (mix(float(injectionSwitch.y), float((- 907.770)), bool(false)))))))))
        barrier();
       if(((bool(bvec4(false, false, false, true)))))
        barrier();
      }
     for(int _injected_loop_counter = ((0 << (((int(2)) / 1))) >> (int(7))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((((! (((! ((! (! ((((injectionSwitch.x > injectionSwitch.y)) || false)))))) && true))))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)))
      {
      }
     else
      {
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if(((bool(bvec3(false, true, ((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid;
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(((((min((min(injectionSwitch.x, (float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, (mix(float(0.0), float((3.9)), bool(false)))))))), injectionSwitch.x)) > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false || ((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((bool(bool((false)))))
    {
     for(int _injected_loop_counter = (((0 ^ 1) << (int(2))) >> (int(2))); _injected_loop_counter != (int((injectionSwitch.x)) << (int(7))); _injected_loop_counter --)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(false);
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(((! (! (false)))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(((((false || (injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, (vec2(vec2(injectionSwitch))))).y))))))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(false)
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((bool(bvec4((false), true, true, true))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
     if((((false) || false)))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if(((bool((bvec2(bvec3((bvec2((bvec2(bvec2(bvec2(bvec2(false, true))))))), ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           do
            {
             if(true)
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                    barrier();
                   if((! (! ((false)))))
                    {
                     if((bool(bool(true))))
                      {
                       if(true)
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(false);
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             do
              {
               barrier();
               if((false))
                barrier();
              }
             while(false);
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
        }
      }
     while(false);
     if(((! (! (false)))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (((int(6)) | (int(6))))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       do
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
           if(((bool(bvec2(false, true)))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(((((((bool(bool((true && (true))))) && true)) && ((! (! (false)))))) || false));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(true)
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      {
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       while(false);
      }
     if(((bool((! (! (bool(false))))))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.y = subgroup_id;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (((0 >> (int(2))) + 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   do
    {
     if((((((! (! ((((mix(float((6612.9483)), float(float(mat3(injectionSwitch.x, 1.0, 1.0, (injectionSwitch.x), (min(0.0, 0.0)), 1.0, 0.0, (injectionSwitch.x), 0.0))), bool(true)))) > injectionSwitch.y))))) && true))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = ((gl_NumWorkGroups.x) ^ 0u);
 do
  {
   GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.x = num_workgroup;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_base = (min(((((workgroup_size) | 0u)) << 0u), workgroup_size)) * (uint(((clamp((((((uvec3(workgroup_id, (min(uint((injectionSwitch.x)), ((uint((injectionSwitch.x))) ^ (clamp(uint(((max(((injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x)), (((~ (~ (uint((injectionSwitch.x)))))) | 0u), uint((injectionSwitch.x))))))), 1u)) + uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)) + uvec3(0u, 0u, 0u)), (((uvec3(workgroup_id, (min(uint((injectionSwitch.x)), ((uint((injectionSwitch.x))) ^ (clamp(uint(((max(((injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x)), (((~ (~ (uint((injectionSwitch.x)))))) | 0u), uint((injectionSwitch.x))))))), 1u)) + uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u), (((uvec3(workgroup_id, (min(uint((injectionSwitch.x)), ((uint((injectionSwitch.x))) ^ (clamp(uint(((max(((injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x)), (((~ (~ (uint((injectionSwitch.x)))))) | 0u), uint((injectionSwitch.x))))))), 1u)) + uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))))));
 if((false || ((((((injectionSwitch.x > injectionSwitch.y)))) || false))))
  barrier();
 uint virtual_gid = workgroup_base + (((uint(uint((max(GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.y, GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.y))))) / 1u)) * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   ((((GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.z = virtual_gid) >> 0u)) - 0u);
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = int(((clamp((float(mat4(injectionSwitch.x, (injectionSwitch.y), 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, round(length(normalize(sqrt(vec3(1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 0.0, ((0.0) - 0.0), 0.0, 0.0))), injectionSwitch.x, injectionSwitch.x)))); _injected_loop_counter < (max(((1 << ((((false ? (_injected_loop_counter) : (((int(6)) / 1))))) | 0)) >> (((false ? (_injected_loop_counter) : ((int(6)) ^ 0))))), ((1 << ((((false ? (_injected_loop_counter) : (((int(6)) / 1))))) | 0)) >> (((false ? (_injected_loop_counter) : ((int(6)) ^ 0))))))); (0 | (((_injected_loop_counter ++)) / 1)))
      {
       for(int _injected_loop_counter = ((1 << (((max(int(ivec3(((int(5)) / 1), 0, 0)), (min(int(ivec3(((int(5)) / 1), 0, 0)), int(ivec3(((int(5)) / 1), 0, 0))))))))) >> ((0 + (int(5))))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            barrier();
           if(((! ((! (! (! (false))))))))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = ((((clamp((((1 << (int(1)))) / 1), (1 << (int(1))), (1 << (int(1)))))) >> 0) >> ((int(ivec2(int(1), 0))))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               if((false))
                barrier();
               do
                {
                 barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               while(false);
              }
             while((! (! ((false || ((false || (false))))))));
            }
           if((((bool(bvec2((min((max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, true))))))
            {
            }
           else
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if(((bool(bvec4(false, false, false, false)))))
        {
         if((false))
          barrier();
         if(true)
          {
           barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if(((((vec2(mat3x2(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0))).x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(((false || (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 while(false);
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.y * subgroup_size + (((((((((~ (~ (subgroup_local_id)))) | (subgroup_local_id))) ^ 0u) + 1) % subgroup_size)) ^ uint((injectionSwitch.x)));
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   buf[GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.z] = 1;
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((((vec2(vec3(injectionSwitch, 0.0))).x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(((true && (false))))
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(((bool(bool(((false) || false))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
       if((false))
        barrier();
      }
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
  }
 do
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1 << (int((0 | (5))))) >> (int(5))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
      }
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((bool(bvec4(false, ((injectionSwitch.x > (vec2(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0))).y)), true, false)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((bool(bool(false)))))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (0 | (0 >> (int(6)))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
             if((false))
              barrier();
            }
          }
         barrier();
        }
      }
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((~ ((uint(uvec4((((uint(uvec4(~ ((max(((~ (~ ((0u ^ ((subgroup_local_id) + 0u)))))), subgroup_local_id))), 0u, 1u, 0u))) >> 0u)), uint((injectionSwitch.y)), 1u, 1u))))) + 1 < subgroup_size)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((true && (false))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((! (((! ((false))) && true))))
              barrier();
            }
           for(int _injected_loop_counter = 1; ((_injected_loop_counter > (0 | 0)) || (! (! (false)))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x < injectionSwitch.y)) && (true)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(((true && (false))))
                  barrier();
                }
               while(false);
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = (((((((int(ivec3(1 << (int(0)), 0, int((injectionSwitch.y))))) ^ 0))) ^ 0)) >> ((0 ^ (int(0))))); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > (min((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 9.4), (- 45.46)), bvec2(false, false))), injectionSwitch)).y))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x < (min(injectionSwitch, injectionSwitch)).y)))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 if(((bool(bvec4(((true && ((false) && true))), ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), true)))))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 for(int _injected_loop_counter = (1 & 1); (bool(bvec4((bool(bvec4(_injected_loop_counter != 0, ((injectionSwitch.x > injectionSwitch.y)), false, false))), true, true, ((injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   atomicStore(buf[(((min(next_virtual_gid, next_virtual_gid))) | ((min(next_virtual_gid, next_virtual_gid))))], ((false ? (workgroup_base) : (uint(uint(uint(2)))))), 4, 64, 4);
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((! (! ((((true && ((false)))) && true)))))
              {
               if((((((min(clamp(injectionSwitch.x, ((max(float(mat3((max((float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))), (float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))))), 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), float(mat3((max((float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))), (float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))))), 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), (1.0 * (injectionSwitch.x))), clamp(injectionSwitch.x, ((max(float(mat3((max((float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))), (float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))))), 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), float(mat3((max((float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))), (float((max(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))))), 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), (1.0 * (injectionSwitch.x)))))) > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               barrier();
              }
             barrier();
             if(((! (! (false)))))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              barrier();
             if((false))
              {
               if((false))
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(false);
                 barrier();
                }
               barrier();
               if((false))
                barrier();
              }
            }
           while((((((true ? float((mat2(1.0) * (vec2(injectionSwitch.x, 1.0)))) : (648.293)))) > injectionSwitch.y)));
           if((((false || ((((((injectionSwitch.x > injectionSwitch.y))) && true) || (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
             if(true)
              {
               if(true)
                {
                 subgroupAll(false);
                }
               else
                {
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             if((bool(bvec2((true && (true)), (((min((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))))))
              {
               if((! (! ((((false) || false))))))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((true && ((false))) && true)))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
             barrier();
            }
          }
        }
       else
        {
         if(((((clamp(((false ? (injectionSwitch) : injectionSwitch)).x, ((false ? (injectionSwitch) : ((injectionSwitch) * abs(vec2(1.0, 1.0))))).x, ((false ? (injectionSwitch) : injectionSwitch)).x)) > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         atomicStore(buf[next_virtual_gid], (uint((injectionSwitch.y)) * (uint(2))), 4, 64, 4);
         if(true)
          {
           if((((injectionSwitch.x > (clamp(((false ? (- 0.0) : ((float(((false ? (- 633.831) : float(mix((clamp(float((7620.7272)), float(((min(float(((mat3((7620.7272), 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(((mat3((7620.7272), 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), float((7620.7272)))), float(((true ? injectionSwitch : (vec2(8.7, 74.79)))).y), bool(true)))))))))), ((float(mat2(mix((clamp(float((7620.7272)), float((7620.7272)), float((7620.7272)))), float(((true ? injectionSwitch : (vec2(8.7, 74.79)))).y), bool(true)), 0.0, 0.0, 1.0)))), (mix((clamp(float((7620.7272)), float((7620.7272)), float((7620.7272)))), float((((max(true ? injectionSwitch : (vec2(8.7, 74.79)), true ? injectionSwitch : (vec2(8.7, 74.79)))))).y), bool(true)))))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! ((bool(bool(! (((false) || false)))))))))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if(true)
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if(((((injectionSwitch.x < injectionSwitch.y))) && true))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             barrier();
            }
          }
         else
          {
          }
         if((((false) || false)))
          {
           if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(true)
          {
           if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
            {
             if((false))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (max(((0) | (0)), (max(0, 0)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         subgroupAll(true);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; ((_injected_loop_counter) | (_injected_loop_counter)) < (1 & 1); _injected_loop_counter ++)
          {
           if(((false || (false))))
            {
             if((false))
              {
               if(((((injectionSwitch.x < injectionSwitch.y))) || false))
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(((true && (false))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != (((0 | ((~ (~ (max((min(1, (int(ivec4(1, 1, 0, 1))))), 1))))))) & 1); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if(true)
                      {
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if((false))
                    {
                     for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((true) && true))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if((false))
                barrier();
               if(true)
                {
                 if((bool(bvec3(true, false, ((injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(false);
 if((((((! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))))))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && ((((! (! (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((((false) || false)))
      barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! ((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
}
