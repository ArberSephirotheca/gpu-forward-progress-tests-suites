#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (~ (~ (1))); _injected_loop_counter ++)
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (((int(0)) | (int(0))))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   if((false))
    continue;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > ((false ? (injectionSwitch) : injectionSwitch)).y))))
    {
     if((false))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((! (! (bool(bvec2(false, true))))))))
      break;
     if((false))
      break;
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     return;
     if((false))
      return;
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((! (((! (((injectionSwitch.x > injectionSwitch.y)))) || false)))))
      return;
     for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > (((+ 6121) & 0) | 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(((((injectionSwitch.x < injectionSwitch.y) || false))))
            {
             return;
             if(false)
              {
              }
             else
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if((false))
              break;
            }
           if((bool((bvec2(bvec2(bvec2((false), true)))))))
            break;
           if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
            return;
          }
         if((false))
          return;
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           return;
          }
         while((bool((bvec2(bvec3(bvec2(((injectionSwitch.x > injectionSwitch.y)), false), true))))));
        }
       if(true)
        {
         return;
        }
       else
        {
        }
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     if((false))
      return;
    }
  }
 if((((bool(bool(true)))) && true))
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 uint workgroup_base = (min(((1u * (uint(uvec3(workgroup_size * (((uint(uvec2((max(((true ? workgroup_id : (subgroup_size))), (min(workgroup_id, workgroup_id)))), 0u))) * 1u)), 0u, 0u))))), (0u + (workgroup_size * workgroup_id))));
 uint virtual_gid = workgroup_base + subgroup_id * (0u ^ (subgroup_size)) + subgroup_local_id;
 do
  {
   do
    {
     if((false))
      {
       if((false))
        continue;
       if((false))
        return;
       if((false))
        return;
       return;
      }
    }
   while((! (! (false))));
  }
 while(false);
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((bool(bool(false))))
    {
     if(true)
      {
       if(((! (! (! (true && (((! (false))))))))))
        {
         do
          {
           if((false))
            {
             if((false))
              return;
             continue;
            }
           return;
          }
         while(false);
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if(true)
        {
         if((false))
          {
           if((! (! (false))))
            {
            }
           else
            {
             if((false))
              return;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if(((((((! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                  continue;
                 if((false))
                  return;
                 if((((false) && true)))
                  break;
                 do
                  {
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(true)
                          {
                           if((false))
                            return;
                          }
                         else
                          {
                          }
                         return;
                        }
                       while(false);
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(false)
                        {
                        }
                       else
                        {
                         if(((((((((! (! (injectionSwitch.x > injectionSwitch.y)))) && true))) || false))))
                          return;
                        }
                      }
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(false);
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           do
            {
             if(true)
              {
               if(((! ((bool(bvec4(! (false), false, true, false)))))))
                break;
               return;
              }
             else
              {
               if((false))
                return;
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(((false) || false));
          }
        }
       else
        {
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            continue;
           return;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         if((false))
          {
           if((false))
            return;
           return;
          }
         if(true)
          {
           if(((((! (! (false)))) && true)))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << ((1 * (((int(3)) / 1))))) >> ((max(int(3), int(3))))); (false || ((! (! (_injected_loop_counter > 0))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (1 & ((1 << (int(4))) >> (int(4)))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          continue;
         if(((true && (false))))
          return;
        }
       return;
       if((false))
        return;
       do
        {
         if(((true && (false))))
          {
           if(true)
            {
             if((false))
              break;
             return;
             if((false))
              break;
            }
           else
            {
            }
          }
        }
       while(false);
      }
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((0 >> (int(6))) << (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      break;
     return;
     if((false))
      return;
    }
  }
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
         if((((false) || false)))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              return;
            }
          }
        }
      }
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
       if((false))
        return;
      }
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((false) && true))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
        }
      }
     else
      {
       if((false))
        {
         do
          {
           for(int _injected_loop_counter = 1; (int((~ (~ (int(_injected_loop_counter)))))) != (0 << (int(4))); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 if(((((max((min((max(injectionSwitch, injectionSwitch)), injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                   if((false))
                    break;
                   continue;
                  }
                 if(false)
                  {
                   if((false))
                    continue;
                  }
                 else
                  {
                   if((false))
                    break;
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(true)
                    {
                     if((false))
                      {
                       if((false))
                        break;
                       do
                        {
                         return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       while(false);
                      }
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                  continue;
                }
               while(false);
              }
             while(false);
             if(((bool(bool((! (! (false))))))))
              return;
            }
          }
         while(false);
         if(((! (((! (false)) && true)))))
          return;
         if((false))
          return;
        }
       if(((true && (((false) || false)))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         for(int _injected_loop_counter = ((0 << (int(8))) | 0); _injected_loop_counter < (1 & ((1 << (int(5))) >> (int(5)))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           buf[virtual_gid] = (max(1, 1));
           if((false))
            return;
          }
        }
       if((false))
        return;
      }
    }
   else
    {
     do
      {
       if((false))
        return;
       if((false))
        return;
      }
     while(false);
    }
  }
 else
  {
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((false))
      return;
     if((false))
      return;
    }
   else
    {
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
   if(true)
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        return;
       do
        {
         if((false))
          return;
         if(((((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), (bool(bool(false))), false))))) || (((min((vec2(0.0, 0.0) + ((((! (! (true))) ? injectionSwitch : (injectionSwitch))))), injectionSwitch)).x > injectionSwitch.y))))
          {
           if((bool(bvec4(true, false, false, true))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 return;
                }
               do
                {
                 return;
                }
               while(false);
               if((false))
                break;
              }
             if((false))
              return;
            }
           else
            {
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               if((false))
                {
                 if((false))
                  return;
                 break;
                }
               if((false))
                return;
               if(((! (! (false)))))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if((false))
                return;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  continue;
                 return;
                 if(((bool(bvec2(((! (! (bool(bool((true && ((bool(bvec4((! (! (false))), ((injectionSwitch.x > injectionSwitch.y)), true, false))))))))))), false)))))
                  break;
                }
               while((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)));
              }
             if((false))
              {
               if((false))
                return;
               if((false))
                break;
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               break;
              }
             return;
             if((false))
              return;
            }
           return;
          }
         if((false))
          break;
        }
       while(false);
      }
    }
   else
    {
     if(true)
      {
       if((false))
        return;
       if((false))
        return;
      }
     else
      {
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, ((((int(ivec2((0 | (int(ivec3(((4) / 1), 1, 1)))), 0))) >> 0))));
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        break;
       if((false))
        return;
       if((false))
        {
         do
          {
           if((false))
            continue;
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       return;
      }
    }
   while(false);
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   for(int _injected_loop_counter = ((1 ^ 1) ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 & 90931); _injected_loop_counter < (min(((1 << ((~ (~ (int(2)))))) >> (int(2))), ((1 << ((~ (~ (int(2)))))) >> (int(2))))); _injected_loop_counter ++)
      {
       if(((((float(mat2x4(injectionSwitch.x, (min((mix(float((- 3.9)), float(1.0), bool(true))), 1.0)), ((1.0) - 0.0), exp(0.0), 1.0, 0.0, 1.0, (float(((mat2x3(1.0, 0.0, abs(1.0), 1.0, 1.0, 0.0)) * mat2(1.0))))))) > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         if((false))
          break;
         do
          {
           if((((((max(float(mat4x2(((true ? injectionSwitch.x : (- 80.03))), 0.0, 1.0, (dot(vec2(determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0), vec2(0.0, 1.0))), tan(0.0), 0.0, 1.0, (dot(vec4(cos(0.0), 0.0, tan(0.0), 0.0), vec4(round(length(normalize(1.0))), 0.0, 0.0, 0.0))))), float(mat4x2(((true ? injectionSwitch.x : (- 80.03))), 0.0, 1.0, (dot(vec2(((false ? (7.5) : determinant(mat2(0.0, 1.0, 0.0, 0.0)))), 1.0), vec2(0.0, 1.0))), tan(0.0), 0.0, 1.0, (dot(vec4(cos(0.0), (min(0.0, (min(0.0, 0.0)))), tan(0.0), (max(0.0, 0.0))), vec4(round(length(normalize((mix(float((8.7)), float(((max(float(mat2x3(1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0)), float(mat2x3(1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, (clamp(0.0, (mix(float(((0.0) + 0.0)), float((0.6)), bool(false))), (min(0.0, 0.0)))))))))), bool(true)))))), 0.0, 0.0, 0.0)))))))) > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 return;
                }
              }
             if((false))
              break;
            }
          }
         while(((false) && true));
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           do
            {
             if((false))
              continue;
             if((false))
              continue;
             return;
             if((false))
              continue;
            }
           while(false);
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              return;
            }
           if((false))
            continue;
          }
        }
       if((false))
        break;
       if((false))
        return;
      }
    }
   if((! (! (false))))
    {
     if(((! (! (false)))))
      return;
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = (((1) >> 0) & 1); _injected_loop_counter > (0 >> ((((int(ivec4((~ ((int(ivec2(~ (int(4)), 0))))), 1, (0 | 0), 1))) / 1)))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      break;
     do
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(true)
        {
         if((false))
          return;
         if(((false || ((false || (false))))))
          break;
        }
       else
        {
        }
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(false)
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = ((false ? (38759) : ((int((injectionSwitch.x))) ^ 0))); (! (! (_injected_loop_counter != 1))); _injected_loop_counter ++)
              {
               return;
               if((false))
                {
                 if(((bool(bvec2(false, true)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    continue;
                   continue;
                  }
                 return;
                 if((false))
                  return;
                }
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
            }
           while((bool(bool((! ((! (! (true && ((! (false))))))))))));
          }
        }
      }
     while((((((((! (! (injectionSwitch.x > injectionSwitch.y)))) || false))) && true)));
     if(((! ((true && (! (false)))))))
      break;
     if((false))
      break;
    }
   subgroupAll(((false) && true));
  }
 else
  {
   if((((((injectionSwitch.x > (mix(vec2((4943.3971), (0.3)), vec2((clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y) || false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((! (((true && (bool(bvec4(! (((((vec2(mat4x2(vec2(vec3(injectionSwitch, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))).x > ((injectionSwitch.y) - 0.0)))), false, true, true))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if(true)
            {
             if((false))
              break;
             if((((bool(bvec2((false), false)))) || false))
              return;
             return;
            }
           else
            {
             if((((injectionSwitch.x > (mix(float((- 0.0)), float(injectionSwitch.y), bool(((injectionSwitch.x < injectionSwitch.y)))))))))
              return;
            }
          }
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((((false) || (bool(bvec3(((false) || false), true, true))))) || false)))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
               if((false))
                continue;
              }
            }
           return;
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          {
           if((false))
            continue;
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             return;
             if((false))
              return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(true)
          {
           for(int _injected_loop_counter = int(((clamp(float(((true ? ((true ? mat2x3((injectionSwitch.x), tan(0.0), abs(1.0), 0.0, 1.0, 0.0) : (mat2x3(- 0.5, - 73.34, - 195.450, 9267.9525, - 849.751, - 872.629)))) : (mat2x3(5.1, 10.36, 9813.8669, - 3.5, - 546.655, 78.67))))), float(((true ? ((true ? mat2x3((clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))), tan(0.0), abs(1.0), (float(((mat4x3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0)) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, 0.0) : (mat2x3(- 0.5, - 73.34, - 195.450, 9267.9525, - 849.751, - 872.629)))) : (mat2x3(5.1, 10.36, 9813.8669, - 3.5, - 546.655, 78.67))))), float(((true ? ((true ? mat2x3((injectionSwitch.x), (mix(float((float(52856))), float(tan(0.0)), bool(true))), abs(1.0), ((false ? ((bvec3(false, false, false) , - 2.8)) : 0.0)), 1.0, 0.0) : (mat2x3(- 0.5, - 73.34, - 195.450, 9267.9525, - 849.751, - 872.629)))) : (mat2x3(5.1, 10.36, 9813.8669, - 3.5, - 546.655, 78.67))))))))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(((false || (false))))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         do
          {
           if((false))
            break;
           if((false))
            break;
           if((false))
            break;
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, ((4) | 0));
           if((false))
            continue;
           if((false))
            continue;
          }
         while(false);
         if((false))
          return;
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     do
      {
       if(((bool(bvec2(false, true)))))
        break;
       return;
      }
     while(((((injectionSwitch.x > injectionSwitch.y))) && true));
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   subgroupAll((((bool(bvec4((true && ((bool(bvec3(true, true, false))))), ((false) && true), false, ((injectionSwitch.x < (mix(vec2(((5.6 + 721.587)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((vec2(5.6, - 7.2).y * - 56.88))), bvec2(true, ((false) || false)))).y))))) && true)));
   if(((! (! (false)))))
    return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(true)
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > (mix(float((- 8.9)), float(injectionSwitch.y), bool(true)))))))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                continue;
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
            }
           do
            {
             if(((! (((! ((! (! (false))))) && true)))))
              {
               do
                {
                 if(((false || ((((bool(bvec4((((false || ((! (! (bool(bvec3((false || (bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, (! ((bool(((bvec2(bvec4(bvec2(bvec2((bvec2(bvec2((bvec2(bvec2(bvec2(! ((false || (true))), false))))))))), true, false)))))))), true)))), true, true))))))))), true, true, true)))) && true)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    return;
                   return;
                  }
                }
               while((true && (false)));
               return;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           return;
           if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
            return;
          }
        }
      }
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
       if((false))
        break;
      }
     if(true)
      {
       if(true)
        {
         do
          {
           if((false))
            return;
           if((false))
            {
             if(((bool(bvec3(false, false, true)))))
              return;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
              {
               do
                {
                 return;
                }
               while(false);
              }
            }
          }
         while((! (! (false))));
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
}
