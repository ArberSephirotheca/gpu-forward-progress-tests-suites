#version 460

struct _GLF_struct_22 {
 mat4 _f0;
 mat3x2 _f1;
 bvec3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_21 {
 bvec2 _f0;
 bvec4 _f1;
 mat4x2 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_20 {
 uvec4 _f0;
 bvec2 _f1;
 ivec3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_19 {
 ivec2 _f0;
 vec3 _f1;
 mat3x4 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 int _f5;
 mat2 _f6;
} ;

struct _GLF_struct_23 {
 mat3x4 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_20 _f2;
 _GLF_struct_21 _f3;
 uvec2 _f4;
 ivec3 _f5;
 _GLF_struct_22 _f6;
} ;

struct _GLF_struct_17 {
 int _f0;
 mat2x4 _f1;
 mat3 _f2;
 uvec4 _f3;
 uvec2 _f4;
 uint _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_16 {
 mat4x2 _f0;
 ivec4 _f1;
 mat2 _f2;
 mat4x3 _f3;
 uint _f4;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 mat3x2 _f1;
 mat2x4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_18 {
 mat2 _f0;
 mat4x2 _f1;
 _GLF_struct_15 _f2;
 ivec3 _f3;
 bvec3 _f4;
 _GLF_struct_16 _f5;
 _GLF_struct_17 _f6;
} ;

struct _GLF_struct_24 {
 uint workgroup_size;
 ivec3 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_23 _f2;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 ivec2 _f1;
 uvec4 _f2;
 vec2 _f3;
 uint _f4;
 uvec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
 int _injected_loop_counter;
 bvec3 _f1;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 uint subgroup_size;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 uint workgroup_base;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 uvec4 _f3;
 mat3 _f4;
 mat3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 vec4 _f1;
 uint _f2;
 uint _f3;
 bool _f4;
 mat2x3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_1 {
 bool _f0;
 bvec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 ivec2 _f4;
 _GLF_struct_3 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_8 {
 float _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 vec2 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    {
     do
      {
       if(((! (! (false)))))
        continue;
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   for(int _injected_loop_counter = (71731 & (0 ^ 0)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(true)
      {
       return;
      }
     else
      {
       if((false))
        continue;
      }
     if((false))
      {
       if((false))
        return;
       break;
      }
    }
  }
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
    }
   while(false);
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ int((injectionSwitch.x))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((((injectionSwitch.x < injectionSwitch.y)) ? ((1) - 0) : (- 41807))); _injected_loop_counter ++)
    {
     if((false))
      return;
     if(true)
      {
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              return;
             if((false))
              break;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
             if(((false || (false))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              continue;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          continue;
         if((true && (false)))
          {
           if(true)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  continue;
                 if((false))
                  return;
                }
               else
                {
                }
               if((false))
                break;
              }
            }
           else
            {
             if((false))
              return;
             if(false)
              {
              }
             else
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 return;
                }
              }
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if((false))
              {
               do
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(((false) || false));
                }
               while(false);
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     do
                      {
                       do
                        {
                         return;
                         if((false))
                          break;
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     while(false);
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                return;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(false);
          }
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if(false)
            {
            }
           else
            {
             if(false)
              {
               if((false))
                return;
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 do
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < (int((injectionSwitch.y)) ^ 0); _injected_loop_counter ++)
                      {
                       if((false))
                        {
                         do
                          {
                           return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if((false))
                            return;
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                break;
              }
            }
          }
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                 if((false))
                  return;
                }
               while(false);
              }
             while((! (! (false))));
             if((false))
              return;
             if((false))
              {
               if((false))
                return;
               continue;
              }
            }
          }
         if((false))
          break;
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        break;
      }
     else
      {
      }
    }
  }
 if(false)
  {
   if((false))
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     if((false))
      return;
     for(int _injected_loop_counter = ((1 << ((int(int((0 ^ (int(3)))))))) >> (int(3))); _injected_loop_counter > (int((injectionSwitch.x)) << ((min(int(1), int(1))))); _injected_loop_counter --)
      {
       if((false))
        continue;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(false)
            {
             if((false))
              break;
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ ((1 << ((0 ^ (int(5))))) >> (int(5)))); _injected_loop_counter ++)
              {
               return;
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                continue;
              }
             if((false))
              {
               if((false))
                continue;
               return;
              }
            }
          }
         if((false))
          continue;
        }
      }
     if((false))
      return;
    }
  }
 if((false))
  return;
 uvec4 GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
   if(true)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter != ((int((injectionSwitch.y)) << (int(7))) >> (((int(7)) << 0))); _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((((false) || false)))
                {
                 if(true)
                  {
                   if(true)
                    {
                     do
                      {
                       return;
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((((false) && true)))
                      return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               if((((false) || false)))
                continue;
               if(((! (! (false)))))
                {
                 if((false))
                  continue;
                 break;
                }
              }
             while(false);
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(((! ((bool(bvec3(! (((false) || false)), false, true)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
  }
 uvec2 GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    {
     if((false))
      continue;
     continue;
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   do
    {
     GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.xy = GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_id;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       break;
      }
    }
   while(false);
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        break;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         if((false))
          return;
        }
       while(false);
       if((false))
        continue;
       return;
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   if((false))
    return;
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       continue;
      }
     continue;
    }
  }
 while(false);
 if((false))
  return;
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        continue;
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bvec2(false, false)))))
    {
     if((false))
      return;
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.y = subgroup_id;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.z = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.y;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_10(_GLF_struct_9(bvec3(true), mat2(1.0))), gl_SubgroupSize);
 do
  {
   for(int _injected_loop_counter = ((false ? (- 42683) : 0)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      break;
     if((false))
      continue;
     if((false))
      return;
     if((false))
      continue;
     if(true)
      {
       if((((false) || false)))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
           if((false))
            {
             if(true)
              {
               if(true)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                }
               else
                {
                }
               return;
               if((false))
                break;
              }
             else
              {
               if((false || (false)))
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    return;
                   return;
                  }
                }
              }
            }
           if((false))
            break;
           if(false)
            {
            }
           else
            {
             if(true)
              {
               if((false))
                return;
               if((false))
                return;
              }
             else
              {
              }
            }
           if((bool((bvec3(bvec4(bvec3(true, true, false), false))))))
            {
             return;
             if((false))
              break;
            }
           else
            {
            }
           if(((false || (false))))
            return;
           if((false))
            continue;
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(true)
                {
                 return;
                 if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
                  continue;
                }
               else
                {
                }
              }
            }
           while(false);
           for(int _injected_loop_counter = (1 ^ int((injectionSwitch.y))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((false))
                        continue;
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                       for(int _injected_loop_counter = (((1 ^ 0) ^ 1) ^ 1); _injected_loop_counter != (0 & - 82095); _injected_loop_counter --)
                        {
                         return;
                        }
                       if((false))
                        break;
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if((false))
                break;
               if((false))
                {
                 do
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     do
                      {
                       if((false))
                        return;
                       return;
                      }
                     while(false);
                    }
                  }
                 while(false);
                }
               if((false))
                break;
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               do
                {
                 if(true)
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                       if((false))
                        continue;
                      }
                     while(false);
                    }
                  }
                 else
                  {
                  }
                }
               while((true && (((injectionSwitch.x > injectionSwitch.y)))));
              }
            }
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       if((false))
        break;
      }
     else
      {
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if(((! ((bool(bvec2(! (false), false)))))))
    continue;
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         do
          {
           do
            {
             if(false)
              {
               if((false))
                continue;
              }
             else
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    break;
                   return;
                   if((false))
                    break;
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if((false))
                continue;
               if((false))
                continue;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if((false))
              {
               if((false))
                return;
               if((false))
                continue;
               if(((bool(bvec2(false, true)))))
                continue;
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if((false))
              {
               if((false))
                break;
               for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      continue;
                     do
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         do
                          {
                           return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                       if((false))
                        continue;
                      }
                     while(false);
                    }
                  }
                }
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               if((false))
                return;
               if(((true && ((true && (false))))))
                {
                 for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 if((false))
                  continue;
                }
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   return;
                   if((false))
                    return;
                  }
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         while(false);
        }
      }
     else
      {
       if((false))
        return;
      }
    }
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(false)
          {
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
           if((false))
            return;
          }
        }
       else
        {
        }
       if((false))
        return;
       if((false))
        {
         for(int _injected_loop_counter = ((0 | (0)) << (int(4))); _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     do
      {
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
      }
     while(((((injectionSwitch.x > injectionSwitch.y))) && true));
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
     return;
    }
   if((false))
    return;
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((false || (false))) && true)))
    return;
   do
    {
     GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.w = _GLF_struct_replacement_11.subgroup_size;
    }
   while(false);
   if((false))
    return;
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           return;
          }
        }
       if((false))
        return;
       return;
       if((false))
        return;
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
  }
 if((false))
  return;
 do
  {
   if((false))
    {
     if((false))
      return;
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
  }
 while(false);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       return;
      }
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if(true)
        {
         do
          {
           if((false))
            continue;
           return;
          }
         while(false);
        }
       else
        {
        }
      }
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(false)
      {
       if((false))
        continue;
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if((false))
            break;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              break;
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 return;
                }
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
         while(false);
         if((false))
          return;
         if((false))
          continue;
        }
      }
     if((false))
      continue;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        return;
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          return;
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
               if((false))
                break;
              }
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = (0 << ((~ (((~ (int(4))) ^ 0))))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           return;
          }
         while(false);
        }
       while(false);
      }
     if((false))
      {
       if((false))
        break;
       break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
         if((false))
          break;
        }
      }
     if(((bool(bvec4(false, false, false, false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if((false))
      continue;
     if((false))
      continue;
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
  }
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
     if((false))
      return;
     do
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
          }
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
         if((false))
          return;
        }
      }
     while(false);
    }
  }
 for(int _injected_loop_counter = ((0 | (0 & - 23404)) >> (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     if((false))
      {
       if((false))
        continue;
       break;
      }
     if((false))
      {
       if((((false) || false)))
        break;
       break;
      }
     break;
     if((false))
      break;
     if((false))
      break;
     if((false))
      continue;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        return;
       if((false))
        continue;
      }
     else
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      break;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(false)
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        continue;
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          return;
        }
       while(false);
       return;
       do
        {
         if((false))
          continue;
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        {
         if((false))
          continue;
         return;
        }
       if((false))
        return;
       return;
      }
    }
   if((false))
    continue;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(true)
  {
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     do
      {
       return;
       if((false))
        break;
      }
     while(false);
    }
  }
 do
  {
   if((false))
    break;
   if((false))
    {
     if((false))
      return;
     break;
    }
   do
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.x = num_workgroup;
    }
   while(false);
   if((false))
    {
     if(((false || (false))))
      return;
     break;
    }
   if((false))
    continue;
  }
 while(false);
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.xy.x = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.x;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 do
  {
   if(true)
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      continue;
    }
   else
    {
    }
  }
 while(false);
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(gl_WorkGroupSize.x, ivec3(1), _GLF_struct_18(mat2(1.0), mat4x2(1.0), _GLF_struct_15(uvec2(1u), mat3x2(1.0), mat2x4(1.0), vec3(1.0)), ivec3(1), bvec3(true), _GLF_struct_16(mat4x2(1.0), ivec4(1), mat2(1.0), mat4x3(1.0), 1u), _GLF_struct_17(1, mat2x4(1.0), mat3(1.0), uvec4(1u), uvec2(1u), 1u, mat4x2(1.0))), _GLF_struct_23(mat3x4(1.0), _GLF_struct_19(ivec2(1), vec3(1.0), mat3x4(1.0), mat4x2(1.0), uvec4(1u), 1, mat2(1.0)), _GLF_struct_20(uvec4(1u), bvec2(true), ivec3(1), vec4(1.0)), _GLF_struct_21(bvec2(true), bvec4(true), mat4x2(1.0), ivec4(1)), uvec2(1u), ivec3(1), _GLF_struct_22(mat4(1.0), mat3x2(1.0), bvec3(true), bvec4(true))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(((! (! (false)))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.w = workgroup_id;
         if(((! (! ((false || (false)))))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     else
      {
       if(((bool(bvec3(false, true, true)))))
        {
         if((false))
          {
           if(true)
            {
             if((false))
              continue;
             return;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((false))
              return;
            }
          }
         if((false))
          continue;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
     while(false);
    }
  }
 else
  {
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     do
      {
       if((false))
        break;
       if((false))
        {
         do
          {
           return;
          }
         while(false);
         if((false))
          return;
        }
      }
     while(false);
     if(true)
      {
       if((false))
        {
         if((false))
          continue;
         if((false))
          break;
         if(((bool(((bool(((injectionSwitch.x > injectionSwitch.y)))) && true)))))
          {
           if((false))
            return;
           break;
          }
         return;
        }
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      continue;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.xy.y = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.w;
   if(((((bool((false || (bool(false))))) && true))))
    return;
  }
 else
  {
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(1.0, _GLF_struct_5(uvec3(1u), _GLF_struct_0(mat4(1.0), vec2(1.0)), _GLF_struct_1(true, bvec2(true), bvec3(true)), _GLF_struct_2(uvec2(1u), mat2(1.0)), ivec2(1), _GLF_struct_3(mat2x3(1.0), vec4(1.0), 1u, 1u, true, mat2x3(1.0), bvec4(true)), _GLF_struct_4(mat2x4(1.0), mat4x3(1.0), uvec2(1u), uvec4(1u), mat3(1.0), mat3(1.0), mat4x2(1.0))), _GLF_struct_6(mat3x2(1.0), _GLF_struct_replacement_24.workgroup_size * GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.xy.y), _GLF_struct_7(uvec3(1u)), vec2(1.0));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
 uint virtual_gid = _GLF_struct_replacement_8._f2.workgroup_base + GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.z * GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.w + subgroup_local_id;
 if(true)
  {
   do
    {
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
   while(false);
  }
 else
  {
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        break;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          break;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 if((false))
  return;
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || ((bool(bvec2(false, true)))))))
        return;
       return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     if((false))
      return;
    }
   while(false);
   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      {
       do
        {
         if((false || ((false || (((injectionSwitch.x < injectionSwitch.y)))))))
          {
           if((false))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 << (int(3))) >> (int(3))) & 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         break;
        }
      }
    }
   do
    {
     if((false))
      continue;
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   while((false || ((! (! (false))))));
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if(true)
      {
       return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if((false))
    return;
  }
 while(false);
 if((! (! (true))))
  {
   if((false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(false)
    {
    }
   else
    {
     do
      {
       do
        {
         GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.z = virtual_gid;
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         do
          {
           if((false))
            continue;
           if((false))
            {
             if((((false) && true)))
              continue;
             continue;
            }
           for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 do
                  {
                   do
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if((false))
                        break;
                      }
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            {
                             if((false))
                              break;
                             continue;
                            }
                           do
                            {
                             return;
                             if((false))
                              return;
                            }
                           while(false);
                          }
                         if((false))
                          continue;
                         continue;
                        }
                       return;
                       if(((bool(bvec4(false, true, true, false)))))
                        return;
                      }
                     else
                      {
                       if((false))
                        {
                         if(false)
                          {
                           if(((bool(bvec4((bool(bool(false))), false, true, false)))))
                            continue;
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     if((false))
                      break;
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if(((((true && (false))) && true)))
                    {
                     if((false))
                      break;
                     if((false))
                      return;
                     break;
                    }
                   if((false))
                    {
                     if((false))
                      break;
                     if(true)
                      {
                       return;
                      }
                     else
                      {
                       if(((true && (false))))
                        return;
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            return;
           if((false))
            {
             if(((((false || (false))) || false)))
              return;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 continue;
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             break;
            }
           if((false))
            continue;
          }
         while((false || ((! (! (false))))));
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if((false))
        continue;
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
      }
     if((false))
      break;
     if((false))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         break;
        }
       break;
      }
     if((false))
      {
       if((false))
        continue;
       break;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            continue;
           continue;
          }
         continue;
         if((false))
          break;
        }
       break;
      }
     if((false))
      {
       if((false))
        break;
       break;
      }
     if(((bool((bvec3(bvec4(bvec3(false, false, true), true)))))))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
       if((false))
        break;
      }
     if((false))
      {
       if((false))
        continue;
       continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((((! (! (bool(bvec3(false, true, false))))))))
          return;
         break;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(false);
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
       if(((! ((bool(bvec3(! (false), true, true)))))))
        return;
      }
     if((false))
      return;
    }
  }
 else
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
    }
  }
 if((false))
  return;
 do
  {
   if((false))
    {
     if((false))
      continue;
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         if((((false) || false)))
          return;
         continue;
        }
       if((false))
        {
         if((false))
          continue;
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         if(true)
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         else
          {
           if((false))
            return;
          }
        }
      }
     if((false))
      continue;
     do
      {
       if((false))
        continue;
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     while(false);
    }
  }
 while(false);
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   return;
  }
 if(true)
  {
   if((false))
    return;
   if(true)
    {
     if(true)
      {
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             return;
            }
           if(true)
            {
             return;
            }
           else
            {
             if((false))
              return;
            }
          }
         if((false))
          return;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
          }
         do
          {
           if((false))
            continue;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            break;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(((bool(bool(false)))))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_struct_replacement_8._f2.workgroup_base + GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.z * GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.w + ((subgroup_local_id + 1) % GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.w);
 if(true)
  {
   if(true)
    {
     if((false))
      return;
     do
      {
       for(int _injected_loop_counter = (1 | int((injectionSwitch.x))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & 36276); _injected_loop_counter --)
              {
               do
                {
                 if((false))
                  return;
                 return;
                }
               while((((! (! (false)))) && true));
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           do
            {
             return;
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 do
                  {
                   return;
                   if(((bool(bvec4(false, false, true, true)))))
                    continue;
                  }
                 while(false);
                 if((false))
                  break;
                }
              }
             break;
            }
           if(false)
            {
            }
           else
            {
             if((false))
              break;
             if(true)
              {
               return;
               if((false))
                break;
               if((false))
                continue;
              }
             else
              {
              }
            }
           if((false))
            continue;
           if((false))
            return;
          }
        }
      }
     while(false);
    }
   else
    {
     if((false))
      return;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if(((false || (false))))
      return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   do
    {
     if(true)
      {
       if((false))
        return;
       return;
      }
     else
      {
      }
    }
   while(false);
  }
 if((false))
  return;
 if((false))
  {
   do
    {
     return;
    }
   while(false);
   if((((false) || false)))
    return;
  }
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(true)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          break;
         if((false))
          {
           if((false))
            break;
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             if((false))
              {
               if((false))
                continue;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   if(((! (! (false)))))
                    continue;
                   continue;
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(false);
              }
             if((false))
              break;
             continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              continue;
            }
           if((false))
            continue;
           if((false))
            {
             if((false))
              break;
             break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           do
            {
             if(false)
              {
              }
             else
              {
               if((false))
                continue;
               return;
              }
            }
           while(((false) || false));
          }
         if((false))
          break;
        }
       while(false);
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(((((injectionSwitch.x > injectionSwitch.y))) && true));
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 if((false))
  return;
 if(true)
  {
   if((((false) || false)))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           return;
          }
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
         if((false))
          return;
        }
      }
     else
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         return;
        }
       if((false))
        return;
      }
    }
   if(((true && (false))))
    return;
  }
 else
  {
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x < injectionSwitch.y)))))
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        break;
       return;
      }
    }
   else
    {
    }
   if((false))
    return;
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if(false)
    {
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(true)
    {
     return;
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
  }
 if(((bool(bvec2(false, false)))))
  return;
 if((false))
  return;
 if((false))
  return;
 do
  {
   do
    {
     do
      {
       if((false))
        continue;
       buf[GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_12num_workgroupsubgroup_idvirtual_gidworkgroup_id.z] = 1;
       if((false))
        continue;
      }
     while(false);
    }
   while(false);
  }
 while(false);
 for(int _injected_loop_counter = ((0 << (int(7))) >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
  }
 if(false)
  {
   if((((false) || false)))
    return;
  }
 else
  {
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
     return;
    }
  }
 if(true)
  {
   if(((bool(bvec3(false, false, true)))))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      break;
     return;
    }
   if((false))
    break;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 for(int _injected_loop_counter = (0 | (0 >> (int(0)))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        continue;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(subgroup_local_id + 1 < GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_13_1_1_12num_workgroupworkgroup_idsubgroup_idsubgroup_size.w)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               return;
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  break;
                 if(false)
                  {
                  }
                 else
                  {
                   if((((false) || false)))
                    {
                     if(true)
                      {
                       do
                        {
                         if(true)
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (((int(0)) << 0))); _injected_loop_counter --)
                            {
                             do
                              {
                               return;
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                          }
                         else
                          {
                          }
                        }
                       while(false);
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    break;
                  }
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               if((false))
                return;
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
                  {
                   if((false))
                    break;
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               continue;
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if((false))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                return;
               return;
              }
             else
              {
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                break;
               if((false))
                break;
              }
            }
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    continue;
                   continue;
                  }
                 if((false))
                  continue;
                 if((true && (false)))
                  {
                  }
                 else
                  {
                   for(_GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_13(_GLF_struct_12(vec4(1.0), ivec2(1), uvec4(1u), vec2(1.0), 1u, uvec4(1u), vec3(1.0)), 0, bvec3(true)), ivec4(1)); _GLF_struct_replacement_14._f0._injected_loop_counter != int((injectionSwitch.y)); _GLF_struct_replacement_14._f0._injected_loop_counter ++)
                    {
                     if((false))
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if((false))
                            continue;
                           continue;
                           if((false))
                            break;
                           if((false))
                            continue;
                          }
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                           if((false))
                            break;
                          }
                         if((false))
                          {
                           if(false)
                            {
                             if((false))
                              break;
                            }
                           else
                            {
                             if((false))
                              return;
                             if((false))
                              break;
                            }
                           break;
                          }
                         if((false))
                          {
                           if((false))
                            break;
                           break;
                          }
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            break;
                           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              return;
                             if((false))
                              {
                               do
                                {
                                 return;
                                }
                               while(false);
                              }
                             if((false))
                              break;
                            }
                           break;
                           if((false))
                            continue;
                          }
                         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
                          {
                           if((false))
                            break;
                           if((false))
                            return;
                          }
                         if((false))
                          {
                           do
                            {
                             if((false))
                              break;
                             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 do
                                  {
                                   return;
                                  }
                                 while(false);
                                }
                              }
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                           if((false))
                            break;
                           if(((bool(bvec4(false, false, false, true)))))
                            continue;
                           if((false))
                            {
                             do
                              {
                               if((false))
                                return;
                               return;
                              }
                             while(false);
                            }
                           break;
                          }
                        }
                       do
                        {
                         if(true)
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       while(false);
                       if((false))
                        {
                         if((false))
                          return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            continue;
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         return;
                         if((false))
                          continue;
                         if((false))
                          continue;
                        }
                       if((false))
                        return;
                       if((false))
                        break;
                      }
                     if((false))
                      {
                       if((false))
                        break;
                       break;
                      }
                     if((false))
                      return;
                     if((false))
                      {
                       if(((true && (false))))
                        continue;
                       break;
                      }
                     subgroupAll(false);
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              return;
                             return;
                            }
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         return;
                         if((false))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        return;
                       continue;
                      }
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            continue;
           do
            {
             if(false)
              {
               if((false))
                continue;
               if((false))
                return;
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  return;
                 if((false))
                  continue;
                }
               if(((bool((bvec2(bvec2(bvec2(false, true))))))))
                break;
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 do
                  {
                   if((false))
                    break;
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((((1 << (int(7))) >> (((true ? int(7) : (- 61191))))) << (int(3))) >> (int(3))); _injected_loop_counter ++)
                    {
                     if((false))
                      break;
                     if(((! (! (false)))))
                      continue;
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           do
                            {
                             if((false))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                break;
                               return;
                              }
                             if(true)
                              {
                               if((false))
                                break;
                               if((false))
                                continue;
                               if(((bool((bvec3(bvec3(bvec3(false, false, false))))))))
                                continue;
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 return;
                                }
                               else
                                {
                                }
                               if((false))
                                break;
                              }
                             else
                              {
                               if((false))
                                break;
                               if((false))
                                continue;
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 & 1) | 1); _injected_loop_counter ++)
                                  {
                                   return;
                                  }
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                               if((false))
                                continue;
                               if((false))
                                continue;
                              }
                             if(((true && (false))))
                              return;
                            }
                           while(false);
                          }
                        }
                      }
                     if((false))
                      return;
                    }
                  }
                 while(false);
                }
              }
             else
              {
               if((false))
                {
                 do
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    break;
                   if((false))
                    continue;
                   if((false))
                    break;
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                   if(true)
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 while(false);
                 if((false))
                  break;
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    return;
                   if(false)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   for(int _injected_loop_counter = ((0 | (0 | 0)) << ((((0 + (int(4)))) << 0))); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((false))
                      break;
                     return;
                    }
                  }
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (- 21492 & 0); _injected_loop_counter --)
                  {
                   if((false))
                    continue;
                   if((false))
                    break;
                   if(true)
                    {
                     if((false))
                      {
                       if(((! (! ((true && (false)))))))
                        continue;
                       return;
                      }
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < (0 | (1 ^ 0)); _injected_loop_counter ++)
                      {
                       if((false))
                        break;
                       return;
                      }
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                }
               if((false))
                {
                 if((false))
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(true)
                          {
                           return;
                          }
                         else
                          {
                          }
                         if(((bool(bvec2(false, false)))))
                          break;
                        }
                       break;
                      }
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  break;
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if((false))
                        break;
                       do
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       while(false);
                      }
                    }
                   if((false))
                    {
                     if((false))
                      continue;
                     continue;
                    }
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     do
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         return;
                         if((false))
                          return;
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if((((false) || false)))
                      return;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     break;
                    }
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                      }
                     if(true)
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    {
                     if((false))
                      continue;
                     return;
                    }
                  }
                 if((false))
                  return;
                 if(((bool((bvec3(bvec4(bvec3(false, true, false), false)))))))
                  continue;
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if((false))
                continue;
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                    {
                     if(((! ((false || (! (false)))))))
                      return;
                    }
                   return;
                  }
                }
               else
                {
                }
               if(false)
                {
                }
               else
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    {
                     if(false)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     else
                      {
                       if((false))
                        continue;
                       return;
                      }
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   if((false))
                    break;
                   if(false)
                    {
                     if((false))
                      return;
                     if((false))
                      break;
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       do
                        {
                         return;
                         if((false))
                          return;
                        }
                       while(false);
                      }
                     if((true && (true)))
                      {
                       if((false))
                        {
                         if((false))
                          return;
                         break;
                        }
                       for(int _injected_loop_counter = ((0 | 0) >> (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((false))
                          continue;
                         if((false))
                          return;
                         if((false))
                          break;
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              return;
                             if(((injectionSwitch.x < injectionSwitch.y)))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if((false))
                                continue;
                               return;
                              }
                             else
                              {
                              }
                            }
                           do
                            {
                             if(false)
                              {
                               if((false))
                                return;
                              }
                             else
                              {
                               do
                                {
                                 if((false))
                                  return;
                                 return;
                                }
                               while(false);
                              }
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         if(((true) && true))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              break;
                             return;
                            }
                          }
                         else
                          {
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if((false))
                          return;
                        }
                      }
                     else
                      {
                      }
                     if((false))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        break;
                       break;
                       if((false))
                        continue;
                      }
                    }
                   if((false))
                    return;
                  }
                 if((false))
                  continue;
                }
              }
            }
           while(false);
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               if((((false) && true)))
                continue;
              }
             do
              {
               if((false))
                {
                 if((false))
                  continue;
                 break;
                }
               for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ int((injectionSwitch.y))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if((false))
                        break;
                       continue;
                       if((false))
                        return;
                      }
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if(true)
                        {
                         if((false))
                          return;
                         for(int _injected_loop_counter = (0 | (0 << (int(8)))); _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           return;
                          }
                         if((false))
                          break;
                        }
                       else
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           continue;
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                      }
                    }
                  }
                }
              }
             while(((false) && true));
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               for(int _injected_loop_counter = ((0 << (int(1))) << (int(8))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 do
                  {
                   if((false))
                    return;
                  }
                 while((false || (false)));
                 return;
                 if((false))
                  return;
                 if((false))
                  continue;
                }
              }
            }
           do
            {
             if(((! (! (false)))))
              {
               if((false))
                continue;
               return;
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((false) && true)))
                {
                 if((false))
                  return;
                 break;
                }
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(1))); _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
                  {
                   if(false)
                    {
                     if((false))
                      break;
                    }
                   else
                    {
                     do
                      {
                       if((false))
                        return;
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 if((((false) && true)))
                  continue;
                 if((false))
                  {
                   if((false))
                    return;
                   continue;
                  }
                 if((false))
                  break;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((! (! (false)))))
                  return;
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
              }
             if((false))
              continue;
             if((false))
              continue;
             if((false))
              {
               if((false))
                continue;
               return;
               if((false))
                break;
               if((false))
                break;
              }
            }
           while(false);
          }
         else
          {
           if((false))
            continue;
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((false))
                          return;
                         return;
                        }
                      }
                     break;
                     if((false))
                      return;
                    }
                   return;
                  }
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               if((false))
                return;
              }
            }
           else
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                continue;
               if(false)
                {
                }
               else
                {
                 if((false))
                  break;
                 if((false))
                  return;
                 do
                  {
                   if((false))
                    {
                     if((false))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = (min((min(((1 << (int(0))) >> (int(0))), ((1 << (int(0))) >> (int(0))))), ((1 << (int(0))) >> (int(0))))); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if((false))
                        continue;
                       return;
                       if((false))
                        continue;
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             if(((bool(bool(false)))))
                              break;
                             if(false)
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                break;
                               if((false))
                                break;
                              }
                             else
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                return;
                               return;
                               if((false))
                                continue;
                              }
                            }
                           while(false);
                           if((false))
                            return;
                          }
                        }
                       while(false);
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           return;
                          }
                         while(false);
                        }
                      }
                    }
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 for(int _injected_loop_counter = ((1 << ((clamp(int(1), int(1), int(1))))) >> (int(1))); _injected_loop_counter != (int((injectionSwitch.x)) | 0); _injected_loop_counter --)
                  {
                   return;
                  }
                 if((false))
                  continue;
                }
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if((false))
                continue;
              }
             if((false))
              break;
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           while(false);
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(0))); _injected_loop_counter --)
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(((! (! (((false) || false))))))
                        break;
                       return;
                      }
                     while(false);
                    }
                   if((false))
                    break;
                  }
                 if((false))
                  {
                   if((false))
                    break;
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                }
               if((false))
                break;
               if(true)
                {
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                }
               else
                {
                }
               do
                {
                 if(false)
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      continue;
                     do
                      {
                       if(true)
                        {
                         do
                          {
                           return;
                          }
                         while(false);
                        }
                       else
                        {
                         if((((false) || false)))
                          return;
                        }
                      }
                     while(false);
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if((false))
                    return;
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               while(false);
               if((false))
                {
                 if((false))
                  break;
                 continue;
                }
              }
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
              {
               if((false))
                continue;
               do
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int(2))); _injected_loop_counter --)
                        {
                         subgroupAll(true);
                         if((false))
                          return;
                        }
                       if((false))
                        continue;
                      }
                     else
                      {
                      }
                    }
                  }
                 if((false))
                  {
                   if((false))
                    break;
                   break;
                  }
                }
               while(false);
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   return;
                   if((false))
                    break;
                  }
                }
              }
            }
           do
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((false))
                      continue;
                     do
                      {
                       return;
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((false))
                      break;
                    }
                  }
                 if((false))
                  {
                   do
                    {
                     return;
                     if((false))
                      break;
                     if((false))
                      continue;
                    }
                   while(false);
                  }
                 if((false))
                  return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           while(false);
           do
            {
             if((false))
              {
               if((false))
                continue;
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   if((false))
                    break;
                   if(true)
                    {
                     do
                      {
                       if((false))
                        continue;
                       do
                        {
                         do
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             if((false))
                              return;
                            }
                           if((false))
                            continue;
                          }
                         while(((false) && true));
                        }
                       while(false);
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          break;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             if((false))
                              {
                               for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
                                {
                                 if((false))
                                  continue;
                                 return;
                                }
                              }
                            }
                           else
                            {
                             if((false))
                              return;
                            }
                           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                            {
                             do
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if(true)
                                {
                                 return;
                                 if((false))
                                  break;
                                }
                               else
                                {
                                }
                               if((false))
                                {
                                 if((false))
                                  break;
                                 break;
                                }
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                           if((false))
                            continue;
                           if((false))
                            continue;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     while(false);
                    }
                   else
                    {
                    }
                  }
                 while(false);
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   do
                    {
                     for(int _injected_loop_counter = ((1) | (1)); _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (((int(0)) | 0))); _injected_loop_counter --)
                          {
                           if((false))
                            continue;
                           if(true)
                            {
                             if((false))
                              break;
                             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                           else
                            {
                             if(((! (! (false)))))
                              return;
                            }
                           if((false))
                            break;
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       if((false))
                        {
                         if((((false) && true)))
                          continue;
                         break;
                        }
                      }
                    }
                   while(false);
                  }
                 do
                  {
                   if((false))
                    break;
                   if(true)
                    {
                     for(int _injected_loop_counter = (0 & 9695); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if(true)
                        {
                         if((false))
                          return;
                        }
                       else
                        {
                        }
                       if((false))
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         if((false))
                          return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if((false))
                          continue;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                        }
                      }
                     if((false))
                      {
                       if((false))
                        break;
                       return;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                    }
                   if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                    break;
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 while(false);
                 if((false))
                  continue;
                }
              }
            }
           while(false);
           if((false))
            continue;
          }
        }
       else
        {
        }
       if((false))
        break;
      }
    }
  }
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if(((((injectionSwitch.x < injectionSwitch.y))) || false))
        {
         if(true)
          {
           for(int _injected_loop_counter = (55950 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   for(int _injected_loop_counter = 1; _injected_loop_counter > (min(((- 99176 ^ - 75503) & 0), ((- 99176 ^ - 75503) & 0))); _injected_loop_counter --)
                    {
                     do
                      {
                       if((false))
                        continue;
                       if((false))
                        continue;
                       return;
                      }
                     while(false);
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                return;
               if((false))
                continue;
              }
            }
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            return;
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), false))))
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              break;
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               return;
              }
            }
           if((false))
            break;
           if((false))
            return;
          }
         do
          {
           if(true)
            {
             if((false))
              return;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 do
                  {
                   if((false))
                    break;
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       return;
                      }
                     if((false))
                      break;
                     if(((((bool(bvec3(false, false, ((injectionSwitch.x < injectionSwitch.y))))) && true))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       break;
                      }
                    }
                   else
                    {
                    }
                  }
                 while(false);
                }
               if((false))
                break;
              }
             while(false);
            }
           else
            {
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = ((0 | 0) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
            }
          }
         do
          {
           if(false)
            {
            }
           else
            {
             return;
             if((false))
              return;
            }
          }
         while(false);
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         return;
         if(((true && (false))))
          break;
        }
      }
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) << 0); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              continue;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((bool(bvec2(false, false))))
          {
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              return;
             return;
            }
           if((false))
            continue;
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if(true)
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
          }
        }
       else
        {
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 else
  {
  }
}
