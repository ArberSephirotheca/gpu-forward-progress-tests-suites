#version 460

struct _GLF_struct_9 {
 float _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 bvec2 _f1;
 bvec2 _f2;
 vec4 _f3;
 bvec2 _f4;
 ivec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 mat4x2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 mat4 _f1;
 uint _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 uvec3 _f2;
 _GLF_struct_6 _f3;
 mat4x3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
 bvec2 _f1;
 vec3 _f2;
 ivec4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 ivec3 _f1;
 mat3x4 _f2;
 mat2x4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_3 {
 uint subgroup_size;
 int _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_8 {
 _GLF_struct_3 _f0;
 mat4x3 _f1;
 mat2 _f2;
 uvec2 _f3;
 _GLF_struct_7 _f4;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 uint next_virtual_gid;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((min(injectionSwitch.x, injectionSwitch.x)) > (min(injectionSwitch, ((injectionSwitch) * vec2(1.0, 1.0)))).y))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((bool(bvec3(bool(bvec3((false), true, false)), true, true)))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((((bool(bvec3(false || ((vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y), true, true))))))))
  {
   if((false))
    {
     if(((true && (false))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_3(gl_SubgroupSize, 1, _GLF_struct_1(mat2((clamp(1.0, (clamp(((false ? (6.3) : 1.0)), 1.0, 1.0)), (max(1.0, 1.0))))), ivec3(1), mat3x4(1.0), mat2x4((((max(1.0, 1.0))) - (float(((vec3(0.0, 1.0, 0.0)) * mat3(1.0)))))), ivec2(1)), _GLF_struct_2(ivec3(1), bvec2(true), vec3(((((injectionSwitch.x < injectionSwitch.y)) ? 1.0 : (((false ? (397.711) : - 3.9)))))), ivec4(1), bvec4(true))), mat4x3(1.0), ((mat2(((1.0) / 1.0))) + mat2(0.0, 0.0, 0.0, 0.0)), uvec2((1u * (1u))), _GLF_struct_7(_GLF_struct_4(vec2(1.0), mat4(1.0), ((((1u) - 0u)) | 0u)), _GLF_struct_5(mat2x3(1.0), mat4x2(1.0), bvec3(true)), uvec3((clamp((uint(uvec2(1u, 1u))), (~ (~ (((1u) | (1u))))), ((1u) << 0u)))), _GLF_struct_6(mat3x2(1.0), bvec2(true), bvec2(true), vec4(1.0), bvec2(true), ivec4(1), 1u), mat4x3(1.0), vec3(1.0)));
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(1.0, gl_SubgroupInvocationID);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((! (! (false)))) && true)))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((! (! ((((((true ? injectionSwitch.x : ((min(((true ? - 82.97 : (- 2.3))), - 82.97))))) > ((((((max((vec2(1.0, 1.0) * ((min(vec2(((mat4x2(injectionSwitch, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) * mat4(1.0))), (mat2(1.0) * (vec2(((mat4x2(injectionSwitch, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) * mat4(1.0))))))))), vec2(((mat4x2(injectionSwitch, (min(determinant(mat2(0.0, 0.0, 1.0, 0.0)), determinant(mat2(0.0, 0.0, 1.0, 0.0)))), 0.0, 0.0, 0.0, round(length(normalize((vec3((transpose(transpose(mat4x2(((vec3(1.0, 1.0, 1.0)) - cross(vec3(- 8.6, - 55.66, - 2.7), vec3(- 8.6, - 55.66, - 2.7))), 0.0, 1.0, 0.0, 0.0, 0.0))))))))), 0.0)) * mat4(1.0)))))).x > injectionSwitch.y)) ? (min((- 885.312), (- 885.312))) : (mix(float((45.51)), (float(vec3(float(((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 9.2, 52.33)) : injectionSwitch)).y), 0.0, 1.0))), bool(true))))))))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((true && (((((bool(bvec2(bool((bvec3((bvec3(bvec4(bvec3(bvec3((false) || false, false, true)), true)))))), true)))))))) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
   if(((! ((bool(bvec3(! (false), true, true)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((bool((! (! (bool((false))))))))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 uint workgroup_base = (((clamp((((((min(false ? ((true ? _GLF_struct_replacement_8._f0.subgroup_size : workgroup_id)) : workgroup_size * workgroup_id, (1u * (max((false ? ((true ? _GLF_struct_replacement_8._f0.subgroup_size : workgroup_id)) : workgroup_size * workgroup_id), (false ? ((true ? _GLF_struct_replacement_8._f0.subgroup_size : workgroup_id)) : workgroup_size * workgroup_id))))))) | (false ? ((true ? _GLF_struct_replacement_8._f0.subgroup_size : workgroup_id)) : workgroup_size * workgroup_id))) >> 0u), false ? ((true ? _GLF_struct_replacement_8._f0.subgroup_size : workgroup_id)) : workgroup_size * workgroup_id, false ? ((true ? (0u | (((_GLF_struct_replacement_8._f0.subgroup_size) | uint(((((min(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x))))) / 1.0)))))) : workgroup_id)) : workgroup_size * workgroup_id))));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * (((true ? (_GLF_struct_replacement_8._f0.subgroup_size) : (workgroup_base))) ^ 0u) + _GLF_struct_replacement_9.subgroup_local_id;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((false) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec2(1u), (min(((clamp((workgroup_base + subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size) | (uint(uvec4(((~ (~ ((false ? (virtual_gid) : ((false ? (virtual_gid) : (workgroup_base + subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size)))))))), 0u, 1u, 1u))), (workgroup_base + subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size) | ((~ (~ ((false ? (virtual_gid) : ((false ? (virtual_gid) : (workgroup_base + subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size)))))))), (workgroup_base + subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size) | ((~ (~ ((false ? (virtual_gid) : (((bool((bvec3(bvec4(bvec3(((false) || false), true, false), false))))) ? (virtual_gid) : (workgroup_base + (clamp(subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size, subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size, subgroup_id * _GLF_struct_replacement_8._f0.subgroup_size))))))))))))), (0u ^ (workgroup_base + subgroup_id * ((false ? (133344u) : _GLF_struct_replacement_8._f0.subgroup_size)))))) + ((63622u & 0u) | ((((min((max((clamp((0u ^ (_GLF_struct_replacement_9.subgroup_local_id)), _GLF_struct_replacement_9.subgroup_local_id, _GLF_struct_replacement_9.subgroup_local_id)), (clamp(((uint(uvec3(0u, 0u, ((1u << (uint(1u))) >> (uint(1u)))))) ^ (_GLF_struct_replacement_9.subgroup_local_id)), (clamp(_GLF_struct_replacement_9.subgroup_local_id, (min((~ (~ (_GLF_struct_replacement_9.subgroup_local_id))), _GLF_struct_replacement_9.subgroup_local_id)), ((true ? _GLF_struct_replacement_9.subgroup_local_id : (bitfieldInsert(workgroup_base, workgroup_id, - 40630, - 48743)))))), _GLF_struct_replacement_9.subgroup_local_id)))), (clamp((0u ^ (((uint(uvec3((_GLF_struct_replacement_9.subgroup_local_id), 0u, 0u))) >> 0u))), _GLF_struct_replacement_9.subgroup_local_id, _GLF_struct_replacement_9.subgroup_local_id)))) + 1) % _GLF_struct_replacement_8._f0.subgroup_size))));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((false || (false))) || (true && (false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((bool(bool(false))) && true))))
  barrier();
 if(_GLF_struct_replacement_9.subgroup_local_id + 1 < (0u | (_GLF_struct_replacement_8._f0.subgroup_size)))
  {
   if((false))
    barrier();
   atomicStore(buf[(~ (((~ (min((_GLF_struct_replacement_0.next_virtual_gid), (_GLF_struct_replacement_0.next_virtual_gid)))) ^ 0u)))], uint(2), 4, 64, 4);
   if((! (! ((bool(bvec4((false), true, false, true)))))))
    barrier();
   if((((((false || ((injectionSwitch.x > injectionSwitch.y)))) && true))))
    barrier();
   if((false))
    barrier();
   if((((bool(bvec4(bool(bvec2(false, false)), true, false, false))))))
    barrier();
   if((false))
    barrier();
   subgroupAll(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec4(((false)), true, true, true))) || false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if(((bool(bvec2(false, false)))))
    barrier();
   if((false))
    barrier();
   if(((false || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((! (! (((bool(bvec3(false, true, false))))))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(((true && (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(2), ((true ? 4 : (- 1568))), 64, 4);
   if((false))
    barrier();
   subgroupAll(true);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(((true && (false))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if(((((bool(bvec3(bool(bool((bool(bvec3(true, false, false))))), true, false)))) && (! (false || ((! (((true && (false)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
