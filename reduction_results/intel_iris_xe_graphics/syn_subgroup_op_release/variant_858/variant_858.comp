#version 460

struct _GLF_struct_3 {
 bvec3 _f0;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 bvec3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 mat3x4 _f0;
 uvec2 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(_GLF_struct_0(mat3x2(1.0))), _GLF_struct_4(gl_SubgroupSize, mat3x4((clamp(1.0, 1.0, 1.0))), uvec2(1u), _GLF_struct_2(ivec4(1), bvec3(true), mat4x3(1.0)), _GLF_struct_3((bvec3(bvec3(bvec3(true))))), mat2(1.0)));
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (uvec3(gl_NumWorkGroups[0], (max(gl_NumWorkGroups, ((gl_NumWorkGroups) | (gl_NumWorkGroups))))[1], gl_NumWorkGroups[2])).x;
 uint workgroup_size = ((((0u ^ ((min(~ (((min(uint(uvec3((~ (~ (~ (gl_WorkGroupSize.x)))), (0u | 0u), 1u)), uint(uvec3((~ (~ (~ (gl_WorkGroupSize.x)))), (0u | 0u), 1u)))))), ~ ((uint((((max((clamp(uvec4((~ (~ (~ (gl_WorkGroupSize.x)))), 1u, 1u, 0u), uvec4((~ (((~ (~ (gl_WorkGroupSize.x)))) ^ 0u)), 1u, 1u, 0u), uvec4((~ (~ (~ (gl_WorkGroupSize.x)))), 1u, 1u, 0u))), uvec4((~ (~ (~ (gl_WorkGroupSize.x)))), 1u, 1u, 0u)))) * uvec4(1u, (~ (~ (1u))), 1u, 1u))))))))))) ^ 0u);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (((1u * ((! (! ((((true && (true))) || ((injectionSwitch.x > injectionSwitch.y)))))) ? workgroup_id : (subgroup_local_id)))));
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_5._f1.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_5._f1.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_5._f1.subgroup_size);
 if((false || ((((bool(((bvec3(bvec3(bvec3(bvec3((bvec3(bvec3((bvec3(bvec4(bvec3((! (! (! (! ((false)))))) || ((bool((false || (bool(bvec3(((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || (((((! (! (bool(bvec2(((bool((bvec3(bvec3(bvec3(true, ((injectionSwitch.x > injectionSwitch.y)), true)))))) && (bool(bool((bool((injectionSwitch.x > injectionSwitch.y))))))), false))))))) || false)))), true, (bool(bool((((injectionSwitch.x > injectionSwitch.y)) || (false)))))))))))), true, true), ((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 if(subgroup_local_id + 1 < _GLF_struct_replacement_5._f1.subgroup_size)
  {
   atomicStore(buf[(uint(uvec3((~ (~ (next_virtual_gid))), (0u << (uint(5u))), 1u)))], uint(2), ((4) >> 0), 64, 4);
   subgroupAll(false);
   if((((true && ((((injectionSwitch.x > injectionSwitch.y) && ((injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(((bool((! (! (bool(false))))))))
      return;
     if((false))
      return;
     return;
    }
  }
 else
  {
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if(((bool(bvec3(false, true, true)))))
      {
       if((false))
        return;
       return;
      }
     atomicStore(buf[(0u + (next_virtual_gid))], uint(2), 4, 64, 4);
    }
   if((false))
    return;
   subgroupAll((! (! (true))));
  }
 if((false))
  return;
 if((false))
  return;
}
