#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (1 * ((int((injectionSwitch.x)) >> (((int(2)) + 0))))); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
  {
   do
    {
     if(((! (! (false)))))
      {
       if(((bool(bool(bool(bvec2((false), (false || (true)))))))))
        barrier();
       if((false))
        barrier();
       do
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if((false || ((! (! (false))))))
      {
      }
     else
      {
       if((false))
        {
         do
          {
           barrier();
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((((false)) && true))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         do
          {
           if(((false) && true))
            {
            }
           else
            {
             do
              {
               do
                {
                 if((false || (true)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & 5498); _injected_loop_counter --)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                       if(((bool(bvec4(((((injectionSwitch.x > injectionSwitch.y))) && true), true, true, false)))))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.y)) ^ 1); _injected_loop_counter --)
                          {
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                         if((false))
                          barrier();
                        }
                       if(((! (! (false)))))
                        barrier();
                      }
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     do
                      {
                       if(true)
                        {
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                         if((false))
                          barrier();
                         if(((((bool(bvec4(false, false, true, true))) || ((injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                       if((((false) || false)))
                        barrier();
                      }
                     while(false);
                     do
                      {
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                       barrier();
                      }
                     while(((false) && true));
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if(((((false || (false))) && true)))
                    {
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   if((((injectionSwitch.x > ((((min(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 0.0)), (((dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + (0.0 + (float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 0.0))))))))) - 0.0))))))
                    barrier();
                   if((! ((false || (! ((! (! ((! ((((false || (! (true)))) && true))))))))))))
                    {
                     if((false))
                      barrier();
                     if((bool(bool((bool(bool((((injectionSwitch.x > injectionSwitch.y))))))))))
                      barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         do
                          {
                           if((false))
                            {
                             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                              {
                               if((false))
                                barrier();
                              }
                             barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                         while(false);
                        }
                       barrier();
                      }
                     barrier();
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
          }
         while(false);
        }
       while(false);
      }
     if((((false) || false)))
      barrier();
    }
   while(false);
   if(((bool(bvec3(false, true, false)))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false) || false)))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
    {
     if(((true) || false))
      {
       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
        barrier();
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if((((((bool((bvec3(bvec3(bvec3(! (! (false)), (true && (false)), false)))))))) || false)))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if((((false) || false)))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       if((((((injectionSwitch.x) / (dot(vec4(0.0, 0.0, (((1.0 * (1.0))) / round(length(normalize(1.0)))), 0.0), vec4((dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0, determinant(mat4(1.0, (((float(mat4x3(0.0, 0.0, 0.0, 1.0, (injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) - 0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0)))) > (max(injectionSwitch, injectionSwitch)).y))))
        barrier();
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
  }
 else
  {
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(false);
   if((false))
    {
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))))
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(true)
  {
   if(((false || (false))))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((true && (false))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if(true)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       if(((false || (false))))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((false || (false))))
        barrier();
       if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[((0) - 0)], (injectionSwitch)[1]), vec2((float(- 48303)), ((mat3x4(517.927, - 7.3, - 40.76, 4.7, 179.885, - 5.3, - 6.1, 7.5, - 3242.7507, - 45.68, - 619.048, - 3.5) * vec3(7.7, - 5.3, - 5410.0875)).g)), bvec2(false, false))).y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((bool(bvec4((false), true, false, true))))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
   while(false);
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((! (! ((false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false) && true)))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((((float(mat3x4(float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 0.0, 1.0, 0.0, (dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0)))) > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     do
      {
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
              {
               if(false)
                {
                 do
                  {
                   if((false))
                    {
                     if(((false) || false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(false);
                }
               else
                {
                 barrier();
                }
               if((false))
                barrier();
              }
            }
          }
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((((false) || false)))
  barrier();
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         do
          {
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter < ((((1 << (int(6))) >> (int(6))) << (int(2))) >> (int(2))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        barrier();
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) >> (int(7))); _injected_loop_counter --)
              {
               barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           barrier();
           if((false))
            barrier();
          }
        }
       while(false);
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if(true)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
             if((false))
              barrier();
            }
           barrier();
          }
        }
       while(false);
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 if(((((injectionSwitch.x > injectionSwitch.y))) || false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (((int((injectionSwitch.x)) ^ 1)) + 0); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != (max(1, 1)); _injected_loop_counter ++)
    {
     barrier();
     if((false))
      barrier();
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
      {
       if(((((! (! ((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y) && true))))))))))
        barrier();
       return;
      }
    }
  }
 else
  {
  }
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & 49200); _injected_loop_counter --)
      {
       if((false))
        barrier();
       barrier();
      }
    }
   barrier();
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   else
    {
    }
   do
    {
     if(((bool(bvec3((bool(bvec3(false, true, true))), false, true)))))
      barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           do
            {
             barrier();
            }
           while(((((injectionSwitch.x > injectionSwitch.y))) || false));
           if((false))
            barrier();
          }
        }
       while(false);
       barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   do
    {
     if(((((((((float(mat2x4(injectionSwitch.x, abs(0.0), 1.0, 1.0, abs(abs(1.0)), 0.0, 1.0, 0.0))) / 1.0)) > injectionSwitch.y) && true)))))
      {
       if((false))
        {
         for(int _injected_loop_counter = ((~ (~ (int((injectionSwitch.x))))) & 84634); ((_injected_loop_counter) | (_injected_loop_counter)) < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
        }
      }
    }
   while(false);
   if((false))
    barrier();
   if((((false) || false)))
    barrier();
   do
    {
     barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((true && (((injectionSwitch.x > injectionSwitch.y)))))
      {
      }
     else
      {
       barrier();
      }
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = (0 & 47444); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((false || (false))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if((true && ((false))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(((((vec2(mat4x2((mix(vec2((56.59), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (20.48)), bvec2(true, false))), 0.0, 0.0, sqrt(0.0), length(0.0), (injectionSwitch.x), 1.0))).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if((bool(bvec2((false), false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
        }
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     barrier();
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((false || (((! (! ((bool((bvec2(bvec2(bvec2(((bool(bvec3(bool(bool(((injectionSwitch.x > injectionSwitch.y)))), true, true)))), false)))))))))) && true)))))
          {
           for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter != ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
            {
             if(true)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = (((~ (~ ((min(gl_WorkGroupID, gl_WorkGroupID)))))) + uvec3(0u, 0u, 0u)).x;
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    barrier();
  }
 uint workgroup_base = ((false ? ((max((((172434u) | (((172434u) | 0u))) ^ subgroup_id), (((172434u) | (((172434u) | 0u))) ^ subgroup_id)))) : workgroup_size)) * workgroup_id;
 for(int _injected_loop_counter = (min((0 ^ (1)), 1)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
    barrier();
   if((false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > (mix(float((81.45)), float(injectionSwitch.y), bool(true)))))))
  barrier();
 uint next_virtual_gid = (~ ((1u * (~ ((min((((max((((uint(uvec2(workgroup_base + (min((((0u ^ (subgroup_id * subgroup_size)) ^ 0u)), subgroup_id * subgroup_size)), 1u))) | (((uint(uvec2(workgroup_base + (min((0u ^ (subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), 1u))) ^ 0u)))), workgroup_base + subgroup_id * subgroup_size))) ^ uint((injectionSwitch.x))), ((true ? ((workgroup_base + subgroup_id * subgroup_size) * 1u) : (atomicAnd(workgroup_base, workgroup_base)))))) + ((subgroup_local_id + 1) % subgroup_size))))));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false)) && true))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while((((((true ? (injectionSwitch) * mat2(1.0) : (injectionSwitch)))).x > injectionSwitch.y)));
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(true)
        {
         if((((injectionSwitch.x > (clamp((clamp((min(injectionSwitch, injectionSwitch)), injectionSwitch, (mat2(1.0) * (((injectionSwitch) / vec2(1.0, 1.0)))))), (max((clamp((min(injectionSwitch, injectionSwitch)), injectionSwitch, (mat2(1.0) * (injectionSwitch)))), (clamp((min(injectionSwitch, injectionSwitch)), injectionSwitch, (mat2(1.0) * (injectionSwitch)))))), (clamp((min(injectionSwitch, injectionSwitch)), injectionSwitch, (mat2(1.0) * (injectionSwitch)))))).y))))
          {
           do
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
              {
               barrier();
               if((false))
                barrier();
              }
            }
           while(false);
          }
        }
       else
        {
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((! (! (((((1.0 * ((float((mat4((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) + (((mat4(((injectionSwitch.x) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)) / mat4((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))))))))) > injectionSwitch.y)))))))
        barrier();
      }
     barrier();
    }
  }
 while(false);
 if(false)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   do
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     do
      {
       if((! (! ((false)))))
        barrier();
      }
     while(false);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
  }
 else
  {
   if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & ((1) << 0)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = ((((1 << (int(3))) >> (int(3))) << (int(0))) >> (int(0))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((((((injectionSwitch.x > injectionSwitch.y)) || ((! (! ((! (! ((bool(bvec3(true, true, false))))))))))) || false)))
        {
         for(int _injected_loop_counter = ((0 << (int(7))) ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           buf[virtual_gid] = (clamp(1, (0 + (((1) | (1)))), (clamp(((1) | ((((int(ivec2(((1) * 1), 1))) | (((int(ivec2(((1) * 1), 1)))) | ((int(ivec2(((1) * 1), 1))))))))), ((1) | (1)), 1))));
          }
         do
          {
           if((false))
            barrier();
           do
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((true && (false)))
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
              }
             while(false);
             if((false))
              {
               if((false))
                barrier();
               if((((bool(bool(false))) || false)))
                {
                }
               else
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           while(false);
          }
         while(false);
         if(((bool(bvec4(false, false, true, true)))))
          barrier();
         if((false))
          barrier();
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((bool((bool(bvec4(bool(true), false, true, true))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             barrier();
             if((false))
              barrier();
            }
          }
         if((((((injectionSwitch.x > injectionSwitch.y)) || ((true && ((injectionSwitch.x > injectionSwitch.y))))))))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         if(true)
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (((0) << 0) << (int(3))); ((true ? ((_injected_loop_counter) >> 0) : (_injected_loop_counter))) != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if((false))
                    barrier();
                   barrier();
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(((injectionSwitch.x > (((clamp(injectionSwitch.y, ((injectionSwitch.y) * 1.0), (max(injectionSwitch.y, injectionSwitch.y))))) - 0.0))));
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           do
            {
             if(true)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           while(false);
           if((false))
            barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (0 << ((int(ivec2(((int(0)) - 0), 0))))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     barrier();
    }
   if(((bool(bvec4((false || (false)), false, true, true)))))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if((((! (! (((max((vec2(((true ? injectionSwitch[0] : (- 5.6))), injectionSwitch[1])), injectionSwitch)).x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; ((true ? _injected_loop_counter -- : ((0 | (0 << (int(5)))) ^ ((- 90078))))))
    {
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(false)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
       if(((subgroup_local_id + 1) >> 0u) < subgroup_size)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 << (((int(1)) << 0))); _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((((true && ((false)))) && true))
            {
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(((! (! ((((injectionSwitch.x > injectionSwitch.y)) || (false)))))))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
         if(false)
          {
           do
            {
             if((false || ((bool(bool(true))))))
              {
               for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                      }
                    }
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(true)
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
              }
             if((false))
              barrier();
            }
           while(false);
           if((false))
            {
             if((false))
              barrier();
             if(((((float(mat4x2(injectionSwitch.x, 0.0, (injectionSwitch.y), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0))) > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if(((true && (false))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             barrier();
            }
          }
         else
          {
           do
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           while((bool(bvec3(false, false, true))));
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           atomicStore(buf[next_virtual_gid], uint(2), 4, (0 | (64)), 4);
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((! (((! (false)) || false))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 & 1) & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                  }
                }
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             for(int _injected_loop_counter = (min(1, 1)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(((! (! ((((injectionSwitch.x < injectionSwitch.y)) || false))))))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> ((0 ^ (int(4))))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = (max(((1 << (int(3))) >> (int(3))), ((1 << (int(3))) >> (int(3))))); _injected_loop_counter > (0 >> (int(0))); _injected_loop_counter --)
            {
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((true && (true)))
                {
                 do
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(false);
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((false) && true)))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(true)
                {
                 barrier();
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 do
                  {
                   if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (6.7)), vec2((- 118.428), (injectionSwitch)[1]), bvec2((true && (false)), true))).y))))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       do
                        {
                         if((false))
                          barrier();
                         if(((((! (! (((bool(bvec3((false) || false, true, false))) && true))))))))
                          {
                           if((false))
                            barrier();
                           if((false))
                            {
                             do
                              {
                               if((false))
                                barrier();
                              }
                             while(false);
                             barrier();
                            }
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     if((false))
                      barrier();
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = ((1 << ((int(ivec4(int(2), 1, 1, 0))))) >> (int(2))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                        }
                      }
                    }
                  }
                 while(false);
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if(((bool(bvec2(false, false)))))
              barrier();
            }
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                    }
                  }
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if((! (! ((! (! ((((injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if(true)
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((true && ((false))))
                  {
                   if((((false) || false)))
                    barrier();
                   barrier();
                  }
                }
               while((! (! (((false) && true)))));
               if((false))
                barrier();
               if((((bool(bool((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               subgroupAll(false);
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter > (0 >> (int(5))); _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               else
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(((bool(bvec2(false, true)))))
                          barrier();
                         barrier();
                        }
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
              }
            }
           for(int _injected_loop_counter = ((((max((1) / ((1 << (int(5))) >> (int(5))), (1) / ((1 << (int(5))) >> (int(5))))))) - 0); (bool((! (! (bool((! ((true && (! (_injected_loop_counter != int((injectionSwitch.x))))))))))))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
          }
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(false);
         if((false))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             do
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((min(((false ? (- 11.21) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
               if(((! (! (false)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((((injectionSwitch.x > injectionSwitch.y)) || ((false || (true)))))
                  {
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
              }
             while((! (! (false))));
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         while(false);
        }
       else
        {
         if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (- 9.3)), vec2(((+ - 59.18)), (injectionSwitch)[1]), bvec2((bool(bvec4(false, false, true, false))), true))).y))))
          barrier();
         if(true)
          {
           for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               atomicStore(buf[next_virtual_gid], (min(((uint((clamp(((((2) / 1)) ^ 0), 2, (((min(((((true ? 2 : ((- 24871))) | (true ? 2 : ((- 24871)))))), ((int(int((((true ? 2 : ((- 24871))))) - 0))))))) | (((true ? 2 : ((- 24871)))))))))) >> 0u), uint((clamp(((((2) / 1)) ^ 0), 2, (((min(((true ? 2 : ((- 24871)))), ((int(int((((((true ? 2 : ((- 24871))) >> 0)))) - 0))))))) | (((true ? 2 : ((- 24871))))))))))), (((clamp((((((int(ivec3(4, 0, 1))) - 0))) / 1), 4, ((4) * 1)))) << 0), 64, 4);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             for(int _injected_loop_counter = ((1 << ((((0 | (int(0)))) << 0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((! (! ((! (! (false))))))))
                barrier();
               if(true)
                {
                 for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ (0 >> (int(4)))); _injected_loop_counter > (0 << ((clamp(int(7), int(7), int(7))))); ((_injected_loop_counter --) ^ 0))
                  {
                   barrier();
                  }
                }
               else
                {
                }
               if((false))
                barrier();
              }
            }
          }
         else
          {
          }
         do
          {
           if(((((mix(vec2((91.29), (injectionSwitch)[1]), (vec2(1.0, 1.0) * (((vec2((injectionSwitch)[0], (38.78))) * mat2(1.0)))), bvec2(true, (! (! (false)))))).x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if((false))
                barrier();
              }
             if((((false)) || false))
              {
               if(true)
                {
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   do
                    {
                     if((((false || (bool(bvec4((((! (((! (((injectionSwitch.x > injectionSwitch.y)))) || (((! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false), ((bool(bool((false)))) && true), false, (bool(bool(true))))))))))
                      {
                       if((false))
                        barrier();
                       if(((false || (false))))
                        barrier();
                       if(((((! (false || ((! (injectionSwitch.x > injectionSwitch.y)))))))))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       do
                        {
                         barrier();
                         if((false))
                          barrier();
                         for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                          {
                           if((false))
                            barrier();
                          }
                         if((false))
                          barrier();
                        }
                       while(false);
                       if((false))
                        barrier();
                      }
                    }
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                       if((false))
                        {
                         if((false))
                          barrier();
                         if(true)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(((bool(bvec3(false, true, false)))))
                              barrier();
                             barrier();
                            }
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                         barrier();
                        }
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if((false))
                        barrier();
                      }
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   if((false))
                    barrier();
                  }
                }
               else
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((true && (((! (! (false)))))))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             do
              {
               if(false)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
                  barrier();
                }
               else
                {
                 do
                  {
                   if(false)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                 while(false);
                 if((false))
                  barrier();
                }
              }
             while(false);
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(((true && (false))))
          barrier();
         if((true && ((false))))
          {
           if(true)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             barrier();
             if((false))
              barrier();
            }
           subgroupAll(true);
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
              {
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
               barrier();
               if((false))
                barrier();
              }
            }
           while(false);
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > ((max((((false ? (injectionSwitch) : ((((vec2(1.0, 1.0) * (mix((mat2(1.0) * (vec2((5.5), (clamp((1.0 * ((true ? injectionSwitch : (injectionSwitch))[1])), (max((mix(float((5.4)), float((1.0 * ((true ? injectionSwitch : (injectionSwitch))[1]))), bool(true))), (true ? injectionSwitch : (injectionSwitch))[1])), (mix(float((4805.5144)), float((min((true ? injectionSwitch : (injectionSwitch))[1], (true ? injectionSwitch : (injectionSwitch))[1]))), bool(true)))))))), vec2((true ? injectionSwitch : (injectionSwitch))[0], (- 2228.6254)), bvec2(true, false))))) / vec2(1.0, 1.0)))))), ((false ? ((mat4x2(7144.5607, - 2.5, - 320.036, 92.70, 6683.3847, 0.4, - 17.64, 59.36) * vec4(9.9, 2.9, - 87.00, 300.493))) : ((true ? (mat2(1.0) * ((((false ? (injectionSwitch) : (mix(vec2((5.5), (clamp((1.0 * ((true ? (vec2(mat4(injectionSwitch, (injectionSwitch.x), 1.0, 0.0, (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0))) : (injectionSwitch))[1])), (true ? injectionSwitch : (injectionSwitch))[1], (mix(float((4805.5144)), float((min((true ? injectionSwitch : (injectionSwitch))[1], (true ? injectionSwitch : (injectionSwitch))[1]))), bool(true)))))), vec2((true ? injectionSwitch : (injectionSwitch))[0], (- 2228.6254)), bvec2(true, false)))))))) : (vec2(410.377, - 3.8))))))))).y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, (((true ? mat2(1.0) * (injectionSwitch) : (injectionSwitch)))))).y))))
          {
           if((false))
            barrier();
           do
            {
             if(false)
              {
              }
             else
              {
               if((bool((bvec3(bvec4(bvec3(true, false, false), true))))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(false);
          }
        }
       else
        {
        }
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((bool(bool(false)))))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
          }
        }
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while((! (! ((bool(bvec2(false, true)))))));
      }
     if(false)
      {
      }
     else
      {
       if((((! (! (bool(bvec4((((((1.0 * ((float(vec3(injectionSwitch.x, 0.0, 0.0)))))) * 1.0) > injectionSwitch.y)), false, true, true))))))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
     if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 if(true)
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = (((clamp(((1 << (int(0))) >> 0), 1 << (int(0)), 1 << (((int(0))) - 0)))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if((((false || ((((false)) || false)))) && true))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 else
  {
  }
}
