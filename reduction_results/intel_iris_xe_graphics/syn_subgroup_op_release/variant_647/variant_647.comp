#version 460

struct _GLF_struct_33 {
 uint _f0;
 uvec3 _f1;
 bvec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_32 {
 mat3x4 _f0;
 vec3 _f1;
 mat4 _f2;
 vec4 _f3;
 uvec4 _f4;
 bvec2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_34 {
 uvec3 _f0;
 _GLF_struct_32 _f1;
 _GLF_struct_33 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_30 {
 mat2x4 _f0;
 bool _f1;
 ivec2 _f2;
 ivec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_29 {
 mat4x2 _f0;
 bvec3 _f1;
 ivec4 _f2;
 int _f3;
 mat3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_31 {
 _GLF_struct_29 _f0;
 mat2x3 _f1;
 mat3x2 _f2;
 _GLF_struct_30 _f3;
} ;

struct _GLF_struct_27 {
 mat3 _f0;
 mat2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_28 {
 _GLF_struct_27 _f0;
} ;

struct _GLF_struct_35 {
 uvec2 _f0;
 uint subgroup_size;
 _GLF_struct_28 _f1;
 _GLF_struct_31 _f2;
 uvec3 _f3;
 _GLF_struct_34 _f4;
} ;

struct _GLF_struct_24 {
 uvec2 _f0;
} ;

struct _GLF_struct_25 {
 _GLF_struct_24 _f0;
} ;

struct _GLF_struct_22 {
 bvec2 _f0;
 mat2 _f1;
 vec4 _f2;
 mat4 _f3;
 vec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_21 {
 mat2 _f0;
 bvec2 _f1;
 vec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_20 {
 bvec3 _f0;
 uvec4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_19 {
 bool _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_23 {
 _GLF_struct_19 _f0;
 ivec3 _f1;
 _GLF_struct_20 _f2;
 bvec3 _f3;
 _GLF_struct_21 _f4;
 _GLF_struct_22 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_17 {
 mat3x2 _f0;
 vec4 _f1;
 bool _f2;
 uint _f3;
 int _f4;
 mat3x2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_18 {
 ivec2 _f0;
 bvec4 _f1;
 ivec2 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_26 {
 _GLF_struct_18 _f0;
 uint virtual_gid;
 _GLF_struct_23 _f1;
 _GLF_struct_25 _f2;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 mat3x4 _f1;
 ivec2 _f2;
 bvec3 _f3;
 ivec2 _f4;
 float _f5;
 vec2 _f6;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
} ;

struct _GLF_struct_16 {
 uint next_virtual_gid;
 float _f0;
 mat4 _f1;
 _GLF_struct_15 _f2;
 bvec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_13 {
 uint _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 mat2x3 _f1;
 uint _f2;
 bvec3 _f3;
 bvec2 _f4;
 uint _f5;
 mat3 _f6;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 uvec2 _f1;
 bvec2 _f2;
 mat4x3 _f3;
 bvec3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_8 {
 bvec2 _f0;
 bool _f1;
 float _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
 uint _f3;
 ivec3 _f4;
 bvec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 bvec4 _f1;
 _GLF_struct_8 _f2;
 mat2 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 bool _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 ivec3 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 mat3x2 _f1;
 mat2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_2 {
 uint _f0;
 mat3x2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 uvec2 _f1;
 uvec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 mat4x2 _f1;
 bool _f2;
 vec4 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 bvec3 _f2;
 _GLF_struct_6 _f3;
 uint subgroup_id;
 _GLF_struct_11 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if(true)
  {
   if(((((((! (! (bool(bool(bool(bvec4((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))), false, true, ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((false)) && true))
          return;
         do
          {
           barrier();
          }
         while(false);
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           continue;
          }
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 else
  {
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if(((bool((bvec3(bvec4(bvec3((! (! (((injectionSwitch.x > injectionSwitch.y))))), true, true), false)))))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
  {
   if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((((((! (! ((false)))) && true))) || false))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_3(_GLF_struct_0(mat3(1.0), mat4x2(1.0), (bool(bvec4(true, true, ((bool(bool(! (! (true)))))), false))), vec4(1.0)), _GLF_struct_1(mat3x4((max(1.0, (mix(float((- 385.911)), float(1.0), bool(true)))))), uvec2(1u), uvec3(1u), mat2x4(((1.0) - 0.0))), _GLF_struct_2(1u, mat3x2(1.0), (max(uvec4(1u), (~ (~ (((uvec4(0u, 0u, 0u, 0u) + (max(uvec4(1u), uvec4(1u)))))))))))), _GLF_struct_4(uvec4(1u), mat3x2(1.0), mat2(1.0), mat3x2(1.0)), ((bvec3(bvec3(bvec3(bvec4((bvec3(bvec3(bvec3(true)))), true)))))), _GLF_struct_6((((((false ? (vec2(- 7.6, - 7773.6267)) : vec2(mat2x4(vec2(1.0), 1.0, 0.0, (((max(1.0, 1.0))) / 1.0), 0.0, 1.0, (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))))) / vec2(1.0, 1.0)), ivec3(1), _GLF_struct_5(((uvec3(1u)) | uvec3(0u, 0u, 0u)), true, ivec2(1))), gl_SubgroupID, _GLF_struct_11(_GLF_struct_7(mat3x2(1.0), mat2x4(1.0), mat4x2(1.0), 1u, ivec3(1), bvec2(true), mat2(1.0)), bvec4(true), _GLF_struct_8(bvec2(true), true, 1.0, bvec2(true)), mat2(1.0), _GLF_struct_9(mat3x4(1.0), uvec2(1u), bvec2(((true) || false)), mat4x3(1.0), bvec3(true), mat4x3(1.0)), _GLF_struct_10(ivec2(1), mat2x3(1.0), (uint(uvec2(1u, 1u))), bvec3(true), bvec2(true), 1u, mat3(1.0)), vec4(1.0)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((! (! ((true && (false))))))
    {
    }
   else
    {
     return;
    }
  }
 if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(3))) >> (((int(3)) | 0))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((false || (false))))
        return;
      }
     barrier();
    }
   if((false))
    barrier();
  }
 _GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(uvec2(1u), gl_SubgroupSize, _GLF_struct_28(_GLF_struct_27(mat3(1.0), mat2(1.0), mat2x4(1.0))), _GLF_struct_31(_GLF_struct_29(mat4x2(1.0), bvec3(true), ivec4(1), 1, mat3(1.0), mat2(1.0)), mat2x3(1.0), mat3x2(1.0), _GLF_struct_30(mat2x4(1.0), true, ivec2(1), ivec2(1), ivec2((((((min(1, 1))) | 0)) | 0)))), uvec3(((0u + ((1u) | (1u))))), _GLF_struct_34(uvec3(1u), _GLF_struct_32(mat3x4(1.0), vec3(1.0), mat4(1.0), vec4((min(1.0, 1.0))), uvec4(1u), bvec2(true), uvec4(1u)), _GLF_struct_33(1u, uvec3(1u), bvec3(true), mat3x4(1.0)), bvec2(true)));
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    barrier();
   if(((bool(bvec2((true && ((bool(bvec4((bool(bool(false))), ((injectionSwitch.x < injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y))))))), (! (! (false))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(false);
 if((false))
  {
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(((((((((0.0 + (injectionSwitch.x)) > injectionSwitch.y)) && true))) || false)))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       return;
       if((false))
        {
         if((false))
          barrier();
         if((false))
          continue;
         barrier();
         if((false))
          break;
        }
       if((false))
        return;
       if((false))
        break;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      break;
    }
  }
 while(false);
 if((false))
  barrier();
 if(false)
  {
   if((false))
    barrier();
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((((! (! (false || (((false) && true))))))))
    {
     if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
      return;
     return;
    }
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((((bool(bvec2((false), false))) || false)))
  {
   if(((bool(bvec2((! (! (((injectionSwitch.x > injectionSwitch.y))))), ((injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   do
    {
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(true)
        {
         if((false))
          {
           if((((false)) && true))
            {
             for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((bool(bvec2(true, true))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), (false || (((true) && true))))))))
                return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(true)
          {
           if((false))
            return;
           barrier();
          }
         else
          {
          }
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   barrier();
  }
 if(((((! (! (((injectionSwitch.x > injectionSwitch.y))))) && true))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > (clamp((((max(injectionSwitch, injectionSwitch)).y) - 0.0), injectionSwitch.y, (max(injectionSwitch.y, (min(((float(vec4(float(mat3x2((min(injectionSwitch.y, injectionSwitch.y)), sqrt(0.0), sqrt(1.0), 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0)))), injectionSwitch.y))))))))))
  {
   do
    {
     if((false))
      barrier();
     if((false || ((! (! ((false)))))))
      return;
    }
   while(false);
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if(true)
      {
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
           if(((true && (false))))
            barrier();
           if(((bool(bvec2(false, false)))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
      }
     else
      {
      }
     return;
    }
  }
 else
  {
  }
 if(((true && ((bool(bool(false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
         if((false))
          break;
        }
       else
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
    }
   while((! (! ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))));
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
  }
 if((((((false || ((! (! ((bool(bvec4(((bool((bvec3(bvec3(bvec3(injectionSwitch.x > (mix(vec2(((((false || (false)) ? (injectionSwitch) : injectionSwitch)))[0], (injectionSwitch)[(~ (~ (1)))]), vec2((vec3(- 981.714, - 96.52, 409.326).s), (- 57.80)), bvec2(false, (((injectionSwitch.x < injectionSwitch.y)) && ((true && (false))))))).y, true, ((injectionSwitch.x > injectionSwitch.y)))))))) && true), true, true, false)))))))))))))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false))
    return;
   do
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       break;
      }
     if((false))
      break;
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        continue;
       barrier();
      }
     if((false))
      {
       if(((true) && (((mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (clamp((0 ^ 0), (((0 ^ 0)) ^ 0), (0 ^ 0))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
     while(false);
     barrier();
    }
   while((false || (false)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (! (false)))))
    {
     if((! (! (false))))
      {
      }
     else
      {
       if((false))
        return;
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if((((((injectionSwitch.x) * (dot(vec3(0.0, 0.0, 1.0), vec3((0.0 + (0.0)), 0.0, 1.0)))) > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
   if(false)
    {
     if((((true && ((false)))) && true))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; (min(_injected_loop_counter, (0 | (((_injected_loop_counter) | (_injected_loop_counter)))))) != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(true)
            {
             if((false))
              barrier();
             return;
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if((false))
            continue;
           if((false))
            barrier();
           break;
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
      }
     if((false))
      return;
    }
   if((((! (! (((injectionSwitch.x < injectionSwitch.y)))))) || ((injectionSwitch.x > injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if((((bool(bvec4((! ((! ((true && (! (! ((false))))))))) && true, false, ((injectionSwitch.x > injectionSwitch.y)), true))))))
    barrier();
   do
    {
     do
      {
       if((false))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(((((! (! (injectionSwitch.x > (mix(vec2((max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((- 8.0), (1189.5966)), bvec2(false, false))).y)))))))
      barrier();
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((bool(bvec2(false, true))))
          {
          }
         else
          {
           if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       if((((((bool((((injectionSwitch.x < injectionSwitch.y)) && (bool(! (! (false))))))))) && true)))
        return;
       if((false))
        {
         if(((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
          return;
         if(true)
          {
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if(false)
        {
         if((false))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            continue;
           if((false))
            barrier();
           return;
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
     while(false);
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
      }
     while((true && (false)));
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       break;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(((((((injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
      break;
     if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((((injectionSwitch.x > (clamp((max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            return;
          }
         while(false);
         if(((((injectionSwitch.x > injectionSwitch.y) || false))))
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if(((injectionSwitch.x < (max(injectionSwitch.y, (1.0 * ((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
              {
               barrier();
               if((false))
                continue;
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  break;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
             if((false))
              {
               if((false))
                break;
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              continue;
            }
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 & 1) << (((int(1)) ^ 0))) >> (int(1))); _injected_loop_counter ++)
          {
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(false);
          }
         if(((bool(bool(false)))))
          break;
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       return;
       if((false))
        barrier();
       if((((false) && true)))
        barrier();
       if((false))
        break;
      }
     if((false))
      continue;
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((((false) || false)))
          continue;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       break;
      }
    }
   while(false);
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  barrier();
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((bool(bvec2(bool((bvec2(bvec2(bvec2((((injectionSwitch.x > (clamp((min(injectionSwitch, injectionSwitch)), injectionSwitch, ((((true ? injectionSwitch : (injectionSwitch)))) - vec2(0.0, 0.0)))).y)) && true), false))))), false)))))))
  {
   do
    {
     if((false))
      barrier();
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         return;
        }
      }
     barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   return;
  }
 if((bool(bvec2((false), ((injectionSwitch.x < injectionSwitch.y))))))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        break;
       break;
      }
     barrier();
     if((((((injectionSwitch) * mat2(1.0)).x > (max(((true ? ((false ? (8277.2816) : (clamp(injectionSwitch.y, ((true ? injectionSwitch.y : (1404.6595))), injectionSwitch.y)))) : (6.3))), ((false ? (8277.2816) : (clamp(injectionSwitch.y, ((true ? injectionSwitch.y : (1404.6595))), injectionSwitch.y))))))))))
      {
       if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
        continue;
       if(false)
        {
        }
       else
        {
         if(((((((true && (bool(bool((((((false || ((bool(bool((injectionSwitch.x > injectionSwitch.y)))))) || ((injectionSwitch.x > injectionSwitch.y))))) || false)))))) || false)))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           if(false)
            {
             if(((false || (false))))
              barrier();
            }
           else
            {
             return;
            }
          }
        }
       do
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
        }
       while(false);
      }
     if((false))
      {
       if((false))
        barrier();
       continue;
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  return;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   if((((bool((bvec2(bvec3((bvec2(bvec3(bvec2(bool(bvec2(false, true)), ((injectionSwitch.x > injectionSwitch.y))), false))), true))))))))
    return;
   if(((! (! ((false || (false)))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
  }
 else
  {
  }
 do
  {
   if((false))
    barrier();
  }
 while((((clamp((float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0))), (mix(float((9.3)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)));
 if((((false) && true)))
  {
   if(true)
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        return;
      }
     if(((bool(bool(bool(((bvec2(bvec4(bvec2(bvec2(bvec2((false), ((injectionSwitch.x < injectionSwitch.y))))), false, true))))))))))
      {
       if((! ((bool(bvec2(! ((((injectionSwitch.x > injectionSwitch.y)))), true))))))
        {
         if(true)
          {
           if((false))
            return;
           if((((! (! (bool(bvec4(false, false, true, false))))))))
            barrier();
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if(true)
        {
         if(((bool((bool(bvec2(bool(false), false)))))))
          barrier();
         if((false))
          {
           if((false || ((! (! ((false)))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             return;
            }
           return;
          }
        }
       else
        {
        }
       if(((((min(injectionSwitch, (vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y)) || ((false))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! (! ((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x < injectionSwitch.y)), true))))))))))
        {
         if(true)
          {
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | (clamp(0, 0, 0))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if(((! (! ((bool(bvec3(false, false, true))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   for(_GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(1u, 0); _GLF_struct_replacement_13._injected_loop_counter != 1; _GLF_struct_replacement_13._injected_loop_counter ++)
    {
     if((((true && (((0.0 + (injectionSwitch.x)) > injectionSwitch.y))))))
      break;
     if((((bool(((bool((injectionSwitch.x > injectionSwitch.y))) && true))))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((bool((bvec2(bvec3(bvec2((false), true), false))))))
      break;
     barrier();
     if((false))
      barrier();
     if((false))
      continue;
     if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if((false))
        barrier();
       continue;
      }
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 for(int _injected_loop_counter = ((clamp(int(ivec2(0, 0)), int(ivec2(0, 0)), int(ivec2(0, 0))))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((min((min(injectionSwitch, (vec2(1.0, 1.0) * (injectionSwitch)))), (vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        return;
       if(true)
        {
         if((false))
          return;
         return;
        }
       else
        {
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      return;
    }
  }
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_18(ivec2(1), bvec4((true && (true))), ivec2(1), _GLF_struct_17(mat3x2(((false ? (- 59.60) : (clamp(1.0, 1.0, 1.0))))), vec4(1.0), true, 1u, (((min(1, 1))) + 0), mat3x2(1.0), ivec2(1))), (uint(((true ? (max((injectionSwitch.x), (injectionSwitch.x))) : (float(vec3((- 45.48), 0.0, 0.0)))))) ^ (((clamp((min((workgroup_base) + 0u, (workgroup_base) + (~ (((~ (0u)) | (~ (0u))))))), (min((workgroup_base) + 0u, (workgroup_base) + (~ (((~ (0u)) | (~ (0u))))))), (min((workgroup_base) + 0u, (workgroup_base) + (~ (((~ (0u)) | (~ (0u)))))))))))) + _GLF_struct_replacement_12.subgroup_id * _GLF_struct_replacement_35.subgroup_size + subgroup_local_id, _GLF_struct_23(_GLF_struct_19(true, ivec3(1)), ivec3(1), _GLF_struct_20(bvec3(true), uvec4(1u), uvec3(1u)), bvec3(((true) || false)), _GLF_struct_21(mat2(1.0), bvec2(true), vec4((((max(true ? 1.0 : (3.8), true ? 1.0 : (3.8)))))), uvec3(1u)), _GLF_struct_22(bvec2(true), mat2(1.0), vec4(1.0), mat4(1.0), vec3(1.0), ivec2((int(ivec3(1, 0, 0))))), mat4x2(1.0)), _GLF_struct_25(_GLF_struct_24(uvec2(1u))));
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           barrier();
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(workgroup_base + (((((~ (~ ((max(_GLF_struct_replacement_12.subgroup_id * _GLF_struct_replacement_35.subgroup_size, _GLF_struct_replacement_12.subgroup_id * _GLF_struct_replacement_35.subgroup_size))))) ^ (~ (~ (0u)))))) | (((((_GLF_struct_replacement_12.subgroup_id * _GLF_struct_replacement_35.subgroup_size)) << 0u) | (_GLF_struct_replacement_12.subgroup_id * _GLF_struct_replacement_35.subgroup_size)))) + ((subgroup_local_id + 1) % _GLF_struct_replacement_35.subgroup_size), 1.0, mat4(1.0), _GLF_struct_15(_GLF_struct_14(mat2(1.0), mat3x4(1.0), (~ (~ ((~ (((~ (((ivec2(1)) + ivec2(0, 0)))) ^ ivec2(0, 0))))))), bvec3(true), ivec2((int((max(int(1), int(1)))))), ((1.0) + 0.0), ((false ? (vec2(1873.5026, 5.4)) : vec2(1.0))))), bvec2(true), true);
 for(int _injected_loop_counter = ((true ? 1 : (- 11751))); _injected_loop_counter > (0 << ((max(int(6), int(6))))); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if((false))
        return;
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
        }
       if(false)
        {
         if((false))
          {
           if((false))
            {
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
              }
             else
              {
               return;
              }
            }
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       else
        {
         if(((bool(bvec2(false, false)))))
          barrier();
         barrier();
         do
          {
           if(((true && (false))))
            {
             if((false))
              return;
             if((false))
              return;
             barrier();
            }
          }
         while(false);
         if((! (! ((true && ((((injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(((bool(bvec4(false, true, true, false)))))
            return;
           if(true)
            {
             return;
            }
           else
            {
             if((false))
              barrier();
            }
          }
        }
      }
    }
   else
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if(true)
      {
       if((false))
        return;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   if((false))
    return;
   if(((! (! (false)))))
    {
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         return;
        }
      }
     do
      {
       barrier();
      }
     while(false);
    }
   if(((bool((bvec2(bvec3(bvec2(false, true), false)))))))
    {
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     return;
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 ^ int((injectionSwitch.x))); _injected_loop_counter ++)
    {
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     if(true)
      {
       if((false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((false) || false)))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((true && (false))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((0) | 0); _injected_loop_counter != 1; ((((((_injected_loop_counter ++) - 0)) / 1)) | 0))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if(((false || ((! (! (false)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((! (! ((false)))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if(((! (! ((false || (false)))))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          break;
         barrier();
         if((false))
          barrier();
        }
       break;
       if((false))
        barrier();
       if((false))
        continue;
       if(((bool(bvec2(false, false)))))
        continue;
       if(((! (! (false)))))
        barrier();
       if((false))
        break;
      }
     if((((true && ((((injectionSwitch.x > (mix(vec2((2.2), (- 5.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y))))).y)) || false))))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((true && ((bool(bool(false)))))))
    {
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(((false || (false))))
          {
           if((false))
            continue;
           return;
          }
         barrier();
        }
      }
     while(false);
     break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
    }
   if((false))
    continue;
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(((((vec2((mix(vec2((0.3), ((+ - 0.0))), vec2((clamp((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[0], (vec2(injectionSwitch))[0])), (vec2(injectionSwitch))[1]), bvec2(true, true))))).x > injectionSwitch.y))))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   buf[_GLF_struct_replacement_26.virtual_gid] = 1;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((false))
    break;
  }
 while((false || (false)));
 if((((true && ((((injectionSwitch.x) - 0.0) > (float((mat3x2(mat3x4(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, (mix(float(sin(0.0)), float((503.529)), bool(false)))))))))))))))
  {
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        continue;
       if((((true && (true)) && (false))))
        {
         if(((bool((bvec2(bvec4(bvec2(false, true), true, false)))))))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((((bool(bvec3(false, true, true))) && (! (! (true)))))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if(false)
  {
  }
 else
  {
   if((false))
    return;
  }
 if((((false) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   return;
   if((false))
    barrier();
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > ((true ? (max(injectionSwitch.y, (mix(float(injectionSwitch.y), float((5.6)), bool(false))))) : (- 74.30)))))))
    return;
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if((false))
        {
         if(((false || (false))))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           return;
          }
         else
          {
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((false) && true)))
      barrier();
    }
   do
    {
     if((((injectionSwitch.x > (((float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0))) - 0.0))))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((subgroup_local_id) / 1u) + 1 < _GLF_struct_replacement_35.subgroup_size)
    {
     if(((((bool(bvec2(((((false) && true)) || false), true)))) && true)))
      {
       if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = ((false ? - 26948 : - 29167) & 0); _injected_loop_counter < ((1 << ((0 ^ (int(3))))) >> (int(3))); _injected_loop_counter ++)
              {
               if(true)
                {
                 barrier();
                 if(((bool(bvec3(false, true, false)))))
                  barrier();
                }
               else
                {
                }
              }
             if(((true && (false))))
              barrier();
            }
           while(false);
          }
         while(false);
         if((((false) && true)))
          barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((((bool(bool(((! (! (false)))))))) && true))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          return;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((((((false) && true) || false))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((((int(int(min(((((injectionSwitch.x < injectionSwitch.y)) ? 1 : (36975))), ((((injectionSwitch.x < injectionSwitch.y)) ? 1 : (36975)))))))) * 1)); (((((1 * (_injected_loop_counter ++))) << 0)) - 0))
        {
         if((false))
          {
           if((false))
            continue;
           break;
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((! ((((true && (! ((false))))) && true))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            continue;
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            barrier();
           barrier();
           if((false))
            continue;
          }
         if((false))
          continue;
        }
       if((false))
        barrier();
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          barrier();
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
        }
      }
     for(int _injected_loop_counter = (clamp((0 | ((0 << (int(((3) | (3))))))), (0 << (int(((3) | (3))))), (((0 << (int(((3) | (3)))))) - int((injectionSwitch.x))))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((((injectionSwitch.x > ((injectionSwitch) / sqrt(vec2(1.0, 1.0))).y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        barrier();
       if(false)
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((false) || false) || ((false))))
          {
           if((false))
            {
             if((false))
              barrier();
             continue;
            }
           if((false))
            {
             if(((true && (false))))
              break;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             if((false))
              barrier();
             barrier();
            }
           break;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((false) || false)))
            barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((((injectionSwitch.x > injectionSwitch.y)) && ((true) || false)))))
            {
             if((false))
              continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((((((((false || (false))) || ((false) && ((injectionSwitch.x < injectionSwitch.y)))))) && true)) || false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((((((injectionSwitch.y)) - 0.0)) + log(1.0))); _injected_loop_counter ++)
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             barrier();
            }
           if((false))
            break;
           if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 continue;
                }
               barrier();
              }
             if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
              return;
             if((false))
              barrier();
             return;
             if((false))
              break;
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(((! (! (false)))))
          barrier();
         if((false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             atomicStore(buf[_GLF_struct_replacement_16.next_virtual_gid], uint(2), 4, 64, 4);
             if(false)
              {
              }
             else
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              {
               if((false))
                continue;
               if((false))
                barrier();
               if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              continue;
            }
           if((false))
            barrier();
          }
         while(false);
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((! (! (bool(bvec2(false, false))))))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           barrier();
           if((false))
            break;
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((false || ((((! (! ((! ((false || ((bool(bvec4(! ((injectionSwitch.x > (((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) - 0.0)))), true, false, false))))))))))) && true))))))
          break;
         if((false))
          barrier();
        }
       if((false))
        return;
      }
     if((false))
      barrier();
     subgroupAll(false);
     if((((false) || false)))
      {
       if(((bool(bool((false || (false)))))))
        return;
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        {
         if(((bool(bvec3(false, true, false)))))
          barrier();
         return;
        }
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((((((((injectionSwitch.x < injectionSwitch.y)) && (false))) || false))) || (! (! (false)))))
            return;
           if((false))
            barrier();
           return;
           if((((false) || false)))
            {
             if(true)
              {
               if((false))
                barrier();
               if(((((((mix(vec2((11.97), (- 5799.1011)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))) || false)))
                return;
               barrier();
              }
             else
              {
               if((false))
                return;
               if((false))
                barrier();
              }
            }
          }
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(true)
      {
       if((false))
        barrier();
       if((((false)) && ((injectionSwitch.x < injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if(((false || (! (! ((((((((false) && true))) && true)) && true)))))))
        {
         for(int _injected_loop_counter = ((((~ (~ (0 ^ 1)))) | (0 ^ 1))); (! ((false || (! (_injected_loop_counter != 0))))); _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        return;
      }
     else
      {
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(5))); ((((_injected_loop_counter --) << int((injectionSwitch.x)))) | (clamp(0, 0, 0))))
      {
       atomicStore(buf[((clamp((_GLF_struct_replacement_16.next_virtual_gid), (_GLF_struct_replacement_16.next_virtual_gid), (((false ? (workgroup_id) : (0u + (~ (((~ ((_GLF_struct_replacement_16.next_virtual_gid))) * 1u))))))))) - 0u)], uint(2), 4, 64, 4);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
          }
         else
          {
           if((false))
            barrier();
          }
         return;
        }
       return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          break;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = ((0 | 0) >> (((int(6)) >> int((injectionSwitch.x))))); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       subgroupAll(((true) && true));
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
      {
       if(((bool(bvec3(false, (((bool(bvec2(((false) && ((injectionSwitch.x < injectionSwitch.y))), false))) || false)), true)))))
        {
         if((false))
          barrier();
         return;
        }
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((bool(bool(((true) || false)))))
  {
   if((false || ((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
         return;
        }
       else
        {
        }
      }
     if((((false || ((injectionSwitch.x > ((false ? (injectionSwitch) : (vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))).y))))))
      {
       if(((false || (false))))
        barrier();
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((! (! ((false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               return;
              }
            }
          }
        }
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(false)
            {
             if((false))
              return;
            }
           else
            {
             if((false))
              return;
             return;
            }
           if((false))
            return;
          }
         barrier();
        }
       return;
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((((false) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
   if((false))
    return;
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(((true) || false))
    {
     if((false))
      barrier();
     if((((((false) && true)) || ((injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < ((false ? (_injected_loop_counter) : 1)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            continue;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
        }
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
         if((false))
          barrier();
        }
       if((false))
        continue;
       if((false))
        barrier();
      }
     if((false))
      return;
     if((false))
      break;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if((false))
        barrier();
       if((false))
        break;
       barrier();
      }
     if(((! (false || ((! (false)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
       barrier();
       if((false))
        barrier();
       if((false))
        continue;
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        return;
       if((! (! ((bool(bvec4((false), true, true, true)))))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if(((true && (false))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; (! (! ((bool(bvec4(((_injected_loop_counter < 1) || false), ((injectionSwitch.x < injectionSwitch.y)), true, false)))))); _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         return;
        }
      }
     if((false))
      return;
    }
   else
    {
     if((false || ((false))))
      return;
    }
  }
 for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y)) || ((! (! (false)))))))))))))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > (min(((false ? (_injected_loop_counter) : ((0 ^ 1) ^ 1))), ((true ? ((((0 ^ 1) ^ 1)) | (((0 ^ 1) ^ 1))) : (_injected_loop_counter))))); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         break;
        }
       return;
      }
     if((false))
      break;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}
