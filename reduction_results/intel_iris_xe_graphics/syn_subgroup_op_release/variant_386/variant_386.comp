#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (uint(uvec2((uvec3(((uvec3(0u, 0u, 0u) >> (uvec3(7u))) ^ (gl_WorkGroupID))[(clamp(0, 0, (int((max(int(0), int(0)))))))], ((gl_WorkGroupID[1]) * (1u & 1u)), (((((0u + (0u ^ ((uint(uvec3((false ? ((((true ? (((min(workgroup_size * workgroup_size, workgroup_size * workgroup_size)) >> 0u)) : (((num_workgroup) | (num_workgroup))))))) : gl_WorkGroupID[2]), 0u, 0u))))))))) * 1u))).x, 0u)));
 uint workgroup_base = (((0u ^ 0u) + (((((((false ? (workgroup_id) : uint((injectionSwitch.x)))) << 0u)) / (((0u ^ (((true ? 1u : (subgroup_id))))) << (uint(2u))) >> (uint(2u))))))) ^ ((((0u ^ (workgroup_size * (~ (~ ((0u | (((((workgroup_id) << 0u)) | uint((injectionSwitch.x))))))))))) - 0u)));
 uint virtual_gid = ((workgroup_base) | (workgroup_base)) + ((1u * (((((0u | (((uint(uint((subgroup_id * subgroup_size) / 1u))) - 0u)))))) << 0u))) + subgroup_local_id;
 uint next_virtual_gid = (0u ^ (((true ? ((workgroup_base) << 0u) : (subgroup_size))))) + ((((uint(uvec2(((min(((~ (((true ? ~ (((((((0u | ((((~ (~ ((0u) + ((uint(uvec3(uint(uvec3((0u << (uint(7u))), 0u, 0u)), 1u, 1u)))))))) + 0u)))) >> 0u)) - (0u + (0u))))) : (num_workgroup))))) + ((((true ? (((subgroup_id) - 0u)) : (subgroup_size)))) << 0u)), (((0u) + (0u << (uint(7u)))) + (((max((((min((min((subgroup_id) - 0u, ((uint(uint(((subgroup_id))))) | ((subgroup_id))) - 0u)), (((subgroup_id) - 0u) ^ 0u))))), (((min((min((subgroup_id) - 0u, (subgroup_id) - 0u)), (1u * ((((((subgroup_id) - 0u) ^ 0u)) ^ 0u)))))))))) >> (clamp(0u, 0u, 0u)))))) * subgroup_size), 1u))) * 1u)) | ((~ (~ ((0u + (((subgroup_id) - 0u)))))) * subgroup_size)) + (1u * (((0u ^ ((uint(uvec4(((true ? min((((clamp(((subgroup_local_id + 1)), ((subgroup_local_id + 1)), (~ (~ (((subgroup_local_id + 1))))))) << 0u) % subgroup_size), ((((((~ (~ ((! (((! ((! (! ((false || (true))))))) || false))) ? (subgroup_local_id) | (subgroup_local_id) : (clamp((workgroup_base), (max((workgroup_base), (workgroup_base))), (((workgroup_base)) | ((workgroup_base))))))))))) + ((1) ^ 0)) % subgroup_size)) : (virtual_gid))), 0u, (min(1u, 1u)), 0u))))))));
 buf[virtual_gid] = 1;
 if((! (((bool(bvec3(true && (((! (! ((! ((! (! (! ((! (false)))))))))))) || (false || (false))), false, true)))))))
  {
  }
 else
  {
   if((bool(bvec4((! (! ((((true && ((bool(bool((((injectionSwitch.x > injectionSwitch.y)) || (subgroup_local_id + 1 < subgroup_size)))))))) || false)))), ((((injectionSwitch) * vec2(1.0, 1.0)).x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)), false, ((((injectionSwitch.x > injectionSwitch.y))) && true)))))
    {
     atomicStore(buf[next_virtual_gid], ((uint(uvec3(uint(uvec3((clamp((uint(uvec4(uint(2), 0u, 0u, 1u))), (uint(uvec4(uint(2), 0u, 0u, 1u))), (uint(uvec4(uint(2), 0u, 0u, 1u))))), 1u, 0u)), 0u, 1u)))), 4, (((int((ivec2(0, 0) ^ (ivec2((clamp((max(64, 64)), ((int(ivec4((((64)) | ((64))), 1, (96631 & 0), 0))) / 1), 64)), 0))))) | 0)), 4);
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       subgroupAll(false);
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(2), ((0 | ((~ (~ (0))))) + (4)), 64, 4);
     subgroupAll(true);
    }
  }
}
