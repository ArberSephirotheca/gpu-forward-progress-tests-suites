#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! ((true && (((false || (((! (! (! ((bool(bvec2(false, ((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))))))) && true)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((((bool(bvec2(((true && ((! (! (true))))) && (false)), false)))) || false)))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) || false)))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((((vec2(mat2x4(injectionSwitch, 1.0, (injectionSwitch.y), sqrt(1.0), abs(0.0), 1.0, 0.0))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, ((injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(((! (! ((true && (bool(bool((false))))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x < injectionSwitch.y)) && ((! (! ((false)))))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((((false)) || false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((! (! ((((((false)) || false)) && ((injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((workgroup_size * workgroup_id) << 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if((! ((! (! (! ((((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(((true && (((true) || false) && ((false))))))
  barrier();
 if((false))
  {
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + (((((((((max(subgroup_id, subgroup_id)) * (~ (~ (((min((((subgroup_size) << 0u)) ^ 0u, (((subgroup_size) << 0u)) ^ 0u))))))) | 0u)) ^ 0u)) + ((0u ^ 0u) << (uint(0u)))) | (0u << (uint(1u))))) + ((subgroup_local_id + 1) % ((min(max((max(subgroup_size, subgroup_size)), subgroup_size), max((max(subgroup_size, subgroup_size)), subgroup_size)))));
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((((! (! ((bool(bvec3(false, (((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), false))))))) || false) || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 buf[virtual_gid] = (0 ^ (((((1) << (- 37848 & 0))) - 0)));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((true && ((! (! ((((injectionSwitch.x > injectionSwitch.y)) || (false))))) || ((false))))))
    barrier();
   if((false))
    barrier();
   if(((bool((bvec2(bvec4((bvec2(bvec4(bvec2(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)), true), true, false))), false, false)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((bool(bvec4(((((((min(vec2(mat2x4(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), 0.0, sin(0.0), 1.0)), vec2(mat2x4(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, exp(0.0))), 0.0, sin(0.0), 1.0)))))).x > injectionSwitch.y))), true, (bool(bvec2(false, true))), true)))) || false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((((! ((bool(bool(! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, ((injectionSwitch.x > injectionSwitch.y)), true)))))))))))) && ((injectionSwitch.x < injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(((((uint((injectionSwitch.x))) | (uint((injectionSwitch.x)))) | (((max((~ ((clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id))))), subgroup_local_id))) | 0u))) + 1 < subgroup_size)
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     if((! (! ((false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], (((true ? (clamp(((max(((((clamp((((false ? (subgroup_id) : false ? (((subgroup_size)) * 1u) : ((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_id) : uint(2))))) - 0u), (((((false ? (subgroup_id) : false ? (subgroup_size) : uint(2))) - 0u)) / 1u), (((false ? (subgroup_id) : false ? (subgroup_size) : uint(2))) - 0u)))) / 1u)), ((((1u | 1u) * (((((false ? (subgroup_size) : uint(2)) >> (uint(uvec4(0u, 0u, 1u, 1u))))) | ((0u | (false ? (subgroup_size) : uint(2))))))) | 0u))))), ((max(((((clamp((((false ? (subgroup_id) : false ? (((subgroup_size)) * 1u) : ((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_id) : uint(2))))) - 0u), (((((false ? (subgroup_id) : false ? (subgroup_size) : uint(2))) - 0u)) / 1u), (((false ? (subgroup_id) : false ? (subgroup_size) : uint(2))) - 0u)))) / 1u)), ((((1u | 1u) * (((((false ? (subgroup_size) : uint(2)) >> (uint(uvec4(0u, 0u, 1u, 1u))))) | ((0u | (false ? (subgroup_size) : uint(2))))))) | 0u))))), (0u | (((max(((((clamp((((false ? (subgroup_id) : false ? (((subgroup_size)) * 1u) : ((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_id) : uint(2))))) - 0u), (((((false ? (subgroup_id) : false ? (subgroup_size) : uint(2))) - 0u)) / 1u), (((false ? (subgroup_id) : false ? (subgroup_size) : uint(2))) - 0u)))) / 1u)), ((((1u | 1u) * (((((false ? (subgroup_size) : uint(2)) >> (uint(uvec4(0u, 0u, 1u, 1u))))) | ((0u | (false ? (subgroup_size) : uint(2))))))) | 0u))))))))) : (virtual_gid)))), 4, 64, 4);
   if((false))
    barrier();
   if((false))
    barrier();
   if((((true && (((bool(bvec4(((injectionSwitch.x < injectionSwitch.y)) && ((false || (((true && ((mix(float((min(injectionSwitch.x, injectionSwitch.x))), float((6.5)), bool((bool(bvec4(false, ((false || ((injectionSwitch.x > injectionSwitch.y)))), true, ((injectionSwitch.x < injectionSwitch.y)))))))) > injectionSwitch.y)))))), false, (true && (false)), false)))))))))
    barrier();
   if((false))
    barrier();
   subgroupAll(false);
   if((false))
    barrier();
   if(((! ((bool((true && (bool((bool(bvec3(! (false), true, true))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) && true)))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   atomicStore(buf[(0u ^ ((clamp((~ (~ (next_virtual_gid))), next_virtual_gid, (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))))))], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   subgroupAll(true);
   if((false))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((false || (((true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))))))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(((bool(bool(false)))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((true && ((false))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(((((cos(vec2(0.0, 0.0)) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > (mix(float(((- - 4.0))), float(injectionSwitch.y), bool(((injectionSwitch.x < injectionSwitch.y)))))))))
      barrier();
     if((((false || (bool(bool(false)))))))
      barrier();
     barrier();
    }
   if(((bool(bool(false)))))
    barrier();
   if((((! (((! ((false))) || false)))) && true))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false || (bool(bool((false || (((false)) && true)))))))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((bool((bvec2(bvec3(bvec2((false), false), false))))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         barrier();
        }
       barrier();
       if((((bool((((true && ((bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true)))))) && true))))))
        barrier();
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if(((! (! (bool(bvec4((! (! ((false)))), true, ((injectionSwitch.x > injectionSwitch.y)), false)))))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
}
