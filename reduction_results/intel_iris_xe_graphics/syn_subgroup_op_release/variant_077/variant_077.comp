#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((! (! ((((! ((! (! (! ((((bool((bool(bvec3(bool((((injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((! (! (false))), true, false, true))), false))))) || false))))))))) || false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((((true && (false || (((bool(bvec3((! (! (injectionSwitch.x > injectionSwitch.y))), true, ((injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((((injectionSwitch.x > (vec2((clamp(injectionSwitch[0], (min(injectionSwitch[0], injectionSwitch[0])), (clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((false) || false)))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((((! (! ((((! ((! (! (! (bool(((bool(false)) && true)))))))) || false)))))) || false))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (clamp(workgroup_size * ((false ? (subgroup_local_id) : workgroup_id)), workgroup_size * ((false ? (subgroup_local_id) : workgroup_id)), workgroup_size * ((false ? (subgroup_local_id) : workgroup_id))));
 if(((((((true && ((bool((bvec2(bvec3(bvec2(((true && (false)) || ((bool((bvec2(bvec4(bvec2(bool(bvec4(((! (! (false)))), (bool(bool((! (! (false)))))), false, (false || (((false) || false))))), true), true, true))))))), (! ((bool(bool(! ((bool(bvec3(false, true, false)))))))))), ((injectionSwitch.x < injectionSwitch.y)))))))))) && true))) && true))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((((! (((true && (bool(bool(! ((! (! ((mix(vec2((- 3.8), (- 8339.9996)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(((injectionSwitch.x < injectionSwitch.y)), true))).x > injectionSwitch.y)))))))))))))))
    barrier();
  }
 uint virtual_gid = ((uint(uvec2(((false ? (workgroup_id) : (0u ^ ((((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + (~ (~ (((subgroup_id) | 0u)))) * subgroup_size))))))), 1u))) | ((0u) << 0u)) + subgroup_local_id;
 uint next_virtual_gid = ((((workgroup_base) / 1u) << 0u)) + subgroup_id * (uint(uvec2(((subgroup_size) | ((min(((subgroup_size) / 1u), ((~ ((clamp(((~ ((subgroup_size))) | 0u), ((~ ((subgroup_size))) >> 0u), ~ ((subgroup_size)))))) / 1u))))), 0u))) + ((((min(((((max(subgroup_local_id, (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + (max(1, 1)))) | (((max(subgroup_local_id, (clamp(subgroup_local_id, subgroup_local_id, ((subgroup_local_id) >> 0u))))) + (max(1, 1))))) % subgroup_size, (clamp(((max(subgroup_local_id, (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + (max(1, 1))) % subgroup_size, ((max(((0u << (uint(8u))) ^ (((subgroup_local_id) << 0u))), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + (max(1, 1))) % subgroup_size, ((((max(subgroup_local_id, (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + (max(1, 1))) % subgroup_size) << 0u))))) ^ 0u)));
 if(((! (! (false)))))
  barrier();
 (((~ (~ (buf[virtual_gid] = ((1) << 0))))) * (uint((min((injectionSwitch.y), (0.0 + ((injectionSwitch.y)))))) * ((uint(uint(1u))))));
 if(subgroup_local_id + ((false ? (- 24692) : 1)) < subgroup_size)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > (max((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((3.2), (- 394.863)), bvec2(false, false))), injectionSwitch)).y))))
    barrier();
   atomicStore(buf[(((((! (! (false))) ? (workgroup_id) : clamp(clamp(next_virtual_gid, next_virtual_gid, ((next_virtual_gid) | 0u)), clamp((uint(uvec3(next_virtual_gid, 1u, 1u))), next_virtual_gid, ((0u ^ ((next_virtual_gid) | 0u)))), clamp(next_virtual_gid, next_virtual_gid, ((next_virtual_gid) | 0u)))))))], uint(2), 4, 64, 4);
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   subgroupAll((((bool(bool((! (! ((true && ((true && (false))))))))))) || false));
   if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((((bool((bvec3(bvec4(bvec3((! ((true && (! ((((false)) || false)))))), true, true), true))))) || false)))
      barrier();
     if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, (int((((((false ? (((ivec4(65429, - 83813, - 5440, (max(13920, (0 | (13920))))))) ^ ivec4(0, 0, 0, 0)) : (((ivec4(0, ((0) << (0 << (int(1)))), 0, 0) + ((clamp(((((clamp(ivec4(((((((64) >> 0) << ((0 >> (int(1))) << (int(7)))))) | 0), 1, 0, 1), ivec4(((((true ? ((64) >> 0) : (42176))) << ((0 >> (int(1))) << (int(7))))), 1, 0, 1), (ivec4(1, 1, 1, 1) * (ivec4((((((clamp(64, 64, 64))) >> 0) << ((0 >> (int(1))) << (int(7))))), 1, 0, 1)))))) | ivec4(0, 0, 0, 0))) * ivec4(1, 1, 1, 1), (ivec4(((64) >> 0), 1, 0, 1)) * ivec4(1, 1, 1, 1), (ivec4(((64) >> 0), 1, 0, 1)) * ivec4(1, 1, 1, 1))))))) | (((ivec4(64, 1, 0, 1)) * ivec4(1, 1, (max((~ (~ (1))), (max(1, 1)))), 1)))))) + ivec4(0, 0, 0, ((0) / (1 & 1))))))), 4);
   subgroupAll(true);
   if((false))
    barrier();
   if(((! (! (((! (! ((injectionSwitch.x > (mix(float(injectionSwitch.y), float(((- - 4.3))), bool(false)))))))))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((bool((bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true), false)))))))
    barrier();
  }
 if((false))
  barrier();
}
