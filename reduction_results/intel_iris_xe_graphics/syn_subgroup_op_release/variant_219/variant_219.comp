#version 460

struct _GLF_struct_25 {
 int _f0;
 ivec2 _f1;
 mat3 _f2;
 bvec3 _f3;
 mat4x2 _f4;
 bvec4 _f5;
 int _f6;
} ;

struct _GLF_struct_26 {
 _GLF_struct_25 _f0;
} ;

struct _GLF_struct_23 {
 vec4 _f0;
 uvec3 _f1;
 vec4 _f2;
 ivec3 _f3;
 mat3x2 _f4;
 bool _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_22 {
 int _f0;
 bvec2 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 int _f4;
 uint _f5;
} ;

struct _GLF_struct_21 {
 bvec4 _f0;
 uint _f1;
 ivec3 _f2;
 bool _f3;
 mat4x3 _f4;
 uint _f5;
} ;

struct _GLF_struct_24 {
 _GLF_struct_21 _f0;
 uvec4 _f1;
 _GLF_struct_22 _f2;
 uvec3 _f3;
 _GLF_struct_23 _f4;
} ;

struct _GLF_struct_19 {
 uint _f0;
 mat3 _f1;
 mat3 _f2;
 mat4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_20 {
 ivec2 _f0;
 mat2x3 _f1;
 _GLF_struct_19 _f2;
} ;

struct _GLF_struct_17 {
 ivec3 _f0;
 bvec4 _f1;
 mat4 _f2;
 mat2x4 _f3;
 mat4 _f4;
 mat3x4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_16 {
 uvec2 _f0;
 mat4 _f1;
 vec4 _f2;
 mat3x4 _f3;
 bvec3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
} ;

struct _GLF_struct_27 {
 uint subgroup_local_id;
 mat2x4 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_20 _f2;
 mat2x4 _f3;
 _GLF_struct_24 _f4;
 _GLF_struct_26 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_13 {
 mat3x4 _f0;
 vec2 _f1;
 bvec3 _f2;
 int _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 vec3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 uvec3 _f1;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 uvec2 _f1;
 float _f2;
 mat2 _f3;
 mat2 _f4;
 mat4x2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 ivec2 _f1;
 mat2 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 mat4 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 float _f1;
 int _f2;
 mat3 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_5 {
 uint _f0;
 mat2x3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_6 {
 float _f0;
 mat2 _f1;
 int _f2;
 uvec2 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_3 {
 bool _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 ivec2 _f1;
 mat3 _f2;
 bvec4 _f3;
 mat2x4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 mat2x3 _f1;
 bool _f2;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 vec3 _f1;
 vec4 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_15 {
 _GLF_struct_4 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_14 _f4;
 uint virtual_gid;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > ((1 | 1) ^ (1 | 0)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     return;
    }
  }
 if((false))
  {
   if(true)
    {
     if((false))
      {
       if(false)
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         if(true)
          {
           if((false))
            return;
           do
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           while(false);
          }
         else
          {
          }
        }
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(false)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if(((! ((! (! (! (false))))))))
          {
           do
            {
             return;
            }
           while(false);
          }
         return;
        }
      }
     do
      {
       if((false))
        continue;
       if((((false) || false)))
        return;
       if(((true && (false))))
        return;
      }
     while(false);
    }
   else
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(((bool(bvec2(false, true)))))
        return;
       if((((false) && true)))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (- 61547 & 0); _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              return;
            }
          }
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         return;
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                return;
               return;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
           if((false))
            return;
          }
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        break;
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(7))); _injected_loop_counter --)
          {
           if((false))
            return;
           if((bool(bvec4(false, true, false, true))))
            {
            }
           else
            {
             return;
             if((false))
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
            }
          }
        }
       if((((false) || false)))
        return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       do
        {
         if((false))
          return;
        }
       while(false);
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       do
        {
         if((false))
          return;
        }
       while(false);
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
         return;
        }
       else
        {
        }
       if((false))
        return;
      }
     if((false))
      {
       if(false)
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              return;
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         if((false))
          return;
         if((((false) && true)))
          return;
        }
       if(true)
        {
         do
          {
           if((false))
            return;
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((false || (false))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            return;
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & int((injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(true)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                continue;
               continue;
              }
             if((! (! (false))))
              {
              }
             else
              {
               do
                {
                 if((((false) && true)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    continue;
                   if((false))
                    break;
                   if((false))
                    {
                     if((false))
                      return;
                     if((false))
                      continue;
                     return;
                    }
                   if((false))
                    continue;
                   return;
                  }
                }
               while((true && (false)));
              }
             if((false))
              continue;
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              return;
            }
           else
            {
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(false)
              {
               if(((true && (false))))
                break;
               if((false))
                break;
              }
             else
              {
               if((false))
                return;
               return;
              }
            }
           if((false))
            continue;
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               continue;
              }
             continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(true)
          {
           if((false))
            continue;
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               return;
              }
            }
          }
         else
          {
          }
         if((false))
          return;
         if(true)
          {
           do
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               continue;
               if((false))
                break;
              }
             if((false))
              {
               if((false))
                return;
               return;
               if((((false || (bool(bvec3(false, false, ((injectionSwitch.x < injectionSwitch.y)))))))))
                return;
              }
             if((false))
              continue;
             if((false))
              break;
            }
           while(false);
           if((false))
            break;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
               if((false))
                return;
               if((false))
                return;
               if((false))
                continue;
              }
             while(false);
            }
           if((false))
            return;
           return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                continue;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 return;
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           else
            {
            }
           if(true)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    return;
                   if((false))
                    break;
                  }
                 while(false);
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(1))); _injected_loop_counter --)
                  {
                   do
                    {
                     if(false)
                      {
                       if((false))
                        continue;
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if((false))
                        break;
                       return;
                      }
                    }
                   while(false);
                  }
                }
              }
             if((false))
              return;
             do
              {
               if((false))
                {
                 do
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 while(false);
                }
              }
             while(false);
            }
           else
            {
            }
           if((false))
            break;
           if((false))
            return;
           if(true)
            {
             do
              {
               if(((bool(bvec2(false, false)))))
                {
                 if((false))
                  return;
                 return;
                }
              }
             while(false);
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      return;
                     if((false))
                      return;
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 return;
                }
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   return;
                  }
                }
               else
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if((false))
                return;
               if((false))
                {
                 if((false))
                  break;
                 continue;
                }
              }
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            continue;
          }
         else
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
              {
               return;
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              return;
             if((false))
              break;
             if((false))
              return;
            }
           while(false);
           if(((! (((! (false)) && true)))))
            return;
          }
        }
       if((false))
        return;
       if((false))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           do
            {
             if((false))
              continue;
             if((false))
              {
               if((false))
                break;
               return;
              }
            }
           while(false);
           return;
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(false)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                {
                 if(((((bool(bvec3(false, false, false))) && true))))
                  return;
                 do
                  {
                   return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                return;
               return;
              }
             if((false))
              {
               if((false))
                return;
               continue;
              }
            }
           else
            {
            }
           if((false))
            continue;
          }
         else
          {
           if((false))
            continue;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           if(((bool(bvec3(false, false, true)))))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if((false))
          continue;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            break;
           return;
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          return;
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   else
    {
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     do
      {
       if((false))
        return;
      }
     while(false);
     return;
    }
  }
 if((false))
  return;
 if((false))
  {
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(true)
  {
   if((false))
    {
     do
      {
       if((false))
        {
         if((false))
          continue;
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(((! (! (false)))))
            return;
           return;
          }
         if((false))
          continue;
        }
       if((false))
        continue;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       return;
      }
     while(false);
     if((false))
      {
       do
        {
         if((false))
          return;
        }
       while(false);
       return;
      }
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
    }
   else
    {
    }
  }
 if((false))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     else
      {
      }
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter < (int((injectionSwitch.y)) | 1); _injected_loop_counter ++)
        {
         if((false))
          return;
        }
       return;
      }
     if((false))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if((false))
    {
     if((false))
      return;
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      return;
     return;
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(false);
        }
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     return;
     if((false))
      return;
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    {
     if(false)
      {
       if((false))
        return;
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        return;
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
        }
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         return;
        }
       while(false);
      }
     if(((! (! (false)))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while((true && (((injectionSwitch.x > injectionSwitch.y)))));
     if((false))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
     for(int _injected_loop_counter = (0 << ((0 + (int(5))))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
       if((false))
        {
         do
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         while(false);
        }
       if((false))
        break;
      }
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          {
           do
            {
             if((false))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           return;
          }
         return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
        }
       return;
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        return;
       if((false))
        {
         for(int _injected_loop_counter = ((1 ^ 1) | 0); _injected_loop_counter != ((int((injectionSwitch.y)) << ((min(((int(3)) | (int(3))), int(3))))) >> ((max(int(3), int(3))))); _injected_loop_counter ++)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         return;
        }
       if((false))
        return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
         if((false))
          {
           if((false))
            break;
           continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
      }
     while(false);
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   while(false);
   if((false))
    return;
  }
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(gl_SubgroupInvocationID, mat2x4(1.0), _GLF_struct_18(_GLF_struct_16(uvec2(1u), mat4(1.0), vec4(1.0), mat3x4(1.0), bvec3(true), uvec3(1u)), _GLF_struct_17(ivec3(1), bvec4(true), mat4(1.0), mat2x4(1.0), mat4(1.0), mat3x4(1.0), bvec4(true))), _GLF_struct_20(ivec2(1), mat2x3(1.0), _GLF_struct_19(1u, mat3(1.0), mat3(1.0), mat4(1.0), mat2x3(1.0))), mat2x4(1.0), _GLF_struct_24(_GLF_struct_21(bvec4(true), 1u, ivec3(1), true, mat4x3(1.0), 1u), uvec4(1u), _GLF_struct_22(1, bvec2(true), ivec2(1), mat3x2(1.0), 1, 1u), uvec3(1u), _GLF_struct_23(vec4(1.0), uvec3(1u), vec4(1.0), ivec3(1), mat3x2(1.0), true, uvec2(1u))), _GLF_struct_26(_GLF_struct_25(1, ivec2(1), mat3(1.0), bvec3(true), mat4x2(1.0), bvec4(true), 1)), bvec3(true));
 if(false)
  {
  }
 else
  {
   if((false))
    return;
   do
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   while(false);
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     do
      {
       if((false))
        continue;
       return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
      }
     else
      {
      }
    }
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
   do
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   while((((injectionSwitch.x < injectionSwitch.y)) && (false)));
   do
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     return;
     if((false))
      {
       if((false))
        return;
       continue;
      }
    }
   while(false);
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         if(true)
          {
           return;
          }
         else
          {
          }
         if((false))
          return;
         if((false))
          return;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if(true)
        {
         if((false))
          return;
         if(((bool(bvec3(((false) && true), false, true)))))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         return;
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
      {
       if(false)
        {
         if((false))
          break;
         if(((false || (false))))
          continue;
         if(((bool(bvec4(false, true, false, true)))))
          break;
         for(int _injected_loop_counter = ((1 << (((int(2)) | (0 << (int(6)))))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          return;
         if((false))
          continue;
         if((false))
          {
           if(((true && (false))))
            return;
           return;
          }
        }
       else
        {
         if((false))
          continue;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           for(int _injected_loop_counter = (0 & - 21200); _injected_loop_counter < ((((1 & 1) | 1) << (int(3))) >> ((max(((int(3)) | (int(3))), int(3))))); _injected_loop_counter ++)
            {
             return;
            }
          }
         return;
        }
       if((false))
        {
         if((false))
          continue;
         break;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(true)
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
        }
       return;
      }
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 do
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = ((0 | (0 >> (int(1)))) ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (((int(3)) | 0))); _injected_loop_counter --)
        {
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          return;
         if((false))
          break;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     continue;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_4(ivec3(1), vec3(1.0), vec4(1.0), _GLF_struct_0(uvec4(1u), mat2x4(1.0), mat3x2(1.0)), _GLF_struct_1(vec4(1.0), mat2x3(1.0), true), _GLF_struct_2(vec4(1.0), ivec2(1), mat3(1.0), bvec4(true), mat2x4(1.0), mat2x4(1.0)), _GLF_struct_3(true, ivec3(1))), _GLF_struct_6(1.0, mat2(1.0), 1, uvec2(1u), _GLF_struct_5(1u, mat2x3(1.0), mat4(1.0))), _GLF_struct_8(_GLF_struct_7(mat4(1.0), 1.0, 1, mat3(1.0)), mat3x4(1.0)), _GLF_struct_11(_GLF_struct_9(bvec3(true), ivec2(1), mat2(1.0), vec3(1.0), mat3(1.0)), mat4(1.0), _GLF_struct_10(uvec4(1u), uvec2(1u), 1.0, mat2(1.0), mat2(1.0), mat4x2(1.0), mat2x4(1.0))), _GLF_struct_14(_GLF_struct_12(vec4(1.0), vec3(1.0), ivec2(1)), uvec3(1u), _GLF_struct_13(mat3x4(1.0), vec2(1.0), bvec3(true), 1, mat3x2(1.0))), workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_27.subgroup_local_id);
 if(true)
  {
   if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
    return;
  }
 else
  {
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       return;
       if((false))
        return;
      }
     if((false))
      return;
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = ((0 ^ 0) ^ int((injectionSwitch.y))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
    }
   if((false))
    return;
   if((false))
    return;
  }
 if(false)
  {
   if(((! (! (false)))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         continue;
        }
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 >> ((0 | (int(2))))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false))));
   if((false))
    return;
   if(((bool(bvec4(false, true, true, ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(((! (! (false)))))
        return;
      }
     if((! (! (true))))
      {
       if((false))
        return;
       return;
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      return;
    }
   if((false))
    return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_27.subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    continue;
   buf[_GLF_struct_replacement_15.virtual_gid] = 1;
  }
 if(((! (! (false)))))
  return;
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if((false))
  {
   if((false))
    return;
   if(true)
    {
     if(true)
      {
       return;
      }
     else
      {
       if((false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_struct_replacement_27.subgroup_local_id + 1 < subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if(((true && (false))))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if(((! (! ((! (! (false))))))))
        {
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          continue;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              {
               if((false))
                return;
               continue;
              }
             if((false))
              continue;
             continue;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              break;
             if((false))
              break;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if((false))
            break;
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                break;
               if((false))
                continue;
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             if((false))
              {
               if((false))
                {
                 if((false))
                  return;
                 if((((false) && true)))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                 if((false))
                  break;
                 if((false))
                  {
                   if((false))
                    return;
                   break;
                  }
                }
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   break;
                  }
                 if((false))
                  break;
                 if((false))
                  break;
                 if((false))
                  continue;
                 continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   break;
                  }
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if((false))
                break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   continue;
                  }
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                return;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              continue;
             if((false))
              {
               if((false))
                break;
               if((false))
                break;
               continue;
              }
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false))))
                {
                }
               else
                {
                 return;
                 if((false))
                  continue;
                }
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              break;
             break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((false))
            break;
           if((false))
            return;
           if((false))
            {
             if((false))
              return;
             do
              {
               return;
              }
             while(false);
             if((false))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               return;
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             if((false))
              break;
             return;
             if((false))
              continue;
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(((! (! (false)))))
              {
               if(true)
                {
                 if((false))
                  return;
                 if((false))
                  break;
                 if((false))
                  {
                   if(((true) || false))
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                   return;
                  }
                }
               else
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   return;
                  }
                }
               if((((! (! (bool(bvec3((bool(bvec3(false, false, true))), true, false))))))))
                continue;
               if((false))
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 if((false))
                  return;
                 if((false))
                  continue;
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    return;
                   continue;
                   if((false))
                    continue;
                   if((false))
                    break;
                  }
                 break;
                 if((false))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   continue;
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                 if((false))
                  return;
                }
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                break;
              }
            }
          }
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        return;
       if(((! (! (false)))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(false)
          {
           if((false))
            break;
           if((false))
            continue;
           if((false))
            break;
           if((false))
            return;
          }
         else
          {
           return;
          }
         if((false))
          continue;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         if((false))
          return;
         return;
         if((false))
          return;
         if((false))
          return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    {
     if((false))
      return;
     if(true)
      {
       do
        {
         return;
         if(((bool(bvec4((! (! (false))), false, true, false)))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(false);
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if(((! (! (false)))))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > (0 << (int(1))); _injected_loop_counter --)
    {
     if(((bool(bvec2(false, false)))))
      break;
     if(((false || (false))))
      return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       if(false)
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(((true) || false))
            {
             if((false))
              return;
            }
           else
            {
            }
           return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ (1)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((false))
    {
     for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < (~ ((0 | (~ (1))))); _injected_loop_counter ++)
      {
       return;
       if((((false) && true)))
        return;
      }
    }
   if((false))
    return;
   for(int _injected_loop_counter = ((1 << (((int(1)) | 0))) >> (((int(1)) | (int(1))))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       return;
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     do
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          continue;
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
     while(false);
     if((false))
      break;
     if(false)
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
          }
         if(true)
          {
           if((false))
            break;
           if((false))
            break;
           return;
          }
         else
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           break;
           if((false))
            continue;
           if((false))
            break;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             continue;
            }
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            break;
           if((false))
            continue;
           return;
          }
         while(false);
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 ^ int((injectionSwitch.y))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
           if((false))
            continue;
           if((false))
            continue;
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       subgroupAll(false);
      }
     if((false))
      break;
     if((false))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
       return;
      }
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   do
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
         if((false))
          break;
        }
       if((false))
        break;
       return;
      }
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
    }
   while(false);
   if(true)
    {
     for(int _injected_loop_counter = (0 >> ((min(int(5), (clamp(int(5), int(5), int(5))))))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              break;
             return;
             if((false))
              return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if(false)
        {
         for(int _injected_loop_counter = ((1) >> 0); _injected_loop_counter != (min((0 + ((0 << (int(3))))), (~ (~ ((0 << (int(3)))))))); _injected_loop_counter --)
          {
           do
            {
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   return;
                  }
                 return;
                 if((false))
                  break;
                }
               if(true)
                {
                 if(true)
                  {
                   return;
                   if(((false || (false))))
                    continue;
                  }
                 else
                  {
                   if((false))
                    break;
                  }
                }
               else
                {
                }
              }
            }
           while(false);
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if(((! (! (false)))))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           return;
          }
         return;
        }
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((((false) || false)))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            return;
           return;
           if((false))
            return;
          }
        }
       if((false))
        {
         if((false))
          return;
         return;
        }
       if(((! (! (false)))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         return;
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(false);
        }
       return;
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
             if((false))
              break;
            }
          }
         if((false || (false)))
          {
          }
         else
          {
           return;
          }
        }
      }
     if((bool((bool(bvec4(bool(false), true, false, false))))))
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          return;
        }
       return;
       do
        {
         if((false))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   if((false))
    return;
   for(int _injected_loop_counter = ((((1 << (int(7))) >> (int(7))) << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(false)
      {
       if((false))
        break;
      }
     else
      {
       if((false))
        {
         if((bool(bvec2(true, false))))
          {
           if((false))
            {
             for(int _injected_loop_counter = (max((1 | 0), (1 | 0))); _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if((false))
                  return;
                 do
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((false) || false)))
                      break;
                     continue;
                    }
                  }
                 while(false);
                 if((false))
                  break;
                }
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           return;
           if((false))
            return;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 return;
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                return;
              }
             if((false))
              continue;
            }
           if((((false) && true)))
            continue;
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              return;
            }
          }
        }
      }
    }
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
       if((false))
        return;
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       return;
      }
    }
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = (0 & 13637); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     return;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    {
     do
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((! (! (true))))
      {
       do
        {
         subgroupAll(true);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
      }
     else
      {
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              return;
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if((false))
          break;
        }
       if((false))
        return;
       if((false))
        return;
       if(true)
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           if((false))
            return;
           if((false))
            return;
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if(((! (! ((false || (false)))))))
              continue;
             if((false))
              break;
             if((false))
              continue;
             if((false))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if((false))
                continue;
               if((false))
                break;
               if((((bool(bvec4(bool(bool(false)), true, true, true))))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 if((false))
                  break;
                 return;
                 if((false))
                  continue;
                 if((false))
                  break;
                }
               if((false))
                break;
               return;
               if((false))
                continue;
              }
            }
           return;
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  break;
                 return;
                }
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if((false))
              break;
            }
          }
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                return;
              }
             if((false))
              {
               if(false)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 if((false))
                  return;
                }
               else
                {
                 return;
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
            }
           else
            {
            }
          }
        }
       if((false))
        return;
       do
        {
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 1; _injected_loop_counter > (((0 | (0))) * 1); _injected_loop_counter --)
              {
               if(((! (! (false)))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 return;
                }
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                return;
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                continue;
               return;
              }
            }
           return;
           if((false))
            continue;
           for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 << (int(1))) << (((int(1)) ^ 0))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                return;
               if(((false || (false))))
                return;
               if((false))
                return;
              }
            }
          }
        }
       while(false);
       if(((bool(bvec2(false, false)))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 if((false))
  return;
}
