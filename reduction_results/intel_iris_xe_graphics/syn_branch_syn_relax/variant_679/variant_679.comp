#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((false) && true)))
      barrier();
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 << (int(6))) << (int(6))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if((((false) && true)))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 do
  {
   do
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > ((float((mat3(1.0) * (mat2x3((min(float((mat3((injectionSwitch.y)) * (mat2x3(injectionSwitch.y, log(1.0), 0.0, 0.0, ((min((min(clamp(1.0, 1.0, (clamp(1.0, 1.0, 1.0))), clamp(1.0, 1.0, (clamp(1.0, 1.0, 1.0))))), clamp(1.0, 1.0, (clamp(1.0, 1.0, 1.0)))))), 0.0)))), float((mat3(((vec2(mat2(injectionSwitch, 1.0, 1.0))).y)) * (mat2x3(injectionSwitch.y, log(1.0), 0.0, 0.0, 1.0, 0.0)))))), 1.0, 0.0, 1.0, 1.0, ((((true ? 0.0 : (- 8.8))) - 0.0))))))))))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; (! (! ((bool(bvec4(_injected_loop_counter < (((clamp((int(ivec4(((1) ^ 0), 1, 0, 0))), (((max(1, 1)) + 0)), 1)) << (int(6))) >> (int(6))), false, true, false)))))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((((max((clamp((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               if((((false) || false)))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
             barrier();
            }
           if(((bool(bool(false)))))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(((! (! (false)))))
              barrier();
             if((false))
              barrier();
             if(true)
              {
               barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                  }
                 while(false);
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if(true)
                {
                 do
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = (0 ^ (0 & 99543)); _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((bool(((bvec2(bvec4(bvec2(bvec4(bvec2(((((bool((bvec3(bvec4(bvec3(((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, (bool(bvec4(false, true, false, true))), false), false)))))))), true), true, true)), false, true)))))))
                          barrier();
                        }
                       if((false))
                        {
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                         if((false))
                          barrier();
                         barrier();
                        }
                       barrier();
                      }
                     barrier();
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   if((false))
                    barrier();
                  }
                 while(false);
                }
               else
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((! (! (((((injectionSwitch.x > injectionSwitch.y) || false))))))) || false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
            }
          }
         while(false);
         if((false))
          barrier();
        }
      }
     if(((bool(bvec2((false || (((injectionSwitch.x > injectionSwitch.y)))), true)))))
      barrier();
     if((false))
      barrier();
    }
   while(((((injectionSwitch.x > injectionSwitch.y)) || false)));
  }
 while(false);
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 do
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = ((0) * 1); (bool(bool(_injected_loop_counter < 1))); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((true && ((false)))) && true))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
    }
  }
 while(false);
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(false);
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     do
      {
       if((((false) && true)))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     while(false);
     if((false))
      barrier();
    }
   barrier();
   if(((false || (false))))
    barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((! (! (((injectionSwitch.x > (max((float(mat2x3(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 1.0))), ((false ? (vec2(- 13.17, - 126.144)) : injectionSwitch)).y)))))))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 uint workgroup_size = (max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 | 0) << (int(4))) >> ((~ (((~ (int(4))) - 0))))); _injected_loop_counter ++)
    {
     if(((! (((false || (bool(bvec3((! (! (! (bool(bvec2((((true && (injectionSwitch.x > injectionSwitch.y)))), false)))))), true, true)))))))))
      {
       if(((bool(bool((! (! (false))))))))
        barrier();
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         while((bool(bool(false))));
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > (((0 << (int(3)))) / 1); _injected_loop_counter --)
            {
             if((bool(bvec2(((injectionSwitch.x < injectionSwitch.y)), true))))
              {
               barrier();
               if((false))
                barrier();
               if((((false) || false)))
                barrier();
              }
             else
              {
              }
            }
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > ((((min((min(float(mat3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat3(injectionSwitch.y, 0.0, 1.0, 1.0, ((1.0 * (((float(((mat4x3(1.0, 0.0, 0.0, ((1.0) / 1.0), tan(0.0), sin(0.0), 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + 0.0)))), 0.0, 1.0, ((1.0) - 0.0), 1.0)))), float(mat3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))) - sqrt(0.0))))))))
        {
         if((false))
          barrier();
         if((! ((true && (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
               if((false))
                barrier();
              }
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 << (int(((1) ^ 0)))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(((true && (false))))
      barrier();
    }
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     while(false);
    }
   if(((true && ((bool(bool(false)))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
        }
       while(false);
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   while(false);
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((bool(bool(false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     do
      {
       if(((false || (false))))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if(true)
    {
     barrier();
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = ((workgroup_base + subgroup_id * subgroup_size) | 0u) + (((((((~ (~ (subgroup_local_id))) >> 0u))) / 1u)) | 0u);
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(((true && (false))))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> ((~ (~ (int(6)))))); _injected_loop_counter ++)
        {
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   while((bool((! (! ((true && (bool(false)))))))));
   if(((bool(bool(false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec3(((false) || false), false, false)))))
    {
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); (! (! (_injected_loop_counter < (1 & 1)))); _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(false);
    }
   do
    {
     if((false || (false)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
             while(false);
             do
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(false);
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)));
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             for(int _injected_loop_counter = (0 + (1)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); (bool(bool((true && (_injected_loop_counter != 0))))); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
              {
               if((! (! (((false || ((true) && true)))))))
                {
                 do
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if((false))
              barrier();
             barrier();
             if((((false) || false)))
              {
               if(true)
                {
                 if((false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > (0.0 + ((float(((float(injectionSwitch.y)) * 1.0)))))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = (0 | (0 >> (int(5)))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
         if(((bool(bvec4(false, true, true, false)))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   while(((((injectionSwitch.x > injectionSwitch.y)) && true)));
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = (max((max((0u ^ (workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size)), (max(workgroup_base + subgroup_id * subgroup_size, (0u | (workgroup_base + subgroup_id * subgroup_size)))))) + (((((uint(uvec4(subgroup_local_id + 1, 0u, 0u, uint((injectionSwitch.x))))) * 1u))) % subgroup_size);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int(((1.0 * (injectionSwitch.x)))); _injected_loop_counter --)
    {
     if((! (! (false))))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = ((1 << (((int(2)) - 0))) >> (((int(2)) | ((0 + (int(2))))))); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
            {
             if((false))
              {
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((false) && true)))
              barrier();
             if((((((bool((bvec2(bvec4(bvec2(false || (false), true), false, true))))))) && true)))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | (max(0, 0))); _injected_loop_counter --)
                  {
                   if(((! (! (false)))))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 if(((bool((bvec2(bvec2(bvec2((((false || (false)) || ((false))) && true), true))))))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(false);
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > ((true ? (max(injectionSwitch.y, injectionSwitch.y)) : (fma(- 53.15, refract(4.2, - 623.186, - 2981.4469), - 5.5))))))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if(true)
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           do
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((true && (false))))
              barrier();
             if(((! (! (false)))))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
        }
       else
        {
        }
       if(((! (! (false)))))
        {
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
         if(((! (! ((! (! (false))))))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if(((bool(bool((false || (false)))))))
                barrier();
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((((false) && true)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
              {
               barrier();
               if((false))
                barrier();
              }
            }
           for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
            {
             barrier();
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = (0 >> ((((min(int(8), int(8)))) | ((int(ivec3(int(8), 0, 1))))))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if(((false || (false))))
        {
         if((((injectionSwitch.x > (clamp(injectionSwitch, (min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((! (! (true))))
              {
               barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((((((bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ((injectionSwitch.x < injectionSwitch.y)), false, true))))))))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (18525 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (clamp(int((injectionSwitch.x)), int((injectionSwitch.x)), int((injectionSwitch.x)))); _injected_loop_counter != (((1 << (int(3))) >> (int(3))) * (1)); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   if(((((float(mat4(injectionSwitch.x, 1.0, 1.0, 1.0, (injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, sqrt(((0.0) / 1.0)), exp(0.0), round((max(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), (clamp(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), determinant(mat3(0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))) > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         barrier();
                         if(true)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            barrier();
                           if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         else
                          {
                          }
                         if((false))
                          barrier();
                        }
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
               if((false))
                barrier();
              }
             while(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((bool(bvec4(false, false, false, false)))))
            barrier();
           if((false))
            barrier();
          }
         if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
        }
       while(false);
       for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ (1 ^ 0)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 & - 52923); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
        }
       buf[virtual_gid] = 1;
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > (((max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(subgroup_local_id + (clamp(1, 1, 1)) < subgroup_size)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((false) || false)))
    {
     if((false))
      barrier();
     barrier();
    }
   int i = 0;
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if(((((bool(bool(false))) && true))))
      {
       if(((((float((0.0 + (float((exp(0.0) * (injectionSwitch.x))))))) > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if(true)
          {
           for(int _injected_loop_counter = (0 & - 85977); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if(true)
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((false))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            {
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((! (! (true))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = ((1) | (1)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(false);
            }
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = (1 | int((injectionSwitch.y))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           do
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
            }
           while(false);
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(false);
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > ((injectionSwitch) - vec2((injectionSwitch.x), (injectionSwitch.x))).y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((bool(bool(true))))
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(((bool((bvec2(bvec2(bvec2(false, true))))))))
      barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, ((((((0) >> 0)) | (0))) - 0));
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((! (! (true))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       else
        {
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((bool(bvec3(false, true, false))))
              {
              }
             else
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(true)
    {
     if(true)
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((((1.0 * (((clamp(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))))) > (max(injectionSwitch, injectionSwitch)).y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             do
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             while(false);
            }
          }
        }
       atomicStore(buf[next_virtual_gid], (clamp(uint(2), uint(2), uint(2))), 4, 64, 0);
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
}
