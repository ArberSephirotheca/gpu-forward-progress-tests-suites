#version 430

struct _GLF_struct_19 {
 mat4 _f0;
 mat3x4 _f1;
 vec2 _f2;
 uint _f3;
} ;

struct _GLF_struct_18 {
 mat3x4 _f0;
 int i;
 mat2x3 _f1;
 bvec2 _f2;
 vec2 _f3;
 int _f4;
 mat2 _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 bool _f1;
 ivec3 _f2;
 _GLF_struct_19 _f3;
} ;

struct _GLF_struct_16 {
 float _f0;
 bvec2 _f1;
 mat2x4 _f2;
 mat3x2 _f3;
 uvec4 _f4;
 mat4x2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_17 {
 mat4x2 _f0;
 int _f1;
 _GLF_struct_16 _f2;
} ;

struct _GLF_struct_21 {
 mat2 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_20 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 mat2 _f1;
 mat4x3 _f2;
 uvec4 _f3;
 bvec3 _f4;
 ivec3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_12 {
 mat4x2 _f0;
 bvec3 _f1;
 ivec2 _f2;
 mat3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_11 {
 mat4x2 _f0;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 bvec3 _f1;
 ivec2 _f2;
 bvec4 _f3;
 float _f4;
 bvec2 _f5;
 uint _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 mat3x2 _f2;
 uint next_virtual_gid;
 _GLF_struct_12 _f3;
 bvec3 _f4;
 _GLF_struct_13 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
 uint _f1;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
 mat3x4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 mat3x4 _f3;
 mat3 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 uvec2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_3 {
 float _f0;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 _GLF_struct_3 _f1;
 float _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 ivec3 _f1;
 uvec2 _f2;
 mat3 _f3;
 mat2x3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_9 {
 float _f0;
 mat2x3 _f1;
 _GLF_struct_1 _f2;
 bool _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_5 _f5;
 _GLF_struct_8 _f6;
 uint subgroup_size;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(true)
        {
         if(true)
          {
           do
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
              }
            }
           while(false);
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           do
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           if((false))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if(true)
              {
               if((false))
                barrier();
               if(true)
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   if(((! (! (false)))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     do
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           if((false))
                            {
                             if((false))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                {
                                 barrier();
                                }
                               if(((bool(bool(false)))))
                                barrier();
                              }
                             barrier();
                            }
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                         if((false))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if((false || (false)))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                         else
                          {
                           if((false))
                            barrier();
                           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (((false ? (18164) : int(3))))) >> (int(3))); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                           if((false))
                            barrier();
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           if((bool(bvec4(false, true, true, false))))
                            {
                            }
                           else
                            {
                             if((false))
                              barrier();
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            {
                             if((false))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(false);
                            }
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               do
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               while(false);
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                               if((false))
                                barrier();
                              }
                            }
                          }
                         if((false))
                          {
                           if((false))
                            {
                             if((false))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(false);
                             if((false))
                              barrier();
                            }
                           if((false))
                            barrier();
                           barrier();
                          }
                         if((false))
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             if(true)
                              {
                               if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false)))))
                                barrier();
                               barrier();
                               if((false))
                                barrier();
                              }
                             else
                              {
                              }
                             if((false))
                              {
                               if(true)
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             if(false)
                              {
                              }
                             else
                              {
                               if((false))
                                barrier();
                               if((false))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while((! (! (false))));
                                }
                              }
                            }
                           do
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           while(false);
                           if(true)
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                        }
                      }
                     while(false);
                    }
                   while(false);
                  }
                 while(false);
                 if((false))
                  barrier();
                }
               else
                {
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
           if(((false || (false))))
            {
             if((false))
              {
               if((false))
                barrier();
               if((! (! (true))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                   if(((false || (false))))
                    barrier();
                  }
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
            }
           if(((false || (false))))
            {
             if((false))
              barrier();
             if((((false) || false)))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       if(true)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       barrier();
                      }
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           for(int _injected_loop_counter = ((((0 | 0) << (int(8)))) ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(2))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if(true)
                {
                 barrier();
                 if((false))
                  {
                   do
                    {
                     if((false))
                      barrier();
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while((((! (! (false)))) || false));
                  }
                }
               else
                {
                }
              }
            }
           for(int _injected_loop_counter = ((1 << ((clamp(int(2), int(2), int(2))))) >> (int(2))); _injected_loop_counter > (1370 & (0 >> (int(4)))); _injected_loop_counter --)
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                 if((bool(bvec3((! (! (true))), false, true))))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       for(int _injected_loop_counter = ((0 >> (int(4))) ^ 0); _injected_loop_counter < ((0 >> (int(3))) ^ 1); _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                         do
                          {
                           if(true)
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              barrier();
                             if((false))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                             if((false))
                              barrier();
                             if(((! (! (false)))))
                              {
                               if(true)
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           if(false)
                            {
                            }
                           else
                            {
                             if((false))
                              barrier();
                            }
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                         if((false))
                          barrier();
                        }
                       for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         if((false))
                          {
                           if((false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(false);
                          }
                         if(false)
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                         if((false))
                          barrier();
                        }
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while((false || (false)));
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 while(false);
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(false);
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(1.0, mat2x3(1.0), _GLF_struct_1(mat4x2(1.0), _GLF_struct_0(mat3(1.0), ivec3(1), uvec2(1u), mat3(1.0), mat2x3(1.0), ivec4(1))), true, _GLF_struct_2(uvec3(1u), mat3x4(1.0)), _GLF_struct_5(mat2x4(1.0), _GLF_struct_3(1.0), 1.0, _GLF_struct_4(bvec3(true), uvec2(1u), mat3(1.0))), _GLF_struct_8(_GLF_struct_6(vec3(1.0), mat4x2(1.0), bvec4(true), mat3x4(1.0), mat3(1.0), bvec2(true)), mat2x3(1.0), bvec4(true), _GLF_struct_7(ivec4(1), mat3x4(1.0), mat2(1.0))), gl_SubgroupSize);
 do
  {
   if((false))
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     do
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
      }
     while(false);
     if((((false) || false)))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((((false) || false)))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     do
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         while(false);
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       barrier();
      }
     do
      {
       if((false))
        barrier();
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((false) || false)))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if((false))
              barrier();
             for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            barrier();
          }
        }
       else
        {
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       while(false);
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(true)
  {
   if((((false) && true)))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 if((false))
  {
   do
    {
     if(true)
      {
       barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   while(false);
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(true)
  {
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(false);
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
  {
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(false);
    }
  }
 else
  {
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     while(false);
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
    }
   else
    {
     barrier();
     if((false))
      barrier();
    }
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     for(int _injected_loop_counter = (0 >> ((max(int(7), int(7))))); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 do
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if(true)
        {
         if(false)
          {
          }
         else
          {
           if(false)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     barrier();
                    }
                   if((false))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | (0)); _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                   if((! (! (false))))
                    {
                    }
                   else
                    {
                     if(((! (! (((((injectionSwitch.x > injectionSwitch.y))) || false))))))
                      barrier();
                     if((false))
                      barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         do
                          {
                           if(true)
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           else
                            {
                             if((false))
                              barrier();
                            }
                          }
                         while(false);
                        }
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
              }
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((((false) || false)))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(false);
            }
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((! ((bool(bvec4(! (false), false, true, false)))))))
          barrier();
         do
          {
           if((false))
            barrier();
           barrier();
           if((((bool(bvec2(bool((bvec2(bvec2(bvec2(false, true))))), true))))))
            barrier();
           if(((! (! (false)))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         if(((bool(bvec2(((false) || false), false)))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
    }
   if((false))
    barrier();
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << ((0 ^ (int(0))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_14(_GLF_struct_10(mat4x2(1.0), bvec3(true), ivec2(1), bvec4(true), 1.0, bvec2(true), 1u), _GLF_struct_11(mat4x2(1.0)), mat3x2(1.0), workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_9.subgroup_size), _GLF_struct_12(mat4x2(1.0), bvec3(true), ivec2(1), mat3(1.0), mat2(1.0)), bvec3(true), _GLF_struct_13(bvec2(true), mat2(1.0), mat4x3(1.0), uvec4(1u), bvec3(true), ivec3(1), vec4(1.0))), 1u);
 if((false))
  {
   if((true && (true)))
    {
     barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if(false)
        {
         if(((! (! (false)))))
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
           if((false))
            barrier();
          }
        }
       else
        {
         barrier();
        }
      }
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           do
            {
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               barrier();
              }
            }
           while(false);
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
         if((false))
          barrier();
        }
       barrier();
      }
    }
   else
    {
    }
   barrier();
   do
    {
     if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((((false) || false)))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   if(true)
    {
     if(true)
      {
       do
        {
         do
          {
           barrier();
           if((false))
            {
             do
              {
               if((! (! (false))))
                {
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if(((false || (false))))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
      }
     else
      {
      }
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(true)
        {
         do
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((bool(bvec3(false, true, false))))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             while(false);
             barrier();
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((bool(bvec3(false, true, false))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
             barrier();
            }
           if((false))
            {
             if(((! (! (false)))))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = (- 60207 & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if(((bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), false, false)))))
                {
                 if((((false) || false)))
                  barrier();
                 do
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(6))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = (1 | ((1 << (int(4))) >> (int(4)))); _injected_loop_counter != (0 >> (int(3))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if(true)
                            {
                             barrier();
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         barrier();
                        }
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                 if((false))
                  {
                   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(true)
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               barrier();
              }
             if((false))
              barrier();
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             if((false))
              barrier();
            }
          }
         while(false);
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             do
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(3))); _injected_loop_counter --)
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((clamp(int(0), int(0), int(0))))) >> (((int(0)) << 0))); _injected_loop_counter ++)
                      {
                       barrier();
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       if((false))
                        barrier();
                      }
                     if((((false) || false)))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((true && (false)))
          {
           if((false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 << (int(4))) >> (int(4))) & 1); _injected_loop_counter ++)
            {
             if(((! (! (false)))))
              barrier();
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(true)
          {
           if(false)
            {
            }
           else
            {
             do
              {
               if(true)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if(((bool(bool((bool(bvec4(false, true, true, false))))))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 if(false)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if(true)
                          {
                           if((false))
                            barrier();
                           if(false)
                            {
                            }
                           else
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         else
          {
          }
         if((false))
          barrier();
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if(((! (! (false)))))
              barrier();
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                       do
                        {
                         if((false))
                          barrier();
                        }
                       while(false);
                       if((false))
                        barrier();
                      }
                     while(false);
                    }
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                }
               if((false))
                barrier();
              }
             barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((! (! (false)))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         do
          {
           if((! (! ((bool(bool(false)))))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if(((false) && true))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 barrier();
                }
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 if(true)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         if((false))
                          barrier();
                         do
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         while(((false) || false));
                        }
                       else
                        {
                        }
                       if((false))
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if(((bool(bool(false)))))
                          barrier();
                        }
                      }
                    }
                   while(false);
                  }
                 while(false);
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  barrier();
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    {
                     if(((false || (false))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
              }
             while(false);
             if((false))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(true)
          {
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               if((! (! (false))))
                {
                }
               else
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               do
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                 if((false))
                  {
                   if(((false || (false))))
                    barrier();
                   barrier();
                  }
                 do
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(((bool(bool(false)))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if(false)
                  {
                   if(((! (! (false)))))
                    barrier();
                   do
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 else
                  {
                   if((false))
                    {
                     if(((! (! (false)))))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     do
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                         if(((bool(bool(false)))))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(((bool(bool(false)))))
                            barrier();
                           do
                            {
                             barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           while(false);
                          }
                         if(((! (! (false)))))
                          {
                           if((false))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                           if((false))
                            barrier();
                          }
                         if((false))
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     while(false);
                     barrier();
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         do
                          {
                           barrier();
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                       if((false))
                        barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if((! (! ((! (! (true)))))))
                        {
                         barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                      }
                     barrier();
                    }
                  }
                }
               while((bool(bool(false))));
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                      {
                       do
                        {
                         barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 if((((false) || false)))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
               while(false);
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > (- 99161 & (0 ^ 0)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
        }
       if(true)
        {
         if((false))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
       barrier();
      }
     else
      {
      }
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   do
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((true && (false))))
        {
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((bool(bvec3(false, false, true)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       barrier();
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
       if((false))
        barrier();
      }
    }
   if((bool(bvec4(true, true, false, true))))
    {
     barrier();
    }
   else
    {
    }
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       barrier();
      }
    }
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (- 88010 & ((false ? (39265) : 0))); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((bool(bvec3(true, false, ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           while(false);
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = ((1 << (int(0))) >> ((clamp(int(0), ((int(0)) | (int(0))), int(0))))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     if((false))
                      barrier();
                    }
                   barrier();
                  }
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if(true)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         while(false);
        }
       for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != (0 << (int(0))); _injected_loop_counter --)
        {
         if(((! (! (false)))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if(true)
            {
             do
              {
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((bool((bvec2(bvec2(bvec2(false, false)))))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               while(false);
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while((false || (false)));
               if((false))
                barrier();
              }
             while(false);
             if((false))
              {
               if(true)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((true && (false)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               buf[virtual_gid] = 1;
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if(true)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       if(true)
                        {
                         barrier();
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         while(false);
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
       if((((false) || false)))
        {
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
           if(((! (! (false)))))
            barrier();
          }
        }
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(((! (! (false)))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (((false ? (30994) : int(4))))) >> (int(4))); _injected_loop_counter != (1 ^ int((injectionSwitch.y))); _injected_loop_counter --)
        {
         barrier();
        }
       if((false))
        {
         if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((false))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           else
            {
             for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                {
                 for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (0 ^ (0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
         if((false))
          {
           if(false)
            {
             if(((! (! (false)))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
    }
   while(false);
   if((false))
    {
     if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false)))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
  }
 if((((false) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (14334 & 0); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(true)
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       do
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 ^ (0 | 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
        }
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false || (true)))
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if(subgroup_local_id + 1 < _GLF_struct_replacement_9.subgroup_size)
      {
       _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(mat2(1.0), _GLF_struct_17(mat4x2(1.0), 1, _GLF_struct_16(1.0, bvec2(true), mat2x4(1.0), mat3x2(1.0), uvec4(1u), mat4x2(1.0), uvec4(1u))), _GLF_struct_20(_GLF_struct_18(mat3x4(1.0), 0, mat2x3(1.0), bvec2(true), vec2(1.0), 1, mat2(1.0)), true, ivec3(1), _GLF_struct_19(mat4(1.0), mat3x4(1.0), vec2(1.0), 1u)), mat2x4(1.0));
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         atomicStore(buf[_GLF_struct_replacement_15._f0.next_virtual_gid], uint(2), 4, 64, 0);
         if((false))
          barrier();
        }
       do
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(true)
            {
             if((false))
              {
               if((bool(bvec4(true, true, false, true))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 do
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                }
               barrier();
              }
            }
           if(true)
            {
             if((false))
              barrier();
             barrier();
             do
              {
               if((false))
                barrier();
               do
                {
                 if((false))
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if(((! (! (false)))))
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        barrier();
                      }
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if((false))
              {
               if(((false || (false))))
                barrier();
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             while(false);
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       atomicStore(buf[_GLF_struct_replacement_15._f0.next_virtual_gid], uint(2), 4, 64, 0);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((false))
    barrier();
  }
 while(false);
 do
  {
   if((false))
    barrier();
   do
    {
     for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter != ((1 << (((false ? (- 27158) : int(2))))) >> ((~ (~ (int(2)))))); _injected_loop_counter ++)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) - 0); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(false);
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while((true && (false)));
        }
      }
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if(((true && (false))))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       if(((! (! (false)))))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((! (! (false)))))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
            {
             if(true)
              {
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               barrier();
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           while(false);
          }
         else
          {
          }
        }
      }
     while(false);
    }
   else
    {
    }
  }
 while(false);
 if((false))
  {
   do
    {
     if((false))
      barrier();
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 & - 93592); _injected_loop_counter < (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             do
              {
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             barrier();
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 for(int _injected_loop_counter = (0 ^ int((injectionSwitch.y))); _injected_loop_counter > (0 & (- 87328 ^ 78849)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(((! (! (false)))))
                  barrier();
                }
               else
                {
                }
              }
             do
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(false);
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(false)
          {
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((bool(bool(false)))))
            barrier();
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             do
              {
               barrier();
              }
             while(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false)))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             barrier();
            }
           barrier();
           do
            {
             if(true)
              {
               if((false))
                barrier();
               if(((false || ((bool(bvec2(false, true)))))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (int((injectionSwitch.y)) & 1); _injected_loop_counter != (0 << (int(3))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (((int(5)) >> 0))) >> (int(5))); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         do
          {
           if(((true && (false))))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               if(((true && (false))))
                barrier();
              }
            }
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      {
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while((! (! (false))));
      }
     if(((! (! (((false) || false))))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if(((false) || false))
    {
    }
   else
    {
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
}
