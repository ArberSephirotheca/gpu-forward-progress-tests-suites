#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 for(int _injected_loop_counter = (min((int(int(1))), 1)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(((bool(bvec4(false, true, false, false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    break;
  }
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id;
 if(((! (! (false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(true)
    {
     if(((bool(bool(false)))))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   do
    {
     barrier();
    }
   while(false);
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((true && (false))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid;
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size;
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   if((false))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y = subgroup_id;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   return;
   if(((! (! (false)))))
    barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     return;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.x = GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     do
      {
       barrier();
      }
     while(false);
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 if(((bool(bool((bool(bool(false))))))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((((false) && true)))
  return;
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << ((0 | (int(5))))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z = subgroup_size;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  return;
 if(((bool(bvec3(false, false, false)))))
  barrier();
 if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if(true)
              {
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((false))
                return;
               if((false))
                barrier();
               if((false))
                barrier();
               return;
               if((false))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(((bool(bvec2(false, false)))))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
             barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
              return;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if(false)
              {
               if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               return;
              }
            }
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             return;
             if((false))
              return;
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
         barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) - 0); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     if((false))
      barrier();
    }
   else
    {
     GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z;
     if((false))
      {
       do
        {
         return;
         if((false))
          continue;
        }
       while(false);
      }
     do
      {
       if((false))
        continue;
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 & - 40442); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            continue;
           if((false))
            barrier();
          }
        }
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
      {
       if((false))
        continue;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(false)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         return;
        }
      }
    }
   else
    {
     GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z = subgroup_local_id;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << (int(3))) >> (int(3))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      return;
    }
  }
 else
  {
   if((false))
    return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y)) || (false)))
    {
     if((false))
      continue;
    }
   else
    {
     if((false))
      {
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              continue;
             return;
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     if((false))
      barrier();
    }
  }
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y = GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z;
 for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 << (int(4))) | 0); _injected_loop_counter --)
  {
   if(true)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
      }
     else
      {
       if((false))
        return;
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               while((! (! (false))));
               if((false))
                barrier();
               return;
              }
             return;
             if((false))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((false) || false)))
            return;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if(((false || (false))))
        barrier();
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((! (! (false)))))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        return;
      }
    }
   barrier();
  }
 if(((bool(bool(false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) && true)))
        continue;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((! (! (false)))))
    continue;
   if((false))
    barrier();
   do
    {
     if((false))
      break;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           do
            {
             if((false))
              barrier();
             barrier();
            }
           while(false);
          }
        }
      }
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(((bool(bvec2(false, false)))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (((int(5)) * 1))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if((((false) || false)))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    break;
   do
    {
     if((false))
      break;
     if(true)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
              {
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                 if((false))
                  barrier();
                }
              }
             if((false))
              break;
             return;
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           break;
           if((false))
            barrier();
          }
         if(true)
          {
           barrier();
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if(((! (! (((false) || false))))))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 continue;
                }
               barrier();
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     if((false))
      {
       if(((bool(bvec2(false, false)))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (max((~ (~ (int((injectionSwitch.y))))), int((injectionSwitch.y)))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               if(true)
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
            }
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          barrier();
         return;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
             barrier();
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            barrier();
           if(((! (! (false)))))
            barrier();
           if((false))
            return;
          }
         if((false))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     break;
    }
   if((false))
    break;
   if((false))
    continue;
   if(((((bool(bvec3(false, true, false))) || false))))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 << ((min(((int(0)) | (int(0))), int(0))))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if(false)
        {
         if((false))
          {
           if(((! (! (false)))))
            barrier();
           barrier();
          }
        }
       else
        {
         if((false))
          barrier();
         if((((false) && true)))
          barrier();
         return;
         if(((bool((! (! (bool(false))))))))
          barrier();
         if((((false) && true)))
          barrier();
        }
      }
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((false) && true)) && true)))
      {
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((false) && true)))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   return;
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((((false) || false)))
    barrier();
   if((false))
    barrier();
   GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.x = num_workgroup;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 do
  {
   if(((bool(bvec3((! (! (false))), false, true)))))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.x = GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.x;
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if(((false || (false))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    continue;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((false) && true)))
    continue;
   do
    {
     do
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if(((! (! (false)))))
            {
             if((false))
              barrier();
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while((! (! (false))));
    }
   while(false);
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(((true && (false))))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if(((((injectionSwitch.x > injectionSwitch.y))) || false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if(((true && (false))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    return;
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((bool(bvec3((false || (false)), false, true))))
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 if((false))
  return;
 if(true)
  {
   GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
  }
 else
  {
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if(false)
    {
    }
   else
    {
     return;
    }
   if((false))
    barrier();
  }
 uint virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.x * GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z + GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y;
 if((false))
  barrier();
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w = virtual_gid;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec2(false, true)))))
    barrier();
   return;
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          break;
        }
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) >> (int(7))); _injected_loop_counter --)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((bool(bvec2(false, true)))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          continue;
         if(((false || (false))))
          barrier();
        }
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((true && (false))))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.x * GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z + ((GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y + 1) % GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z);
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w] = 1;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if((false))
        continue;
       if((false))
        barrier();
      }
     while(false);
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if((((bool(bvec2(bool(bvec2(false, false)), true))))))
  {
   if((false))
    barrier();
   if((((false) || false)))
    return;
   barrier();
  }
 if(false)
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if(((bool(bvec4(false, true, false, false)))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 << ((clamp(int(6), int(6), int(6))))); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          {
           if(((false || (false))))
            break;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if(((false || (false))))
          {
           if((false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = ((1 << (int(4))) >> (((int(4)) | (int(4))))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if(((! (! (false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((true && (true)))
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
    }
   else
    {
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((~ (~ (int(5)))))) >> (int(5))); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((true && (true)))
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((false))
              barrier();
             return;
             if((false))
              break;
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(false)
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           do
            {
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             barrier();
            }
           while(false);
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
          }
        }
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              return;
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(((! (! (false)))))
              return;
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
               return;
              }
             if((false))
              {
               if((false))
                return;
               return;
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
               if(((bool(bvec3(false, false, false)))))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((false) || false)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   do
                    {
                     barrier();
                     if((false))
                      return;
                    }
                   while((bool(bvec4(false, false, false, true))));
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if((false))
                  break;
                 barrier();
                }
              }
             barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if(((! (! (false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
      }
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while((bool(bool(false))));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              return;
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               do
                {
                 if((false))
                  barrier();
                 barrier();
                }
               while(false);
              }
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           return;
           if((((false) && true)))
            barrier();
           if((false))
            continue;
          }
        }
       if((((false) || false)))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(false)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(8))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((true && (false))))
          return;
        }
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if(((! (! (false)))))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((1 << (((int(1)) / 1))) >> ((0 ^ (((int(1)) / 1))))); _injected_loop_counter != (0 << (int(6))); _injected_loop_counter --)
            {
             barrier();
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              break;
            }
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << ((0 | (int(5))))); _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          return;
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 if(false)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((false))
          break;
         if((false))
          barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((false))
      continue;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 do
  {
   if(GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y + 1 < GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z)
    {
     if((false))
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if((false))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         while(false);
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     int i = 0;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
         if((false))
          return;
        }
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while((false || (false)));
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        barrier();
       if(((false || (false))))
        {
         if((false))
          barrier();
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       barrier();
       if((false))
        return;
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
        }
       else
        {
        }
       return;
       if((false))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((true && (false)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        break;
       do
        {
         if((false))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
           if(true)
            {
             do
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   break;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  break;
                }
               if((false))
                return;
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
              }
             while(false);
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                return;
               return;
              }
             if((false))
              continue;
            }
           else
            {
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((false))
            barrier();
          }
         if((false))
          return;
        }
       while(false);
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
           if((false))
            barrier();
          }
        }
       while(false);
       if(false)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            break;
          }
        }
       else
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((false) && true)))
            return;
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
               barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           if((false))
            barrier();
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       do
        {
         if((false))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        break;
       if((false))
        barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
         do
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << ((0 | ((min(int(4), int(4))))))) >> (int(4))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
             if((((bool(bool(bool((bvec2(bvec2(bvec2(false, false)))))))))))
              continue;
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             if(true)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 | (0)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      break;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 if(((! (! (false)))))
  return;
 if((false))
  {
   if((false))
    {
     if(true)
      {
       if((false))
        barrier();
       return;
      }
     else
      {
      }
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   do
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      break;
     if(true)
      {
       if((false))
        {
         if((false))
          continue;
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     if((false))
      continue;
     if(((true && (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          continue;
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((((false) && true)))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while((true && (false)));
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  barrier();
}
