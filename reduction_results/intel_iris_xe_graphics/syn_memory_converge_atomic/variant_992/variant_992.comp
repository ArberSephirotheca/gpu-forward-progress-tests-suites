#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if((false))
    return;
   if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(((bool(bvec4(false, false, false, true)))))
    barrier();
   if((((false)) || false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((((! (! (((! (! ((injectionSwitch.x > injectionSwitch.y))))))))) || false)))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((! ((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (! ((true && (((false || (false))))))))))))))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if(((true && (bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, ((((injectionSwitch.x > injectionSwitch.y)) && true)), false))))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if((((((injectionSwitch.x > (min((max(injectionSwitch.y, ((injectionSwitch.y) - 0.0))), (float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0)))))))) || false)))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((false || (false))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((((((injectionSwitch.x > injectionSwitch.y) || false)) && true)) || false)))))
  barrier();
 if(((true && (bool((bvec3(bvec3((bvec3(bvec3(bvec3((false), true, false))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bvec4(false, true, true, false)))))
    barrier();
   barrier();
  }
 if((((((((((min((true ? (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : (- 639.919)), (true ? (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : (- 639.919))))) + tan(0.0)))) / (injectionSwitch.y)) > injectionSwitch.y))))
  barrier();
 uint num_workgroup = (uint((uvec3(1u, (clamp(1u, ((1u) << 0u), 1u)), 1u) * (uvec3(((gl_NumWorkGroups) << ((clamp((uvec3(0u, 0u, 0u) | ((~ (~ (uvec3(0u, ((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : 0u)), 0u) ^ uvec3(((true ? 0u : (subgroup_size))), 0u, 0u)))))), (((uvec3(uvec3(uvec3(0u, 0u, 0u) ^ uvec3((((! ((! (! (! (true)))))) ? 0u : (subgroup_size))), 0u, 0u))))) - uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) ^ uvec3(((true ? 0u : (subgroup_size))), 0u, 0u))))).x, (max(uint((injectionSwitch.x)), uint((injectionSwitch.x)))), 1u)))));
 if((((false || (bool(bvec4((! (! ((true && (false))))), false, false, true)))))))
  barrier();
 if((false))
  return;
 uint workgroup_size = (uvec3(uvec4(gl_WorkGroupSize, uint((injectionSwitch.y))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * ((subgroup_size) | (((subgroup_size) ^ 0u))) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((((((false) && true) && ((injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if(((! ((! (! (bool(bvec2((true && (((false || (! (true && (((((! (! ((false || (false))))))) || false)))))))), true)))))))))
  barrier();
 if((false))
  return;
 atomicStore(write_val, uint(virtual_gid), ((4) | (4)), 64, 0);
 if(((((bool(bool(false)))) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((bool(bool((false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, (int(ivec4(4, 0, 0, int((injectionSwitch.y))))), 64, ((0) << (0 & 66576)));
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))) && true)))))
  {
   if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       barrier();
       if((false))
        return;
      }
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 (1u * (buf[virtual_gid] = (0u ^ ((0u + ((~ (~ (uint(subgroupAllEqual((0u | (read_val)))))))))))));
 if((false))
  barrier();
 if((((((((bool(bvec3(false, true, true))) && true)) || ((((! (! ((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), false))))))) && true)))) && true)))
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      return;
     barrier();
    }
   return;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((! ((! (! (! (((true && ((! (! (false)))))) || (! (! (false))))))))))))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   if((bool(bvec3((((injectionSwitch.x > ((float(mat4x3((injectionSwitch.y), ((0.0) / abs(cos(0.0))), exp(0.0), 1.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))) + 0.0)))), true, false))))
    return;
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((((false)) || false))
    {
     if((((((injectionSwitch.x > ((vec2(mat2((clamp((injectionSwitch), (injectionSwitch), (min((injectionSwitch), (injectionSwitch))))), 0.0, 1.0))) - vec2(0.0, 0.0)).y)) || false))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(((bool(bool((bool(bvec2(false, true))))))))
        return;
       if((false))
        barrier();
       barrier();
       if((((bool(bvec2((true && ((((injectionSwitch.x > injectionSwitch.y))))), true))) || false)))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > (mix(float((- 1.4)), float(injectionSwitch.y), bool(((injectionSwitch.x < injectionSwitch.y)))))))))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((((false ? (injectionSwitch) : injectionSwitch)).x > ((injectionSwitch.y) - 0.0)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   if(((! (! (false)))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((((false ? ((min(200.174, 200.174))) : injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if(((! ((bool((bvec2(bvec2(bvec2(! (false), true))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
     if((false))
      {
       if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
  }
 if((((false) && true)))
  {
   if(((bool(bvec4(false, true, false, false)))))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if(((! (! (((((! (! (bool(bvec2((! (! (false))), false)))))) || false)))))))
    barrier();
   return;
   if((((false)) || false))
    {
     if(((bool(bvec3(false, false, true)))))
      return;
     if((false))
      barrier();
     return;
     if((false))
      barrier();
     if(((bool(((bvec2(bvec2(bvec2(bvec2((bvec2(bvec2(bvec2(false, false))))))))))))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((((((((true && (true && (false))) && true))) || false))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       barrier();
       if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
    }
   if((true && ((false))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((min(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
}
