#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(false)
    {
     if((((false)) && true))
      return;
    }
   else
    {
     if((false))
      {
       do
        {
         return;
         if((false))
          continue;
         if(((! (! (((false) && true))))))
          break;
        }
       while(((false) && true));
      }
     return;
    }
  }
 if((false))
  {
   do
    {
     if(((true && (false))))
      break;
     if((false))
      break;
     return;
     if((false))
      break;
    }
   while(((false) && true));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   return;
  }
 ((((GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id) >> 0u)) << uint((injectionSwitch.x)));
 if((true && ((false))))
  return;
 if((((((false) || false)) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (350.872) : injectionSwitch.y))))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((false ? (write_val) : uint(uvec3(gl_NumWorkGroups.x, 1u, (uint(uvec2(1u, 1u))))))));
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((bool(bool((false)))))
  {
   if((false))
    return;
   if(((((((((true && ((((false || (injectionSwitch.x > injectionSwitch.y))) && true))))) && true) || false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(false)
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((true && (true)))
    {
     if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     if((! (! ((false)))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       do
        {
         do
          {
           if((true && (((! (! (! ((bool(bool((! ((injectionSwitch.x < injectionSwitch.y))))))))))))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
             for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (0 ^ (1 ^ 0)); _injected_loop_counter ++)
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                return;
              }
             if((false))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; (~ (~ (_injected_loop_counter))) < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    continue;
                   return;
                   if((false))
                    return;
                   if((false))
                    return;
                  }
                 if((false))
                  break;
                }
               break;
              }
            }
           else
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(false);
        }
       while(false);
      }
    }
   else
    {
     if(((false || (((false) && true)))))
      return;
    }
   if((false))
    return;
  }
 if((((((max(mat2(1.0) * (injectionSwitch), (((mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2((782.478), (632.046)), bvec2(false, false)))) - vec2(0.0, 0.0))))).x > (clamp((1.0 * (injectionSwitch.y)), (1.0 * (injectionSwitch.y)), (1.0 * ((max(((injectionSwitch.y) - 0.0), (max((float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), injectionSwitch.y))))))))))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  return;
 if(((! (! (false)))))
  {
   for(int _injected_loop_counter = (((1 << (((int(5)) | (int(5))))) >> (int(5))) ^ 1); (min(_injected_loop_counter, _injected_loop_counter)) < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((((((injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     return;
    }
   if((false))
    return;
  }
 if(((true && (false))))
  {
   if((((false) && true)))
    return;
   do
    {
     return;
    }
   while(false);
   if((false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   for(int _injected_loop_counter = 0; ((_injected_loop_counter != ((int((injectionSwitch.y)) << (int(2))) >> ((max(int(2), ((int(2)) | 0)))))) && true); _injected_loop_counter ++)
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((! (! (injectionSwitch.x < injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        return;
       if((false))
        continue;
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           if((((injectionSwitch.x > (vec2(1.0, 1.0) * (injectionSwitch)).y))))
            {
             if((false))
              return;
             if((false))
              break;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(((((true && ((true && (injectionSwitch.x > injectionSwitch.y))))))))
            return;
          }
         do
          {
           return;
           if((false))
            break;
          }
         while(false);
         if((false))
          {
           if((false))
            continue;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         return;
        }
       if((false))
        return;
       if((false))
        break;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 while(false);
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = ((0 << (int(2))) ^ 0); _injected_loop_counter < (int((injectionSwitch.y)) ^ 0); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          return;
         if((false))
          break;
         if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                return;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
         if((false))
          return;
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((bool(bvec4(false, (false || (true)), false, false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if((false))
          return;
        }
       do
        {
         return;
         if((false))
          {
           if((((((false || (injectionSwitch.x < injectionSwitch.y))) || false))))
            {
             return;
             if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
              continue;
            }
           else
            {
            }
          }
        }
       while(false);
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if(true)
    {
     if((false))
      break;
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       if((true && ((! (! ((false)))))))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       continue;
      }
     if((false))
      {
       if((true && ((((false)) && true))))
        continue;
       continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if(((false || ((injectionSwitch.x > injectionSwitch.y)))))
    {
    }
   else
    {
     return;
    }
   if((false))
    return;
  }
 uint workgroup_base = ((((workgroup_size) * 1u) | (((min(workgroup_size, workgroup_size))) * 1u))) * workgroup_id;
 uint virtual_gid = (max(workgroup_base + GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * subgroup_size, (uint(uvec2((clamp(workgroup_base + (clamp(((uvec2(uvec3((((GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid) + uvec2(0u, 0u))), (1u | 0u)))) | (GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid)), (((((injectionSwitch.x > injectionSwitch.y)) ? (uvec2(subgroup_local_id)) : (clamp(~ (~ ((min(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid, GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid)))), ~ (~ ((min(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid, GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid)))), ((~ (~ ((min(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid, GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid))))) | uvec2(0u, 0u))))))), GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid)).x * subgroup_size, workgroup_base + (((1u * (GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x))) - 0u) * subgroup_size, (max(workgroup_base + (((clamp(((GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x) * 1u), GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x, GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x))) ^ ((0u) / 1u)) * subgroup_size, workgroup_base + GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * subgroup_size)))), 1u))))) + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y = virtual_gid;
 if((! (! ((bool(bvec3((false), true, false)))))))
  return;
 atomicStore(write_val, uint(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y), (~ ((min(~ (4), ~ (4))))), 64, 0);
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (clamp(0, 0, 0)); _injected_loop_counter --)
    {
     return;
    }
  }
 if((false))
  return;
 uint read_val = atomicLoad(write_val, (clamp((clamp(4, (max(((((injectionSwitch.x < injectionSwitch.y)) ? 4 : (37858))), ((((injectionSwitch.x < injectionSwitch.y)) ? 4 : (37858))))), 4)), 4, ((4) << 0))), 64, 0);
 if((false || ((((((clamp(((min((vec2(mat3x2(injectionSwitch, 1.0, 1.0, sqrt(1.0), 1.0))), (mix(vec2(((vec2(mat3x2(injectionSwitch, 1.0, 1.0, sqrt(1.0), 1.0))))[0], (547.278)), vec2((541.416), ((vec2(mat3x2(injectionSwitch, 1.0, 1.0, sqrt(1.0), 1.0))))[1]), bvec2(false, true)))))) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)) || (((bool(bool(((false) && true))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((bool((bvec2((bvec2(bvec3((bvec2(bvec3(bvec2((bvec2(bvec4((bvec2(bvec4((bvec2(bvec4(bvec2((false || (bool(bvec2((bool(bvec4(((injectionSwitch.x > (float(vec3(injectionSwitch.y, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), ((0.0) / 1.0)))))), false, false, false))), (((! (! (injectionSwitch.x < injectionSwitch.y))))))))), true), (! (! (true))), true))), true, true))), (! (! (false))), false)))), true))), ((injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         return;
         if((false))
          return;
        }
      }
     return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; ((((injectionSwitch.x < injectionSwitch.y)) ? (0 ^ (_injected_loop_counter ++)) : (_injected_loop_counter))))
    {
     if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((((injectionSwitch.x > (vec2(mat2(injectionSwitch, 0.0, 0.0))).y))))
    {
     if((false))
      return;
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        break;
       return;
       if((false))
        break;
      }
    }
   if((false))
    return;
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = 1; (((false || ((false || (_injected_loop_counter != (0 >> (((min((int(4)) - 0, (((int(4)) - 0) >> 0))))))))))) || false); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   if((! (! (! ((! (! ((((! ((! (! (true))))) || false))))))))))
    {
     if(true)
      {
       if((false))
        break;
       if((false))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       if(((((false || (bool((bvec2(bvec3(bvec2((false), true), false))))))) && true)))
        {
         if(((! ((true && (! (((injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if((false))
            break;
           break;
          }
         if((false))
          return;
         if((bool(((bvec2(bvec2(bvec2(bvec2(bvec2(((((true && (injectionSwitch.x > (clamp(injectionSwitch.y, (float(vec2(injectionSwitch.y, 1.0))), injectionSwitch.y))))))), false))))))))))
          {
           for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter != 1))); _injected_loop_counter ++)
            {
             return;
             if((false))
              break;
            }
          }
         if((false))
          break;
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              continue;
            }
          }
         else
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(((((false || (false))) || false)))
          {
           if((false))
            continue;
           return;
          }
         return;
         if((false))
          {
           if((false))
            return;
           continue;
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(false)
            {
             if(((((true && (true)) && ((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(((! ((bool(bvec3(! (false), true, false)))))))
              return;
             if((false))
              continue;
            }
          }
         if((false))
          break;
        }
       if((false))
        break;
       if((false))
        return;
       if(true)
        {
         ((buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y] = uint(subgroupAllEqual(((read_val) | ((min(read_val, read_val))))))) + 0u);
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if(((! (! (true && (((! (! ((((mix(float((- 4.0)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))))))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
          }
         else
          {
          }
         continue;
         if((false))
          break;
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        return;
       if(((! (! (false)))))
        break;
       if((false))
        continue;
       if((false))
        break;
      }
     else
      {
       if((false))
        break;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          return;
         if((false))
          return;
         continue;
        }
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : (9.7)))))))
      continue;
     if((false))
      {
       if((false))
        return;
       break;
      }
     if((((false) || false)))
      {
       if((false))
        return;
       continue;
      }
    }
   else
    {
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if((false))
        return;
       return;
      }
     if((bool(bool(false))))
      {
      }
     else
      {
       return;
      }
     if((false))
      return;
    }
  }
 else
  {
  }
}
