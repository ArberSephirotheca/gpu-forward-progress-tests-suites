#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((bool(bvec2((! (! (bool(bvec3(((! (! (false)))), false, true))))), true)))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if(((bool(bvec2(((injectionSwitch.x > (vec2(injectionSwitch[0], (vec2(injectionSwitch[0], injectionSwitch[1]))[1])).y)), (true && (((((clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y)))))))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(((! (! (false)))))
    {
     if((false))
      return;
     if((! (((((! (! (injectionSwitch.x < injectionSwitch.y))))) && (! ((((! (! (((((! (! ((! (! (injectionSwitch.x > injectionSwitch.y))))))))))))) || false)))))))
      return;
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false || (((((true && (((injectionSwitch.x > injectionSwitch.y))))) && ((injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
    }
   if((((((false ? (- 3.5) : injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((((! (! ((bool(bvec2(false, ((true && ((false))) && true)))))))) && true) || ((bool(bool(false)))))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
     if(((! (! (false)))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y)) || ((! ((true && ((bool(bvec3(! ((false)), false, true))))))))))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         if((((true && ((((injectionSwitch.x > injectionSwitch.y)))))) && true))
          return;
         barrier();
        }
       if((((bool(bvec2(true, false))) && (false))))
        {
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(((((max((mix(float((63.45)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y))))
      return;
    }
   return;
  }
 if((bool(bool((((false)) || false)))))
  {
   if((false))
    {
     if(((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))
      return;
     barrier();
    }
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((! (! ((((injectionSwitch.x > ((((true ? (((mix(float((mix(vec2((- 765.419), (injectionSwitch)[1]), vec2((injectionSwitch)[((0) | (0))], (- 321.185)), bvec2(true, false))).y), (clamp((clamp((mix(float((2141.1191)), float(float((541.813))), bool(true))), float((541.813)), (max(float((541.813)), float((541.813)))))), ((true ? (min(float((541.813)), float((541.813)))) : (- 64.50))), ((float((541.813))) + 0.0))), (false || (bool(false)))))) / 1.0) : (- 62.66)))) / exp(0.0))) || false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec2(false, true)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    return;
  }
 if(((true && (false))))
  {
   if((false))
    {
     if(((((mix(vec2((6.5), (clamp((injectionSwitch)[(min(1, 1))], (((injectionSwitch) - vec2(0.0, 0.0)))[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], ((+ 476.235))), bvec2(true, false))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((false || ((bool(((bvec3(bvec4(bvec3(bvec4(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, true), true)), false))))))))) && true))
    barrier();
   if((false || ((false || ((((injectionSwitch.x > ((injectionSwitch) / (min(vec2(1.0, 1.0), vec2(1.0, 1.0)))).y))))))))
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   return;
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 if(((((bool((bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), true)))))))))
  barrier();
 if((false))
  return;
 if(((((bool((bvec3(bvec4(bvec3((bool((bvec3(bvec3((bvec3(bvec3(bvec3((! (! (true && (((bool(bvec2(false, true)))))))), false, false))))))))) || ((injectionSwitch.x > injectionSwitch.y)), false, true), false)))))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((bool(bool(bool((bvec3(bvec4(bvec3((((! (! (injectionSwitch.x > injectionSwitch.y))))), false, false), false))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      return;
    }
   if((false))
    barrier();
   if(((true && (false))))
    {
     if(((((max(injectionSwitch, (min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > (max((min(injectionSwitch.y, (min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))
        barrier();
       return;
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if(((((bool((bvec3(bvec3(bvec3((bool(bvec3((! (! ((1.0 * (injectionSwitch.x)) > injectionSwitch.y))), false, true))), true, true))))))))))
  {
   if(((! (! (bool(bvec2((false), false)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((bool(bvec3(false, true, false)))))
        return;
       return;
      }
     if((false))
      {
       if(((bool(bvec4((bool(bvec3(false, true, false))), true, false, false)))))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((! ((! (! ((true && (! ((false))))))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((((min(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
  }
 if(((((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, true)))) && (! (! (true))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if(((false || ((bool(bool((((! (! (bool(bvec4(((((! ((true && (((! (false)) || false))))))) || false), true, false, false)))))) || false))))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 uint num_workgroup = (((! (! ((bool(bvec3(false, true, true)))))) ? (uvec3(73352u, 198398u, 195388u)) : ((gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)))).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint workgroup_size = (((((min(((max((gl_WorkGroupSize), (((((gl_WorkGroupSize)) | ((gl_WorkGroupSize)))) * uvec3(1u, 1u, 1u)))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))), ((uvec3(0u, 0u, 0u) | (max(gl_WorkGroupSize, (uvec3(uvec3(gl_WorkGroupSize))))))))) | (min(((max((gl_WorkGroupSize), (gl_WorkGroupSize))) << (uvec3(1u, 1u, 1u) * (uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))))), (max(gl_WorkGroupSize, ((~ (~ ((~ (~ (uvec3(uvec3(gl_WorkGroupSize)))))))))))))) >> uvec3(0u, 0u, 0u)))).x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((((mix(float(injectionSwitch.x), float((- 4638.9762)), bool(((injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
  {
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((bool((! (! (bool((false))))))))
      {
       if(((! (! (false)))))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > ((min((injectionSwitch) / cos(vec2(0.0, 0.0)), (max((injectionSwitch) / cos(vec2(0.0, 0.0)), (injectionSwitch) / cos(vec2(0.0, 0.0))))))).y))))
    return;
   return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      return;
     if(((true && (false))))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 if((((((mat2(1.0) * ((((min(min(injectionSwitch, (min(injectionSwitch, injectionSwitch))), (min(min(injectionSwitch, (min(injectionSwitch, injectionSwitch))), min(injectionSwitch, (min(injectionSwitch, injectionSwitch))))))))))) / vec2(1.0, (max((min(1.0, 1.0)), ((1.0) / 1.0))))).x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((true && (((false || ((! (! (! (! (((injectionSwitch.x < injectionSwitch.y)) && ((((bool(bvec2((bool(bvec2(false, false))), true))) || false))))))))))))))))
  return;
 uint workgroup_base = (0u | (workgroup_size)) * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((((((mix(vec2((min((min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((6336.5080), (- 688.385)), (bvec2((bvec3(bvec4(bvec3(bvec2(false, false), true), false)))))))) / vec2(1.0, 1.0)).x > injectionSwitch.y)) || false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((false || (false))))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((false) && true)))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, (~ (~ (64))), 0);
 uint read_val = atomicLoad(write_val, (1 * (~ (((~ ((4))) | (~ ((4))))))), 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((bool(bvec3(((bool((bvec3((bvec3(bvec4(bvec3(bvec3(false, false, false)), true)))))))), false, false)))) && true))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((bool((bvec2(bvec3(bvec2((false || ((! (! (((injectionSwitch.x > injectionSwitch.y))))))), true), true)))))))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((! (! ((! (! (false))))))))
  return;
 if((true && ((false))))
  {
   if((false))
    return;
   if((false))
    {
     if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > (mix(vec2((- 5.7), (114.380)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), ((bvec2(bvec3(bvec2(bvec4((bvec2(bvec4(bvec2(true, true), true, false))), true, ((injectionSwitch.x < injectionSwitch.y)))), true)))))).y))))
      return;
     barrier();
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((! (! (((((! (((false || (false)) || (! ((max(injectionSwitch, (((clamp(((((((mix(vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], (- 2.5)), vec2((0.3), ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(false, true))))) * vec2(1.0, 1.0))) / vec2(1.0, 1.0)), (min(((clamp((injectionSwitch) - vec2(0.0, (max(0.0, 0.0))), ((((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2((injectionSwitch.y), (injectionSwitch.y)))) - vec2(0.0, 0.0), (min((clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))), (injectionSwitch) - vec2((1.0 * (0.0)), 0.0)))))), ((injectionSwitch) - vec2(0.0, 0.0)))), ((injectionSwitch) - vec2(0.0, 0.0))))) * sqrt(vec2(1.0, 1.0))))).x > (mix(float((8.4)), float((max(injectionSwitch.y, injectionSwitch.y))), bool(true)))))))))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > ((false ? (injectionSwitch) : injectionSwitch)).y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          return;
        }
       if((false))
        return;
       if((((((false)) && ((injectionSwitch.x < injectionSwitch.y)))) && true))
        barrier();
       barrier();
      }
     if((true && (((! (! (((false) || (false || (false))))))))))
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))
        return;
       barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, (bool(bvec2(false, false))), true))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((true && ((false || ((true && ((((injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
         return;
        }
       barrier();
      }
     if(((! ((! (! (! (false))))))))
      return;
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((bool(bvec3((false || ((((injectionSwitch.x > injectionSwitch.y))))), false, false)))) && true))
    {
     if((false))
      return;
     if(((! ((bool(bvec2(! (! (! (((false || (false)))))), true)))))))
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          {
           if((((((((injectionSwitch.x > injectionSwitch.y)) || false))) && true)))
            return;
           if((false))
            barrier();
           return;
          }
         barrier();
         if(((false || (false))))
          barrier();
        }
       return;
       if((false))
        return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((((! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     if(((((! (! (false)))) || false)))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       barrier();
      }
     if((((injectionSwitch.x > (max((max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
      {
       if((false))
        return;
       if((((false)) || false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          return;
         if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
          barrier();
         barrier();
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
     if((((false) && true)))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     return;
     if((false))
      barrier();
     if((true && ((false))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
     if((((((injectionSwitch.x < injectionSwitch.y)) && (false)) || (((false) && true)))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))
      return;
     if(((bool((! ((false || (! (((bool(false)) || false))))))))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if((false))
    {
     if((! (! ((((false)) || false)))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(((bool(bvec2((! (false || ((! (false))))), false)))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
       if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
      }
     return;
     if((false))
      return;
    }
   if((false))
    barrier();
   if(((! (! (false)))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((false))
    return;
  }
 if((true && ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  return;
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual((((0u ^ (read_val)) | (0u ^ (((read_val)) / (uint((injectionSwitch.x)) ^ 1u)))))));
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((! (! ((bool(bool((false)))))))) || false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > (clamp(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])), ((injectionSwitch) - sin(vec2(0.0, 0.0))))).y))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if(((bool(bvec2(false, true)))))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      return;
    }
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     barrier();
     if((false))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        return;
       barrier();
      }
     barrier();
    }
  }
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   return;
  }
 if(((! ((! (! (((! (((injectionSwitch.x > ((true ? injectionSwitch.y : (- 8.5))))))) && true))))))))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
