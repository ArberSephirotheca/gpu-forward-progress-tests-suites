#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((! (! ((false || (true))))) && ((bool((bvec2(bvec4(bvec2(injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y, false), (bool(bool((! (((! ((bool(((bvec2(bvec4((bvec2(bvec4(bvec2(bvec4((bvec2(bvec3(bvec2((! (! (true))), true), false))), true, true)), false, false))), false, false)))))))) && ((true) || false))))))), false)))))))))))
  barrier();
 if(((! ((bool((bvec2(bvec2(bvec2(! ((bool(bvec3(true, false, true))) && ((false))), false))))))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * ((((workgroup_id) | (workgroup_id))) | 0u);
 uint virtual_gid = ((~ (~ ((max(clamp((0u ^ (workgroup_base + ((subgroup_id * subgroup_size) << 0u) + subgroup_local_id)), ((uint(uvec3((max((max(0u, (clamp(0u, 0u, 0u)))), (max(0u, (clamp(0u, 0u, 0u)))))), 0u, 1u))) ^ (workgroup_base + ((((subgroup_id * subgroup_size) << 0u) / 1u)) + subgroup_local_id)), (((true ? 0u ^ ((true ? (workgroup_base + ((max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size))) << 0u) + subgroup_local_id) : (((subgroup_local_id)) + 0u))) : (subgroup_id))))), clamp((0u ^ (workgroup_base + ((subgroup_id * subgroup_size) << 0u) + subgroup_local_id)), ((max(0u, (clamp(0u, 0u, 0u)))) ^ (workgroup_base + ((((subgroup_id * subgroup_size) << 0u) / 1u)) + subgroup_local_id)), (((true ? 0u ^ ((true ? (workgroup_base + ((uint((injectionSwitch.x)) | ((subgroup_id * subgroup_size))) << 0u) + subgroup_local_id) : (subgroup_local_id))) : (subgroup_id)))))))))));
 atomicStore(write_val, uint((max(((false ? ((((((subgroup_local_id - virtual_gid))) >> 0u) ^ (0u ^ 0u))) : virtual_gid)), virtual_gid))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual((((((false ? ((workgroup_base >> workgroup_base)) : (read_val))) | 0u) | (((false ? ((workgroup_base >> workgroup_base)) : (read_val))) | 0u)))));
 if(((false || (((true && ((false)))) || false))))
  barrier();
}
