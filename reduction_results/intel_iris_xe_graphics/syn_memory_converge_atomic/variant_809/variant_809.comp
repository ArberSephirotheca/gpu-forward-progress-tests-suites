#version 460

struct _GLF_struct_9 {
 uint _f0;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
} ;

struct _GLF_struct_6 {
 int _f0;
 vec3 _f1;
 bool _f2;
 mat2x3 _f3;
 float _f4;
 mat4x3 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 ivec4 _f1;
 mat3x4 _f2;
 int _f3;
} ;

struct _GLF_struct_2 {
 int _f0;
 vec4 _f1;
 vec3 _f2;
 uvec4 _f3;
 ivec3 _f4;
 uint _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat4x2 _f1;
 bvec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 float _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_5 {
 bool _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_10 {
 uint workgroup_base;
 _GLF_struct_5 _f0;
 uvec3 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 _GLF_struct_8 _f4;
 bvec3 _f5;
 _GLF_struct_9 _f6;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 & ivec2(45782, 4662).r); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 | (0 >> (int(4)))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               do
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(true)
                    {
                     if((false))
                      {
                       if((false))
                        break;
                       continue;
                      }
                     if((false))
                      {
                       if((((false) || false)))
                        barrier();
                       if((false))
                        {
                         if((false))
                          break;
                         continue;
                        }
                       if((false))
                        return;
                       do
                        {
                         if((true && (((injectionSwitch.x > injectionSwitch.y)))))
                          {
                          }
                         else
                          {
                           if((false))
                            break;
                           if(true)
                            {
                             barrier();
                             if((false))
                              return;
                             if((false))
                              break;
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     if((false))
                      continue;
                    }
                   else
                    {
                     if(((! (! (false)))))
                      break;
                    }
                  }
                 else
                  {
                   if((((false || (bool(bvec4(false, false, false, true)))))))
                    continue;
                   if((false))
                    barrier();
                   if((false))
                    continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(false);
               if((false))
                break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               break;
              }
             if((false))
              return;
             return;
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(true)
        {
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((false))
            return;
           if((false))
            {
             if((false))
              return;
             if((false))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  return;
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  return;
                }
               if(((true && (false))))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
              }
             if((false))
              return;
             if((false))
              barrier();
             if((false))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             do
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         for(int _injected_loop_counter = (1 | ((1 << (int(5))) >> (int(5)))); _injected_loop_counter > (0 << (int(6))); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             break;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
           if((false))
            return;
          }
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        return;
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            return;
           if((false))
            return;
           return;
          }
         else
          {
          }
        }
       if(((bool(bvec3(false, true, false)))))
        return;
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         return;
         if((false))
          return;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if(true)
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
               if((false))
                return;
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
              }
            }
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 return;
                }
               if((false))
                return;
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             while(false);
             if((false))
              barrier();
            }
           if(((false || (false))))
            {
             if((false))
              return;
             return;
            }
          }
         else
          {
           if((false))
            barrier();
           if((false))
            return;
           if((false))
            return;
          }
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if(((false || (false))))
      {
       if((false))
        barrier();
       if(((bool(bvec3(false, true, true)))))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 31357); _injected_loop_counter --)
        {
         do
          {
           return;
           if((bool(bvec2(true, false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               return;
              }
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if((false))
              continue;
            }
          }
         while(false);
        }
       if(((! (! ((! (! (false))))))))
        barrier();
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
     if((false))
      return;
    }
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((! (! (false)))))
        barrier();
       do
        {
         if((false))
          {
           if((false))
            break;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((true) || false))
            {
             barrier();
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             break;
            }
           if((false))
            break;
           if((false))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(false);
      }
    }
   barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
  }
 if(((bool(bvec3(false, true, false)))))
  {
   if((false))
    barrier();
   if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), false)))))
    {
     if((false))
      return;
     do
      {
       if((false))
        barrier();
       if((false))
        break;
       return;
      }
     while(false);
    }
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    {
     if(((! (! (false)))))
      return;
     return;
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   do
    {
     do
      {
       return;
      }
     while(false);
    }
   while(false);
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false || (false)))
  {
  }
 else
  {
   do
    {
     if((false))
      {
       if((false))
        return;
       continue;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                break;
               if((false))
                {
                 if((false))
                  continue;
                 barrier();
                }
               return;
              }
             if((false))
              {
               if((false))
                continue;
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                return;
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if((false))
              return;
             if((false))
              {
               if((false))
                continue;
               break;
              }
             if((false))
              barrier();
             return;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((false))
              barrier();
            }
           if((false))
            return;
          }
         if(((! (! (false)))))
          continue;
         barrier();
         if(((bool(bvec2(false, false)))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    return;
   do
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
      }
     if((false))
      return;
     if((false))
      break;
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        break;
       if((false))
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              continue;
            }
           break;
          }
         if(false)
          {
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           if((false))
            return;
           if((false))
            break;
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
           return;
           if((false))
            barrier();
          }
        }
       if((! (! ((bool(bvec4(true, true, false, true)))))))
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            continue;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            break;
           do
            {
             if((false))
              break;
             barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              break;
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           continue;
          }
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
          }
        }
      }
     if((false))
      continue;
    }
   while(false);
  }
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
       if((false))
        return;
       if((bool(bvec3(false, false, true))))
        {
        }
       else
        {
         if((false))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
             if((false))
              return;
             if(((bool(bvec4(false, true, ((injectionSwitch.x < injectionSwitch.y)), true)))))
              return;
            }
           if((false))
            return;
          }
        }
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(true)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     if((false))
                      {
                       if((false))
                        return;
                       return;
                      }
                     return;
                    }
                   else
                    {
                    }
                   if((false))
                    continue;
                  }
                 if(((! ((bool(bvec2(! (false), true)))))))
                  {
                   if((false))
                    return;
                   continue;
                  }
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               if((false))
                return;
              }
             else
              {
               if((false))
                {
                 if((false))
                  return;
                 continue;
                }
               if((false))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                }
               if((true && ((bool(bvec4(true, true, true, true))))))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    break;
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                      }
                     else
                      {
                       if((false))
                        {
                         if((false))
                          continue;
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                    }
                   if((false))
                    continue;
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if(true)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             do
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  break;
                 barrier();
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                }
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               return;
              }
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         return;
         if((false))
          return;
        }
       if((false))
        return;
      }
     barrier();
     if(((! ((false || (! (false)))))))
      return;
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   do
    {
     if((false))
      return;
    }
   while(false);
   if((false))
    return;
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((false) && true)))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if(true)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((false) || false)))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
   do
    {
     if(false)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           barrier();
          }
         while(false);
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          continue;
         return;
        }
       if((false))
        barrier();
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter > (- 65970 & 0); _injected_loop_counter --)
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               return;
              }
             if(true)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
              }
             else
              {
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((bool((bvec3(bvec3(bvec3(false, false, false))))))))
                  return;
                 if((((false) || false)))
                  barrier();
                 return;
                 if((false))
                  continue;
                }
               if(((true && (((false) && true)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   continue;
                  }
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if((((false) && true)))
                    {
                     if((false))
                      barrier();
                     continue;
                    }
                   return;
                  }
                }
               if((false))
                return;
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((true && (false))))
                    return;
                   continue;
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  return;
                 if((false))
                  {
                   if((false))
                    break;
                   return;
                  }
                }
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              return;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             if((false))
              continue;
             barrier();
            }
           if((false))
            return;
          }
        }
       while(false);
      }
     if((false))
      continue;
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if((false))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          break;
         barrier();
        }
      }
     while(false);
    }
   return;
   if((false))
    {
     do
      {
       return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        return;
      }
     return;
     if((false))
      return;
    }
   if((false))
    barrier();
   do
    {
     if(((! (((! (false)) || false)))))
      return;
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
         if((false))
          {
           if((false))
            {
             if((false))
              {
               if((false))
                return;
               return;
              }
             barrier();
            }
           barrier();
           if((false))
            break;
          }
         if((false))
          return;
        }
       if((false))
        barrier();
      }
    }
   while(false);
  }
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       do
        {
         if((false))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
       do
        {
         if((false))
          {
           if((false))
            {
             if(((((bool(bool(false))) && true))))
              continue;
             continue;
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((false))
            return;
           barrier();
          }
        }
       while((! (! (false))));
       if((false))
        return;
       barrier();
       if(((bool(bvec2((true && (false)), true)))))
        {
         if((false))
          return;
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
   if(((bool(bvec3(false, false, true)))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
      }
     if((false))
      return;
    }
   if((false))
    return;
   for(int _injected_loop_counter = ((int((injectionSwitch.y)) << ((int((ivec4(0, 0, 0, 0) | (ivec4(int(6), 1, 1, (0 & 42510)))))))) >> ((int(ivec4(int(6), 0, ((1 << (int(4))) >> (int(4))), 0))))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       continue;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if(((bool((bvec3(bvec4(bvec3((false || (((injectionSwitch.x > injectionSwitch.y)))), true, false), true)))))))
      return;
     return;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if((false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if((false))
        barrier();
      }
    }
   do
    {
     if((false))
      continue;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        continue;
       return;
       if((false))
        break;
      }
     if(((false || (false))))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if((false))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   barrier();
   if((false))
    return;
   if((false))
    {
     if(true)
      {
       barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if((false))
    return;
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 else
  {
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(workgroup_size * workgroup_id, _GLF_struct_5(true, _GLF_struct_0(vec2(1.0), 1.0, mat4x3(1.0)), _GLF_struct_1(1, mat4x2(1.0), bvec2(true), vec3(1.0)), _GLF_struct_2(1, vec4(1.0), vec3(1.0), uvec4(1u), ivec3(1), 1u, bvec3(true)), _GLF_struct_3(mat3(1.0), ivec4(1), mat3x4(1.0), 1), _GLF_struct_4(vec2(1.0), ivec3(1)), mat2(1.0)), uvec3(1u), ivec4(1), mat4x3(1.0), _GLF_struct_8(_GLF_struct_6(1, vec3(1.0), true, mat2x3(1.0), 1.0, mat4x3(1.0), ivec4(1)), uvec3(1u), mat4x3(1.0), _GLF_struct_7(mat4x3(1.0))), bvec3(true), _GLF_struct_9(1u));
 do
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | (0 | int((injectionSwitch.y)))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        continue;
       return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < (int((injectionSwitch.y)) | 1); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         do
          {
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if(((false || (false))))
                    break;
                   barrier();
                  }
                 barrier();
                 if((false))
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                }
              }
            }
           while(false);
           if((false))
            continue;
          }
         while(false);
         barrier();
         if((false))
          return;
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              break;
             barrier();
             if((false))
              barrier();
            }
          }
         if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
          return;
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            break;
          }
         if(((true && (false))))
          {
           if((false))
            barrier();
           continue;
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if(((bool(bvec3(false, false, false)))))
          break;
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         barrier();
         if((false))
          continue;
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              continue;
             continue;
            }
           break;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(false)
            {
            }
           else
            {
             barrier();
             if((false))
              continue;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while((bool(bvec2(false, true))));
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         continue;
         if(((((bool(bvec4(false, true, false, false)))) && ((injectionSwitch.x < injectionSwitch.y)))))
          break;
        }
       barrier();
      }
     if((false))
      break;
    }
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
           return;
          }
         if((false))
          continue;
         for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter < ((((1 << (int(5))) >> (int(5))) << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
         if((false))
          break;
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
        }
      }
    }
   if((false))
    barrier();
   if((false))
    continue;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         barrier();
         if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), false)))))
          barrier();
        }
      }
     else
      {
      }
     break;
    }
   if((((false) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    break;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(false)
    {
     if((false))
      {
       if(((! ((bool(bvec3(! (false), true, false)))))))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
          }
         else
          {
          }
         if(((true && (false))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     if(true)
      {
       if(true)
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             do
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  continue;
                 barrier();
                }
              }
             while(false);
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           do
            {
             if((false))
              barrier();
             if((false || (true)))
              {
               return;
               if(((true && (false))))
                barrier();
              }
             else
              {
              }
             if((false))
              break;
            }
           while(false);
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(((true && (false))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((false))
                barrier();
               do
                {
                 return;
                }
               while(false);
              }
             while(false);
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            return;
          }
        }
       barrier();
       if((false))
        return;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & int(true)); _injected_loop_counter --)
      {
       if((false))
        break;
       barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       barrier();
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            return;
           return;
          }
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            barrier();
           if((((((((injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
            return;
           if((false))
            barrier();
           if((false))
            return;
           barrier();
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         do
          {
           barrier();
           if(((! (! (false)))))
            return;
          }
         while(false);
         if(((! ((false || (! (false)))))))
          barrier();
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         return;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       for(int _injected_loop_counter = (((((1 << (int(4))) >> (int(4))) << (int(4))) >> (int(4))) | 0); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          continue;
         barrier();
         if((false))
          {
           if((false))
            continue;
           break;
          }
        }
      }
     if((false))
      return;
     return;
     if((((false) && true)))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(((false) && true));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
     if((false))
      return;
    }
  }
 uint virtual_gid = _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if(((false || (((false) && true)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    continue;
   if(((true) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((true && (false))))
            break;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                continue;
               if((false))
                break;
               barrier();
              }
             continue;
            }
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                break;
               return;
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(false);
         if((false))
          break;
         for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
              }
            }
           if((false))
            continue;
          }
        }
       if((false))
        continue;
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
          break;
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            continue;
           if((false))
            barrier();
           atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
          }
         if((false))
          {
           if((false))
            break;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  return;
                 return;
                }
               else
                {
                }
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               if(true)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    continue;
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    return;
                  }
                }
               else
                {
                }
              }
             while(false);
             if((false))
              barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
      }
     while(false);
    }
   else
    {
     if((false))
      break;
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         barrier();
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      break;
     if(false)
      {
       if((false))
        return;
       if((false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          continue;
         if((false))
          barrier();
         if((false))
          continue;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
      }
     else
      {
       if((false))
        return;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(false);
      }
     for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((false))
          break;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(true)
          {
           if((false))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((false || (false))))
          return;
         return;
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
       if((false))
        return;
      }
     if((false))
      return;
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
