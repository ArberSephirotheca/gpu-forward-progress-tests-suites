#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; (int(ivec2((((min((max(0 | (~ (~ (_injected_loop_counter))), 0 | (~ (~ (_injected_loop_counter))))), 0 | (~ (~ (_injected_loop_counter))))))), 1))) < int(((min(injectionSwitch.y, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(((! (! ((! ((! (! (! (false)))))))))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups) / uvec3(1u, 1u, 1u)).x;
 uint workgroup_size = (max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((min(uint(uvec3(workgroup_size, 0u, 1u)), uint(uvec3(workgroup_size, 0u, 1u))))) * workgroup_id;
 uint virtual_gid = (~ (~ (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)));
 if((((((! ((! (((! (! ((! (! (! (((! (! ((! (((false) || false))) || false))))))))))) || false)))))))) && true))
  return;
 atomicStore(write_val, (((max(uint(virtual_gid), uint(virtual_gid)))) - 0u), (((true ? (((false ? ((+ 63725)) : ((int(ivec4((((4) + 0)), 0, 0, (0 << (int(8)))))) | (((int(ivec4((((4) + 0)), 0, 0, (0 << ((false ? (- 47505) : (int(8))))))))) | ((int(ivec4((((4) + 0)), 0, 0, (0 << (int(8)))))))))))) : ((2900 / - 68434)))) | (((((int(int(((((clamp((int(int(4))), 4, ((((injectionSwitch.x > injectionSwitch.y)) ? (- 33569) : (clamp((0 | ((max(4, 4)))), (max(4, 4)), (((max(4, 4))) | 0)))))))) / 1)))))) >> 0) | ((((clamp((int(int(4))), 4, 4))) << 0))))), 64, (min(0, ((((false ? (70541) : (int(ivec2(0, 0)))))) * 1))));
 if((((true && (bool(bvec2((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false), false)))))))
  return;
 uint read_val = atomicLoad(write_val, 4, (((((clamp(64, (((min(64, 64))) | ((min(64, 64)))), 64))) - 0)) | 0), 0);
 buf[virtual_gid] = ((((uint(subgroupAllEqual((uint(uvec3(read_val, 0u, 0u))))))) - 0u) - 0u);
}
