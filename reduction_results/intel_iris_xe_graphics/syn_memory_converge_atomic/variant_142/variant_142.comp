#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = (- 34465 & 0); ((_injected_loop_counter) << 0) != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((((bool(bool((((min(false ? (9.1) : injectionSwitch.x, false ? (9.1) : injectionSwitch.x)))) > injectionSwitch.y)))))))
        {
         if((false))
          continue;
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
      }
     if((((false || ((((injectionSwitch.x > injectionSwitch.y))) || false)))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((! ((bool(bvec4(! (((injectionSwitch.x > injectionSwitch.y))), false, false, true)))))))
          continue;
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            return;
          }
        }
       else
        {
         if((false))
          continue;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; (false || (_injected_loop_counter != 0)); _injected_loop_counter --)
            {
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
        }
      }
     if(true)
      {
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        break;
       if((false))
        continue;
      }
     else
      {
      }
    }
   if((false))
    break;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((((false) && true)))
  return;
 if((false))
  {
   if(true)
    {
     if((false))
      {
       if(true)
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   return;
  }
 for(int _injected_loop_counter = (1 ^ 1); (false || (_injected_loop_counter < ((1 << ((min(int(1), (0 ^ (int(1))))))) >> (((int(1)) + 0))))); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > (max(injectionSwitch, (mat2(1.0) * (injectionSwitch)))).y))))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((! (false || ((! ((((! (! (((! (! (true))))))) || false) && true))))))))
  {
   if((! (! ((bool((bvec3(bvec3(bvec3((! (! (false))), true, false))))))))))
    {
    }
   else
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        return;
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           return;
          }
        }
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     if(((bool(bvec2(false, true)))))
      return;
    }
   if((false))
    {
     if((! (! (true))))
      {
       if((((false) && true)))
        return;
      }
     else
      {
      }
     do
      {
       if((false))
        return;
       if(((true && (bool(((bool(false)) || false))))))
        {
         if(((! (! (false)))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((true && ((! (! (false)))))))
            continue;
           if(true)
            {
             if((false))
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((false))
              return;
             for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(2))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if((false))
                  return;
                 return;
                }
              }
            }
           while(false);
           if((false))
            break;
           if((false))
            continue;
           return;
           if((false))
            break;
          }
         if((false))
          break;
        }
       else
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(false);
    }
   if(true)
    {
     if((false))
      return;
     if((false))
      return;
     if(true)
      {
       if((false))
        {
         for(int _injected_loop_counter = ((- 7333 + (72477 >> - 95171)) & 0); ((((_injected_loop_counter) / (1 & 1))) + 0) < 1; _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if((false))
    {
     do
      {
       if((false))
        return;
      }
     while(false);
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((injectionSwitch.x > (vec2((mix(float((59.89)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y)))
      {
      }
     else
      {
       if((false))
        return;
      }
    }
  }
 else
  {
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         do
          {
           if(false)
            {
             if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
              break;
            }
           else
            {
             return;
            }
           if((false))
            break;
          }
         while((! (! (false))));
        }
       while(false);
      }
     else
      {
      }
    }
  }
 while(false);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((bool(bvec4((((false)) && true), true, true, true)))) || false))
  {
   if((false))
    return;
   do
    {
     if((true && ((false))))
      {
       do
        {
         return;
        }
       while(false);
       if((((((float(vec2((mix(float((- 5.0)), float(float(mat3x4(((true ? injectionSwitch.x : (4.1))), 0.0, 0.0, abs(log(1.0)), tan(0.0), 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0))), bool(true))), 1.0)))) > injectionSwitch.y))))
        return;
      }
    }
   while(false);
   if(false)
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(true)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
           if((false))
            break;
          }
         else
          {
           do
            {
             if(false)
              {
              }
             else
              {
               if((true && ((((injectionSwitch.x > ((vec2(mat3((max(mat2((injectionSwitch.y)) * (injectionSwitch), mat2((injectionSwitch.y)) * (injectionSwitch))), 1.0, 1.0, 0.0, (dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0)))).y))))))
                {
                 if((false))
                  continue;
                 continue;
                }
               return;
               if(true)
                {
                 if((false))
                  continue;
                 if((((false)) && true))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     break;
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     do
                      {
                       return;
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               else
                {
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
      }
    }
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if(((! ((bool(bvec4(! ((false || (false))), false, true, false)))))))
          continue;
         continue;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; ((false ? (ivec3(- 75662, - 60765, - 60350).z) : _injected_loop_counter --)))
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    continue;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(false)
  {
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          break;
         if((false))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       return;
       if((false))
        return;
      }
    }
   else
    {
    }
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((false))
          continue;
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(false)
        {
        }
       else
        {
         return;
         if((((false) || false)))
          return;
        }
      }
    }
   else
    {
    }
   return;
  }
 uint workgroup_size = ((gl_WorkGroupSize) | (gl_WorkGroupSize)).x;
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = ((false ? ((- 46848 & - 70123)) : 1)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (((false ? (_injected_loop_counter) : 0)) >> (((int((injectionSwitch.x)) + (0)) ^ (int(8))))); _injected_loop_counter --)
        {
         if((false))
          return;
         return;
        }
      }
     if((false))
      return;
    }
   if((bool(bvec2(true, false))))
    {
     do
      {
       if(((((min((((vec2(((true ? mat4x3(injectionSwitch, abs(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0)) : (mat4x3(363.380, - 68.89, - 144.569, 8.4, - 5503.8076, - 3.7, - 4567.9136, 0.5, 7.0, 8.1, 69.44, - 207.691)))))) - log(vec2(1.0, 1.0)))).x, (((vec2(((true ? mat4x3(injectionSwitch, abs(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0)) : (mat4x3(363.380, - 68.89, - 144.569, 8.4, - 5503.8076, - 3.7, - 4567.9136, 0.5, 7.0, 8.1, 69.44, - 207.691)))))) - log(vec2(1.0, 1.0)))).x)) > injectionSwitch.y))))
        break;
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     while(false);
     if((false))
      {
       if((! (! ((bool(bool((false))))))))
        return;
       return;
      }
     if((((((! (! (injectionSwitch.x < injectionSwitch.y))))) && true)))
      {
       if((false))
        {
         do
          {
           if((false))
            return;
          }
         while(false);
         return;
        }
       if((false))
        return;
      }
     else
      {
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if(((((injectionSwitch.x) / 1.0) < injectionSwitch.y)))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((! ((false || (! (true))))))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if((false))
                return;
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; (false || (_injected_loop_counter < 1)); _injected_loop_counter ++)
            {
             if((false))
              {
               if(true)
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if((false))
                break;
              }
            }
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1) / 1); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        return;
       do
        {
         do
          {
           if((false))
            {
             if((false))
              break;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
          }
         while(false);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > ((cos(0.0) * ((injectionSwitch.y))) / cos(0.0))))))
        {
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         return;
        }
      }
     else
      {
      }
     if((false))
      return;
    }
   else
    {
    }
  }
 if(true)
  {
   for(int _injected_loop_counter = ((max(~ (1 * ((~ (1)))), ((~ (((true ? ~ (~ (~ ((1)))) : (- 67042))))) | (~ (((~ (1)) / 1))))))); ((clamp((((- 59763 & 0) | (clamp((((_injected_loop_counter)) - 0), (((_injected_loop_counter)) << 0), (_injected_loop_counter)))) << 0), ((false ? ((min(_injected_loop_counter, (0 + (((((_injected_loop_counter) | (_injected_loop_counter))) | 0)))))) : (- 59763 & 0) | (_injected_loop_counter))), ((false ? (- 14073) : (0 ^ ((- 59763 & 0) | (_injected_loop_counter)))))))) > (int(ivec3((0 << ((0 ^ (int(7))))), (1 ^ 0), ((1) ^ 0)))); _injected_loop_counter --)
    {
     if((false))
      {
       do
        {
         do
          {
           if(((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y)))
            {
             if((false))
              return;
             if((false))
              return;
            }
           else
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         while(false);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      continue;
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
          break;
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          break;
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               if((false))
                return;
               if(false)
                {
                }
               else
                {
                 if((true && (true)))
                  {
                   if((bool(bvec2(((true && ((((bool(((bvec3(bvec3(bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true), true)))))))) && true))))), ((((injectionSwitch.x > injectionSwitch.y) && true)))))))
                    {
                     if((((false) && true)))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                   if(((true && (false))))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       return;
                       if((false))
                        continue;
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    continue;
                   if(((injectionSwitch.x > ((injectionSwitch.y) * 1.0))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if((false))
                        return;
                       return;
                      }
                     while(false);
                    }
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if(true)
                {
                 if((false))
                  return;
                }
               else
                {
                }
              }
             while((false || (false)));
            }
           if((false))
            break;
           if((true && ((false))))
            continue;
          }
        }
      }
     if((false))
      {
       if((((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, ((injectionSwitch.x < injectionSwitch.y)), false))) && true)))
        continue;
       break;
      }
     if((false))
      {
       if((false))
        return;
       break;
      }
     if((false))
      continue;
     if((false))
      return;
     if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), true, true)))))
      continue;
    }
  }
 else
  {
  }
 uint workgroup_id = ((gl_WorkGroupID) | ((uvec3(((gl_WorkGroupID) * uvec3(1u, 1u, 1u))[((((((min(float((transpose(transpose((((false ? ((false ? (mat2(8.7, 648.028, - 286.014, - 74.64)) : (mat2(5802.1703, 2.2, - 8.1, - 716.118)))) : (mat2(injectionSwitch.x, abs(cos(0.0)), 1.0, exp(0.0))))) * mat2(1.0)))))), (clamp(float((transpose(transpose(((mat2(injectionSwitch.x, abs(cos(0.0)), 1.0, exp(0.0))) * mat2(1.0)))))), float((transpose(transpose((mat2(mat2(((mat2(injectionSwitch.x, abs(cos(0.0)), 1.0, exp(0.0))) * mat2(1.0))))))))), float((transpose(transpose(((mat2(injectionSwitch.x, abs(cos(0.0)), 1.0, exp(0.0))) * mat2(1.0))))))))))) > injectionSwitch.y)) ? (- 56418) : 0))], gl_WorkGroupID[1], gl_WorkGroupID[2])))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if(((bool(bvec3(((! (! (((((vec2((mat3(mat3(mat3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sqrt(0.0), 0.0))), 0.0, 0.0)))))).x > ((vec2(vec4((injectionSwitch) * mat2(1.0), 1.0, 0.0)))).y)))))) && ((injectionSwitch.x < injectionSwitch.y))), true, true)))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while((((mix(float((- 94.24)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)));
     return;
    }
   if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((- 151.263)), bool(((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = (((0 << (int(4))) ^ ((((min(0 | ((1 ^ 1) & - 85583), 0 | ((1 ^ 1) & - 85583)))) * ((1 << (int(2))) >> (int(2))))))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((((false)) && true))
        {
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
           if((false))
            {
             do
              {
               return;
              }
             while(false);
            }
           if((false))
            return;
          }
        }
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((bool(bvec3(false, false, false))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if(false)
        {
         if((false))
          break;
        }
       else
        {
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       if((false))
        break;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
   if((bool((bool(bvec4((bool(bvec4(((((bool(bvec4((((bool(true))) && true), false, ((injectionSwitch.x < injectionSwitch.y)), true)))) && true) && true), true, false, true))), false, false, false))))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     do
      {
       if((false))
        return;
       if(((! (! (false)))))
        return;
       if(((false) || ((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
        }
       else
        {
         if((false || ((false))))
          return;
         atomicStore(write_val, uint(virtual_gid), 4, (((clamp(64, (min(64, 64)), 64))) ^ 0), ((((0) << 0)) | ((min(0, 0)))));
        }
      }
     while(((true && ((injectionSwitch.x > injectionSwitch.y)))));
     if(true)
      {
       if(((false || ((! (! (false)))))))
        return;
      }
     else
      {
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
       if((false))
        return;
      }
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     if((((false) && true)))
      return;
    }
   else
    {
    }
   do
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
    }
   while(false);
  }
 uint read_val = atomicLoad(write_val, ((0 | (int(int(4))))), 64, (int(int(0))));
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if((false))
        return;
      }
     while(false);
    }
   do
    {
     if((false))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       while(false);
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = ((0 >> (((true ? ((int(8)) / 1) : (clamp((min((97906), (97906))), ((((max(97906, 97906))) | (97906))), (1 * ((97906))))))))) | ((0 + ((max(0, 0)))) >> (int(2)))); _injected_loop_counter < (1 & (1 | 1)); _injected_loop_counter ++)
    {
     if((false))
      break;
     return;
     if(((bool(bool(((false) && true))))))
      return;
    }
  }
 if((((max(((false ? (injectionSwitch) : (vec2(0.0, 0.0) + (injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
  }
 if(true)
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
     if(((! (! ((false || ((false || (((false || (injectionSwitch.x < injectionSwitch.y))))))))))))
      {
       if((false))
        return;
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if(false)
        {
         if(true)
          {
           if((false))
            return;
           if((false))
            return;
          }
         else
          {
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (((true ? int((max(ivec4((0 >> ((clamp(((true ? int(7) : (85870))), int(7), int(7))))), 1, int((injectionSwitch.x)), 0), ivec4((0 >> ((clamp(((true ? int(7) : (85870))), int(7), int(7))))), 1, int((injectionSwitch.x)), 0)))) : (10144)))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              break;
            }
          }
        }
       if((false))
        return;
      }
     else
      {
       do
        {
         if((false))
          return;
        }
       while(false);
      }
    }
  }
 else
  {
  }
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if((false))
      return;
     if((false))
      return;
     if(((false || ((bool(bvec3(((((injectionSwitch.x > injectionSwitch.y))) && true), false, ((injectionSwitch.x < injectionSwitch.y)))))))))
      {
       do
        {
         if(false)
          {
           if((false))
            {
             do
              {
               do
                {
                 return;
                }
               while(false);
              }
             while(false);
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if((bool(bvec3(true, true, true))))
            {
             if(((((min(injectionSwitch, injectionSwitch)).x > (mix(float(injectionSwitch.y), float((9851.7996)), bool(false)))))))
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 do
                  {
                   if((false))
                    continue;
                   if(((((bool((bvec2(bvec2((bvec2(bvec2(bvec2(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > ((mix(vec2((- 98.04), (2.2)), vec2(((injectionSwitch) / exp(vec2(0.0, 0.0)))[0], ((injectionSwitch) / exp(vec2(0.0, 0.0)))[1]), bvec2(true, true)))).y))), true))))))))) || (((true && (((injectionSwitch.x > injectionSwitch.y))))) && true)) && true)))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.x)); ((_injected_loop_counter < 1) && true); _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(((! (! (false)))))
                      {
                       if((! (! (true))))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > (max((0.0 + (injectionSwitch.y)), (mix(float((- 7.1)), float(injectionSwitch.y), bool(true)))))))))
                        return;
                       if(true)
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                     if(((bool(bvec2(false, true)))))
                      {
                       if((false))
                        continue;
                       return;
                      }
                     do
                      {
                       return;
                      }
                     while(false);
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                         return;
                        }
                      }
                     if(((((((min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((false || (((((! (! ((bool(bvec2(false, false))))))) && true)))))
                          return;
                         if((false))
                          continue;
                        }
                       if((bool(bool(true))))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(false);
                }
               else
                {
                }
              }
            }
           else
            {
             if((false))
              break;
            }
          }
        }
       while(false);
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
     if((false))
      return;
     if((false))
      return;
    }
  }
 if(true)
  {
   buf[virtual_gid] = uint(subgroupAllEqual(read_val));
  }
 else
  {
  }
 do
  {
   if((((bool((bvec2(bvec2(bvec2(((true && (false)) && true), true)))))))))
    {
     if((false))
      continue;
     do
      {
       return;
       if((false))
        return;
      }
     while(((false) || false));
    }
  }
 while(false);
}
