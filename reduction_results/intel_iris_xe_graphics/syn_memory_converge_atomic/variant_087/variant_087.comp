#version 460

struct _GLF_struct_14 {
 uint workgroup_id;
 float _f0;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_13 {
 uint read_val;
 _GLF_struct_12 _f0;
 bvec4 _f1;
 mat4x2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 uvec2 _f1;
 uint num_workgroup;
 mat4x2 _f2;
} ;

struct _GLF_struct_7 {
 uint _f0;
 mat2 _f1;
 mat3 _f2;
 vec2 _f3;
 mat2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_6 {
 ivec3 _f0;
 mat4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 _GLF_struct_6 _f1;
 mat2x3 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 vec3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 float _f1;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 _GLF_struct_3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 vec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 mat3x2 _f1;
 mat4x2 _f2;
 bvec2 _f3;
 ivec2 _f4;
 bvec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 uint subgroup_size;
 vec4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_4 _f2;
 mat2x3 _f3;
 bvec3 _f4;
 mat3x2 _f5;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     do
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     if(((bool(bool((bool(bvec4(false, false, false, false))))))))
      return;
     if((false))
      return;
     if((((false) || false)))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
     if((false))
      return;
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat4x3(1.0), _GLF_struct_2(_GLF_struct_0(vec4(1.0), mat3x2(1.0), mat4x2(1.0), bvec2(true), ivec2(1), bvec4(true), bvec2(true)), _GLF_struct_1(mat2x3(1.0), vec4(1.0), mat3(1.0)), gl_SubgroupSize, vec4(1.0), bvec4(true)), _GLF_struct_4(mat2(1.0), _GLF_struct_3(uvec2(1u), 1.0), ivec3(1)), mat2x3(1.0), bvec3(true), mat3x2(1.0));
 if((false))
  return;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((true) && true))
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) | (1)); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((false))
            return;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
           do
            {
             if((false))
              break;
             if(((bool(bvec3(false, true, false)))))
              {
               if((false))
                return;
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               return;
              }
             for(int _injected_loop_counter = ((0 | 0) | 0); _injected_loop_counter < (1 ^ (0 ^ 0)); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(false);
           if(true)
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
         do
          {
           if((false))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if((false))
            continue;
           if((false))
            break;
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             return;
            }
           if((false))
            continue;
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(((true && (false))))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       else
        {
        }
      }
     if(true)
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if(true)
            {
             return;
            }
           else
            {
             do
              {
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      return;
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
      }
     do
      {
       if((false))
        break;
       if(((true && (false))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
               if((false))
                return;
              }
             else
              {
               return;
              }
            }
          }
         return;
        }
      }
     while(false);
     if((false))
      return;
     if((false))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(7))); _injected_loop_counter --)
      {
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
           if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
            continue;
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            return;
           if((false))
            continue;
          }
         while(false);
        }
       else
        {
         if((false))
          continue;
        }
       if((false))
        break;
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((bool(bvec4(true, ((injectionSwitch.x > injectionSwitch.y)), true, false))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               return;
              }
            }
           else
            {
             if((false))
              {
               if((false))
                return;
               return;
              }
            }
          }
        }
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (int(4))); _injected_loop_counter --)
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 45487); _injected_loop_counter --)
            {
             return;
             if((false))
              continue;
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          return;
         if((false))
          return;
        }
       do
        {
         if((false))
          return;
        }
       while(false);
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if(((! (! (false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               return;
              }
             while(false);
            }
          }
         return;
         if((false))
          return;
         if((false))
          return;
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
  {
   do
    {
     if((false))
      return;
     do
      {
       if((false))
        {
         if((false))
          break;
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            break;
           return;
           if(((((bool(bvec4(false, false, true, false)))) || false)))
            return;
          }
         return;
        }
       if((false))
        return;
       if(true)
        {
         if((false))
          return;
         if((false))
          {
           if(((true && (false))))
            {
             if(true)
              {
               if((false))
                return;
               if((false))
                continue;
              }
             else
              {
              }
             if((false))
              {
               if(((false) || false))
                {
                 if((false))
                  continue;
                }
               else
                {
                 if((false))
                  return;
                }
               if((false))
                break;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             return;
             if((false))
              {
               if((false))
                continue;
               return;
               if((false))
                continue;
              }
            }
           if((false))
            {
             if((false))
              continue;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              return;
             break;
            }
           if(true)
            {
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   if(true)
                    {
                     if((false))
                      continue;
                     return;
                    }
                   else
                    {
                     if((false))
                      continue;
                    }
                  }
                 while(false);
                }
              }
            }
           else
            {
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter < (~ (((~ (1)) / 1))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(false);
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((true && (false))))
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         if((false))
          break;
         if((((false) || false)))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
              }
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((false))
                    break;
                   return;
                  }
                }
               continue;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
              return;
             if(true)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      continue;
                     continue;
                    }
                   return;
                  }
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   break;
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(1)) + 0))) >> (int(1))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((max(int(4), int(4))))) >> (((int(4)) ^ 0))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if((false))
                        continue;
                       if((false))
                        break;
                       if((false))
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              continue;
                             return;
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              continue;
                            }
                           break;
                          }
                         if((false))
                          break;
                         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       if((false))
                        {
                         if((false))
                          return;
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           return;
                          }
                         break;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          break;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         break;
                        }
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               break;
              }
             do
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  break;
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   continue;
                  }
                 if(true)
                  {
                   return;
                   if((false))
                    continue;
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 if((false))
                  {
                   if((false))
                    return;
                   if((((false) && true)))
                    {
                     if((false))
                      continue;
                     break;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   break;
                   if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
                    break;
                   if((false))
                    {
                     if(((! (! (false)))))
                      return;
                     return;
                     if((false))
                      continue;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if((false))
                  {
                   if(((false || (false))))
                    continue;
                   if(false)
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> ((max(int(4), (1 * (int(4))))))); _injected_loop_counter ++)
                      {
                       if((false))
                        return;
                      }
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    return;
                  }
                 if((false))
                  break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while((! (! ((false || (false))))));
            }
           if((false))
            break;
           if((false))
            {
             if((false))
              return;
             return;
            }
          }
         if((false))
          {
           do
            {
             if((false))
              break;
             do
              {
               return;
              }
             while(false);
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          continue;
         if((false))
          continue;
         if((false))
          {
           if((false))
            break;
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           continue;
          }
        }
       else
        {
         if((false))
          {
           if((false))
            continue;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if((false))
          return;
         if((false))
          break;
         if((false))
          {
           if(true)
            {
             for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           else
            {
            }
          }
         if((false))
          continue;
        }
       if((false))
        return;
       if((false))
        {
         if((false))
          {
           if((false))
            break;
           break;
          }
         break;
         if((false))
          {
           if((false))
            break;
           continue;
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_9(mat3(1.0), _GLF_struct_6(ivec3(1), mat4(1.0), mat4x3(1.0)), mat2x3(1.0), _GLF_struct_7(1u, mat2(1.0), mat3(1.0), vec2(1.0), mat2(1.0), ivec2(1)), _GLF_struct_8(vec3(1.0), uvec2(1u), gl_NumWorkGroups.x, mat4x2(1.0))), vec3(1.0), vec3(1.0));
 if(false)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bool(false)))))
      return;
     return;
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if((false))
    return;
   if((false))
    return;
  }
 if(false)
  {
   if((false))
    return;
   for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           do
            {
             if((false))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
            }
           while((true && (false)));
          }
        }
      }
    }
  }
 else
  {
   if(true)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
           do
            {
             return;
             if((false))
              break;
            }
           while(false);
          }
        }
      }
    }
   else
    {
    }
   if((false))
    return;
   do
    {
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            break;
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          break;
        }
       continue;
      }
    }
   while(false);
   if((! ((bool(bool(! (false)))))))
    {
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
         if((false))
          return;
        }
       else
        {
        }
      }
     if((false))
      continue;
    }
   while((! (! (false))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(gl_WorkGroupID.x, 1.0);
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(true)
            {
             if((false))
              return;
             if((false))
              return;
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = ((0) | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((true && ((bool(bool(false)))))))
                  break;
                 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                 if((((false) && true)))
                  break;
                 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        continue;
                       return;
                      }
                     do
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         return;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     while(false);
                    }
                  }
                 if((false))
                  continue;
                }
               if(((true && (false))))
                return;
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         return;
        }
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
        }
       else
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((bool((bvec3(bvec4(bvec3(false, false, true), false))))))
            {
            }
           else
            {
             return;
            }
          }
         if(((true && (false))))
          return;
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        return;
      }
     if((((false) || false)))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     do
      {
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
           if(((((injectionSwitch.x > injectionSwitch.y))) && true))
            {
             if(((! (! ((true && (false)))))))
              return;
            }
           else
            {
             if((false))
              continue;
             if((false))
              return;
            }
          }
        }
       while(false);
       if((false))
        {
         if((false))
          return;
         break;
        }
      }
     while(false);
    }
   if((false))
    return;
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(false);
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((true && (true)))
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_14.workgroup_id;
 for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    return;
  }
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              return;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             else
              {
              }
             if((false))
              break;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (56567 & 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(false)
        {
         if((false))
          break;
        }
       else
        {
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_5._f1.subgroup_size + subgroup_local_id;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int(0))); _injected_loop_counter --)
        {
         do
          {
           if((false))
            continue;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 while((! (! (false))));
                }
               while(false);
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        return;
       if((false))
        {
         if((! (! (true))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((! (! (false)))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         else
          {
           if((false))
            return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
          return;
        }
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 do
  {
   if(true)
    {
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(true)
        {
         if((false))
          continue;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                  {
                   if((false))
                    continue;
                   return;
                  }
                }
              }
             while((! (! (false))));
             do
              {
               return;
              }
             while(false);
            }
          }
         else
          {
          }
         if((false))
          continue;
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              continue;
             if(true)
              {
               if((bool((bvec2(bvec3(bvec2(((injectionSwitch.x > injectionSwitch.y)), false), true))))))
                {
                 if((false))
                  continue;
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 << (int(4))) >> (int(4))) & (1 | 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              continue;
             return;
             if((false))
              break;
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             if(((! (! ((true && (false)))))))
              break;
             if((false))
              {
               if((false))
                continue;
               if((false))
                continue;
               do
                {
                 do
                  {
                   return;
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(false);
              }
             do
              {
               if((false))
                {
                 if((false))
                  continue;
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                  continue;
                 if((false))
                  break;
                }
               if((false))
                continue;
               if((false))
                continue;
              }
             while(false);
             if((false))
              {
               for(int _injected_loop_counter = (1 | (clamp(1, 1, 1))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 return;
                }
              }
             if(((false || (false))))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    return;
                   break;
                  }
                 break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  break;
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                      {
                       if((false))
                        return;
                      }
                     continue;
                    }
                   continue;
                  }
                 break;
                 if((false))
                  return;
                }
               if((false))
                return;
               break;
              }
             return;
             for(int _injected_loop_counter = ((1 << (((int(1)) >> 0))) >> ((int(int(int(1)))))); _injected_loop_counter > (0 ^ (0)); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   do
                    {
                     do
                      {
                       return;
                      }
                     while(false);
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                  }
                }
              }
             if((false))
              break;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                {
                 if((false))
                  return;
                 break;
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  break;
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   return;
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            break;
                           return;
                          }
                        }
                       return;
                       if((false))
                        break;
                      }
                    }
                   if((false))
                    return;
                  }
                }
               if(((! ((bool(bvec4(! (false), true, false, false)))))))
                continue;
              }
             if((((false) || false)))
              continue;
             if((false))
              break;
             if(false)
              {
               if((false))
                return;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if((false))
            continue;
           if((false))
            {
             if((false))
              break;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((false))
              {
               if(true)
                {
                 if((false))
                  continue;
                 return;
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               continue;
              }
             if((false))
              continue;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if((false))
            {
             if((false))
              return;
             for(int _injected_loop_counter = (int(ivec3(0, 1, 1))); _injected_loop_counter != (((1 << (int(6))) >> (int(6))) | 1); _injected_loop_counter ++)
              {
               if(((! ((! (! (! ((! (! (false)))))))))))
                continue;
               if(((false || (false))))
                continue;
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if(((false || (false))))
                break;
               if((false))
                {
                 if(((true && (false))))
                  {
                   if((false))
                    continue;
                   if((false))
                    continue;
                   return;
                   if((false))
                    break;
                  }
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                   if((false))
                    continue;
                  }
                 while(false);
                }
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             break;
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if((false))
              continue;
             if((false))
              {
               if((false))
                break;
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                 if((false))
                  return;
                }
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((bool(bvec2(false, false)))))
            continue;
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (44824 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             if((false))
              continue;
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              return;
            }
           else
            {
            }
          }
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             continue;
            }
           return;
          }
        }
       else
        {
        }
       if((false))
        continue;
      }
    }
   else
    {
    }
  }
 while(false);
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
    {
     if(false)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           if((false))
            {
             if((false))
              return;
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (((int(1)) ^ 0))); _injected_loop_counter --)
            {
             return;
             if((false))
              break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
          }
        }
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         continue;
        }
       do
        {
         if((false))
          {
           if((false))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter != ((0 | 1) & int((injectionSwitch.y))); _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  return;
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               do
                {
                 if(((false) && true))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(false);
              }
            }
           else
            {
            }
          }
         if((false))
          break;
         if((false))
          break;
        }
       while(false);
      }
    }
   if((false))
    return;
  }
 if(true)
  {
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (~ (~ (((0) - 0)))); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   if(true)
    {
     do
      {
       atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
      }
     while(false);
    }
   else
    {
    }
  }
 else
  {
   do
    {
     if((false))
      break;
     if((false))
      return;
    }
   while(false);
  }
 if((false))
  return;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(atomicLoad(write_val, 4, 64, 0), _GLF_struct_12(_GLF_struct_11(vec3(1.0), vec2(1.0)), mat3x4(1.0)), bvec4(true), mat4x2(1.0), bvec2(true));
 for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 ^ 0) << (int(4))) >> (int(4))); _injected_loop_counter ++)
  {
   do
    {
     if((false))
      continue;
     if((false))
      return;
     buf[virtual_gid] = uint(subgroupAllEqual(_GLF_struct_replacement_13.read_val));
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
  }
 else
  {
  }
 if(((false || (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        {
         if(((bool(bool(((false) && true))))))
          break;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(false);
     if(true)
      {
       do
        {
         if((false))
          break;
         do
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             return;
             if((false))
              return;
            }
          }
         while(false);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
      }
    }
  }
 do
  {
   if((false))
    return;
  }
 while(false);
 do
  {
   if((false))
    {
     if(((true && (false))))
      {
       if((false))
        continue;
       break;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       break;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
   if((false))
    {
     do
      {
       return;
       if((false))
        break;
      }
     while(false);
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec2(false, false)))))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      return;
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (((0 + (1))) << (0 << (int(4)))); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(false);
         if((false))
          continue;
         if(((true && (false))))
          {
           if((false))
            return;
           break;
          }
        }
      }
     if(true)
      {
       return;
       if((false))
        return;
       if((false))
        return;
      }
     else
      {
      }
    }
   do
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if((((false) || false)))
      {
       if((false))
        continue;
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if(true)
      {
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((false || (false))))
              break;
             continue;
            }
           if(true)
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
            }
           else
            {
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
        }
       while(false);
       if((false))
        continue;
       if((false))
        continue;
      }
     else
      {
      }
     if((false))
      break;
     if((false))
      break;
     if((false))
      {
       if((false))
        break;
       if((false))
        break;
       if((false))
        return;
       break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        continue;
       continue;
      }
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
       if((false))
        return;
      }
     if(true)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               do
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               while(false);
              }
             if((false))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((false))
              break;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            {
             do
              {
               if((false))
                break;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(((true && (false))))
                  {
                   if((false))
                    continue;
                   break;
                   if((false))
                    return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if((false))
                      continue;
                     continue;
                    }
                   continue;
                  }
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                     if((false))
                      break;
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                   if((false))
                    break;
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if((false))
                      {
                       if((! (! (false))))
                        {
                         if((false))
                          continue;
                        }
                       else
                        {
                         return;
                        }
                      }
                     continue;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     if((false))
                      break;
                     if((false))
                      break;
                     continue;
                    }
                   break;
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((false))
                    continue;
                   if((false))
                    {
                     if((false))
                      return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        break;
                       break;
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        break;
                       if((false))
                        continue;
                       if(true)
                        {
                         if((false))
                          return;
                         do
                          {
                           return;
                          }
                         while(false);
                        }
                       else
                        {
                        }
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     break;
                    }
                   if((false))
                    return;
                   if((false))
                    {
                     if((false))
                      break;
                     break;
                    }
                   if((false))
                    return;
                   for(int _injected_loop_counter = (int(int(((false ? (- 51641) : 0))))); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((false))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if((false))
                      continue;
                     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          {
                           if(true)
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                   if((false))
                    {
                     if((false))
                      continue;
                     if((false))
                      break;
                     break;
                     if((false))
                      continue;
                     if((false))
                      return;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((false))
                      break;
                     if(((! (! ((! (! (false))))))))
                      continue;
                     if((false))
                      break;
                     break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                     break;
                    }
                   if(false)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   else
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(((false || (false))))
                      continue;
                    }
                   if((false))
                    continue;
                   if((false))
                    {
                     if((false))
                      {
                       do
                        {
                         return;
                         if((false))
                          return;
                        }
                       while(false);
                      }
                     continue;
                     if((false))
                      continue;
                    }
                   if(false)
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                     if((false))
                      return;
                     if((false))
                      return;
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                         if((false))
                          continue;
                        }
                       else
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            continue;
                           if((false))
                            return;
                           return;
                           if((false))
                            continue;
                          }
                        }
                       if((false))
                        {
                         if((false))
                          break;
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            continue;
                           return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       if((false))
                        break;
                       if((false))
                        continue;
                      }
                    }
                   if((false))
                    continue;
                  }
                }
               else
                {
                }
               if((false))
                break;
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   else
                    {
                    }
                   if((false))
                    return;
                  }
                }
               if((false))
                break;
               if((false))
                break;
               if(((false || (false))))
                break;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               do
                {
                 if((false))
                  return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
              }
             while(false);
             if((false))
              continue;
             if(false)
              {
               if((false))
                continue;
               if(true)
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
               if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
                break;
               if((false))
                break;
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if((false))
                    return;
                   break;
                  }
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                     if((false))
                      continue;
                    }
                   else
                    {
                     return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          break;
                         break;
                        }
                       if((false))
                        break;
                       if(false)
                        {
                         if((false))
                          continue;
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                  }
                }
               if((((false) && true)))
                continue;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                {
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               if((false))
                {
                 if((false))
                  {
                   if(((((true && (false))) || false)))
                    break;
                   continue;
                  }
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (((1 << (int(2))) >> (int(2))) ^ 1); _injected_loop_counter --)
                        {
                         if((false))
                          {
                           if((false))
                            break;
                           break;
                          }
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if(((! (! (((false) && true))))))
                            {
                             if((false))
                              break;
                             do
                              {
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                }
                               else
                                {
                                 return;
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    return;
                                  }
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    {
                                     if(false)
                                      {
                                      }
                                     else
                                      {
                                       return;
                                      }
                                    }
                                  }
                                }
                              }
                             while(false);
                             if((false))
                              break;
                             if((false))
                              return;
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((false))
                                return;
                               break;
                              }
                             if((false))
                              return;
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   while(false);
                   if((false))
                    continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   return;
                  }
                 if((bool(bool((false || (false))))))
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if(((false) && true))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(true)
                      {
                       if(true)
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if((false))
                        break;
                      }
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  return;
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      {
                       do
                        {
                         return;
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                    }
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 if(((bool(bvec4(false, false, true, false)))))
                  continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               if((false))
                return;
               continue;
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              return;
            }
          }
         else
          {
          }
         if((false))
          {
           if((false))
            break;
           if((false))
            break;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if((false))
          continue;
        }
       while(false);
      }
     else
      {
       if((false))
        break;
      }
     do
      {
       if(false)
        {
        }
       else
        {
         if((false))
          return;
         if((false))
          continue;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      continue;
     if((false))
      break;
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
  }
 do
  {
   for(int _injected_loop_counter = ((0 | (0)) >> (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if(true)
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               return;
               if((false))
                break;
              }
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               break;
               if((false))
                continue;
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          return;
        }
       if((false))
        continue;
      }
     while(false);
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((((1 << (int(2))) >> (int(2))) << (int(5))) >> (int(5))); _injected_loop_counter ++)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                return;
              }
             else
              {
              }
            }
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             return;
            }
           if(true)
            {
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 return;
                }
              }
             if((false))
              continue;
            }
           else
            {
            }
          }
         if(((bool(bool(false)))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           return;
          }
         return;
        }
      }
    }
   else
    {
    }
  }
 while(false);
 if((false))
  {
   if((false))
    return;
   if(true)
    {
     return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
}
