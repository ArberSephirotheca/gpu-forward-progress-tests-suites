#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((false || ((! (! (((bool(bvec4((bool((false || (bool(((! (! ((bool(bool(((false)))))))) && true)))))), false, (! (! ((! (! (true)))))), false)))) || ((false) && true))))))))
  return;
 uint num_workgroup = ((((false ? (max((uvec3(60438u, 45878u, 103106u)), (uvec3(60438u, 45878u, 103106u)))) : gl_NumWorkGroups)).x) | ((min(((((uint(uint((((((gl_NumWorkGroups.x) << ((0u) | (0u))) / 1u) | 0u) | uint((injectionSwitch.x))))))))), gl_NumWorkGroups.x))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (((0u + ((1u * ((((true ? min((~ ((~ ((min(((~ (~ (gl_WorkGroupID))) << uvec3(0u, 0u, 0u)), ~ (~ (((gl_WorkGroupID) | uvec3(0u, 0u, 0u)))))))))).x, (uvec3((clamp((min((uvec3(uvec4((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)), ((1u << (uint(5u))) >> (uint(5u))))))[0], gl_WorkGroupID[0])), gl_WorkGroupID[0], gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[(~ (((false ? (- 33026) : ~ (2)))))])).x) : (atomicMax(subgroup_local_id, subgroup_size))))) + ((max(((min((0u >> (uint(4u))), (((0u >> (uint(4u)))) >> (min(0u, 0u)))))), ((min((0u >> (uint(4u))), (((0u >> (uint(4u)))) >> (min(0u, 0u)))))))) ^ (0u | 0u))))))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((workgroup_base + (((clamp((min(((subgroup_id * subgroup_size) >> 0u), subgroup_id * subgroup_size)), (min(((subgroup_id * subgroup_size) >> 0u), subgroup_id * subgroup_size)), (((min(((subgroup_id * subgroup_size) >> 0u), subgroup_id * subgroup_size))) | 0u)))) >> 0u) + subgroup_local_id) / 1u);
 atomicStore(write_val, ((uint(((virtual_gid) | 0u))) >> 0u), 4, 64, (max((min(0, 0)), 0)));
 uint read_val = atomicLoad((max(((((write_val)) + 0u) << (((1u ^ 1u) << ((0u) | (0u))))), write_val)), 4, 64, 0);
 if((((false) && true)))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  return;
}
