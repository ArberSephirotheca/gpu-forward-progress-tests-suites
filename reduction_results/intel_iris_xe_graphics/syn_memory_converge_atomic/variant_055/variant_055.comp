#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((clamp(vec2(mat2(injectionSwitch, (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0)), (mix(vec2((vec2(mat2(injectionSwitch, (dot(vec3(1.0, 1.0, 0.0), (mix(vec3((6.5), (vec3(0.0, 0.0, 1.0))[1], (- 7679.2322)), vec3((vec3(0.0, 0.0, 1.0))[0], (- 1.0), (vec3(0.0, 0.0, 1.0))[2]), bvec3(true, false, true))))), 0.0)))[0], (vec2(mat2(injectionSwitch, (((clamp((float(mat3x2(float((mat2x4((transpose(transpose(mat4(((true ? mat2x4(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0) : (mat2x4(- 1923.1831, 41.83, - 324.142, 313.234, - 57.74, - 6669.1820, - 8650.7973, - 922.002))))))))))), 0.0, 1.0, 0.0, 0.0, 1.0))), float((mat2x4((transpose(transpose(mat4(((true ? mat2x4(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0) : (mat2x4(- 1923.1831, 41.83, - 324.142, 313.234, - 57.74, - 6669.1820, - 8650.7973, - 922.002))))))))))), float((mat2x4((transpose(transpose(mat4(((true ? mat2x4(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0) : (mat2x4(- 1923.1831, 41.83, - 324.142, 313.234, - 57.74, - 6669.1820, - 8650.7973, - 922.002))))))))))))))), 0.0)))[1]), vec2((4.5), (44.29)), bvec2(false, false))), vec2(mat2(injectionSwitch, (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0))))).x > injectionSwitch.y))))
  {
   if((false || (((true) || false))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = (min((~ (~ ((0u ^ (~ ((max(~ ((gl_WorkGroupSize.x)), ~ ((gl_WorkGroupSize.x)))))))))), ((max((clamp((gl_WorkGroupSize.x) * (0u ^ (((1u) - 0u))), (~ (~ (0u | (((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))))))), (((gl_WorkGroupSize.x) - 0u)) * 1u)), ((clamp(clamp((~ (~ ((((gl_WorkGroupSize.x)) / 1u)))) * 1u, (~ (~ (clamp((0u ^ (((((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u))))) >> 0u))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, ((1u) << uint((injectionSwitch.x))), 1u, 1u)))), (max(((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))))))))), (gl_WorkGroupSize.x) * 1u), (max(clamp((~ (~ ((((gl_WorkGroupSize.x)) / 1u)))) * 1u, (~ (~ (clamp((0u ^ (((((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u))))) >> 0u))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, ((1u) << uint((injectionSwitch.x))), 1u, 1u)))), (max(((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))))))))), (gl_WorkGroupSize.x) * 1u), clamp((~ (~ ((((gl_WorkGroupSize.x)) / 1u)))) * 1u, (~ (~ (clamp((0u ^ (((((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u))))) >> 0u))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, ((1u) << uint((injectionSwitch.x))), 1u, 1u)))), (max(((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))))))))), (gl_WorkGroupSize.x) * 1u))), ((clamp((~ (~ ((((gl_WorkGroupSize.x)) / 1u)))) * 1u, (~ (~ (clamp((0u ^ (((((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u))))) >> 0u))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, ((1u) << uint((injectionSwitch.x))), 1u, 1u)))), (max(((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))))))))), (gl_WorkGroupSize.x) * 1u)) | ((max(clamp((~ (~ ((((gl_WorkGroupSize.x)) / 1u)))) * 1u, (~ (~ (clamp((0u ^ (((((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u))))) >> 0u))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, ((1u) << uint((injectionSwitch.x))), 1u, 1u)))), (max(((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))))))))), (gl_WorkGroupSize.x) * 1u), clamp((~ (~ ((((gl_WorkGroupSize.x)) / 1u)))) * 1u, (~ (~ (clamp((0u ^ (((((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u))))) >> 0u))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, ((1u) << uint((injectionSwitch.x))), 1u, 1u)))), (max(((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))), ((uint(uvec4((gl_WorkGroupSize.x) * 1u, 1u, 1u, 1u)))))))))), (gl_WorkGroupSize.x) * 1u)))))))))))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (clamp((~ (~ ((0u + ((((max(1u, 1u))) / 1u) * ((((workgroup_size * (uint(uint((max(((1u * (uint(uvec4((((0u ^ ((min(workgroup_id, workgroup_id))))) ^ 0u), 1u, 0u, 0u))))), ((1u * (0u ^ ((uint(uvec4(workgroup_id, 1u, 0u, 0u))))))))))))) | (workgroup_size * (uint(uint((max(((1u * (uint(uvec4(workgroup_id, 1u, 0u, 0u))))), ((1u * (uint(uvec4(workgroup_id, 1u, 0u, 0u))))))))))))))))))), workgroup_size * (((uint(uint((max(((1u * (uint(uvec4(workgroup_id, 1u, 0u, 0u))))), ((1u * ((((max(uint(uvec4(workgroup_id, 1u, 0u, 0u)), ((uint(uvec4(workgroup_id, 1u, 0u, 0u))) / 1u)))) | ((((uint(uvec2(uint(uvec4(workgroup_id, 1u, 0u, 0u)), 1u)))) | (uint(uvec4(workgroup_id, 1u, 0u, 0u))))))))))))))) - ((1u ^ 1u) | ((min(0u, 0u))))), workgroup_size * ((0u + ((1u * ((~ (~ (uint(uint((max((clamp(((1u * (((((uint(uvec4(workgroup_id, 1u, 0u, 0u)))) ^ 0u) | (((uint(uvec4(workgroup_id, 1u, 0u, 0u)))) ^ 0u))))), ((1u * (uint(uvec4(workgroup_id, 1u, 0u, 0u))))), ((1u * (uint(uvec4(workgroup_id, 1u, 0u, 0u))))))), ((1u * (uint(uvec4(workgroup_id, 1u, 0u, 0u)))))))))))))))))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (clamp(subgroup_local_id, (uint(((0u >> (uint(2u))) | (uint(subgroup_local_id))))), ((false ? (workgroup_size) : (((clamp((max((max((min(subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id)))), (min(subgroup_local_id, ((((subgroup_local_id) | (subgroup_local_id)) >> (0u | 0u))))))), (min(subgroup_local_id, ((((subgroup_local_id) | (subgroup_local_id)) + uint((injectionSwitch.x)))))))), (min(subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id)))), (uint(uvec3((min(subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id)))), (1u | 0u), 0u))))) | (((clamp(~ (~ (((true ? min(subgroup_local_id, subgroup_local_id) : (uint(uvec3((max((((num_workgroup) | (num_workgroup))), (((num_workgroup) | (num_workgroup))))), 0u, (0u ^ ((1u ^ 1u)))))))))), ~ (~ (((true ? min(subgroup_local_id, subgroup_local_id) : (uint(uvec3((max((((num_workgroup) | (num_workgroup))), (((num_workgroup) | (num_workgroup))))), 0u, (0u ^ ((1u ^ 1u)))))))))), ~ (~ (((true ? min(subgroup_local_id, subgroup_local_id) : (uint(uvec3((max((((num_workgroup) | (num_workgroup))), (((num_workgroup) | (num_workgroup))))), 0u, (0u ^ ((1u ^ 1u))))))))))))))))))));
 do
  {
   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
  }
 while(false);
 uint read_val = atomicLoad(((true ? write_val : (uint(uvec2((subgroup_size), 1u))))), 4, ((((64) | (64)) | ((1 * ((64) | (64)))))), 0);
 do
  {
   if((! (! (false))))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((false ? ((((((((min(90479, 90479)))) | (((min(90479, 90479))))) >> 0) << - 43866) + 18399)) : (((0) << 0) >> (((((int(8))) | 0) | (int(8))))))); _injected_loop_counter < 1; ((_injected_loop_counter ++) << (clamp((0 << (int(0))), (((0 << (int(0)))) - 0), ((true ? (0 << (int(0))) : ((_injected_loop_counter & _injected_loop_counter))))))))
      {
       if(((((bool(bvec2(false, false))) || (! ((bool(bvec2(! (false), true)))))))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(true)
        {
         ((((buf[virtual_gid] = uint(subgroupAllEqual(read_val))) | 0u)) ^ 0u);
        }
       else
        {
        }
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 while((true && ((! (! ((true && (((injectionSwitch.x < injectionSwitch.y)) && ((! (! ((bool(bvec4((false), true, true, true)))))))))))))));
 if((bool(bvec4((false), ((injectionSwitch.x > injectionSwitch.y)), false, (true && ((((mix(float(injectionSwitch.x), float((- 218.236)), bool(false))) > injectionSwitch.y))))))))
  {
   if(true)
    {
     if(((! (! (! ((! (bool(((bvec3(bvec3((bvec3(bvec4(bvec3(bvec4(bvec3((((false || (bool(bvec4((false || ((true))), false, (false || (true)), true))))) && true), false, ((injectionSwitch.x < injectionSwitch.y))), true)), true))))))))))))))))
      {
       if((true && (false)))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(true)
  {
   if((! (! ((((true && (((false || ((((false || (false))) && true))))))) || (bool(bvec2(false, false))))))))
    {
     do
      {
       return;
      }
     while(false);
    }
  }
 else
  {
  }
 if((bool(bvec3((false), false, true))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((min(int((injectionSwitch.y)) & 1, int((injectionSwitch.y)) & 1))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
}
