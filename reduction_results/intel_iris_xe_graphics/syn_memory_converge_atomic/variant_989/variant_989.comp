#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (1u * (((((gl_WorkGroupSize.x) ^ 0u) / 1u))));
 uint workgroup_id = ((gl_WorkGroupID) + uvec3(0u, (max(((true ? 0u : (76808u))), 0u)), 0u)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + ((min((clamp((subgroup_id * ((subgroup_size) >> 0u)), (subgroup_id * ((subgroup_size) >> 0u)), (subgroup_id * ((subgroup_size) >> 0u)))) * uint((injectionSwitch.y)), (uint(uvec2((0u | ((subgroup_id * ((subgroup_size) >> 0u)))), 0u))) * uint((((injectionSwitch) * (max(vec2(1.0, 1.0), vec2(1.0, 1.0)))).y))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(((write_val) - 0u), 4, ((64) | (((((64) | (64)) * (1 | 1))))), 0);
 ((buf[virtual_gid] = ((((((((injectionSwitch.x < injectionSwitch.y)) && (((! (((! (! (! ((bool(bvec4(((true && (bool(bvec3((injectionSwitch.x > (mix(float(((max(- 906.679, - 906.679)))), float((((false ? (6.2) : (min(mix(float(injectionSwitch.y), float((clamp(((float(mat2(9.4, 0.0, 1.0, exp(0.0))))), (9.4), (9.4)))), bool(false)), mix(float(injectionSwitch.y), float((clamp((9.4), (9.4), (9.4)))), bool(false)))))))), bool(true)))), false, true))))), false, false, false))))))) && true))))))) || false)) ? (read_val) : uint(subgroupAllEqual(read_val))))) ^ 0u);
}
