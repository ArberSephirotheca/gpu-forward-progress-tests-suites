#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((! ((bool(bvec4(((! ((true && (! (! ((! (((bool(bvec4(((bool(bool((! (! (((bool((true && (bool(((bool(bvec3(! ((bool(bvec4((false || ((false))), true, false, true)))), false, true))))))))) && ((injectionSwitch.x < injectionSwitch.y))))))))) && true), ((injectionSwitch.x < injectionSwitch.y)), false, false)))))))))))) || false), false, ((injectionSwitch.x > injectionSwitch.y)), true)))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (uint((max(uvec4(workgroup_id, ((((1u << (((uint(6u)) >> 0u))) >> (uint(6u))) | ((1u << (((uint(6u)) >> 0u))) >> (uint(6u))))), 0u, 0u), ((uvec4(workgroup_id, ((1u << (((uint(6u)) >> 0u))) >> ((~ (~ (uint(6u)))))), 0u, 0u)) << uvec4(0u, 0u, 0u, 0u))))));
 uint virtual_gid = ((((true) || false) ? (((max(((workgroup_base) * 1u), workgroup_base))) ^ uint((injectionSwitch.x))) + ((subgroup_id * subgroup_size) >> ((((false ? (((workgroup_size)) | 0u) : 0u)) << (uint(8u))) << (uint(8u)))) : ((true ? (clamp(150043u, workgroup_id, uint(- 297.067))) : (bitfieldReverse(116770u)))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, (clamp((((min((int(ivec4(64, 0, 1, 0))), 64))) | (64)), 64, 64)), 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
