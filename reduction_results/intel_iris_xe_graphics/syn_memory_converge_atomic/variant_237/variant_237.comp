#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((bool(bool((false)))))
  {
   if((bool(bvec4((! (! ((bool(((bvec2(bvec2(bvec2((bvec2(bvec3(bvec2(bvec2((false), false)), false))))))))))))), true, false, false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((false) || false)))
      {
       if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (uvec3(0u, 0u, 0u) ^ ((uvec3(uvec3(gl_NumWorkGroups))))).x;
 if(((! (((! ((((! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))) && true)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((((clamp((float(vec3((injectionSwitch.x), 1.0, 1.0))), (injectionSwitch.x), (injectionSwitch.x))) * 1.0) > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * (clamp((((((false ? (subgroup_id) : (((0u | (((min(((workgroup_id) ^ uint((injectionSwitch.x))), (min(workgroup_id, workgroup_id)))))))) + ((0u) >> 0u))))) | ((((((((~ (~ (min(workgroup_id, (min(((workgroup_id) >> (0u ^ 0u)), workgroup_id))))))) | 0u)) ^ 0u))))) >> (((0u >> (uint(4u)))) << 0u)), (((min(workgroup_id, (((((~ (~ ((min(workgroup_id, workgroup_id))))) | (~ (~ ((min(workgroup_id, workgroup_id)))))))) | ((((min(workgroup_id, workgroup_id))) * (1u & 1u))))))) >> ((min(0u >> ((min(uint(4u), uint(4u)))), ((0u >> (uint((((min(4u, 4u)) >> (0u | 0u)))))) | 0u))))), ((((((((1u << (max((uint(7u)), (((uint(7u))) << 0u)))) >> (uint(7u))) * (min(workgroup_id, (min(workgroup_id, workgroup_id)))))) - 0u))) >> (0u >> (~ (~ ((0u | ((((uint(4u))) | ((uint(4u)))))))))))));
 if((! (! (((((! (! (true))) && ((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y)) || ((false))))))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 atomicStore(write_val, (clamp(uint((((max(((virtual_gid) | (0u << (uint(8u)))) >> (0u | 0u), ((max((((virtual_gid) | (0u << ((uint(((uint(uint(8u))) + 0u)))))) >> ((((clamp(0u | 0u, 0u | 0u, ((0u | 0u) * 1u)))) - 0u))) >> 0u, ((uint(uvec4(min((((virtual_gid) | (0u << ((uint(((uint(uint(8u))) + 0u)))))) >> (((0u | 0u) - 0u))) >> 0u, (((virtual_gid) | (0u << ((uint(((clamp((uint(uint(8u))), (uint(uint(8u))), (uint(uint(8u))))) + 0u)))))) >> ((((0u ^ (((0u) | 0u))) | 0u) - 0u))) >> 0u), (0u | (0u ^ ((1u * (0u))))), 1u, 0u)))))))))))), ((uint((((max(((virtual_gid) | (0u << (uint(8u)))) >> (0u | 0u), ((max((((virtual_gid) | (0u << ((uint(((uint(uint(8u))) + 0u)))))) >> ((((clamp(0u | 0u, 0u | 0u, ((0u | 0u) * 1u)))) - 0u))) >> 0u, ((uint(uvec4(min((((virtual_gid) | (0u << ((uint(((uint(uint(8u))) + 0u)))))) >> (((0u | 0u) - 0u))) >> 0u, (((virtual_gid) | (0u << ((uint(((clamp((uint(uint(8u))), (uint(uint(8u))), (uint(uint(8u))))) + 0u)))))) >> ((((0u ^ (((0u) | 0u))) | 0u) - 0u))) >> 0u), (0u | (0u ^ ((1u * (0u))))), 1u, 0u))))))))))))) * 1u), uint((((max(((virtual_gid) | (0u << (uint(8u)))) >> (0u | 0u), ((max((((virtual_gid) | (0u << ((uint(((uint(uint(8u))) + 0u)))))) >> ((((clamp(0u | 0u, 0u | 0u, ((0u | 0u) * 1u)))) - 0u))) >> 0u, ((uint(uvec4(min((((virtual_gid) | (0u << ((uint(((uint(uint(8u))) + 0u)))))) >> (((0u | 0u) - 0u))) >> 0u, (((virtual_gid) | (0u << ((uint(((clamp((uint(uint(8u))), (uint(uint(8u))), (uint(uint(8u))))) + 0u)))))) >> ((((0u ^ (((0u) | 0u))) | 0u) - 0u))) >> 0u), (0u | (0u ^ ((1u * (0u))))), 1u, 0u)))))))))))))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, ((4) / 1), 64, 0);
 if((false))
  {
   if((false || ((false))))
    barrier();
   barrier();
  }
 ((((buf[virtual_gid] = uint(subgroupAllEqual(read_val)))) >> 0u) << ((false ? (subgroup_local_id) : 0u)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
}
