#version 460

struct _GLF_struct_1 {
 mat3 _f0;
 uint subgroup_id;
 uvec3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat4 _f1;
 bool _f2;
 ivec3 _f3;
 _GLF_struct_1 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat4x2 _f1;
 ivec4 _f2;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(mat2x3(1.0), (mat3(mat4x3(((transpose(transpose((mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat3(((true ? (((true ? mat3(mat3(mat3(1.0))) : (mat3(519.082, 420.343, 35.42, - 4057.3218, (((false ? (- 4.5) : min(5.5, 5.5)))), - 5.6, 2.4, - 1.9, 8.3))))) : ((mat3(7729.2573, 6.0, - 4.9, 6116.6073, 1.3, - 9.7, - 124.512, 1.3, - 5.8) / mat3(- 6.6, - 2892.3568, 93.09, 94.37, - 67.46, 9.3, 5.8, - 9.6, - 3.5))))))))))))))))), ((((true && ((injectionSwitch.x < injectionSwitch.y)))) ? ((false ? (mat4(6.2, - 53.34, - 0.7, 246.374, 8.5, 9.3, - 8873.8634, - 879.481, - 93.80, 1.4, 208.640, - 0.3, - 9.6, - 8.6, - 945.635, 59.36)) : ((false ? (mat4(195.876, 2510.4459, 9404.4459, 77.54, - 72.37, - 5.7, - 3302.4129, 554.255, 3.3, 565.732, 4.7, 685.968, 0.4, 9.3, 70.58, - 8.6)) : mat4(1.0))))) : ((((mat4(((vec2(injectionSwitch[0], injectionSwitch[1])).y))) / mat4((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))) * (mat4(- 943.809, 72.78, 9.3, 71.74, 6223.3749, 7233.0549, ((clamp(float((mat4(1.0) * (mat3x4((1.0 * ((max(- 301.305, - 301.305)))), sin(0.0), 0.0, (0.0 + (sqrt(0.0))), 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 1.0, abs(0.0))))), float((mat4(1.0) * (mat3x4((1.0 * ((max(- 301.305, - 301.305)))), sin(0.0), 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 1.0, abs(0.0))))), float((mat4(1.0) * (mat3x4((1.0 * ((((max(- 301.305, - 301.305))) * exp(0.0)))), sin(0.0), 0.0, (mix(float((4834.7102)), float((min(sqrt(0.0), sqrt(0.0)))), bool(true))), 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 1.0, abs(0.0)))))))), - 2.8, - 95.89, 2.1, 5073.5028, 7942.2302, 945.283, (min((float((mat3x4(mat4(mat3x4(5.6, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 0.0, 1.0)), 1.0, 1.0)))))), ((max(mix(float((6.5)), float(5.6), bool(true)), (max(mix(float((6.5)), float(5.6), bool(true)), mix(float((6.5)), float(5.6), bool(true))))))))), - 5406.0607, (mix(((float(((clamp(float(vec2(805.298, 0.0)), float(vec2(805.298, 0.0)), (min(float(vec2(805.298, 0.0)), float(vec2(805.298, 0.0))))))))) / exp((dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))), float(((true ? (((21.58)) - 0.0) : (- 748.486)))), bool(false))))))))), (true && ((true && (true)))), ivec3(((1) >> 0)), _GLF_struct_1((mat3(mat3(mat3(1.0)))), gl_SubgroupID, uvec3(1u), mat4x3(((true ? 1.0 : (distance(vec4(8389.4208, 3746.4523, - 41.47, 41.62), vec4(5.0, 7.0, 63.02, 290.651))))))), vec3(1.0)), mat4x2(1.0), (ivec4(0, 0, 0, 0) ^ ((~ (~ ((max(ivec4(1), ivec4(1)))))))));
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((true && (false)))
  {
   if(((bool(bvec2((! (! (false))), true)))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if(((true && ((bool(bvec2(false, true)))))))
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    {
     if((((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))) || false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
   if(((! (! (false)))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while((bool(bvec3(false, false, ((injectionSwitch.x < injectionSwitch.y))))));
  }
 if((false))
  barrier();
 uint workgroup_size = (~ ((min(~ (((((gl_WorkGroupSize.x)) ^ 0u)) / 1u), ~ (gl_WorkGroupSize.x)))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((1u ^ 1u) | ((~ (((false ? (subgroup_size) : ~ ((((~ ((((~ (~ (~ (((((false ? (atomicAdd(subgroup_local_id, workgroup_id)) : ((workgroup_base + (((uint(uvec4(_GLF_struct_replacement_3._f0._f4.subgroup_id, 1u, 1u, 1u)))) | ((((uint(uvec4(_GLF_struct_replacement_3._f0._f4.subgroup_id, 0u, 0u, 1u)))) | (_GLF_struct_replacement_3._f0._f4.subgroup_id)))) * (clamp(((~ (~ (uint(uint(subgroup_size)))))), ((subgroup_size) / 1u), subgroup_size))) | (workgroup_base + _GLF_struct_replacement_3._f0._f4.subgroup_id * subgroup_size))) << 0u)))))))) / 1u))) + subgroup_local_id) - 0u))))))));
 if((((((false) || false)) || false)))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_3._f0._f4.subgroup_id * (uint(uint(subgroup_size))) + ((((injectionSwitch.x < (mix(float((5.3)), float(injectionSwitch.y), bool(true))))) ? ((min(((0u ^ (subgroup_local_id)) + 1), ((0u ^ (subgroup_local_id)) + 1))) % subgroup_size) : ((uvec2(100279u, 83791u))[1])));
 if((! ((((bool(bool((! (((! (! ((true && ((((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))) || false)))))) || ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if((! ((((bool(bvec4(! (false), true, false, false)))) && true))))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 do
  {
   if(true)
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       int i = 0;
       atomicStore(buf[next_virtual_gid], uint(2), 4, ((((64) ^ 0)) ^ 0), ((max(int(ivec2((((min(4, 4))) - 0), 1)), int(ivec2((((min(4, 4))) - 0), 1))))));
      }
     else
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       atomicStore(buf[next_virtual_gid], uint(((((! (! ((bool(bvec4((false), false, false, ((injectionSwitch.x < injectionSwitch.y)))))))) && true) ? (mix(- 49334, 19612, true)) : 2))), 4, 64, 4);
      }
    }
   else
    {
    }
  }
 while((! (! (false))));
 if((false))
  {
   for(int _injected_loop_counter = 0; (false || (_injected_loop_counter != ((0 | ((((1 << (int(4))) >> (int(4))) + 0)))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((! (! (((true && ((((! (! (((false) || ((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))) && true)))))))))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); (clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (1 | 0); (! (! (_injected_loop_counter != 0))); _injected_loop_counter --)
      {
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}
