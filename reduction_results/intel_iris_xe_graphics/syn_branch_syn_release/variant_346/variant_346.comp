#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (clamp((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), ((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) : (uvec3(42095u, 174855u, 195140u)))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((uvec3(0u, 0u, 0u) << ((max(uvec3(3u), uvec3(3u))))) ^ (((((((gl_WorkGroupID) << uvec3(0u, 0u, 0u)))) >> (uvec3(0u, 0u, 0u) << (uvec3(1u))))) | ((((gl_WorkGroupID) << (uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) + (uvec3(0u, 0u, 0u)))))))).x;
 uint workgroup_base = (uint(uvec3(workgroup_size, 1u, (((min(min((((1u << (uint(2u))) >> (uint(2u))) * 1u), (1u << (uint(2u))) >> (uint(2u))), min((((uint((clamp(uvec4((1u << (uint(2u))) >> (uint(2u)), 1u, 1u, 1u), (min(uvec4((1u << (uint(2u))) >> ((0u ^ (uint(2u)))), 1u, 1u, 1u), uvec4((((1u << (uint(2u))) | 0u)) >> (uint(2u)), 1u, 1u, 1u))), ((uvec4(0u, 0u, 0u, 0u) ^ uvec4(0u, 0u, 0u, 0u)) | (((uvec4((1u << (uint(2u))) >> (uint(2u)), 1u, (0u ^ (1u)), ((1u) | (1u)))) | (uvec4((1u << (uint(2u))) >> (uint(2u)), 1u, (0u ^ (1u)), ((1u) | (1u)))))))))))) * 1u), (1u << (uint(2u))) >> (uint((min(2u, 2u)))))))))))) * workgroup_id;
 uint virtual_gid = workgroup_base + (((0u + (subgroup_id * subgroup_size))) + (max(0u, 0u))) + (max(subgroup_local_id, subgroup_local_id));
 uint next_virtual_gid = (0u + (workgroup_base)) + subgroup_id * subgroup_size + (((((uint(uvec3(((true ? subgroup_local_id : (101454u))), (0u >> (uint(1u))), 0u))) + 1) % ((subgroup_size) + 0u)) << 0u));
 buf[virtual_gid] = (((int(int((((((1) >> 0) * (1))) >> 0)))) >> 0));
 if(((! (! ((((! (! ((false || (bool(bvec2(subgroup_local_id + 1 < subgroup_size, ((! (! ((((bool(bvec3(((((false || ((bool(bvec3((bool(bvec3(((! (! (bool(bvec4(((((bool(bvec4(bool(bvec4((bool(bvec3(injectionSwitch.x < injectionSwitch.y, (! ((! ((bool(bvec2(! (! (true)), true))))))), true))) && true, true, false, true)), true, true, true)))))), true, true, ((true) || false))))))), false, true))), ((injectionSwitch.x < (((((((! (! (! (! ((bool(bvec2(false, true))))))))) ? (mix(- 6.7, - 9.0, true)) : clamp((max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, ((injectionSwitch.y) / round(length(normalize(1.0)))))))) + tan((clamp(0.0, (float(mat3x4(0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))), 0.0))))))), true)))))) || ((injectionSwitch.x > injectionSwitch.y))) || false), true, false))))))))))))))))) && true))))))
  {
   int i = ((((false) && true) ? (- 25234) : 0));
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (int((min(((ivec4(0, 0, 0, 0) >> (ivec4(2))) ^ (ivec4((~ (~ (4))), 0, 1, 1))), ivec4((~ (~ (~ (~ ((4)))))), 0, (min(1, (~ (((max((((~ (1))) << 0), (~ (1))))) - 0)))), 1))))));
  }
 else
  {
   atomicStore(buf[(clamp(((max(min(((next_virtual_gid) / ((~ (~ ((((false ? (next_virtual_gid) : (max(1u, ((true ? ((1u) / ((false ? (virtual_gid) : 1u))) : (subgroup_size))))))))))) | 0u)), next_virtual_gid), min(((next_virtual_gid) / ((~ (~ ((((false ? (next_virtual_gid) : (max(1u, ((true ? ((1u) / ((false ? (virtual_gid) : 1u))) : (subgroup_size))))))))))) | 0u)), next_virtual_gid)))), (min(((next_virtual_gid) / (max(1u, ((true ? ((1u) / 1u) : (subgroup_size)))))), next_virtual_gid)), (min(((next_virtual_gid) / (max(1u, (((! (! ((bool(bvec3(true, false, false)))))) ? ((1u) / 1u) : (((((injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : (virtual_gid))))))))), next_virtual_gid))))], (max(uint(2), uint(2))), ((((0 << (int(4))) | ((0 + (((4) - 0)))))) << int((injectionSwitch.x))), 64, 4);
  }
}
