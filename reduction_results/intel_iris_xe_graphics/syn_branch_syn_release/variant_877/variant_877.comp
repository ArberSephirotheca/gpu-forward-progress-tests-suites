#version 460

struct _GLF_struct_3 {
 uvec2 _f0;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 uint subgroup_size;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_4 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((! ((! ((false || (! (! (false))))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_0(mat4(1.0), gl_SubgroupSize), _GLF_struct_4(_GLF_struct_1(mat4x3(1.0), ivec2((((0 | (clamp(((((int(ivec2(1, 0))) | (int(ivec2(1, 0))))) | ((clamp(int(ivec2(1, 0)), (0 | (int(ivec2(1, 0)))), int(ivec2(1, 0)))))), (int(int(int(ivec2(1, 0))))), (0 | (clamp((((true ? int((((~ (((((~ (ivec2(1, 0))) | (~ (ivec2(1, 0)))) << ivec2(0, 0))))) << ivec2(0, 0)))) : ((true ? (63533) : (23736)))))), (int((~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0))) | (~ (((ivec2(1, 0)) / ivec2(1, 1))))))))))), ((clamp(int(((min((~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0)))), (~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0)))))))), ((int(((min((~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0)))), (~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0))))))))) | 0), (min(int(((min((~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0)))), (~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0)))))))), int(((min((~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0)))), (~ (((~ (~ (((~ (ivec2(1, 0))) | (((~ (ivec2(1, 0)))) | ((~ (ivec2(1, 0))))))))) | ivec2(0, 0))))))))))))))))))))))), _GLF_struct_2(ivec4(1), ((false ? ((((~ ((~ (~ (((~ (uvec4(157396u, 3209u, 67887u, 87963u))) | uvec4(0u, 0u, 0u, 0u)))))))) | ((max((~ ((~ (~ (((~ (uvec4(157396u, 3209u, 67887u, 87963u))) | uvec4(0u, 0u, 0u, 0u))))))), (~ ((~ (~ (((~ (uvec4(157396u, 3209u, 67887u, 87963u))) | uvec4(0u, 0u, 0u, 0u)))))))))))) : uvec4(1u)))), _GLF_struct_3(uvec2(1u)), mat4x3(1.0)));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((false || (bool(bvec4(false, true, false, ((injectionSwitch.x > (((max(injectionSwitch.y, injectionSwitch.y))) * 1.0))))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((false || (false))))
  {
   if((false))
    barrier();
   if(((bool(bool(bool(bvec4((false), false, false, true)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((bool(bool((! (! ((false))))))))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))
    barrier();
  }
 if((false))
  barrier();
 if(((((max(((false ? (vec2(- 6808.8163, 9.4)) : injectionSwitch)), ((true ? injectionSwitch : (injectionSwitch))))).x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = (min((min(gl_WorkGroupSize, ((false ? (uvec3(66573u, 13876u, 179731u)) : gl_WorkGroupSize)))), gl_WorkGroupSize)).x;
 uint workgroup_id = (((0u | (gl_WorkGroupID.x))) | 0u);
 if((false))
  barrier();
 if((true && (bool((bvec2(bvec3(bvec2(((false)), true), true)))))))
  barrier();
 if((((! (((! (false || (false))) && ((injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, (clamp(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))).y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((bool(bool(((false) && true))))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if(((! (! (false)))))
      barrier();
     if((false))
      barrier();
    }
   if((false || ((false))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_5._f0.subgroup_size + (((((~ (~ (min(0u, 0u)))))) | (0u)) ^ (subgroup_local_id));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + (~ (max((~ (subgroup_id * _GLF_struct_replacement_5._f0.subgroup_size)), (~ (subgroup_id * _GLF_struct_replacement_5._f0.subgroup_size))))) + ((subgroup_local_id + 1) % _GLF_struct_replacement_5._f0.subgroup_size);
 buf[virtual_gid] = 1;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((false || ((((bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(((((bool(bvec2((true && (((injectionSwitch.x > injectionSwitch.y)))), false)))) || false)))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((true && (false))))
    barrier();
   barrier();
  }
 if(((subgroup_local_id) / 1u) + 1 < _GLF_struct_replacement_5._f0.subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, ((4) | 0));
   if(((((((false ? (50.34) : (injectionSwitch.x) / exp(0.0)))) > injectionSwitch.y))))
    {
     if(((true && ((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(((! ((! (! (! (((false) || false)))))))))
        barrier();
       barrier();
      }
     if((((false || ((((((true && ((bool(bvec4(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, false)), true, false, true)))))))) || false)))) && true))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((bool((bvec2(bvec4(bvec2((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))), true), true, true)))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false || ((((((true && (! ((! (! (! (((injectionSwitch.x > injectionSwitch.y) && true)))))))))))))))
    {
     if((false))
      {
       if(((bool(bvec3(((false) && true), true, false)))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}
