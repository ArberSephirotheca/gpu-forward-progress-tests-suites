#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if(((false || (false))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((false || (false))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if(((((vec2((min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0))))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((false || (bool((bvec3((bvec3(bvec4(bvec3(bvec3((! (! ((false)))), true, true)), true))))))))))
  barrier();
 if((false))
  barrier();
 if(((! (! (false)))))
  barrier();
 if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false || ((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(((! (! (! ((! (((((false || ((injectionSwitch.x > injectionSwitch.y))))) && true)))))))))
  {
   if((false))
    barrier();
   if((bool((bvec3(bvec3(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), false)))))))
    barrier();
   if(((((bool(bvec4((((true && (injectionSwitch.x > injectionSwitch.y))) || false), false, ((false || ((bool(bvec3(((min(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false, true)))))), true)))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = ((gl_NumWorkGroups.x) | 0u);
 if(((false || (false))))
  barrier();
 uint workgroup_size = (((((((((false || (injectionSwitch.x < injectionSwitch.y)))) ? (clamp((((min(gl_WorkGroupSize.x, (min(((max(((uint(uint(gl_WorkGroupSize.x)))) ^ 0u, ((((uint(uint(gl_WorkGroupSize.x)))) ^ 0u) | (((uint(uint(gl_WorkGroupSize.x)))) ^ 0u))))), (uint(uint(gl_WorkGroupSize.x)))))))) >> ((((0u) | (0u))) / uint((injectionSwitch.y)))), (((min(gl_WorkGroupSize.x, (min((((uint(uint(gl_WorkGroupSize.x)))) ^ 0u), (((0u | ((uint(uint(((((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))) - 0u))))))) + 0u)))))) >> 0u), ((max(((min(gl_WorkGroupSize.x, (min((((((~ (~ ((uint(uint(gl_WorkGroupSize.x)))))))) ^ (62804u & 0u)) ^ 0u), (((((((uint(uvec3(uint(uvec2(uint(uint(gl_WorkGroupSize.x)), 0u)), 1u, 1u)))) - uint((injectionSwitch.x))) | ((max(uint(uvec3(uint(uvec2(uint(uint(gl_WorkGroupSize.x)), 0u)), 1u, 1u)), uint(uvec3(uint(uvec2(uint(uint((((((false ? (uvec3(162688u, 69264u, 53715u)) : (gl_WorkGroupSize) | (gl_WorkGroupSize))))) << (max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))).x)), 0u)), 1u, 1u)))))))))))))), ((((min(gl_WorkGroupSize.x, (min((((((~ (((~ (~ ((~ ((uint(uint(gl_WorkGroupSize.x))))))))) | 0u)))) ^ (62804u & 0u)) ^ 0u), (((true ? ((true ? ((((~ (~ ((((uint(uvec3(uint(uvec2(uint(uint(gl_WorkGroupSize.x)), 0u)), 1u, 1u))) | ((max(uint(uvec3(uint(uvec2(uint((((clamp(uint(gl_WorkGroupSize.x), uint(gl_WorkGroupSize.x), uint(gl_WorkGroupSize.x)))) ^ 0u)), 0u)), 1u, 1u)), uint(uvec3(uint(uvec2(uint(uint(gl_WorkGroupSize.x)), 0u)), 1u, 1u)))))))))))) | (((~ (~ ((((uint(uvec3(uint(uvec2(uint(uint(gl_WorkGroupSize.x)), 0u)), 1u, 1u))) | ((max(uint(uvec3(uint(uvec2(uint((((clamp(uint(gl_WorkGroupSize.x), uint(gl_WorkGroupSize.x), uint(gl_WorkGroupSize.x)))) ^ 0u)), 0u)), 1u, 1u)), uint(uvec3(uint(uvec2(uint(uint(gl_WorkGroupSize.x)), 0u)), 1u, 1u))))))))))))) : (subgroup_size))) : (subgroup_id)))))))))) / 1u))) >> 0u))) : ((subgroup_local_id << num_workgroup)))))) / 1u) + 0u);
 if((false))
  barrier();
 if(((! ((bool(bvec4((true && (! ((bool((bvec3(bvec3(bvec3(false, true, true))))))))), false, true, false)))))))
  {
   if((false))
    barrier();
   if((((bool(bvec4((false), false, (true && (false)), ((injectionSwitch.x < injectionSwitch.y))))) && ((injectionSwitch.x < ((injectionSwitch) - tan(vec2(0.0, 0.0))).y)))))
    barrier();
   if(((bool(bvec3((bool(bvec2(false, true))), ((injectionSwitch.x > injectionSwitch.y)), false)))))
    barrier();
   if(((((float(((max((mat4(1.0) * (vec4(((mat2x3(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), abs(0.0), 1.0)) * mat2(1.0))))), vec4(((mat2x3(vec4((clamp(injectionSwitch.x, (max((mix(float((- 9.7)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (clamp((max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))), 1.0, 0.0, 1.0), abs(0.0), 1.0)) * mat2(1.0)))))))) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = (((((1u << (uint(6u))) >> (uint(6u))) * (min((uint(uvec3((workgroup_base), 1u, 1u))), (workgroup_base))))) / 1u) + subgroup_id * subgroup_size + ((clamp((subgroup_local_id) << 0u, (subgroup_local_id) << 0u, (subgroup_local_id) << 0u)));
 if(((((float(vec3(injectionSwitch.x, sqrt(0.0), (float((((true ? mat2(1.0) * (mat3x2(1.0, ((clamp(((dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))) / 1.0), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0)) : (mat3x2(6.6, - 6250.9919, 2.2, - 6.8, 6.6, 7565.9165)))))))))) > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((false || (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x < injectionSwitch.y)))) && (true && (((! (! (bool((bvec3((bvec3(bvec3(bvec3(bvec3(((false) || false), true, ((bool(bvec3(((! (! (bool(bool((false) && (false || ((! (! (true))))))))))), true, true))))))))))))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((bool((bvec3(bvec3(bvec3((false), true, false)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = (int(ivec3(1, 0, 0)));
 if((((false) && true)))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if(((bool(((bool((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))))) && true)))))
      barrier();
     barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
  }
 if((((bool(bool((((bool(bvec4(((bool(bvec2(false || (bool(bool(false))), false)))), (false || ((! (! (false))))), (! ((true && (! ((((((! ((! (! (! ((! (! (bool(bvec4(bool(bool(true)), false, ((injectionSwitch.x > injectionSwitch.y)), false))))))))))))))) || false))))), true)))) && true)))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (((! ((! (! (((bool(bvec2((((bool(bvec3((false), true, false)))) || false), false))) || (true && (false))))))))) || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(2), (((0 | (4))) | (4)), 64, (int(int((int(ivec2(4, 0)))))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (min(4, 4)));
  }
 if((false))
  {
   if((((injectionSwitch.x > (max((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (mix(float(injectionSwitch.y), float((909.819)), bool(false)))))))))
    barrier();
   barrier();
  }
 if((! (! ((false)))))
  barrier();
 if((((! (! ((bool((bvec3(bvec3((bvec3(bvec4(bvec3((injectionSwitch.x > ((false ? (vec2(5.2, - 13.27)) : injectionSwitch)).y), ((((((injectionSwitch.x < injectionSwitch.y) || false)) || false))), true), true))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((! (! (((bool(bool((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))) || false)))))))))))
      barrier();
     if(((((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y))))) || ((false))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
}
