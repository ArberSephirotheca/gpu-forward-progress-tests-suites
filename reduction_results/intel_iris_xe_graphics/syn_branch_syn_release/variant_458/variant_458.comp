#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; (((clamp((int(ivec2(_injected_loop_counter, 0))), (int(ivec2(_injected_loop_counter, 0))), (int(ivec2(_injected_loop_counter, 0)))))) ^ 0) < 1; ((~ (~ (((~ (~ (_injected_loop_counter ++))) - 0))))))
  {
   if(((injectionSwitch.x > (float(mat4x2((clamp(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)), 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 0.0, exp(0.0)))))))
    {
    }
   else
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((! (! ((false)))))
        barrier();
      }
     else
      {
      }
     do
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     while(((! (! ((injectionSwitch.x > injectionSwitch.y))))));
     do
      {
       if(true)
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   do
                    {
                     if((true && ((false))))
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(false);
                  }
                }
               barrier();
               if((((! (! ((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))) && true))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = (0 & - 84247); _injected_loop_counter != ((0 >> (int(0))) ^ int((injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             do
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             while(false);
            }
           if(((! (! (((false) || false))))))
            {
             if(((bool(bvec3(false, false, false)))))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(true)
            {
             if((false))
              barrier();
             return;
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | (max(0, 0))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if(true)
              {
               do
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     if((((false) || false)))
                      barrier();
                     barrier();
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if(((! (! (false)))))
                          barrier();
                        }
                       else
                        {
                        }
                       barrier();
                      }
                    }
                  }
                }
               while((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true))));
              }
             else
              {
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
          }
        }
       else
        {
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     if((false))
      {
       if(((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) && ((injectionSwitch.x < injectionSwitch.y)))))
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
       if(((! (! (false)))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   while(false);
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((bool(bvec3(false, true, true))))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); ((_injected_loop_counter --) << 0))
          {
           barrier();
          }
        }
       barrier();
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((true && (bool(bvec3((! (! ((((((false) && true))) || false)))), ((true) || false), ((injectionSwitch.x > injectionSwitch.y))))))))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while((bool((bvec2(bvec2(bvec2(false, (! (! (false))))))))));
            }
           if(((((false ? (- 604.950) : injectionSwitch.x)) > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
         if((false))
          barrier();
        }
       if((false || ((false))))
        {
         if((false))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if(false)
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(((((float(mat4(injectionSwitch.x, (min(1.0, 1.0)), 0.0, sqrt(1.0), 1.0, 1.0, tan(0.0), 0.0, determinant(mat2(0.0, 0.0, ((1.0) - 0.0), 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, ((0.0) - length(0.0)))), 1.0, 1.0, 1.0, 1.0))) > injectionSwitch.y))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = ((1 << ((max(int(6), int(6))))) >> (int(6))); (clamp(_injected_loop_counter, (clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) > (int(ivec3(((0) << 0), int((injectionSwitch.y)), 0))); _injected_loop_counter --)
          {
           if((((((injectionSwitch.x > injectionSwitch.y))) || ((false) && true))))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
          barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if(((true && ((bool(bool(false)))))))
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     while(false);
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while((! (! (false))));
     barrier();
    }
   barrier();
   do
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(((false || ((injectionSwitch.x > injectionSwitch.y)))));
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   if((! (! ((true && (((((mix(float(injectionSwitch.x), float(((float((min(vec4(- 3.2, 1.0, 0.0, abs(1.0)), vec4(- 3.2, 1.0, 0.0, abs(1.0)))))))), bool(((injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)))))))))
    {
     do
      {
       barrier();
      }
     while((bool(bvec3(false, false, true))));
    }
   if((false || ((! (! ((false)))))))
    barrier();
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = ((0 ^ (- 89609 & 0)) ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (- 3211 & 0); _injected_loop_counter --)
            {
             if((! ((false || (! ((false)))))))
              barrier();
            }
          }
         else
          {
           barrier();
          }
        }
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 if(((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))))))))
  barrier();
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(((false || (((false) && true)))))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if(((((bool((bvec3(bvec3(bvec3(false, true, true)))))))) || false))
      {
       if(true)
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if((false))
  barrier();
 uint workgroup_base = ((workgroup_size * ((((workgroup_id) | 0u)) | (((uint(uvec4(uint(uvec4(workgroup_id, 0u, uint(((true ? (injectionSwitch.y) : (log2(- 90.62))))), 1u)), 1u, 1u, 0u))))))) * 1u);
 if(true)
  {
   if((false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(false)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if(((((injectionSwitch.x < ((true ? injectionSwitch : (vec2(67.54, 97.19)))).y)) && ((bool(bvec3((! (! (false))), false, true)))))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
      }
    }
   while(false);
  }
 else
  {
   if((false))
    barrier();
  }
 do
  {
   if((false || ((bool(bvec3((false), false, false))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((false || (((max(injectionSwitch.x, ((false ? (vec3(4.1, - 3691.4544, - 1203.2814)[1]) : (mix(float(injectionSwitch.x), float((6.7)), bool(false))))))) < injectionSwitch.y)))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while((! (! (false))));
      }
     else
      {
      }
     barrier();
    }
  }
 while((false || (false)));
 if((false))
  barrier();
 if(((((! (! (injectionSwitch.x > ((false ? (vec2(- 935.838, - 429.336)) : injectionSwitch)).y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    barrier();
  }
 uint virtual_gid = workgroup_base + ((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) + subgroup_local_id;
 do
  {
   for(int _injected_loop_counter = (clamp(1, 1, 1)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
  }
 while(false);
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(((bool(bool((bool(bool(! (! ((false)))))))))))
  barrier();
 if(((false || (false))))
  barrier();
 buf[virtual_gid] = 1;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   int i = ((~ (~ (~ (((~ (0)) - 0))))));
   if(((true && ((bool((! (! (bool(((false) || false)))))))))))
    {
     do
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((bool(bool((! (! (true)))))))
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     while(false);
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if(true)
    {
     if(false)
      {
      }
     else
      {
       if(false)
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > (((min(injectionSwitch, ((injectionSwitch) * vec2(1.0, 1.0))))) / vec2(1.0, 1.0)).y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = (0 ^ ((1 << (0 ^ ((int(5))))) >> (int(5)))); (! (! ((true && ((bool(bvec4((! (! (bool(((bool((_injected_loop_counter > ((((true ? (~ (~ (0))) : (bitCount(i))))) | ((((false ? (- 59581) : (~ (((min((~ ((((((0)) | 0)) | 0))) | (~ ((((0)) | (~ ((min(~ (0), ~ (0)))))))), (int(ivec2((clamp((~ ((((0)) | 0))) | (~ ((((0)) | 0))), (~ ((((0)) | 0))) | (((~ (min(((((0)) | 0)), ((((0)) | 0))))) - 0)), (0 ^ (((false ? (((_injected_loop_counter) ^ 0)) : (~ ((((0)) | ((~ ((int(int(~ ((0))))))) / 1)))))))) | (~ (max((max(((((0)) | 0)), ((((0)) | 0)))), ((((0)) | 0))))))), 0))))))))) + 0))))))) && true))))), false, false, ((injectionSwitch.x < injectionSwitch.y)))))))))); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(((2) - ((false ? (floatBitsToInt(ceil(7011.6829))) : 0)))), 4, 64, 4);
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((((1) << 0)) / 1); _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while((! (! (false))));
        }
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if(true)
      {
       do
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((true && (false)))
              {
              }
             else
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((((false)) || false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
            }
          }
        }
       while((! (((! (false)) && true))));
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(false)
          {
           if((false))
            {
             if((((((float((transpose(transpose(mat4x2(injectionSwitch.x, (min(1.0, (((float(mat2x4(1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0))) / 1.0)))), sqrt(1.0), 0.0, 0.0, (clamp(1.0, 1.0, 1.0)), 0.0, 0.0)))))) - 0.0)) < injectionSwitch.y)))
              {
               if((false))
                {
                 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             do
              {
               do
                {
                 barrier();
                }
               while((! (! ((true && (false))))));
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
           if(((((injectionSwitch.x > injectionSwitch.y)) || ((! (! ((! (! (! (! ((((false) || false))))))))))))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           do
            {
             atomicStore(buf[next_virtual_gid], uint((~ (~ (((((0 | (((((((clamp((clamp(((false ? (3250) : 2)), ((false ? ((~ 1458)) : (int(((((injectionSwitch.x < injectionSwitch.y)) ? ivec4(2, 1, 1, 1) : ((+ ivec4(45661, 64865, - 15344, 70145))))))))), 2)), 2, 2)) - 0)) | ((min(clamp((clamp(((false ? (3250) : 2)), ((false ? ((~ 1458)) : (int(((((injectionSwitch.x < injectionSwitch.y)) ? ivec4(2, 1, 1, 1) : ((+ ivec4(45661, 64865, - 15344, 70145))))))))), 2)), 2, 2), clamp((clamp(((false ? (3250) : 2)), (((0 << ((clamp(int(5), int(5), int(5))))) | ((false ? ((~ 1458)) : (int(((((injectionSwitch.x < injectionSwitch.y)) ? ((ivec4(1, 1, 1, 1) ^ ((ivec4(1, 1, 1, 1) << (ivec4(6))) >> (ivec4(6)))) + (ivec4(2, 1, 1, 1))) : ((+ ivec4(45661, 64865, - 15344, 70145))))))))))), 2)), 2, 2))))))) | 0))) << 0)))))), 4, 64, 4);
            }
           while(false);
           if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
      }
     while(false);
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(((((false || (false))) && true)))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         for(int _injected_loop_counter = ((((1) | 0)) + 0); _injected_loop_counter > (min((min(((0) * 1), 0)), 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(2))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if((! (((bool(bvec4((! (false)), true, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((((((injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(((false) && true))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(((max(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((true && (((((((bool(bvec2((injectionSwitch.x > injectionSwitch.y) && true, false))))))) && true))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(false);
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if(true)
          {
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           while(false);
          }
         else
          {
          }
         barrier();
        }
      }
     while(false);
    }
  }
 if(false)
  {
  }
 else
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       if(((! (! (false)))))
        barrier();
      }
     else
      {
      }
    }
  }
}
