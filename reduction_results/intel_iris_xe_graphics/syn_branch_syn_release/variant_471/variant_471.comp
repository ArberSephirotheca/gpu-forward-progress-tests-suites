#version 460

struct _GLF_struct_18 {
 ivec2 _f0;
 uint workgroup_base;
 mat2x4 _f1;
} ;

struct _GLF_struct_19 {
 _GLF_struct_18 _f0;
 vec2 _f1;
 mat2x4 _f2;
 mat2x4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
} ;

struct _GLF_struct_15 {
 ivec2 _f0;
 mat3 _f1;
 int _f2;
} ;

struct _GLF_struct_14 {
 uvec2 _f0;
 vec2 _f1;
 ivec4 _f2;
 mat2x4 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 bool _f3;
 uint _f4;
 float _f5;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 mat2 _f1;
 bool _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_17 {
 _GLF_struct_12 _f0;
 vec2 _f1;
 int _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_15 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 mat3x4 _f1;
 mat3x4 _f2;
 uint _f3;
 bool _f4;
 mat4 _f5;
} ;

struct _GLF_struct_9 {
 mat2x3 _f0;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 ivec4 _f1;
 uvec4 _f2;
 int _f3;
 bvec2 _f4;
 bvec3 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 mat4x3 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 ivec4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_17 _f2;
 _GLF_struct_19 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 ivec4 _f1;
 uvec3 _f2;
 uvec3 _f3;
 int _f4;
 uint _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 _GLF_struct_3 _f1;
 float _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 mat4 _f1;
 mat2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 bool _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat4x2 _f2;
 vec2 _f3;
 uint subgroup_size;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 _GLF_struct_2 _f1;
 uvec2 _f2;
 _GLF_struct_5 _f3;
 int _f4;
 bool _f5;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false)))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if(true)
  {
   if((((false) && true)))
    {
     if(true)
      {
       if((false))
        {
         if(((bool(bvec3((bool(bvec4(false, true, false, true))), false, true)))))
          barrier();
         barrier();
        }
       barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(((! (! (false)))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 do
  {
   if((false))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
      {
       if(false)
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if(((bool(bool(false)))))
  barrier();
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     while(false);
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       barrier();
      }
     do
      {
       if(((! ((true && (! (false)))))))
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 & (46664)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          {
           if((false))
            barrier();
           if((! (! ((true && (false))))))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, false)))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(4)) >> 0))) >> (int(4))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = (81778 & 0); _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       if(((! (! (false)))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if(((! (! (false)))))
      barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(ivec4(1), _GLF_struct_2(_GLF_struct_0(mat4x2(1.0), true, ivec2(1)), _GLF_struct_1(bvec2(true), mat4(1.0), mat2(1.0), uvec4(1u)), mat4x2(1.0), vec2(1.0), gl_SubgroupSize), uvec2(1u), _GLF_struct_5(ivec2(1), _GLF_struct_3(ivec3(1)), 1.0, _GLF_struct_4(uvec2(1u), ivec4(1), uvec3(1u), uvec3(1u), 1, 1u, mat3x4(1.0))), 1, true);
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int(5))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(true)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((true && (bool(bool(((false) || false))))))))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
     if((false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if(true)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = ((0 >> (int(2))) << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
               if((false))
                {
                 if(((false || (false))))
                  barrier();
                 barrier();
                }
              }
            }
           while(((false) || false));
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         while(false);
         if(((! (! (false)))))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(((false) || false))
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (((int(3)) | (int(3))))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       if((false))
        {
         do
          {
           for(int _injected_loop_counter = (int(ivec4(0, 1, 0, 1))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         while(false);
        }
       if(((((bool(bvec3(false, true, false))) || false))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
       if((false))
        barrier();
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if((((false) && true)))
                barrier();
              }
             barrier();
            }
          }
         while(false);
         if(((bool(bvec2(false, true)))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if((false))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(true)
        {
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
          }
        }
       else
        {
        }
       if(true)
        {
         barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(8))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if(true)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           do
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (((0 & - 31207) | 0) << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               if((((false || (bool(bvec4(false, false, false, false)))))))
                barrier();
               barrier();
               if(((true && ((bool(bvec2(false, false)))))))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
               while(false);
               if((false))
                barrier();
               if((false))
                {
                 if(true)
                  {
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
              }
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
         do
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
          }
         while(false);
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((bool(bool(((false) || false))))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if(false)
              {
              }
             else
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
   while(false);
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(true)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(true)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  barrier();
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(mat2x4(1.0), _GLF_struct_11(_GLF_struct_7(bvec3(true), vec3(1.0)), mat4x3(1.0), _GLF_struct_8(uvec3(1u), ivec4(1), uvec4(1u), 1, bvec2(true), bvec3(true), ivec4(1)), _GLF_struct_9(mat2x3(1.0)), _GLF_struct_10(mat4(1.0), mat3x4(1.0), mat3x4(1.0), 1u, true, mat4(1.0)), ivec4(1), mat3x4(1.0)), _GLF_struct_17(_GLF_struct_12(mat2(1.0), mat2(1.0), true, ivec2(1)), vec2(1.0), 1, _GLF_struct_13(bvec3(true), mat4x2(1.0), mat3x2(1.0), true, 1u, 1.0), _GLF_struct_14(uvec2(1u), vec2(1.0), ivec4(1), mat2x4(1.0), mat3x4(1.0)), _GLF_struct_15(ivec2(1), mat3(1.0), 1), _GLF_struct_16(ivec3(1))), _GLF_struct_19(_GLF_struct_18(ivec2(1), workgroup_size * workgroup_id, mat2x4(1.0)), vec2(1.0), mat2x4(1.0), mat2x4(1.0), mat3x2(1.0)), ivec3(1));
 if((false))
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   barrier();
  }
 if((false))
  barrier();
 uint virtual_gid = _GLF_struct_replacement_20._f3._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6._f1.subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 | int((injectionSwitch.y))); _injected_loop_counter > (0 << (int(4))); _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((true && (true)))
    {
     if((false))
      barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_struct_replacement_20._f3._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6._f1.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_6._f1.subgroup_size);
 if((false))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       if((((false) || false)))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if(((bool(bvec4(((false) && true), false, false, true)))))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       if(false)
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(false)
          {
           if((false))
            barrier();
           if((false))
            {
             if(((bool(bvec3(false, false, true)))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
           do
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if((! (! (false))))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   barrier();
                  }
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(false)
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               else
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if((false))
                      {
                       if(true)
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                       barrier();
                      }
                    }
                   else
                    {
                     if((false))
                      {
                       if(((false) && ((injectionSwitch.x < injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                    }
                  }
                }
              }
             barrier();
            }
           if((false))
            barrier();
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         else
          {
           if((false))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
               if(((true && (false))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
            }
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
             barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != (- 16133 & 0); _injected_loop_counter --)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) >> (int(8))); _injected_loop_counter --)
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
               if(((! (! (false)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(true)
                    {
                     if((false))
                      {
                       if(true)
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                         if((false))
                          {
                           if(true)
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               if((false))
                barrier();
               if((false))
                barrier();
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   while(false);
                   if(true)
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != ((1 << ((clamp(((int(5)) ^ 0), int(5), int(5))))) >> ((0 + (int(5))))); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(false);
               if((false))
                {
                 if(true)
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
               for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(3))); _injected_loop_counter != (min(((1 << (int(0))) >> ((max(int(0), int(0))))), ((1 << (int(0))) >> ((max(int(0), int(0))))))); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
              }
             if(false)
              {
              }
             else
              {
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
            }
           else
            {
            }
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = (clamp(1, (1 * (1)), 1)); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 << (int(3))) >> ((int(ivec2(int(3), 0))))) << ((max(int(7), int(7))))) >> (int(7))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          barrier();
         if((((false) || false)))
          barrier();
         if((true && (true)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         do
          {
           if(true)
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           else
            {
             if((false))
              barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         do
          {
           if((false))
            barrier();
          }
         while(false);
         barrier();
        }
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = (int((injectionSwitch.y)) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
          }
        }
      }
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             barrier();
            }
           if((((true && (true))) && true))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(true)
            {
             for(int _injected_loop_counter = (0 + (0)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               do
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                 for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              {
               for(int _injected_loop_counter = (83227 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    {
                     do
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if(true)
                          {
                           if(((false || (false))))
                            barrier();
                           barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((false))
                      barrier();
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if(true)
                      {
                       barrier();
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       for(int _injected_loop_counter = (0 | (0 & - 60715)); _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    barrier();
                  }
                }
              }
             while(false);
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (1 ^ (1 & 1)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((! ((bool(bvec3(! (false), true, false)))))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & 74681); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         if(true)
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   do
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                  }
                 barrier();
                }
              }
             if(false)
              {
              }
             else
              {
               if(((! (((! (false)) || false)))))
                barrier();
              }
             barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false || (false)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(false);
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   barrier();
                  }
                 barrier();
                }
              }
             while(false);
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
          }
        }
      }
     if(true)
      {
       if((false))
        {
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(false);
                 if((true && (false)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 if((false))
                  barrier();
                 if((false || (false)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (1 ^ ((1 << (int(6))) >> (int(6)))); _injected_loop_counter < ((0 | 0) | 1); _injected_loop_counter ++)
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 if((true && (false)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if((false))
              barrier();
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(true)
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             if(true)
                              {
                               if(true)
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                               if(true)
                                {
                                 if((false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((! (! (false)))))
                            barrier();
                           barrier();
                          }
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(((! (! ((true && (false)))))))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((false) && true)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (52225 & 0); _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    barrier();
   if(true)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((true) && true))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> ((min(int(3), int(3))))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             if((((((false) || false)) && true)))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if(true)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
              }
            }
           for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(false);
            }
          }
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             do
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     do
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       barrier();
                       if((false))
                        {
                         do
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         while(false);
                        }
                       if(((bool(bvec2(false, true)))))
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((false))
                      {
                       do
                        {
                         barrier();
                        }
                       while((((true && (false))) && true));
                      }
                    }
                  }
                }
               while(false);
              }
             while(false);
            }
          }
         else
          {
           barrier();
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
         do
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         while((bool(bvec3(false, true, true))));
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
    }
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = (0 & - 94954); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((bool((false || (bool(false)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
               if(((bool(bvec4((! (! (false))), true, true, true)))))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
           for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             else
              {
               if((((false) && true)))
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               else
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
              }
            }
           while(false);
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << ((~ (~ (int(4)))))); _injected_loop_counter != (1 | int((injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if(((bool(bvec4(((false) || false), true, true, true)))))
      barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (((0 ^ 1) << (int(6))) >> (int(6))); _injected_loop_counter ++)
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false || ((bool(bool(true))))))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           barrier();
           if((false))
            barrier();
          }
         while(false);
        }
       else
        {
        }
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if(((true && (false))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         while(false);
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 while(false);
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
    }
  }
 while(false);
 if((false))
  {
   do
    {
     barrier();
    }
   while((((! (! (false)))) || false));
  }
 do
  {
   if((false))
    barrier();
   if(subgroup_local_id + 1 < _GLF_struct_replacement_6._f1.subgroup_size)
    {
     if((false))
      {
       if(true)
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       barrier();
      }
     int i = 0;
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
            }
          }
         if((false))
          barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           while(false);
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             barrier();
            }
           if((false))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(false);
              }
            }
           while(false);
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if((bool((bvec3(bvec3(bvec3(false, true, true)))))))
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
              }
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             barrier();
            }
           if((false))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
           barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = ((false ? (i) : (~ (~ (1))))); _injected_loop_counter != (0 >> (((int(0)) ^ 0))); _injected_loop_counter --)
            {
             if((false))
              {
               if(true)
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   barrier();
                  }
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((0 << ((~ (~ (int(3)))))) >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(((true && (false))))
            barrier();
          }
         while(false);
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if((false))
            barrier();
          }
         while(false);
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if(((! (! (false)))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                barrier();
               for(int _injected_loop_counter = ((1 << (int(4))) >> (((int(4)) << 0))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
              }
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
         barrier();
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             barrier();
            }
          }
         else
          {
          }
        }
       if((false))
        {
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              {
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         barrier();
        }
       if((false))
        barrier();
       if((bool(bvec2(false, true))))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 if(((false || (false))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
              }
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           if(((! (! (false)))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 if((((bool(bool(false)))) && true))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = (0 & 28529); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               do
                {
                 if(true)
                  {
                   do
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   while(false);
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if(true)
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         else
                          {
                           if((false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(false);
                            }
                          }
                        }
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                      }
                    }
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(false);
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 & - 58136); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) << (int(6))); _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           if((bool(bvec2(false, true))))
            {
             if(((! (! (false)))))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (int(5))) >> (int(5))); _injected_loop_counter ++)
              {
               barrier();
               if((false))
                barrier();
              }
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if(true)
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         if((false))
          barrier();
        }
      }
     while(false);
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               barrier();
              }
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(((false) || false));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 << (((int(6)) >> 0))); _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
           if(((true && (false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != (((1 << (int(0))) >> (int(0))) ^ 0); _injected_loop_counter ++)
                  {
                   if(false)
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if(true)
                      {
                       if(true)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                              barrier();
                             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               barrier();
                              }
                             if((false))
                              {
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 if(true)
                                  {
                                   if((false))
                                    {
                                     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                   if(((! ((! (! (! (false))))))))
                                    {
                                     if((false))
                                      barrier();
                                     barrier();
                                    }
                                   if((false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & 32216); _injected_loop_counter --)
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     if((false))
                                      {
                                       for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                   while(false);
                                  }
                                }
                               for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                               if((((false) || false)))
                                barrier();
                               if((false))
                                barrier();
                              }
                             if((false))
                              barrier();
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                               if((false))
                                {
                                 do
                                  {
                                   do
                                    {
                                     if((false))
                                      {
                                       do
                                        {
                                         barrier();
                                        }
                                       while(((injectionSwitch.x > injectionSwitch.y)));
                                      }
                                    }
                                   while(((injectionSwitch.x > injectionSwitch.y)));
                                  }
                                 while(false);
                                 barrier();
                                }
                              }
                             else
                              {
                               if((false))
                                {
                                 if((false))
                                  barrier();
                                 do
                                  {
                                   barrier();
                                  }
                                 while(false);
                                }
                               if((false))
                                barrier();
                               barrier();
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if((false))
                                barrier();
                              }
                             if((false))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                         for(int _injected_loop_counter = ((1 << (((((false ? (i) : int(7)))) ^ (0 << (int(7)))))) >> (int(7))); _injected_loop_counter != (0 >> (int(5))); _injected_loop_counter --)
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              {
                               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 if((false))
                                  {
                                   if(false)
                                    {
                                    }
                                   else
                                    {
                                     if(false)
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                }
                               for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   if(false)
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & 68982); _injected_loop_counter --)
                                      {
                                       for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                                        {
                                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                          {
                                           do
                                            {
                                             do
                                              {
                                               if((((injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                             while(false);
                                             barrier();
                                             do
                                              {
                                               if((false))
                                                barrier();
                                              }
                                             while(false);
                                            }
                                           while(false);
                                          }
                                        }
                                      }
                                     if((false))
                                      barrier();
                                    }
                                  }
                                 while((bool(bool(((injectionSwitch.x > injectionSwitch.y))))));
                                }
                              }
                             do
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(false);
                             if((false))
                              barrier();
                             if(((injectionSwitch.x < injectionSwitch.y)))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                              }
                             else
                              {
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         if(true)
                          {
                           if(true)
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if((false))
                                  barrier();
                                 barrier();
                                }
                              }
                             if((false))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 do
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if((false))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                 while(((injectionSwitch.x > injectionSwitch.y)));
                                 if((false))
                                  barrier();
                                 barrier();
                                }
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if((false))
                                    {
                                     for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                   barrier();
                                  }
                                }
                               else
                                {
                                }
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(((injectionSwitch.x < injectionSwitch.y)))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               if((false))
                                {
                                 if(((true && (false))))
                                  barrier();
                                 do
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if((false))
                                    {
                                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                   barrier();
                                  }
                                 while(false);
                                }
                               if((false))
                                {
                                 if(true)
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                 else
                                  {
                                  }
                                 barrier();
                                }
                               if(true)
                                {
                                 if((false))
                                  {
                                   if((false))
                                    {
                                     do
                                      {
                                       if((((injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     while(false);
                                     if(true)
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if((false))
                                    {
                                     if((! (! (false))))
                                      {
                                      }
                                     else
                                      {
                                       if((((injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     if(((injectionSwitch.x > injectionSwitch.y)))
                                      {
                                      }
                                     else
                                      {
                                       if(((bool(bvec3(false, true, true)))))
                                        {
                                         if(((injectionSwitch.x < injectionSwitch.y)))
                                          {
                                           do
                                            {
                                             do
                                              {
                                               barrier();
                                              }
                                             while(false);
                                            }
                                           while(false);
                                          }
                                         else
                                          {
                                          }
                                         if(((! (! (false)))))
                                          barrier();
                                        }
                                      }
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if((false))
                                      barrier();
                                     barrier();
                                    }
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               else
                                {
                                }
                               if((false))
                                {
                                 if(((true) && true))
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 else
                                  {
                                  }
                                 do
                                  {
                                   barrier();
                                  }
                                 while(((injectionSwitch.x > injectionSwitch.y)));
                                }
                               do
                                {
                                 if(true)
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                                      {
                                       for(int _injected_loop_counter = 1; _injected_loop_counter > ((1 ^ 1) >> (int(2))); _injected_loop_counter --)
                                        {
                                         if(((injectionSwitch.x < injectionSwitch.y)))
                                          {
                                           if((false))
                                            barrier();
                                          }
                                         else
                                          {
                                          }
                                        }
                                       if((false))
                                        barrier();
                                       if(false)
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                   while(false);
                                  }
                                 else
                                  {
                                  }
                                }
                               while(false);
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if((false))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(false);
                                }
                               if((false))
                                barrier();
                              }
                            }
                           else
                            {
                             if((false))
                              barrier();
                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               do
                                {
                                 if((false))
                                  barrier();
                                }
                               while(false);
                              }
                             if((false))
                              {
                               if((false))
                                barrier();
                               for(int _injected_loop_counter = ((1 << ((~ (((false ? (i) : ~ (int(3)))))))) >> (int(3))); _injected_loop_counter != (- 41561 & 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             if(false)
                              {
                              }
                             else
                              {
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if((false))
                                  barrier();
                                 if((false))
                                  barrier();
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               if(false)
                                {
                                }
                               else
                                {
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                    {
                                     if(true)
                                      {
                                       if(true)
                                        {
                                         if((false))
                                          barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                     else
                                      {
                                      }
                                     if(true)
                                      {
                                       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                                        {
                                         if((((injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                         do
                                          {
                                           if((false))
                                            barrier();
                                           if((((injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           if((false))
                                            barrier();
                                          }
                                         while(((injectionSwitch.x > injectionSwitch.y)));
                                         if((false))
                                          barrier();
                                         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                          {
                                           do
                                            {
                                             do
                                              {
                                               if((((injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                 if(false)
                                                  {
                                                  }
                                                 else
                                                  {
                                                   barrier();
                                                  }
                                                }
                                              }
                                             while(false);
                                             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                              {
                                               if((false))
                                                {
                                                 if((false))
                                                  barrier();
                                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   barrier();
                                                  }
                                                }
                                              }
                                             if((((injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                             do
                                              {
                                               do
                                                {
                                                 barrier();
                                                }
                                               while(((injectionSwitch.x > injectionSwitch.y)));
                                               if((false))
                                                barrier();
                                              }
                                             while(false);
                                             if(((injectionSwitch.x < injectionSwitch.y)))
                                              {
                                               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                                {
                                                 if((false))
                                                  barrier();
                                                }
                                               if((((injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                             else
                                              {
                                              }
                                            }
                                           while(false);
                                          }
                                         if((((injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           if((false))
                                            {
                                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                              {
                                               if(false)
                                                {
                                                }
                                               else
                                                {
                                                 barrier();
                                                }
                                              }
                                             if((false))
                                              barrier();
                                            }
                                           barrier();
                                           if((false))
                                            barrier();
                                           if((false))
                                            {
                                             if((false))
                                              {
                                               do
                                                {
                                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                }
                                               while(false);
                                               barrier();
                                              }
                                             do
                                              {
                                               if((((false) && true)))
                                                barrier();
                                              }
                                             while(false);
                                             barrier();
                                             if((false))
                                              {
                                               if(false)
                                                {
                                                }
                                               else
                                                {
                                                 barrier();
                                                }
                                              }
                                            }
                                          }
                                        }
                                       if((false))
                                        barrier();
                                       if((((injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if((false))
                                          barrier();
                                         if(false)
                                          {
                                          }
                                         else
                                          {
                                           if((false))
                                            barrier();
                                           if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                                            barrier();
                                           if((false))
                                            {
                                             do
                                              {
                                               barrier();
                                              }
                                             while(((injectionSwitch.x > injectionSwitch.y)));
                                            }
                                           barrier();
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               if(((false) || false))
                                {
                                }
                               else
                                {
                                 if((false))
                                  barrier();
                                }
                              }
                             if((false))
                              barrier();
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                              }
                             else
                              {
                               if((false))
                                {
                                 if((false))
                                  barrier();
                                 barrier();
                                }
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((false))
                                barrier();
                               if((false))
                                barrier();
                               barrier();
                              }
                             if((false))
                              barrier();
                            }
                          }
                         else
                          {
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           if((false))
                            {
                             if((((false) && true)))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(false);
                                }
                               if((false))
                                barrier();
                               if((false))
                                barrier();
                              }
                             barrier();
                             if((false))
                              {
                               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                {
                                 barrier();
                                 if((false))
                                  barrier();
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               for(int _injected_loop_counter = (((1 & 1) << (int(4))) >> (int(4))); _injected_loop_counter > 0; _injected_loop_counter --)
                                {
                                 if((false))
                                  barrier();
                                }
                              }
                            }
                           if((false))
                            {
                             if((false))
                              barrier();
                             if(false)
                              {
                              }
                             else
                              {
                               if((false))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(false);
                                }
                              }
                             barrier();
                            }
                           do
                            {
                             barrier();
                            }
                           while(false);
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           if((false))
                            {
                             if((false))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         if((false))
                          {
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           if(true)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                             if((false))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                           if((false))
                            barrier();
                          }
                        }
                       else
                        {
                         if((false))
                          {
                           if((false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(false);
                            }
                           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(false);
          }
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) << (((((int(8)) << 0)) | (int(8))))); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = ((0 << (int(3))) ^ int((injectionSwitch.y))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
         do
          {
           barrier();
          }
         while(false);
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if(((bool(bvec2(false, true)))))
          {
           if((((false) && true)))
            barrier();
           if(true)
            {
             do
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
               barrier();
              }
            }
           else
            {
            }
          }
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       do
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(true)
                {
                 if((false))
                  barrier();
                 barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
            }
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           do
            {
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
          }
        }
      }
     else
      {
      }
     do
      {
       for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     while(false);
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(false);
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = ((0 << (int(1))) | 0); _injected_loop_counter != ((1) | (1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           do
            {
             if((false))
              barrier();
            }
           while(false);
           do
            {
             barrier();
            }
           while(false);
          }
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (max(((1 << (int(3))) >> (int(3))), ((1 << (int(3))) >> (int(3))))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           do
            {
             if((! (! (true))))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
             else
              {
              }
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if(true)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (66093 & 0); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       barrier();
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         do
          {
           if((false))
            barrier();
          }
         while((true && (false)));
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(false);
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if(true)
        {
         if(((bool(bool((! (! (false))))))))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if(((true && (false))))
              barrier();
            }
           while(false);
          }
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(3))); _injected_loop_counter --)
        {
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       do
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
         barrier();
        }
       barrier();
      }
     if((false))
      {
       if(true)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (((0 ^ 0)) / 1); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 while(false);
 if((false))
  barrier();
 if((false))
  barrier();
 if(true)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((bool(bool(false)))))
        barrier();
       if(false)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if(false)
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               barrier();
              }
            }
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (((int(0)) | 0))) >> ((0 | (int(0))))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
           if((false))
            {
             if(((! (! (false)))))
              barrier();
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         if((false))
          barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((false))
          {
           do
            {
             barrier();
            }
           while((true && (false)));
          }
        }
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
             barrier();
            }
          }
         barrier();
        }
       else
        {
         do
          {
           if(true)
            {
             do
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 if(true)
                  {
                   if(((true && (false))))
                    barrier();
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
              }
             while(false);
            }
           else
            {
            }
          }
         while(false);
        }
      }
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((! (! (true))))
        {
         if(true)
          {
           if(((true && (false))))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if(((false) || false))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(0))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((! (! (true))))
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
      }
     while((bool(bvec4((false || (false)), false, true, true))));
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (- 64326 & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             do
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                {
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         do
          {
           if(true)
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
         while((bool(bvec2(false, true))));
        }
      }
     if(true)
      {
       do
        {
         barrier();
        }
       while(false);
      }
     else
      {
      }
     if((false))
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if((((false) && true)))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (! (false)))))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
    }
  }
 else
  {
  }
}
