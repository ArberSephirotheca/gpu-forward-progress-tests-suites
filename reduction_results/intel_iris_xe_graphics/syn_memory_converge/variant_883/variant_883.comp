#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   if((false))
    barrier();
   barrier();
   if((((false)) || false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! ((((true && ((min(injectionSwitch.x, injectionSwitch.x)) > (1.0 * ((max(injectionSwitch.y, injectionSwitch.y)))))))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
     if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     barrier();
     if(((((true && (((injectionSwitch.x > injectionSwitch.y))))) || false)))
      barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((bool(bvec3(bool(((bvec2(bvec3(bvec2(bvec4(bvec2((bool(bvec3(false, true, false))), true), true, true)), false))))), false, true))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, ((injectionSwitch.x < injectionSwitch.y)))))))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if(((! (! ((! (! (false))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((true && ((bool(bvec2(((false) && true), false)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID) - ((max(uvec3((0u | (0u)), 0u, 0u) >> ((((injectionSwitch.x > injectionSwitch.y)) ? (uvec3(46864u, 171193u, 185309u)) : (max((uvec3((clamp(8u, 8u, 8u)))), (uvec3(8u)))))), uvec3(0u, 0u, 0u) >> ((((injectionSwitch.x > injectionSwitch.y)) ? (uvec3(46864u, 171193u, 185309u)) : (max((uvec3((clamp((min(((8u) << 0u), 8u)), 8u, 8u)))), (uvec3(8u)))))))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (((1u * ((clamp((max(workgroup_base + subgroup_id * subgroup_size, (min(workgroup_base + (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) ^ 0u)), workgroup_base + ((((0u ^ (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) | (0u << (uint(6u))))))) ^ (max(0u, (0u ^ ((clamp(0u, 0u, 0u)))))))))))) + subgroup_local_id, (max(workgroup_base + subgroup_id * subgroup_size, (min(workgroup_base + (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) ^ 0u)), workgroup_base + ((((0u ^ (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) | (0u << (uint(6u))))))) ^ (max(0u, (0u ^ ((clamp(0u, 0u, 0u)))))))))))) + subgroup_local_id, (max(workgroup_base + subgroup_id * subgroup_size, (min(workgroup_base + (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) ^ 0u)), workgroup_base + ((((0u ^ (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) | (0u << (uint(6u))))))) ^ (max(0u, (0u ^ ((clamp(0u, 0u, 0u)))))))))))) + subgroup_local_id))))) | ((((max(workgroup_base + subgroup_id * subgroup_size, (min(workgroup_base + (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) ^ 0u)), workgroup_base + ((((0u ^ (((uint(uvec3((~ (~ (subgroup_id * subgroup_size))), 1u, 1u))) | (0u << (uint(6u))))))) ^ (max(0u, (0u ^ ((clamp(0u, 0u, 0u)))))))))))) + subgroup_local_id) / 1u)));
 if(((! (! (false)))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
}
