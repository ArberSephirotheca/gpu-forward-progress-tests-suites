#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((((! (! ((((injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          continue;
         if((false))
          continue;
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
  }
 else
  {
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
  }
 do
  {
   if((((((((! (((! (((((! (! (bool((bvec3(bvec4(bvec3((true), true, true), true)))))))) || false) && (bool(bvec2(false, false)))))) && ((injectionSwitch.x < injectionSwitch.y))))) || false)) || false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(false);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   do
    {
     if((((false) && true)))
      {
       if((false))
        return;
       return;
      }
    }
   while(false);
   if((false))
    {
     if((false))
      return;
     return;
    }
   do
    {
     if(((bool(bvec3((((float(mat3x2(injectionSwitch.x, 1.0, sqrt(1.0), 1.0, 0.0, 0.0))) > injectionSwitch.y)), false, true)))))
      return;
     if(false)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
       if((! (! ((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true)))))))
        {
         if((((injectionSwitch.x > ((false ? (511.103) : injectionSwitch.y))))))
          break;
        }
       else
        {
         return;
        }
      }
     if(((! (! (((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y)))))))
      break;
    }
   while(false);
  }
 if((false))
  return;
 uint num_workgroup = (((clamp((((max(gl_NumWorkGroups.x, ((((0u | 0u) + (((gl_NumWorkGroups) | uvec3((((uint(uvec3(0u, 0u, 0u)))) * 1u), 0u, 0u)).x))) | 0u)))) << 0u), (max(gl_NumWorkGroups.x, ((((0u | 0u) + (gl_NumWorkGroups.x))) | 0u))), (max(gl_NumWorkGroups.x, ((((((((0u | 0u)) >> 0u) + (gl_NumWorkGroups.x))) | 0u)) - 0u)))))) | ((max(gl_NumWorkGroups.x, ((min((((0u | 0u) + (gl_NumWorkGroups.x))), (((0u | 0u) + (gl_NumWorkGroups.x))))) | 0u)))));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      {
       if(((bool(bvec2((false) || false, false)))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
   if(((((((bool(bvec4(true && ((false)), false, true, true))) && true))) || false)))
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((false)) && ((injectionSwitch.x < injectionSwitch.y))))
          continue;
         if(((((! (! ((false || (false))))))) && true))
          return;
        }
      }
     return;
    }
   do
    {
     if((false))
      {
       if((false))
        {
         if(((false) && true))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         return;
        }
       while((! (! ((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))));
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
   if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) | (max(0, (min(0, 0))))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > (clamp((max(((injectionSwitch.y) + (injectionSwitch.x)), injectionSwitch.y)), (mix(float((2.9)), float(injectionSwitch.y), bool(true))), (float(vec2(injectionSwitch.y, 0.0)))))))))
      {
       if((false))
        break;
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if((((injectionSwitch.x > (clamp(injectionSwitch, (vec2(1.0, 1.0) * (((injectionSwitch) - vec2(0.0, 0.0)))), injectionSwitch)).y))))
            continue;
           break;
          }
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(((((float(vec2(injectionSwitch.x, 1.0))) > injectionSwitch.y))))
  return;
 if(((! ((bool(bvec3((bool(bool(! ((((mix(vec2((clamp((float(mat3((injectionSwitch)[(1 * (((clamp(int((injectionSwitch.y)), int((injectionSwitch.y)), (max(int((injectionSwitch.y)), (max(int((injectionSwitch.y)), int((injectionSwitch.y)))))))) * (0))))], (1.0 * (1.0)), 0.0, 0.0, (float(float(0.0))), 1.0, 1.0, 1.0, 0.0))), (injectionSwitch)[0], (min((mat2(1.0) * ((injectionSwitch))), (injectionSwitch)))[0])), (63.39)), vec2((77.27), (injectionSwitch)[1]), ((bvec2(bvec3(bvec2(bvec4(((bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true)))), false, ((false) && true))), true)))))).x > injectionSwitch.y)))))), false, false)))))))
  return;
 uint workgroup_id = (((uvec3(gl_WorkGroupID[(max(0, 0))], gl_WorkGroupID[1], gl_WorkGroupID[2]))) * uvec3((injectionSwitch.y), (injectionSwitch.y), (((false ? (9425.4293) : (mix(float((15.03)), float((min(injectionSwitch.y, injectionSwitch.y))), bool(true)))))))).x;
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; (~ (~ (_injected_loop_counter --))))
    {
     if((false))
      break;
     if(((bool(bvec3(false, false, false)))))
      continue;
     if((false))
      return;
    }
  }
 uint virtual_gid = ((((workgroup_base + subgroup_id * subgroup_size) ^ 0u)) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if(((injectionSwitch.x < (mix(vec2(((clamp(min((injectionSwitch)[0], ((true ? (injectionSwitch)[0] : (73.05)))), min((injectionSwitch)[0], ((true ? (injectionSwitch)[0] : (73.05)))), min((injectionSwitch)[0], ((true ? (injectionSwitch)[0] : (73.05))))))), ((float(mat3(19.63, 0.0, 0.0, (injectionSwitch.x), abs(sqrt(0.0)), exp(0.0), exp(0.0), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), vec2((- 21.25), (injectionSwitch)[1]), bvec2(false, true))).y)))
      {
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
       if(true)
        {
         if((((false || (false))) && true))
          {
          }
         else
          {
           if((false))
            {
             if((! (! (false))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; ((false ? (- 12584) : _injected_loop_counter)) != 0; _injected_loop_counter --)
                {
                 return;
                 if((false))
                  return;
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = (0 << (((int(1)) | 0))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
            }
           for(int _injected_loop_counter = (0 << (((((int(3))) | ((int(3))))) / 1)); _injected_loop_counter < (((((1 | 1) - 0)) >> ((0 + (75623)) & 0))); ((_injected_loop_counter ++) >> 0))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((((((((bool(bvec3((bool(bvec3((clamp((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, (mix(float((8807.2879)), float(((false ? (distance(2.6, 1.2)) : injectionSwitch.x))), bool(true))))) > injectionSwitch.y, true, false))), false, true))) && true))) && true)))))
              {
               if((false))
                continue;
               break;
              }
             if(((! (((((! ((((bool(bool(injectionSwitch.x > injectionSwitch.y))))))) || false) && true))))))
              {
               if((false))
                break;
               return;
              }
             if((false))
              continue;
            }
           if((false))
            return;
          }
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((((vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, determinant(mat2(1.0, (float(mat2x3((max(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, log(exp(0.0))))), sqrt(0.0), 1.0))))).x > ((mix(float((2.0)), float(float(vec4(injectionSwitch.y, 0.0, tan(0.0), 0.0))), bool(true))))))))
          return;
        }
       else
        {
        }
       if((false))
        return;
       do
        {
         if((false))
          return;
        }
       while(false);
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
    }
   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
  }
 else
  {
  }
 if(((bool((true && (bool(false)))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   for(int _injected_loop_counter = ((1 << (((((int(3)) << 0)) >> 0))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 if((false || (((false) && true))))
  {
  }
 else
  {
   if((false))
    return;
   do
    {
     if((false))
      {
       if((false))
        return;
       continue;
      }
     if(false)
      {
      }
     else
      {
       buf[virtual_gid] = uint(subgroupAllEqual(write_val));
      }
     if(((! ((false || (! (false)))))))
      {
       if((false))
        break;
       break;
      }
    }
   while(false);
  }
 if((false))
  return;
 if((false))
  {
   if((! ((! (! ((! (! (! ((false)))))))))))
    return;
   if((! (! ((false)))))
    return;
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(true)
      {
       if((false))
        return;
       if(true)
        {
         if((((! (! (((((injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4((false || (((injectionSwitch.x > injectionSwitch.y)))), false, false, true))))))))) || false))
          {
          }
         else
          {
           if((false))
            return;
           return;
           if((false))
            {
             for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter != 1))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if((false))
        return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (1307 & 0); _injected_loop_counter --)
    {
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   return;
  }
}
