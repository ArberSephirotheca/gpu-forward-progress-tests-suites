#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
       if((false))
        continue;
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      return;
     return;
     if((false))
      continue;
    }
   while(false);
  }
 do
  {
   if((! (! (true))))
    {
     if(((((true && (false))) || false)))
      {
       do
        {
         if((false))
          break;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             break;
            }
           return;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > (vec2((mix(float(injectionSwitch[0]), float((- 4.8)), bool(false))), injectionSwitch[1])).y))))
        {
         do
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           return;
           if((false))
            break;
          }
         while(false);
        }
      }
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 do
  {
   if(((((injectionSwitch.x > injectionSwitch.y)) || (((((mat2(1.0) * (mat2(((1.0) * ((clamp(float(mat3(1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))) * (((injectionSwitch)) * vec2(1.0, 1.0))))).x > injectionSwitch.y))))))
    return;
   if((false))
    break;
   if(((! (! (false)))))
    break;
  }
 while((! (! ((bool(bool(false)))))));
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        return;
      }
     return;
    }
  }
 do
  {
   if((false))
    return;
   if(((! (! (((false) || false))))))
    break;
   if((false))
    break;
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
    {
     if((! (! (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, (! (! (false))))))))))
        {
         if((false))
          return;
         break;
        }
      }
     else
      {
       if((false))
        {
         if((false))
          continue;
         if((false))
          break;
         if(((! (! ((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
          return;
         do
          {
           if(false)
            {
             if((false))
              continue;
            }
           else
            {
             if((false))
              continue;
             if(((! (bool(bvec4((! (false)), false, true, false))))))
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if((true && ((false))))
                  break;
                 do
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               continue;
               if((false))
                return;
              }
             if((((((injectionSwitch.x > injectionSwitch.y)) || ((false || (! (! (false)))))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if((false))
              {
               if((false))
                break;
               if((((((true ? injectionSwitch.x : (vec3(- 376.173, 4.5, 4.7)[0]))) > injectionSwitch.y))))
                continue;
               if((false))
                {
                 for(int _injected_loop_counter = (0 ^ (1 & 1)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if((false))
                break;
               continue;
              }
             if(((((min((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > (min(injectionSwitch, injectionSwitch)).y))))
              {
               if((false))
                {
                 if((false))
                  break;
                 continue;
                }
               if(((bool((false || (bool(((vec2(mat3x4(injectionSwitch, (injectionSwitch.y), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))).x < injectionSwitch.y))))))))
                {
                 if((false))
                  continue;
                 if((false || ((((false)) || ((injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if((false))
                    break;
                   break;
                   if((false))
                    continue;
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (((min((((((((max((((0)) + 0), (0))) << 0) - 0) ^ 0))) ^ 0), ((min(((((((0) << 0) - 0) ^ 0))) ^ 0, (~ (((false ? (_injected_loop_counter) : ~ (((((((0) << 0) - 0) ^ 0))) ^ 0))))))))))) >> ((int(ivec2(int((clamp(7, 7, (min(7, 7))))), 0))))); ((((_injected_loop_counter --) << (max(0, 0))) << 0)))
                  {
                   if((((clamp((max((0.0 + ((clamp((min((vec2(0.0, (min(0.0, 0.0))) + (injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x)), injectionSwitch.x)), (determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)) * (injectionSwitch.x)), (max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))
                    {
                     if(((((max((float(vec4((float((mix(vec3(((((injectionSwitch.x > injectionSwitch.y)) ? (vec3(66.22, 3.6, 1.6)) : (vec3(((mat2x3((vec3(injectionSwitch.x, (clamp(1.0, 1.0, 1.0)), 0.0)), 1.0, 0.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))[0], (vec3(injectionSwitch.x, 1.0, 0.0))[1], (vec3((clamp((float(((vec3(injectionSwitch.x, 1.0, exp(0.0))) * vec3(1.0, 1.0, 1.0)))), injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))[2]), vec3((- 9792.4016), (- 92.34), (- 392.224)), bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), false))))), 1.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y))))
                      {
                       if((false))
                        break;
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       continue;
                       if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         if(true)
                          {
                           for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                         else
                          {
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     while((bool(bvec3(false, (bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true))), true))));
                    }
                   if((! (! (((! (((! (false)) || false))))))))
                    {
                     if((false))
                      {
                       if((false))
                        continue;
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((false))
                          {
                           if((! (! (true))))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         if(true)
                          {
                           return;
                          }
                         else
                          {
                          }
                         if(true)
                          {
                           if((false))
                            return;
                          }
                         else
                          {
                          }
                         if((false))
                          break;
                        }
                      }
                     if((false))
                      return;
                     break;
                    }
                  }
                }
               else
                {
                }
               if((false))
                return;
               if((false))
                continue;
              }
             if((false))
              {
               if((false))
                {
                 if((false))
                  return;
                 break;
                 if((false))
                  break;
                }
               continue;
              }
             if((((((bool(bvec3(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true, true))))))))
              break;
            }
          }
         while(((bool(bvec3((false) || false, (true && ((bool(bvec3(true, false, true))))), (! (! (! (! ((((injectionSwitch.x < injectionSwitch.y)))))))))))));
         if((bool(bvec3((false || (((injectionSwitch.x < injectionSwitch.y)))), false, false))))
          {
           if((false))
            {
             do
              {
               if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if((false))
                  return;
                }
              }
             while(false);
             break;
            }
           if((false))
            {
             if((false))
              break;
             break;
            }
           do
            {
             if((false))
              continue;
             if((false))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((((((((injectionSwitch.x > injectionSwitch.y))) && (bool(bvec2(true, true)))))) || false))
              return;
            }
           while(false);
           if((false))
            continue;
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
            {
             if((false))
              {
               for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < ((((((1 << (int(4))) >> (int(4))) << (((int(6)) + 0))) >> (int(6))) << (((int(4)) | 0))) >> (int(4))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             return;
            }
           if((false))
            {
             for(int _injected_loop_counter = (0 >> ((((min(int(4), int(4))))) >> int((injectionSwitch.x)))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                return;
               return;
              }
            }
          }
         else
          {
          }
         if(((! (((! (bool(bvec4((((bool((bvec2(bvec3(bvec2((false), (! (! (true)))), true)))))) || false), true, true, ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))
          {
           if((((false || ((injectionSwitch.x > ((injectionSwitch) * vec2(1.0, 1.0)).y))))))
            continue;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
            }
           else
            {
             return;
            }
           if((false))
            break;
           if((false))
            break;
          }
        }
       if(((false || (false))))
        continue;
      }
    }
   if((bool(bvec3((((((false)) && true)) || false), false, true))))
    {
     if((false))
      break;
     continue;
    }
   if((false))
    continue;
  }
 while(false);
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      {
       do
        {
         if((true && (false)))
          {
          }
         else
          {
           if((false))
            return;
           return;
          }
        }
       while(((false) && true));
      }
     if((false))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
       if(true)
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false)))))
            return;
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           for(int _injected_loop_counter = 1; (bool(bool(_injected_loop_counter != int((injectionSwitch.x))))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_size = ((min(((clamp((max(gl_WorkGroupSize.x, (((~ (~ (gl_WorkGroupSize.x)))) - 0u))), gl_WorkGroupSize.x, ((gl_WorkGroupSize) * ((((uvec3(1u, 1u, 1u)) - uvec3(0u, 0u, 0u)) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))).x)) >> 0u), (max(clamp((max(gl_WorkGroupSize.x, ((min(~ (~ (gl_WorkGroupSize.x)), (~ (~ (~ (~ (gl_WorkGroupSize.x)))))))))), gl_WorkGroupSize.x, ((clamp((uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (max((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))))).x), (clamp(clamp((max(gl_WorkGroupSize.x, ((min(~ (~ (gl_WorkGroupSize.x)), (~ (~ (~ (~ (gl_WorkGroupSize.x)))))))))), gl_WorkGroupSize.x, ((clamp((uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (max((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))))).x), clamp((max(gl_WorkGroupSize.x, ((min(~ (~ (gl_WorkGroupSize.x)), (~ (~ (~ (~ (gl_WorkGroupSize.x)))))))))), gl_WorkGroupSize.x, ((clamp((uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (max((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))))).x), clamp((max(gl_WorkGroupSize.x, ((min(~ (~ (gl_WorkGroupSize.x)), (~ (~ (~ (~ (gl_WorkGroupSize.x)))))))))), gl_WorkGroupSize.x, ((clamp((uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (max((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))))).x))))))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > (mix(vec2((vec2(- 57.21, - 3.9).s), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (31.65)), bvec2(true, false))).y))))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     if((false))
      return;
     if((false))
      return;
     return;
    }
  }
 else
  {
  }
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(true)
    {
     if(((injectionSwitch.x < (clamp(injectionSwitch, injectionSwitch, (max(injectionSwitch, injectionSwitch)))).y)))
      {
       if((false))
        return;
       if((((bool(bool((true && ((((((mix(vec2((vec2((max(vec3((vec2(injectionSwitch[0], injectionSwitch[1])), 1.0), vec3((min(((false ? (injectionSwitch) : (vec2(1.0, 1.0) * (injectionSwitch)))), injectionSwitch)), 1.0)))))[0], (vec2((max(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))))[1]), vec2((- 2.2), (1848.6420)), bvec2(false, false)))).x > injectionSwitch.y))))))))) || false))
        {
         if((false))
          return;
         if((true && (false)))
          {
           if((((false) || false)))
            return;
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          return;
         if((false || (false)))
          {
          }
         else
          {
           if((false))
            {
             for(int _injected_loop_counter = ((1 << (int(4))) >> ((clamp(((int(4)) - 0), ((int(4)) | (int(4))), int(4))))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               return;
              }
            }
          }
         do
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         while(false);
         if((false))
          return;
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
       if(((((min(injectionSwitch.x, ((injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
        return;
       if((! (((((! ((! (! (! (! ((bool(bvec2((! (! (((((bool(bvec4((true && ((injectionSwitch.x > injectionSwitch.y))), true, false, false))))))))), false))))))))))) && true)) && true)))
        return;
      }
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))) && true)))
  return;
 if((false))
  return;
 uint virtual_gid = (uint(uvec2((~ (~ (workgroup_base + subgroup_id * ((true ? (min(((subgroup_size) / 1u), subgroup_size)) : (workgroup_base)))))) + subgroup_local_id, 1u)));
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > ((int(ivec3(- 71289 & 0, 0, int((injectionSwitch.x)))))); _injected_loop_counter --)
      {
       atomicStore(write_val, uint((min(virtual_gid, virtual_gid))), (0 | ((clamp(4, (max((((((! (! (false))) ? (~ (~ ((43909)))) : 4) / int((injectionSwitch.y))))), 4)), 4)))), (min(((64) ^ 0), ((false ? (- 57492) : 64)))), 0);
       do
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          return;
         if((false))
          break;
        }
       while(false);
      }
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if(((bool(bvec3((bool(bvec4((bool(bvec3((! (! (false || (((injectionSwitch.x < injectionSwitch.y)))))), true, ((((false ? (vec2(- 2.3, - 8633.2940)) : injectionSwitch)).x < injectionSwitch.y))))), false, true, ((injectionSwitch.x < injectionSwitch.y))))), true, false)))))
      {
       if((false))
        {
         if((false))
          return;
         break;
        }
       if((false))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if((false))
  return;
 if((false || ((true && ((false || ((true && (false)))))))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); ((((_injected_loop_counter --) << 0)) - (0 ^ 0)))
      {
       if((((false) || false)))
        {
         do
          {
           if((false))
            return;
          }
         while(false);
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   while(false);
  }
 if(((false || (false))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
    }
   else
    {
    }
   do
    {
     if((false))
      return;
    }
   while(false);
  }
 if((false))
  return;
 do
  {
   buf[virtual_gid] = ((~ (~ ((((((uint(subgroupAllEqual(write_val))) >> 0u) >> 0u)) / ((uint((min((injectionSwitch.y), (max((injectionSwitch.y), (injectionSwitch.y))))))) | 0u))))));
  }
 while(false);
 for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y)) || (false)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((! ((bool((bvec3(bvec3(bvec3(! (((bool(bool(false))) && true)), false, false)))))))))))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            return;
          }
         if(((! (! ((bool(bvec3(false, true, false))))))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((bool(bool((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if((bool(bvec4(true, true, true, false))))
          {
           if((false))
            return;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((! (! ((! ((true && (! (((injectionSwitch.x > injectionSwitch.y)))))))))))
        {
        }
       else
        {
         return;
        }
       if(((((bool(bvec2(false, true)))) || false)))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((0) | ((0 + (0)))); (true && ((! (! ((true && (_injected_loop_counter < (1 | 1)))))))); _injected_loop_counter ++)
            {
             return;
             if((((! (! (bool(bvec4(false, true, false, ((injectionSwitch.x < injectionSwitch.y))))))))))
              continue;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
  }
 if((false))
  return;
 do
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((((false) && (bool(bool(((injectionSwitch.x < injectionSwitch.y)))))))) && true))
      return;
     if((false))
      return;
    }
   while(false);
   if((false))
    continue;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 for(int _injected_loop_counter = (((0 | (43729)) & 0) | 0); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = ((true ? 1 : ((ivec2(31330, - 40500)[0] * 6380)))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(((((false || (injectionSwitch.x > ((float(((((mat3(float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, (((((clamp(0.0, 0.0, 0.0)))) + 0.0) - 0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, ((determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))) / 1.0))), 0.0, sin((dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))))), (injectionSwitch.y), 1.0, 0.0, 1.0, (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ((1.0) - 0.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))))
        {
         if((false))
          break;
         return;
        }
      }
     while(false);
     for(int _injected_loop_counter = (~ (~ (((false ? (66374) : 1))))); _injected_loop_counter != (0 >> (int(2))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 >> (int(5))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if(true)
    {
     if((false))
      return;
     if(true)
      {
       do
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               do
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((bool(bvec2((! (! ((! (! ((((! (! (((! ((((false || (! (! (bool((! (! (bool(! (false)))))))))))))) || false)))))))))))), ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  {
                   if(false)
                    {
                     if((false))
                      return;
                     if(((false || (false))))
                      break;
                    }
                   else
                    {
                     return;
                    }
                  }
                 if((false))
                  break;
                 do
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(false);
                 if(((! (! ((! (! (false))))))))
                  continue;
                }
               if((false))
                return;
               if(false)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                  }
                 if(((! (! (false)))))
                  return;
                }
               else
                {
                 if((false))
                  continue;
                 return;
                }
              }
             while(false);
            }
          }
         do
          {
           if((((false)) && true))
            return;
          }
         while(false);
        }
       while(false);
      }
     else
      {
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(false);
    }
  }
 if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, ((injectionSwitch.y) * 1.0)))))))
  return;
}
