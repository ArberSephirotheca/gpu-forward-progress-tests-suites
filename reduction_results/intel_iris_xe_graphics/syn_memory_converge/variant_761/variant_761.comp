#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((false)) && true))
  barrier();
 if((((false) && true)))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_size = ((gl_WorkGroupSize) | ((uvec3(0u, 0u, 0u) >> (uvec3(4u))) << (uvec3(7u)))).x;
 if((! (! (((bool(bvec4((! ((! (! (! ((false || ((bool(bool((false || (false || ((((true && (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))), true, true, false))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = (((uvec3(gl_WorkGroupID[0], (~ (uint(uvec3(((clamp(~ (gl_WorkGroupID[1]), ~ (clamp((gl_WorkGroupID[1]), (gl_WorkGroupID[1]), (gl_WorkGroupID[1]))), ~ (gl_WorkGroupID[((1) >> 0)])))), 1u, 1u)))), ((gl_WorkGroupID[2]) + ((0u) >> 0u)))).x) | 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = ((true ? (((clamp(workgroup_base + subgroup_id * subgroup_size + ((false ? (write_val) : subgroup_local_id)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : (workgroup_base)));
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if(((((false || ((false || ((injectionSwitch.x > injectionSwitch.y))))) && (false || ((bool(bvec3(true, false, true)))))))))
  {
  }
 else
  {
   if((((false)) && true))
    barrier();
   do
    {
     if(true)
      {
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((false))
        {
         do
          {
           if((((((! (! (((false || (((((bool((true && (bool(((bool(bool((((((false ? (vec2(262.775, 65.02)) : injectionSwitch))) - (mix(vec2((- 1658.9532), (1.3)), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true)))).x < injectionSwitch.y))))) && true))))))) && true)))) && (((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) < injectionSwitch.y)))))) || false))))
            {
             if((false))
              barrier();
             barrier();
            }
           else
            {
             for(int _injected_loop_counter = ((1) - 0); _injected_loop_counter > 0; ((_injected_loop_counter --) + 0))
              {
               if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  {
                   do
                    {
                     do
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     while(false);
                    }
                   while(((((false ? (713.474) : injectionSwitch.x)) > injectionSwitch.y)));
                  }
                }
               else
                {
                }
              }
            }
          }
         while(false);
         if((false))
          barrier();
         if((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || (((injectionSwitch.x > injectionSwitch.y)))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (((min(((injectionSwitch.x > injectionSwitch.y)) ? (5298) : (((min(1, 1)) << ((clamp(int(1), int(1), int(1))))) >> (((false ? (40610) : (0 + (((((int(1)) * 1)) << 0))))))), ((injectionSwitch.x > injectionSwitch.y)) ? (5298) : (((min(1, 1)) << ((clamp(int(1), int(1), int(1))))) >> (((false ? (40610) : (0 + (((((int(1)) * 1)) << 0))))))))))); ((_injected_loop_counter > (0 & (89027 % 32685))) && true); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
        }
       if((((((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y))))) || (false))) && true)))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     else
      {
      }
    }
   while(((false) || false));
  }
 atomicStore(write_val, uint(virtual_gid), (int((injectionSwitch.x)) | (((4) - (35796 & 0)))), 64, 0);
 for(int _injected_loop_counter = ((0 >> (int(3))) >> (int(7))); _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; (true && (_injected_loop_counter > ((0) - 0))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((! (! (((((((1.0 * (injectionSwitch.x)) > injectionSwitch.y)))) || false)))))
  {
   if((((! (! (bool(bvec3(((false) || false), true, true))))))))
    barrier();
   barrier();
  }
 if(((((! ((bool((bvec3(bvec4(bvec3(! ((true)), false, false), true))))))) || false)) && true))
  {
   if((false || ((bool(bvec2(false, true))))))
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 (~ (((~ ((((1u & 1u) * (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))) >> 0u)));
 for(int _injected_loop_counter = 0; _injected_loop_counter != int(((mix(float(injectionSwitch.y), float((6.9)), bool(false))))); _injected_loop_counter ++)
  {
   if((((false)) && true))
    barrier();
  }
}
