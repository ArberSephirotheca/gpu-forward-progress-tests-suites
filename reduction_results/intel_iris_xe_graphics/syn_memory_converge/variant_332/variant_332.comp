#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if(((((clamp(injectionSwitch, injectionSwitch, (max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((! ((true && (! (bool(bool(((((vec2(((false ? (tanh((clamp(9.0, 9.0, ((min(float(mat2(9.0, cos(0.0), 0.0, 1.0)), float(mat2(9.0, cos(0.0), 0.0, 1.0))))))))) : injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((((true ? injectionSwitch.x : (fract(62.40)))) > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((((min((max(max((0.0 + (injectionSwitch.x)), injectionSwitch.x), max((0.0 + (((false ? (- 9.0) : float(mat4x2((((clamp((((true ? (max(injectionSwitch.x, injectionSwitch.x)) : (5.2)))), (injectionSwitch.x), (injectionSwitch.x)))) / 1.0), log(1.0), cos(0.0), 0.0, 0.0, sqrt(0.0), 0.0, 1.0)))))), injectionSwitch.x))), (clamp(max(((float(float((clamp(((false ? (735.787) : 0.0 + (injectionSwitch.x))), (max(0.0 + (injectionSwitch.x), 0.0 + (injectionSwitch.x))), 0.0 + (injectionSwitch.x))))))), injectionSwitch.x), max(((min(0.0 + (injectionSwitch.x), 0.0 + (injectionSwitch.x)))), injectionSwitch.x), max((0.0 + (mix(float((- 451.218)), float(((false ? (27.10) : (injectionSwitch.x)))), bool(((injectionSwitch.x < injectionSwitch.y)))))), (abs(vec2(0.0, 0.0)) + (((injectionSwitch) / vec2(1.0, 1.0)))).x)))))) > (((((vec2(injectionSwitch[0], injectionSwitch[((false ? (53363) : ((1) ^ 0)))])).y) - 0.0)) - log(1.0))))))
    {
     if(((((bool(bool(false))))) && ((injectionSwitch.x < injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if(((! ((! ((bool(bvec3(! (((! (((injectionSwitch.x > injectionSwitch.y)))) && true)), true, false)))))))))
      barrier();
     if((true && ((((false) || false)))))
      {
       if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((true && (((bool((bvec3(bvec3((bvec3(bvec4(bvec3((false || (false)), true, (((mix(float((max(injectionSwitch.x, injectionSwitch.x))), float((float(false))), bool(false))) < injectionSwitch.y))), false))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if(((false || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((((false)) || false)) && true))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((bool((bvec3(bvec3((((bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), ((injectionSwitch.x > injectionSwitch.y)))), true)), false)))))))))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((bool(bvec3((((false)) && true), false, true))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((((mix(vec2((142.486), (- 420.826)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))
  barrier();
 uint workgroup_id = ((false ? (109883u) : gl_WorkGroupID.x));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_base = (~ (~ (workgroup_size))) * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   if((((bool(bvec2(((false) || false), false))) || ((bool((! ((bool(bool(! (((bool((bool(bool(false))))) && true)))))))))))))
    barrier();
   barrier();
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if((! (! ((false)))))
  barrier();
 if(((false || ((false || (false))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint virtual_gid = (((0u ^ (workgroup_base + subgroup_id * subgroup_size)) + (((0u ^ ((uint(uvec3(uint((min(uvec4((subgroup_local_id), 0u, 1u, 1u), uvec4((subgroup_local_id), 0u, 1u, 1u)))), 1u, 1u)))))) - 0u)) ^ (((0u | ((0u | ((1u * ((uint((clamp(uvec3(0u, uint((injectionSwitch.y)), 0u), uvec3(0u, uint((injectionSwitch.y)), 0u), uvec3(0u, uint((injectionSwitch.y)), 0u)))))))))))) ^ (0u << (uint(5u)))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((true && (false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if(((((clamp(injectionSwitch.x, (max((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)) > (clamp(injectionSwitch, (max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((! (! (false || ((((false) || false))))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((((injectionSwitch.x) + ((0.0) + 0.0)) > ((clamp((((((false ? (injectionSwitch) : injectionSwitch))) - sqrt(vec2(0.0, ((true ? 0.0 : (- 0.0))))))) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), (min((injectionSwitch) - vec2(0.0, 0.0), (vec2(mat3((((injectionSwitch)) - vec2(0.0, 0.0)) - vec2(0.0, (mix(float(0.0), float((70.67)), bool(false)))), 1.0, 1.0, 0.0, 1.0, ((false ? (4477.9047) : (((((false ? (- 28.71) : ((injectionSwitch.x > injectionSwitch.y)) ? (3.5) : (((bool(bvec2(false, false))) ? (- 7146.7657) : (false ? (- 900.793) : (((float(mat4x3(0.0, 1.0, 0.0, log(1.0), exp(0.0), 0.0, (dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, tan(0.0)))) + 0.0)))))))))))), 1.0, 1.0)))))))).y))))
    {
     if((false))
      {
       if((false))
        {
         if((((bool(bvec4(! (! (false)), false, ((injectionSwitch.x < injectionSwitch.y)), false))))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((((false || (bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false))))))) && (((((((((injectionSwitch.x < injectionSwitch.y)) && (((false) || ((injectionSwitch.x > injectionSwitch.y))))))) && true)) && true))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((true && ((false))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(((false || (true)) && (! (! (((((false))) && true))))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y)) || (true && (false))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, ((min(clamp((clamp(64, 64, 64)), 64, 64), clamp(64, 64, 64)))), 0);
 if((false))
  barrier();
 if((((((! (! (((((mix(vec2((injectionSwitch)[0], (- 90.98)), vec2((- 53.23), (injectionSwitch)[1]), bvec2(false, (! (! (true)))))).x > injectionSwitch.y)) || false))))) || false))))
  {
   if((false || ((false))))
    barrier();
   if(((false || (true && (! (! (((! (! ((! (! ((false)))))))))))))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
    barrier();
   barrier();
  }
 if(((bool(((bvec2(bvec3(bvec2(bvec3((bvec2(bvec4(bvec2(false, false), false, true))), false)), true))))))))
  barrier();
 ((((false ? ((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_base) : (num_workgroup))) : buf[virtual_gid] = uint(subgroupAllEqual(write_val)))) >> 0u));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((true && ((false))))
  {
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if(((! (! (bool(bool(((((mix(vec2((- 9.4), (- 3.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))))))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
