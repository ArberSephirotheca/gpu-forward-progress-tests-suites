#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((true && ((! (((! (false)) && true)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((false) || false)))
  barrier();
 if(((bool(bool((((false || (false))) || false))))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 do
  {
   if(false)
    {
    }
   else
    {
     if(((((mix(float(injectionSwitch.x), float((74.27)), bool(false))) > injectionSwitch.y))))
      barrier();
     do
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     while((((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y) && true), false, ((injectionSwitch.x < injectionSwitch.y)))))))))));
     if((false))
      {
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(false);
      }
    }
  }
 while(false);
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    {
     for(int _injected_loop_counter = ((1) | 0); ((_injected_loop_counter != int((injectionSwitch.x))) && true); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if(((((true && ((bool(bvec2(false, true)))))) || false)))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (min(gl_NumWorkGroups, ((gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false) || false)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
  }
 uint workgroup_size = ((gl_WorkGroupSize.x) * 1u);
 if((false))
  {
   if((! (! ((false)))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 & (int((injectionSwitch.y)) & 1)); ((_injected_loop_counter ++) ^ (0 & 8777)))
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != (((min(((((1) >> 0) << (int(4))) - 0), (~ (~ (((1) >> 0) << (int(4)))))))) >> ((0 | (int(4))))); _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y)))
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((bool(bvec4((false), false, false, true))))
            barrier();
           barrier();
          }
        }
      }
     barrier();
     if(((! ((true && (! (((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) | (0)); _injected_loop_counter --)
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((false ? (_injected_loop_counter) : (1 * (1)))); _injected_loop_counter ++)
      {
       do
        {
         if(((((((false || ((true && (injectionSwitch.x > injectionSwitch.y))))) && true)))))
          {
           if((false))
            barrier();
           if((bool(bvec4(false, false, true, false))))
            {
             if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               do
                {
                 if(((((injectionSwitch.x < injectionSwitch.y) && (false || (true))))))
                  {
                   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             barrier();
            }
          }
        }
       while((bool(bool((((mix(float(injectionSwitch.x), float((- 8.2)), bool(false))) > injectionSwitch.y))))));
       if((! ((false || (! ((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false)))))))))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = (- 45496 & 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 if(true)
  {
   if(((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))))
    {
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_base = ((0u | (uint((injectionSwitch.x)))) ^ ((((false ? (((65140u)) - (73006u & 0u)) : (min(~ (~ (~ ((~ ((max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))))))), ~ (~ (((((((min(((max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))), ((max(workgroup_size * workgroup_id, ((workgroup_size * workgroup_id) + (0u & 87689u))))))) * 1u))) / ((((true ? 1u : (subgroup_local_id)))) ^ 0u))) | ((((((min(((max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))), ((max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)))))) / 1u)) | 0u)))))))))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (((((uint((max(((false ? (uvec4(63590u, 59013u, 135872u, 125601u)) : uvec4(subgroup_local_id, 1u, 1u, 1u))), (((~ (~ (uvec4(subgroup_local_id, 1u, 1u, 1u))))) | ((~ (~ (uvec4(subgroup_local_id, 1u, 1u, 1u))))))))))) >> ((((true ? ((0u << (uint(1u))) * 1u) : (subgroup_size)))) & 148310u))) << 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > ((float(mat3x2((min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))), (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), (injectionSwitch.y), 1.0, 1.0, 0.0))))))))
  {
   do
    {
     for(int _injected_loop_counter = (min(0, ((false ? (bitCount(virtual_gid)) : 0)))); (! (! (_injected_loop_counter != ((1 << (int(3))) >> (int(3)))))); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     barrier();
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((((false) && true) || (false))))
  barrier();
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if(((true && ((injectionSwitch.x < injectionSwitch.y)))))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((((((min((min(injectionSwitch, injectionSwitch)), (vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))) && true))
  {
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; ((_injected_loop_counter < 1) && true); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if(((bool(bvec4(false, false, true, false)))))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           barrier();
          }
        }
       else
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (min(1, 1)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; (! (! ((! (! (_injected_loop_counter < int(((clamp((max((mix(float(((clamp((((clamp(9465.8238, 9465.8238, 9465.8238))) + (injectionSwitch.x)), (float(((mat4((min(9465.8238, 9465.8238)), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 9465.8238)))), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))))))); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; (0 + (_injected_loop_counter)) > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     do
      {
       if((((false || (! (! ((false)))))) || ((injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = (1 ^ int((((injectionSwitch) / vec2(1.0, 1.0)).x))); _injected_loop_counter > int((min((injectionSwitch.x), (injectionSwitch.x)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((((float(mat3(((injectionSwitch) - abs(vec2(0.0, 0.0))).x, 0.0, 1.0, 0.0, 1.0, 0.0, (float(((mat3x2((dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0)) * mat3(1.0)))), 0.0, (injectionSwitch.x)))) < injectionSwitch.y)))
          {
           if((((bool(bool((bool(bvec4(true && (false), false, true, false)))))))))
            {
             if((bool((bvec2(bvec3(bvec2((false || (false)), false), true))))))
              {
               if((false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; ((_injected_loop_counter) - 0) < (1 & (((((true && (false)) ? (abs(bitfieldInsert(- 57400, _injected_loop_counter, _injected_loop_counter, 72559))) : (0 + ((1 * (1))))))) | ((1 * (1))))); _injected_loop_counter ++)
              {
               atomicStore(write_val, uint(virtual_gid), (~ (~ (((4) * 1)))), 64, 0);
               for(int _injected_loop_counter = ((1 << ((((max(int(5), (~ (~ ((((true ? int(ivec4(int(5), 1, 1, 1)) : (_injected_loop_counter)))))))))) >> (0 | 0)))) >> (int(5))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if(((((injectionSwitch.x < injectionSwitch.y))) || false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     while(((true && ((bool(bvec3((false) && true, false, true)))))));
                    }
                  }
                 else
                  {
                  }
                }
               if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (((max(((1 << (((int(0)) / 1))) >> (int(0))) << (int(5)), ((((true ? (0 | (1 << (((int(0)) / 1)))) : (_injected_loop_counter)))) >> (int(0))) << (int(5))))) >> (((false ? (_injected_loop_counter) : int(5))))); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                  }
                }
              }
            }
          }
        }
      }
     while(false);
    }
   if((((false) && true)))
    barrier();
  }
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << (0 | ((clamp((int(5)), (int(5)), (int(5))))))) >> ((~ (~ (int((int(ivec2(5, 0))))))))); ((! (! (bool(bvec3(_injected_loop_counter != ((0 >> (int(4))) ^ 0), false, ((false) && true))))))); _injected_loop_counter --)
    {
     barrier();
     if((bool((bvec3(bvec3(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, false)))))))
      barrier();
    }
  }
 if(true)
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
}
