#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max((uvec3((max(gl_NumWorkGroups[0], gl_NumWorkGroups[0])), gl_NumWorkGroups[1], gl_NumWorkGroups[2])), ((true ? gl_NumWorkGroups : (uvec3(140169u, 66535u, ((~ (~ (uint(uvec4(9798u, 1u, uint((injectionSwitch.y)), ((1u << (uint(2u))) >> (uint(2u))))))))))))))).x;
 uint workgroup_size = ((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = (((uvec3(uvec3(gl_WorkGroupID))).x) | (gl_WorkGroupID.x));
 uint workgroup_base = (max((max((~ (~ (~ ((~ (workgroup_size * workgroup_id)))))), workgroup_size * workgroup_id)), workgroup_size * workgroup_id));
 uint virtual_gid = (min((((((((((uint(uvec3((((max(uint(uvec4((min((((workgroup_base) | (workgroup_base))), (((workgroup_base) | (workgroup_base))))) << 0u, 1u, 0u, (clamp((0u + (uint((((((false ? ((- 979.494 / - 4.6)) : min((injectionSwitch.y), (max((injectionSwitch.y), ((float(mat2x4(injectionSwitch.y, (((dot(vec3(1.0, abs(((true ? ((min(mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false)), mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false))))) : (9.3)))), 0.0), vec3(0.0, 1.0, 1.0))) / 1.0)), exp(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))))))))))) + 0.0)))), (min(uint((((((false ? ((- 979.494 / - 4.6)) : min((injectionSwitch.y), (max((injectionSwitch.y), ((float(mat2x4(injectionSwitch.y, (((dot(vec3(1.0, abs(((true ? ((min(mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false)), mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false))))) : (9.3)))), 0.0), vec3(0.0, 1.0, 1.0))) / 1.0)), exp(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))))))))))) + 0.0)), uint((((((false ? ((- 979.494 / - 4.6)) : min((injectionSwitch.y), (max((injectionSwitch.y), ((float(mat2x4(injectionSwitch.y, (((dot(vec3(1.0, abs(((true ? ((min(mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false)), mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false))))) : (9.3)))), 0.0), vec3(0.0, 1.0, 1.0))) / 1.0)), exp(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))))))))))) + 0.0)))), uint((((((false ? ((- 979.494 / - 4.6)) : min((injectionSwitch.y), (max((injectionSwitch.y), ((float(mat2x4(injectionSwitch.y, (((dot(vec3(1.0, abs(((true ? ((min(mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false)), mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false))))) : (9.3)))), 0.0), vec3(0.0, 1.0, 1.0))) / 1.0)), exp(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))))))))))) + 0.0)))))), uint(uvec4(((((~ (~ ((0u | (workgroup_base)))))) | (workgroup_base))) << 0u, (((((max(1u, 1u))) * 1u)) / 1u), 0u, uint(((min(((false ? (mat2(1.0) * ((vec2(- 313.410, - 41.35)))) : injectionSwitch)), injectionSwitch)).y)))))))), 1u, 0u))) + 0u)) >> 0u)) << 0u))) ^ uint((((mix(float((- 861.110)), float((injectionSwitch.x)), bool(true)))) - 0.0))), (((((0u | ((((max(uint(uvec4((min((((workgroup_base) | (workgroup_base))), (((workgroup_base) | (workgroup_base))))) << 0u, 1u, 0u, uint((((((false ? ((- 979.494 / - 4.6)) : min((injectionSwitch.y), (max((injectionSwitch.y), ((float(mat2x4(injectionSwitch.y, (((dot(vec3(1.0, abs(((true ? (mix(float((max(0.0, 0.0))), float((- 1.0)), bool(false))) : (9.3)))), 0.0), vec3(0.0, 1.0, 1.0))) / 1.0)), exp(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))))))))))) + 0.0)))), uint(uvec4(((((~ (~ ((0u | (workgroup_base)))))) | (workgroup_base))) << 0u, 1u, 0u, uint(((min(((false ? (vec2(- 313.410, - 41.35)) : injectionSwitch)), injectionSwitch)).y)))))))) << 0u))))) ^ uint((((mix(float((- 861.110)), float((injectionSwitch.x)), (bool(bvec3(bool(true), false, true)))))) - 0.0))))) + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, ((false ? (subgroup_local_id) : ((true ? uint(virtual_gid) : (packHalf2x16(injectionSwitch)))))), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}
