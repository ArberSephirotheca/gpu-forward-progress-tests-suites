#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((((! (! ((((injectionSwitch.x > injectionSwitch.y)) && true)))))))
  {
   if((false))
    return;
   if((false))
    return;
   if((bool(bool((((((true ? injectionSwitch.x : (((float(mat2x4((float(vec2((clamp(vec4(- 84.77, 43.90, 8.3, 6.6), 2.4, - 2362.1370)[2]), 0.0))), determinant(mat2(0.0, (max(0.0, 0.0)), 1.0, (dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))))), determinant(mat4(1.0, 1.0, ((1.0) - 0.0), 0.0, 0.0, 1.0, 1.0, 1.0, (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ((false ? (724.818) : (min(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0)), 1.0)), 0.0, sqrt((0.0 + (1.0))), sin(0.0), 0.0, 1.0))) / 1.0)))) > injectionSwitch.y)))))))
    return;
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
  }
 if((((((bool(bvec4((injectionSwitch.x > (((max(injectionSwitch.y, injectionSwitch.y))) + (injectionSwitch.x))), true, ((injectionSwitch.x < injectionSwitch.y)), true)))))) || false))
  {
   if((false))
    return;
   if(((((mat2(1.0) * (min((injectionSwitch), (injectionSwitch)))).x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false)) && true))
    {
     if(((! (((! (false)) && true)))))
      return;
     if((false))
      return;
     if((! (! ((false)))))
      return;
     return;
    }
  }
 if((bool(bvec2((bool(bool((false)))), true))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if(((false || ((((true && ((! (((! (injectionSwitch.x > injectionSwitch.y)) || false)))))))))))
  {
   if((false || ((false))))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((false || (false)) || (false))))
  {
   if((false))
    return;
   return;
  }
 if(((((((vec2(((mat3(injectionSwitch, ((1.0) - log(1.0)), 1.0, 1.0, 1.0, (clamp(1.0, 1.0, 1.0)), 1.0, 1.0)) * mat3(1.0)))) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (min(workgroup_base + subgroup_id * subgroup_size, (~ ((clamp(~ (min((workgroup_base + subgroup_id * subgroup_size), (((workgroup_base + subgroup_id * subgroup_size)) >> (0u & 40665u)))), ~ (min((workgroup_base + subgroup_id * subgroup_size), (((workgroup_base + subgroup_id * subgroup_size)) >> (0u & 40665u)))), ~ (min((workgroup_base + subgroup_id * subgroup_size), (((workgroup_base + subgroup_id * subgroup_size)) >> (0u & 40665u)))))))))) + subgroup_local_id;
 if(((bool(bool(bool((bvec2(bvec2(bvec2((bool(bvec3((true && ((true && ((((! (! ((false))))) && true))))), false, false))), true))))))))))
  return;
 if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if((! (! ((false)))))
    return;
   return;
  }
 atomicStore(write_val, ((uint(virtual_gid)) / 1u), 4, 64, 0);
 if(((bool(bvec3((((true && (injectionSwitch.x > ((injectionSwitch.y) * 1.0))))), false, true)))))
  {
   if((((injectionSwitch.x > (float(mat3x4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 1.0)))))))
    return;
   if((((false)) && true))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((true && ((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))))))))
  return;
 ((((((! (! ((true && ((injectionSwitch.x < injectionSwitch.y))))))) ? ((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : (~ (((((((((~ (buf[virtual_gid] = uint(subgroupAllEqual(write_val))))) / 1u)) - 0u)) | ((~ (~ (uint(((((uvec3(0u, 1u, 0u)) | (uvec3(0u, 1u, 0u)))) - uvec3(0u, 0u, 0u)))))))) * 1u))) : (num_workgroup)))));
 if((false))
  return;
}
