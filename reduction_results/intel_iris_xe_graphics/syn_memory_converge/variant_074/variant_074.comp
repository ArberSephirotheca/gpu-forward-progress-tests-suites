#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((((bool(bvec2(bool(bvec3(false, true, false)), true)))) && true))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uvec3 GLF_merged3_0_1_11_1_1_13_2_1_12subgroup_idsubgroup_sizeworkgroup_id;
 if((false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 while(false);
 do
  {
   if((((true && ((injectionSwitch.x > (((min(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0))).y))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((true && (false))))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while((! (! ((bool((! (! (bool(((injectionSwitch.x > injectionSwitch.y))))))))))));
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     do
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(((((mat2((injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((! (! (bool(bool((! (! (false))))))))));
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 GLF_merged3_0_1_11_1_1_13_2_1_12subgroup_idsubgroup_sizeworkgroup_id.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (~ (0 | ((~ (1))))); (~ (~ (((_injected_loop_counter) | (_injected_loop_counter))))) != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((bool(bvec4(((! ((false || (! (! (! (true)))))))), (bool(bvec4((bool(bvec3(false, true, false))), false, false, true))), true, ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       if((false))
        barrier();
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; ((_injected_loop_counter ++) ^ 0))
  {
   GLF_merged3_0_1_11_1_1_13_2_1_12subgroup_idsubgroup_sizeworkgroup_id.y = subgroup_size;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 while((! (! (((((injectionSwitch.x > injectionSwitch.y))) || false)))));
 if((false))
  barrier();
 if((! (! ((false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); ((_injected_loop_counter --) << 0))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((true && ((false))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((true && (injectionSwitch.x < injectionSwitch.y)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(((false || ((! (! (false)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = ((((1 << (1 * (((min(((int(6))) * ((1 << (int(3))) >> (int(3))), ((int(6))) * ((1 << (int(3))) >> (int(3))))))))) >> (int(6))) << (((false ? (_injected_loop_counter) : int(7))))) >> (((((false ? (_injected_loop_counter) : int(7)))) - (0 << (int(0)))))); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = (0 | 0); (((~ (((~ (_injected_loop_counter))) | ((((~ (_injected_loop_counter))) | ((~ (_injected_loop_counter)))))))) | (_injected_loop_counter)) < 1; _injected_loop_counter ++)
        {
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if(((true && ((bool((false || ((false || (bool(false)))))))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(((! (! ((true && ((! (bool(bvec2((((! (((injectionSwitch.x > injectionSwitch.y))))) && true), false)))))))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) << 0); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if(((! ((bool(bvec4(! ((bool(bvec4(false, ((false) && true), true, true)))), false, true, false)))))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((clamp(int(1), int(1), (min((max(int(((~ (~ ((((1)) | 0)))) - (1 ^ (0 ^ (1))))), int(((~ (~ ((((1)) | 0)))) - (1 ^ (0 ^ (1))))))), int(((~ (~ ((((1)) | 0)))) - (1 ^ (0 ^ (1))))))))))) >> (int(1))); (~ (~ (_injected_loop_counter ++))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 if((! ((! (! (! (((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if((true && ((false))))
    barrier();
   if((false))
    barrier();
   if(((((clamp(injectionSwitch.x, ((injectionSwitch.x) - 0.0), (max(((true ? injectionSwitch.x : (6.5))), injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 if((bool(bvec4((((! (! (true && ((bool(bool(false))))))))), false, false, false))))
  barrier();
 uint num_workgroup = (((clamp((uvec3(0u, 0u, 0u) ^ (((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)))), gl_NumWorkGroups, gl_NumWorkGroups)).x) - 0u);
 do
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((bool(bvec4(((((bool(bvec2((true && (injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))), ((true) && ((injectionSwitch.x < injectionSwitch.y))), true, false)))) || ((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.x = num_workgroup;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((! (! ((! (! (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > (mix(float((190.276)), float((min((vec2(0.0, (min(0.0, ((0.0) / 1.0)))) + (((injectionSwitch) * vec2((((bool((((true && (((bool(((((injectionSwitch.x > ((true ? injectionSwitch.y : (radians(- 6.3))))))) || false))) && true)))) && true))) ? (0.0 + ((2.7))) : 1.0)), 1.0)))).y, (((vec2(0.0, 0.0) + (((injectionSwitch) * vec2(((((((injectionSwitch.x > ((true ? injectionSwitch.y : (radians(- 6.3))))))) || false) ? (2.7) : (min(1.0, 1.0)))), 1.0)))).y) - 0.0)))), bool(((injectionSwitch.x < (0.0 + (((true ? injectionSwitch : (vec2(6.1, 933.139)))).y)))))))))))
  barrier();
 if((false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.w = workgroup_size;
 uint workgroup_id = (((1u << (uint(7u))) >> (0u + ((uint((clamp(7u, 7u, 7u))))))) * ((false ? (workgroup_size) : ((max(gl_WorkGroupID.x, (~ (~ (gl_WorkGroupID.x)))))))));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if(((bool(bvec3(false, true, true)))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (int((min(ivec3(1, 1, ((1 << (int(3))) >> (int(3)))), ivec3(1, 1, ((1 << (int(3))) >> (int(3)))))))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; ((_injected_loop_counter --) << 0))
  {
   if((false))
    {
     if((((((true && (injectionSwitch.x < injectionSwitch.y))) || false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((! (! (! (! ((true)))))) && (false))))
        barrier();
       barrier();
       if((((false) || false)))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(0))) >> (((false ? ((- 3724 << - 68088)) : int(0))))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
   if((false))
    barrier();
  }
 GLF_merged3_0_1_11_1_1_13_2_1_12subgroup_idsubgroup_sizeworkgroup_id.z = (min((min(workgroup_id, workgroup_id)), ((false ? (subgroup_id) : workgroup_id))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.w * GLF_merged3_0_1_11_1_1_13_2_1_12subgroup_idsubgroup_sizeworkgroup_id.z;
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  barrier();
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if(((((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false))))
        barrier();
       barrier();
      }
    }
   else
    {
     if((! ((! (! (((! ((((injectionSwitch.x > injectionSwitch.y))))) || false)))))))
      barrier();
    }
   if((false))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 do
  {
   GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.z = (min(workgroup_base, workgroup_base));
   if(((bool(bvec2(false, true)))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while((! (true && ((! (false))))));
 if((((false) && true)))
  barrier();
 if(((((true && ((max((mix(vec2((0.7), (vec4(4511.9283, - 6.0, 92.91, 3.7).p)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, ((((true)) && true) || false)))), (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = ((false ? (write_val) : (max((0u | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.z)), (0u | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.z)))))) + GLF_merged3_0_1_11_1_1_13_2_1_12subgroup_idsubgroup_sizeworkgroup_id.x * GLF_merged3_0_1_11_1_1_13_2_1_12subgroup_idsubgroup_sizeworkgroup_id.y + subgroup_local_id;
 if((false))
  {
   if(((false || (false))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; (~ (~ (_injected_loop_counter))) != int(((((max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y)); _injected_loop_counter ++)
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(((false || (false))))
      barrier();
    }
  }
 if((false))
  barrier();
 if((((false)) || false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(false)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((bool(bvec2((bool(bvec4(false, false, true, true))), true)))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((bool(bvec2(false, false)))))
    barrier();
  }
 if((false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.y = virtual_gid;
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; (((0 | (_injected_loop_counter ++))) - 0))
    {
     if(((! (! ((false || (false)))))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 atomicStore(write_val, uint(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.y), 4, ((0 >> (max((max((int(8)), (int(8)))), (int(8))))) ^ (64)), 0);
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 if((((false) && true)))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   else
    {
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((bool(bool(false)))))
    barrier();
   if((((! (((! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
    {
     if((! (! ((false)))))
      barrier();
     if(true)
      {
       if((true && (true)))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false || ((((((false ? (atan((mix(float((mix(float((3.8)), float(((((injectionSwitch.x < injectionSwitch.y)) ? (0.4) : (1.3)))), bool((! (! (true))))))), (1.0 * (float(((0.4) * 1.0)))), bool(true))))) : (vec2(mat3x4(injectionSwitch, 0.0, 0.0, abs(1.0), 0.0, (injectionSwitch.y), abs(0.0), abs(0.0), 0.0, 1.0, 1.0))).x)) > injectionSwitch.y))))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((((((! ((bool(bvec2(! ((! (! (((! (! (((true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x < injectionSwitch.y)), false))))))))))))), false))))) && true)))))
          barrier();
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > int(((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((5.1), (- 3722.2936)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))).x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((((false)) || false))
        barrier();
       if(((! (! ((true && (false)))))))
        {
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if(((false || ((((true) || false) && ((true && ((bool(bool((! (! (false))))))))))))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = ((1 << (int(0))) >> ((max(int(((0) << (0 << (int(1))))), int(0))))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(false);
         if((((! (((((! ((false))) && true)) && true)))) || false))
          {
           if((false))
            {
             if(((((injectionSwitch.x > injectionSwitch.y))) && true))
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if(((bool((! (! (bool(false))))))))
        barrier();
       if((false))
        barrier();
      }
     if(((((float((max(vec2(injectionSwitch.x, abs(1.0)), vec2(injectionSwitch.x, abs(1.0)))))) > (max(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
      {
       do
        {
         barrier();
         if(((((bool((bvec3(bvec4(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true), true)))))) && true)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if(((! ((! (! (! (false))))))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if((((((((bool(bvec2((true && (bool(bvec4(((false) && true), false, ((injectionSwitch.x > injectionSwitch.y)), false)))), false))) || false))))) && true))
  barrier();
 if((false))
  {
   if((false))
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   barrier();
  }
 if(((! (! (false || ((! (! (false || (((! (! (((false || (bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, true, false)))))))))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (0 & 74402); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if(((((! (! ((! (! (false)))))) && true))))
      barrier();
     barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   ((((0u | 1u) * (buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupvirtual_gidworkgroup_baseworkgroup_size.y] = uint(subgroupAllEqual((max(((write_val) << ((0u) | 0u)), (uint((min(uvec3(((write_val) | 0u), 0u, 1u), uvec3(((write_val) | 0u), 0u, 1u)))))))))))) >> 0u);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((bool(bvec2((false), true))))
    barrier();
   if(((bool(bvec4(false, false, false, false)))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((! ((((bool(bvec3((! (! (! (((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), false, true))) || false)))))))
    barrier();
  }
 while(((((false) || false)) || false));
 if((true && ((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   do
    {
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > ((((injectionSwitch.x < injectionSwitch.y)) ? (tan(0.0) + (injectionSwitch.y)) : (max((- 187.532), (- 187.532))))))));
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((! ((! (! ((bool(bvec4(! (((((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))) && true))))), false, true, false)))))))))
  barrier();
}
