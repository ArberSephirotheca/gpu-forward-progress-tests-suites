#version 460

struct _GLF_struct_12 {
 mat4x3 _f0;
 ivec2 _f1;
 bool _f2;
 uvec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 uvec2 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 mat2 _f4;
 mat4x3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 mat4x2 _f1;
 int _f2;
 bvec2 _f3;
 uvec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
 vec3 _f3;
 mat4 _f4;
 _GLF_struct_12 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 float _f1;
 ivec3 _f2;
 vec2 _f3;
 vec4 _f4;
 vec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 vec4 _f1;
 mat2 _f2;
 bool _f3;
 bvec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 ivec2 _f1;
 ivec2 _f2;
 _GLF_struct_7 _f3;
 vec3 _f4;
 float _f5;
 _GLF_struct_8 _f6;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 vec3 _f1;
 mat3x2 _f2;
 mat2 _f3;
 uint _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 vec3 _f1;
 mat4 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 uvec3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 mat2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 uint _f1;
 mat4 _f2;
 mat2x3 _f3;
 ivec2 _f4;
 float _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 ivec4 _f1;
 bvec3 _f2;
 mat3 _f3;
 mat4x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_6 _f2;
 bvec4 _f3;
 uint _f4;
 _GLF_struct_9 _f5;
 _GLF_struct_13 _f6;
 uint num_workgroup;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(((bool(bvec3(((false) || false), false, true)))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((false || (false))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(true)
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
             if((false))
              barrier();
            }
          }
        }
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if(((bool(bvec3(false, true, false)))))
          {
           if((((bool(bvec4((false), true, true, true))) && true)))
            barrier();
           if((bool((bvec2(bvec4(bvec2(((injectionSwitch.x < ((true ? (vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))) : (vec2(- 3.6, 139.386)))).y)), false), false, false))))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if((((true && (bool((bvec2(bvec4(bvec2((false || ((true && ((! ((bool(bool(! ((! (! (false))))))))))))), ((injectionSwitch.x > injectionSwitch.y))), false, true)))))))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
  }
 else
  {
   if(true)
    {
     for(int _injected_loop_counter = ((int(((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(((- 5.1 / - 0.6)), ((float(169003u) + - 395.008))), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))).y)) | 1) | (int((injectionSwitch.y)) ^ 1)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((false || (false))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((((vec2(mat4x3((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((111.064), (971.721)), bvec2(false, false))), log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0))).x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             do
              {
               barrier();
               if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                barrier();
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
             while(false);
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false || (((injectionSwitch.x < injectionSwitch.y)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(bvec4(true), _GLF_struct_3(_GLF_struct_0(mat2x3((clamp((clamp(1.0, 1.0, (clamp(1.0, 1.0, 1.0)))), 1.0, 1.0))), ivec4(1), bvec3(true), mat3(1.0), mat4x2(1.0), ivec3((clamp(1, 1, 1)))), _GLF_struct_1(mat4x3(1.0)), _GLF_struct_2(bvec3(true), 1u, ((true ? (((transpose(transpose(mat4(((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, ((true ? injectionSwitch : (vec2(75.86, 286.924)))))).y)) ? (log(- 5610.6196)) : 1.0)))))) - mat4(0.0, (mix(float(0.0), float((3.7)), bool(false))), 0.0, 0.0, 0.0, (((float(float(((false ? (1.2) : 0.0)))))) / 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : (mat4(- 32.31, 94.82, ((((false ? ((clamp(73.52, (max((1.0 * (73.52)), 73.52)), 73.52))) : 9.1))) - 0.0), - 9.3, - 5.6, - 9.2, - 7.7, 75.77, - 2.2, - 780.591, 7.2, ((- 2.2) - 0.0), 801.303, - 818.279, 631.582, 6.1)))), mat2x3(1.0), ivec2((~ (~ (1)))), 1.0, mat4x2(1.0)), (exp(vec3(0.0, 0.0, 0.0)) * (vec3(1.0)))), _GLF_struct_6(_GLF_struct_4(uvec2(1u), vec3(1.0), mat4(1.0), mat3x2((max(((1.0) + 0.0), 1.0))), mat2x3(1.0), uvec3((uint(uint(1u)))), mat2x4(1.0)), _GLF_struct_5(ivec3(1), vec3(((1.0) - 0.0)), mat3x2(1.0), mat2(1.0), 1u, mat2x3(1.0)), mat2(1.0), ivec3(((1) | 0))), bvec4(true), (((0u << (uint(0u))) | (uint((uint(uvec2(uint((0u | (1u))), ((1u) | (1u))))))))), _GLF_struct_9(vec2(1.0), ivec2(1), (clamp((max(((clamp((ivec2(((ivec3(ivec2(ivec3(ivec2(1), 1)), 0)) >> ivec3(0, 0, 0)))), ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1))))), (((min((clamp(true ? ivec2(1) : (ivec2(- 11607, 38628)), (clamp(true ? ivec2(1) : (ivec2(- 11607, 38628)), true ? ivec2(1) : (ivec2(- 11607, 38628)), true ? ivec2(1) : (ivec2(- 11607, 38628)))), true ? ivec2(1) : (ivec2(- 11607, 38628)))), ((true ? ivec2(1) : (ivec2(- 11607, 38628))) | ivec2(0, 0)))))))), (max((max(((clamp(ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1))))), (((min((clamp(true ? ivec2(1) : (ivec2(- 11607, 38628)), (clamp(true ? ivec2(1) : (ivec2(- 11607, 38628)), (bool(bvec2(true, true))) ? ivec2(1) : (ivec2(- 11607, 38628)), true ? ((ivec2(1)) | ((min((clamp(ivec2(1), ivec2(1), ivec2(1))), ivec2(1))))) : (ivec2(- 11607, 38628)))), true ? ivec2(1) : (ivec2(- 11607, 38628)))), ((true ? ivec2(1) : (ivec2(- 11607, 38628))) | ivec2(0, 0)))))))), (max(((clamp(ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1))))), (((min((clamp(true ? ivec2(1) : (ivec2(- 11607, 38628)), (clamp(true ? ivec2(1) : (ivec2(- 11607, 38628)), true ? ivec2(1) : (ivec2(- 11607, 38628)), true ? ivec2(1) : (ivec2(- 11607, 38628)))), true ? ivec2(1) : (ivec2(- 11607, 38628)))), (((((false || (true))) || false) ? ivec2(1) : (ivec2(- 11607, 38628))) | ivec2(0, 0)))))))))), (max(((clamp(ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1))))), (((min((clamp(true ? ((ivec2(1)) << ivec2(0, 0)) : (ivec2(- 11607, 38628)), (clamp(true ? ivec2(1) : (ivec2(- 11607, 38628)), true ? ivec2(1) : (ivec2(- 11607, 38628)), true ? ivec2(1) : (ivec2(- 11607, 38628)))), true ? ivec2(1) : (ivec2(- 11607, 38628)))), ((true ? ivec2(1) : (ivec2(- 11607, 38628))) | ivec2(0, 0)))))))))), _GLF_struct_7(uvec3(1u), vec4(1.0), (mat2((mat4x3(mat4(mat4x3(mat2(1.0))))))), true, bvec3(true), uvec4(1u)), vec3(1.0), (mix(float((float((- 88194 >> 64436)))), float(1.0), bool(true))), _GLF_struct_8(vec2(1.0), 1.0, ivec3(1), vec2(1.0), (mix(vec4((vec4(1.0))[0], (278.589), ((mat4(1.0) * (vec4(1.0))))[2], (mix(float((503.623)), float((3.4)), bool(true)))), vec4((- 7.9), (((((vec4(1.0))) * mat4(1.0))) * mat4(1.0))[1], (0.0 + ((69.94))), (((vec4(1.0))) + vec4(0.0, 0.0, 0.0, 0.0))[3]), bvec4(((((((((mix(float((min((injectionSwitch.x), (injectionSwitch.x))) / 1.0), float((9.2)), bool(false)))) - 0.0))) - 0.0) > injectionSwitch.y)), true, false, true))), vec2(1.0), ivec4(((1) | (1))))), _GLF_struct_13(bvec2(true), _GLF_struct_10(bvec4(true), mat4x2(((((1.0) - 0.0)) / 1.0)), (max(1, 1)), bvec2(true), uvec4((~ (~ ((((min(1u, (clamp(1u, (~ (~ (1u))), (clamp(1u, 1u, ((1u) | (1u))))))))) >> 0u))))), bvec4(true)), _GLF_struct_11(ivec2((~ (~ ((0 | (~ ((~ ((((clamp(((false ? (71025) : 1)), 1, 1))) / 1)))))))))), ((uvec2(1u)) | ((false ? (uvec2(160532u, 1943u)) : uvec2(0u, 0u)))), (min(ivec4(1), ((ivec4(1)) | ivec4((mix(float((- 8006.4167)), float((injectionSwitch.x)), bool(true))), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))))), mat4x3(1.0), mat2(1.0), mat4x3(1.0), uvec2(1u)), (max((vec3(0.0, 0.0, 0.0) + (vec3(1.0))), (((((vec3(0.0, 0.0, 0.0)) / abs(vec3(1.0, 1.0, 1.0))) + (((vec3(1.0))) + log(sqrt(vec3(1.0, 1.0, 1.0)))))) / vec3(1.0, 1.0, 1.0)))), mat4(1.0), _GLF_struct_12(mat4x3(1.0), ivec2(1), true, uvec3(1u), ivec3(1)), mat4x3(1.0)), gl_NumWorkGroups.x);
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   do
    {
     if(((((vec2(mat4x3(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, determinant(mat2(1.0, ((0.0) / 1.0), 1.0, 1.0)), 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))) && true))))
          barrier();
         for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               do
                {
                 barrier();
                }
               while(false);
              }
             else
              {
              }
            }
          }
         if(true)
          {
           if(false)
            {
             if(((true && (false))))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
          }
         else
          {
          }
        }
       barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
         if(true)
          {
           for(int _injected_loop_counter = (((0 & (+ 99589))) | ((0 & (+ 99589)))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (max((min((clamp(1, 1, 1)), 1)), 1)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((! (! ((((((injectionSwitch.x > injectionSwitch.y) || false))))))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   do
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     if((false))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    barrier();
                  }
                }
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           do
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((! ((bool(bvec2(! ((((injectionSwitch.x > injectionSwitch.y)))), true))))))
  {
   if(true)
    {
     if(((! (! (false)))))
      {
       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       barrier();
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter != (int((injectionSwitch.y)) & int((injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
   if((false))
    barrier();
  }
 if(((true && (false))))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
    }
  }
 if(true)
  {
   if(true)
    {
     if((! (((! ((((injectionSwitch.x > injectionSwitch.y))))) && true))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if(((bool(bvec4(false, false, (true && ((((injectionSwitch.x < injectionSwitch.y)) && (false)))), true)))))
      {
       if(true)
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(((false || (false))))
            barrier();
           do
            {
             if(true)
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               barrier();
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             else
              {
               if((((! (! (bool(bool(false))))))))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > (0.0 + (((injectionSwitch.y) / abs(1.0))))))))
        {
         if((false))
          barrier();
         if((! (! ((false)))))
          barrier();
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(((bool(bvec2(false, true)))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((((! ((true && (! ((bool(bvec2(injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 4906.0473), (5232.5217)), bvec2(false, false))).y, false))))))))))))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if(true)
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > (min(((true ? injectionSwitch : (injectionSwitch))), injectionSwitch)).y))))
                barrier();
              }
             do
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); ((_injected_loop_counter) / 1) != (1 ^ 0); _injected_loop_counter ++)
                {
                 if(true)
                  {
                   barrier();
                   if(((bool(bvec3(false, true, false)))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(false);
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(false);
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if(true)
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(((true && (((false || ((injectionSwitch.x > injectionSwitch.y))))))))
            {
             if((false))
              barrier();
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
           if(true)
            {
             if(((((! (false || ((! (false)))))) && ((true) || false))))
              barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if(true)
          {
           do
            {
             do
              {
               if(true)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(false);
            }
           while(false);
          }
         else
          {
          }
         if(false)
          {
          }
         else
          {
           if(((((clamp((max(injectionSwitch, injectionSwitch)).x, (max(injectionSwitch, injectionSwitch)).x, (((max(injectionSwitch, injectionSwitch)).x) / 1.0))) > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               do
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((((((injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x < injectionSwitch.y)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; (((bool(bvec2(_injected_loop_counter < int((injectionSwitch.y)), false)))) && true); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                 barrier();
                }
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               while(false);
              }
             if(false)
              {
              }
             else
              {
               barrier();
              }
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             do
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < (0 + (1)); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y))))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while((false || (false)));
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((mat2((clamp(1.0, 1.0, 1.0))) * (injectionSwitch)).x > (min(injectionSwitch, injectionSwitch)).y)))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if(true)
                      {
                       if((false))
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if((false))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                     barrier();
                    }
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               do
                {
                 if((false))
                  {
                   if((! ((! (! (! (((false) || false))))))))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           do
            {
             if((false))
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           while((((0.0 + (((true ? (max((mix((sin(vec2(0.0, 0.0)) + (vec2(((- 0.3 / 23.93)), ((vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)))))[1]))), vec2(((((vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)))))[0]) / 1.0), (- 34.31)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))).x, (mix(vec2(((- 0.3 / 23.93)), ((vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)))))[1]), vec2(((((vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)))))[0]) / 1.0), (- 34.31)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))).x)) : (6.4))))) > (mix(vec2((- 48.95), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((+ 7027.3106))), bvec2(true, false))).y)));
          }
         barrier();
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(false)
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 while(false);
                 if(((! (! (false)))))
                  barrier();
                }
              }
            }
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     do
                      {
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     while(false);
                    }
                   if((false))
                    barrier();
                  }
                }
               while(false);
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((((((false ? (9.5) : injectionSwitch.x)) > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               while(false);
               if((false))
                barrier();
               if((false))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; ((_injected_loop_counter ++) << 0))
                    {
                     barrier();
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((true && (false)))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(true)
                      {
                       if(false)
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                         if((false))
                          barrier();
                        }
                       else
                        {
                         do
                          {
                           if(((((vec2(injectionSwitch[((1 | 1) * (0))], injectionSwitch[1])).x > injectionSwitch.y))))
                            {
                             do
                              {
                               if((false))
                                barrier();
                              }
                             while(false);
                             if((false))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             if((false))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                               if((false))
                                barrier();
                               barrier();
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             if((! (! ((bool((bvec2(bvec4(bvec2(true, true), true, false)))))))))
                              {
                               if(false)
                                {
                                 if((false))
                                  barrier();
                                }
                               else
                                {
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    {
                                     if(true)
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 barrier();
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(false)
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         while(false);
                        }
                      }
                     else
                      {
                      }
                    }
                   while(false);
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((injectionSwitch.x > (((vec2((mat3x2((mat4x2(mat4(mat4x2(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 1.0))))))))).y) / 1.0))));
             if((bool(bvec2((false), false))))
              {
               do
                {
                 for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter != 1))); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     barrier();
                    }
                   barrier();
                  }
                }
               while(false);
               if((false))
                barrier();
              }
            }
           else
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 if(((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))
                  barrier();
                }
              }
            }
           if((false))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if(((((! (! (false)))) || false)))
              {
               for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false || (false)))
                  {
                  }
                 else
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
          }
        }
       if((false))
        barrier();
       do
        {
         if(((((true && (((injectionSwitch.x > injectionSwitch.y) && true)))))))
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
              }
             if(true)
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 | (0 << (int(5)))) >> ((1 * (int(4))))); _injected_loop_counter --)
                  {
                   if(true)
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            {
                             if((false))
                              barrier();
                             if(((false) || false))
                              {
                              }
                             else
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         if((false))
                          barrier();
                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = int((((false ? (- 348.301) : injectionSwitch.y)))); _injected_loop_counter > 0; _injected_loop_counter --)
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               else
                                {
                                }
                               if((false))
                                barrier();
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             if((false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(false);
                              }
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 do
                  {
                   barrier();
                  }
                 while(false);
                 if(((((! (! (false)))) && true)))
                  {
                   for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter != 1))); _injected_loop_counter ++)
                    {
                     if(((((((! (! (bool(bool((injectionSwitch.x > injectionSwitch.y))))))) && true)))))
                      barrier();
                    }
                   barrier();
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
                {
                 if((((! (! ((false))))) || false))
                  barrier();
                }
               if((false))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(false);
             if((false))
              barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(((! (! (false)))))
            barrier();
          }
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
          {
           if(((((bool(bvec4(false, false, false, true))) && true))))
            barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(true)
            {
             do
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while((! (! ((! (! (false)))))));
              }
             while(false);
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if((((false) && true)))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
      }
    }
   while(false);
   if((false))
    {
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((! (! ((false)))))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; (bool(((bvec2(bvec3(bvec2((bvec3(bvec3(bvec3(bvec2(_injected_loop_counter < int((injectionSwitch.y)), true), false))))), false)))))); _injected_loop_counter ++)
    {
     if((true && (((((bool(bvec2(! (! (((((injectionSwitch.x > injectionSwitch.y)) && true)))), false)))) || false)))))
      {
      }
     else
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(((false) || false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 uint workgroup_base = ((workgroup_size) | (((workgroup_size)) | ((min((workgroup_size), (1u * ((workgroup_size)))))))) * workgroup_id;
 for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(true)
    {
     do
      {
       if((false))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(false);
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while(((((! (! ((injectionSwitch.x < injectionSwitch.y))))) && ((injectionSwitch.x > (((mix(float((((uvec2(115049u, 103469u) == uvec2((0u ^ ((clamp(34266u, 34266u, 34266u)))), 98599u)) ? - 4.1 : float(- 25758)))), float(injectionSwitch.y), bool(true)))) * sqrt(1.0)))))));
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = (0 | ((0 ^ (1)))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if(((bool(bvec3(((injectionSwitch.x > ((((true ? ((((true ? injectionSwitch.y : (- 9.9)) - 0.0))) : (2.0)))) * 1.0))), false, true)))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
  {
   if(((! (((! (false)) && true)))))
    {
     do
      {
       for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter < ((1) << 0); _injected_loop_counter ++)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(((false || (false))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > (0 >> (int(6))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(false)
        {
         do
          {
           if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
            {
             do
              {
               do
                {
                 barrier();
                }
               while((! (! (false))));
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(false);
         if((false))
          {
           if((false || (false)))
            {
            }
           else
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          barrier();
         do
          {
           if((false))
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((false) && (! (! ((bool(bvec2(((((injectionSwitch.x < injectionSwitch.y))) || false), false))))))))
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if(true)
                  {
                   if(((false || (false))))
                    {
                     if((false))
                      barrier();
                     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     if((false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((0 ^ 1) ^ 0); ((_injected_loop_counter ++) ^ 0))
                  {
                   barrier();
                   do
                    {
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(false);
                    }
                   while(false);
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                     if(true)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   while(false);
                  }
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
              {
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if((((false) && true)))
                    {
                     if(((false || ((((bool(bool((false || (false))))) || false))))))
                      barrier();
                     barrier();
                    }
                  }
                 while(false);
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while((! (! (false))));
            }
          }
         while(false);
        }
       else
        {
         barrier();
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if(((bool(bvec2(false, true)))))
                barrier();
              }
             else
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (injectionSwitch.x > injectionSwitch.y))))))))
              {
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = (0 << ((max(int(4), int(4))))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((((! (! ((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))) || false)))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((! ((false || (! (false)))))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             else
              {
               barrier();
              }
             if((true && (((injectionSwitch.x < injectionSwitch.y)))))
              {
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((((((! (! ((false || (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, (true && (false)), false))))))))))))
            {
             if(true)
              {
               if(true)
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               else
                {
                }
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = ((- 93230 + 20685) & int((injectionSwitch.x))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(false);
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; ((_injected_loop_counter) + 0) < (0 ^ 1); _injected_loop_counter ++)
    {
     if((false))
      {
       if(true)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     atomicStore(write_val, uint(virtual_gid), (clamp(((4) / 1), (min(4, 4)), ((4) ^ 0))), 64, 0);
     if((false || (true)))
      {
       if((false))
        barrier();
       do
        {
         if(((injectionSwitch.x < (tan(vec2(0.0, 0.0)) + (injectionSwitch)).y)))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
               if(true)
                {
                 if((bool((bvec2(bvec4((bvec2(bvec2(bvec2(((((! (! (((false) && true))))) && true)), (((bool(bool(true))) && true)))))), true, true))))))
                  barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
         else
          {
           if((false))
            barrier();
          }
        }
       while(false);
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(((! (! (false)))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
            }
           else
            {
            }
          }
         barrier();
        }
      }
     while(false);
    }
   if((false))
    barrier();
  }
 while(false);
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = (72541 & 0); (min(_injected_loop_counter, _injected_loop_counter)) != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             do
              {
               if((false))
                barrier();
               if((bool(bvec2((bool(bvec3((! ((true && (! (true))))), ((injectionSwitch.x < injectionSwitch.y)), true))), ((true && ((injectionSwitch.x < injectionSwitch.y))))))))
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           while(false);
           if((false))
            barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if(true)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             if((((false || (true))) || ((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 barrier();
                 if((false))
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while((! (! ((true && (((injectionSwitch.x > (mat2((injectionSwitch.y)) * (injectionSwitch)).y))))))));
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   do
    {
     if(true)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(false);
  }
 if(false)
  {
  }
 else
  {
   if((bool(((bool((((((true && (bool(bool(false))))) || false))))) && true))))
    {
     do
      {
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if(((injectionSwitch.x < (vec2(injectionSwitch[0], injectionSwitch[1])).y)))
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
       while(false);
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((true && (true)))
  {
   if(false)
    {
    }
   else
    {
     if((bool(bvec4(true, true, false, true))))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         while(false);
        }
       if(((bool(bvec4(bool((bvec3(bvec4(bvec3((((false)) && true), false, true), false)))), true, false, ((injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = (1 ^ 1); (bool(bvec3((true && ((true && ((true && ((false || (_injected_loop_counter != int((injectionSwitch.y)))))))))), false, true))); _injected_loop_counter ++)
    {
     if(((((mix(float((1227.6208)), float((float(mat3x4(((((false ? (3.2) : injectionSwitch.x))) - 0.0), 0.0, 1.0, 1.0, sqrt((min(1.0, 1.0))), cos(0.0), ((true ? (float(mat2(0.0, 0.0, 1.0, 1.0))) : (- 5237.5056))), 1.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))) > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(((true && (bool(bvec3(((injectionSwitch.x > ((injectionSwitch.y) / 1.0))), ((injectionSwitch.x < injectionSwitch.y)), true))))));
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); (clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (int(((float(mat2(((clamp(((false ? (injectionSwitch) : (injectionSwitch) * mat2(1.0))), ((false ? (injectionSwitch) : (injectionSwitch) * mat2(1.0))), ((false ? (injectionSwitch) : (injectionSwitch) * mat2(1.0)))))).x, 1.0, 1.0, log(1.0)))))) >> ((((0 | (int(5)))) - 0))); _injected_loop_counter --)
        {
         do
          {
           if((true && (! ((! (! ((! (! (! ((true))))))))))))
            {
             if((false))
              barrier();
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > (max((vec2(0.0, 0.0) + ((max(injectionSwitch, injectionSwitch)))), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((3.1), (vec3(7.0, - 71.71, - 5.9).r)), bvec2(false, false))))).y))))
                  barrier();
                }
               else
                {
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(true)
                  {
                   do
                    {
                     if(((! (! (false)))))
                      barrier();
                    }
                   while(false);
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if((false || ((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
                {
                 for(int _injected_loop_counter = (max((((1) | ((max(((max((((1) << int((injectionSwitch.x)))), (1))) << 0), 1)))) & int((injectionSwitch.y))), (1 & int((injectionSwitch.y))))); _injected_loop_counter > (((0 << (int(6))) | ((clamp(0 << (int(6)), 0 << (int(6)), 0 << (int(6))))))); _injected_loop_counter --)
                  {
                   barrier();
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                 barrier();
                }
               do
                {
                 if((false))
                  barrier();
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(((false) && true))
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             do
                              {
                               barrier();
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                           else
                            {
                             if((false))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if((false))
                                      barrier();
                                    }
                                   while(false);
                                   barrier();
                                  }
                                }
                              }
                            }
                          }
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                        }
                       barrier();
                       for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           if((false))
                            {
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                        }
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(((((((((! (! (injectionSwitch.x > injectionSwitch.y)))) || false))) && true))))
                        barrier();
                      }
                    }
                   while(false);
                  }
                 if((false))
                  barrier();
                }
               while(false);
               if(((bool(bool(false)))))
                {
                 do
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 while(false);
                }
              }
            }
           else
            {
            }
          }
         while(false);
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               do
                {
                 if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((37.16)), bool(false)))))))
                  barrier();
                }
               while(false);
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
             if(((bool(bvec2(bool(bvec4((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))), false, false, true)), true)))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if(false)
            {
            }
           else
            {
             if(((bool(bvec2(false, false)))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         while((true && (false)));
        }
       if(((bool(bvec2(false, false)))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = ((int(ivec4(0, 1, 1, 1))) ^ ((1 << (int(5))) >> (int(5)))); _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       do
        {
         if((false))
          barrier();
        }
       while(false);
       barrier();
      }
    }
  }
 else
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > ((true ? injectionSwitch.y : (98.37)))))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (1 | int((injectionSwitch.y))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((true ? injectionSwitch : (vec2(4.5, - 2433.4171)))).x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = (0 ^ (0 >> (int(7)))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(true)
    {
     barrier();
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = ((~ (~ ((int((injectionSwitch.y))) + 0)))); (! (! (_injected_loop_counter > int((injectionSwitch.x))))); _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(false)
      {
       if((false))
        {
         if((false))
          {
           if((! (! (false))))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        {
         if((((! (! ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))))))))
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(true)
          {
           if(true)
            {
             do
              {
               barrier();
              }
             while(false);
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != (~ (~ (0))); _injected_loop_counter --)
          {
           if(((bool(bvec4((bool(bvec2(false, true))), true, true, false)))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(((((bool(bvec4(false || (true), false, false, false))))) && true))
          {
           if(((injectionSwitch.x < (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((((false || ((false || ((injectionSwitch.x > injectionSwitch.y))))))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != (((1 << (int(7))) >> ((1 * (int(7))))) ^ 0); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(false)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 << (((int(1)) >> 0))) >> (int(1))); (0 | (_injected_loop_counter)) != ((0) << 0); _injected_loop_counter --)
                    {
                     do
                      {
                       if((false))
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                             if((((false) || false)))
                              barrier();
                            }
                          }
                        }
                      }
                     while(false);
                    }
                  }
                }
               else
                {
                 if(((false || (! (! ((false)))))))
                  barrier();
                 if(true)
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if((false || ((! (! (false))))))
                {
                }
               else
                {
                 if((false))
                  {
                   if(false)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(false)
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = ((((1 << (((int(0)) << 0))) >> (int(0)))) ^ int((injectionSwitch.x))); (bool(bvec2(_injected_loop_counter > ((0 << (int(8))) | 0), true))); _injected_loop_counter --)
                    {
                     if((false))
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                     barrier();
                    }
                   if((false))
                    barrier();
                   do
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   while(false);
                  }
                 while(false);
                }
              }
             for(int _injected_loop_counter = ((1 << (int(7))) >> ((clamp(((int(7)) + 0), int(7), (min(int(7), int(7))))))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(true)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (max((1 ^ 0), (1 ^ 0))); _injected_loop_counter ++)
                          {
                           if((false))
                            {
                             for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                              {
                               barrier();
                               if((false))
                                barrier();
                              }
                            }
                           barrier();
                          }
                        }
                      }
                     if(true)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         if((false))
                          {
                           do
                            {
                             barrier();
                             if((false))
                              barrier();
                            }
                           while((false || (false)));
                          }
                         barrier();
                        }
                       if(((! (! ((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))) && true)))))))
                        {
                        }
                       else
                        {
                         if((((false || ((true && ((true && (false)) || (false))))))))
                          {
                           if((false))
                            barrier();
                           if((false))
                            barrier();
                           if(true)
                            {
                             if(((! ((bool(bvec3((true && (! (((false) && true)))), true, true)))))))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               do
                                {
                                 barrier();
                                }
                               while(((injectionSwitch.x > injectionSwitch.y)));
                              }
                             if(true)
                              {
                               barrier();
                              }
                             else
                              {
                              }
                             if((false))
                              barrier();
                             if((false))
                              barrier();
                            }
                           else
                            {
                             if((((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, false, true))) && true)))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter != ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 if((false))
                                  {
                                   for(int _injected_loop_counter = (0 & - 77024); _injected_loop_counter < 1; _injected_loop_counter ++)
                                    {
                                     if((false))
                                      barrier();
                                    }
                                   barrier();
                                  }
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 if(true)
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             if((false))
                              barrier();
                             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                                {
                                 if((false))
                                  {
                                   for(int _injected_loop_counter = 1; _injected_loop_counter > int((((true ? injectionSwitch.x : (- 6.2))))); _injected_loop_counter --)
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(false);
                                    }
                                   if((false))
                                    barrier();
                                  }
                                }
                              }
                            }
                          }
                         if((false))
                          {
                           if((false))
                            barrier();
                           do
                            {
                             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) - 0); _injected_loop_counter ++)
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           while(false);
                          }
                        }
                       if((false))
                        barrier();
                       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          barrier();
                        }
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   while(false);
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               for(int _injected_loop_counter = ((1 << (int(1))) >> ((min(int(1), int((int(ivec4(1, 0, 0, 1)))))))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 barrier();
                }
              }
             if(((((clamp(injectionSwitch, injectionSwitch, ((true ? injectionSwitch : (injectionSwitch))))).x > (vec2(1.0, 1.0) * (injectionSwitch)).y))))
              barrier();
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
               if(((((injectionSwitch.x > injectionSwitch.y)) && (bool(bvec2(true, true))))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if((false))
                  {
                   if(((! (! (false)))))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     do
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          {
                           do
                            {
                             for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           while(false);
                          }
                        }
                      }
                     while(false);
                    }
                   else
                    {
                    }
                  }
                 if(true)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   if(true)
                    {
                     if(((((clamp(injectionSwitch, ((true ? ((false ? (vec2(- 38.53, - 90.63)) : injectionSwitch)) : (max(vec2(- 563.824, 9.6), vec2(- 6.1, 7.8))))), injectionSwitch)).x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 do
                  {
                   do
                    {
                     do
                      {
                       if(((bool(bvec4(false, false, false, true)))))
                        barrier();
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > ((true ? (clamp(((injectionSwitch) / vec2(1.0, 1.0)), ((injectionSwitch) / vec2(1.0, 1.0)), (mix(vec2((((injectionSwitch) / vec2(1.0, 1.0)))[0], (((injectionSwitch) / vec2(1.0, 1.0)))[1]), vec2((vec4(606.911, 64.01, - 2.7, 739.170).s), (- 5.7)), bvec2(false, false))))) : (injectionSwitch))).y))))
                        {
                         if(true)
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                        }
                      }
                     while(false);
                    }
                   while(false);
                  }
                 while(false);
                 for(int _injected_loop_counter = ((1 << ((clamp(int(6), int(6), int(6))))) >> (int(6))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter < ((1 << ((((int(ivec4(int(4), 1, 0, 0)))) | (int(4))))) >> (int(4))); _injected_loop_counter ++)
                    {
                     buf[virtual_gid] = uint(subgroupAllEqual((~ (~ ((min(write_val, write_val)))))));
                     if(true)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(((((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((37.98), (vec4(- 7150.6609, - 2.4, 125.133, - 4109.8400).g)), bvec2(((injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((false))
                    {
                     do
                      {
                       for(int _injected_loop_counter = ((((1 << (int(2))) >> (int(2))) << (int((min(4, ((4) | (4))))))) >> (int(4))); _injected_loop_counter != (0 | (0 >> (int(4)))); _injected_loop_counter --)
                        {
                         do
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                         while(false);
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         do
                          {
                           if((false))
                            barrier();
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                      }
                     while(false);
                     if((false))
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if((((false) && true)))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(true)
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                     if(((bool(bool((false || (false)))))))
                      barrier();
                    }
                  }
                 if((false))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
              }
             if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 barrier();
                }
               while((bool(bvec3((true && (false)), false, true))));
              }
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(true)
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             if((false))
              {
               do
                {
                 for(int _injected_loop_counter = ((((1 << ((int(ivec3(int(5), 1, 1))))) >> (int(5))) << (int(6))) >> (int(6))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; (((min((int(ivec3(((_injected_loop_counter) | (_injected_loop_counter)), 0, 0))), (int(ivec3(((_injected_loop_counter) | (_injected_loop_counter)), 0, 0)))))) | 0) > ((((((max(1 * (0), 1 * (0)))) / 1)) + int((injectionSwitch.x)))); _injected_loop_counter --)
                    {
                     barrier();
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(((! (((! (! (bool(bvec2(((! (bool(bool(false)))) || false), true))))))))));
              }
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
               if(((! (! (false)))))
                barrier();
              }
            }
           if((false))
            {
             if((((false) && true)))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              barrier();
             barrier();
            }
           if((((false)) || false))
            {
             if((false))
              barrier();
             if((((! (! (bool(bool(bool(bvec3(true, ((injectionSwitch.x > injectionSwitch.y)), false))))))))))
              {
               if((true && (true)))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((((false || (bool(bool(false)))))))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(((! (! (false)))))
        {
         for(int _injected_loop_counter = (0 << (((int(7)) >> 0))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(((true && ((true && (((injectionSwitch.x > injectionSwitch.y))))))))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if(((((((! (! (injectionSwitch.x > injectionSwitch.y)))) && (! (! (true))))))))
                barrier();
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
              {
               barrier();
              }
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
    }
  }
 else
  {
  }
 if((false))
  {
   for(int _injected_loop_counter = ((((true ? (0 ^ ((min(1 ^ 1, 1 ^ 1)))) : (72294)))) ^ 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; ((((_injected_loop_counter ++) | ((0) * 1)) | (1 ^ (1 & 1)))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(false)
            {
             do
              {
               if(((false || (false))))
                barrier();
              }
             while(false);
            }
           else
            {
             if(true)
              {
               do
                {
                 barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
        }
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (- 19910 & 0); _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((((false)) || false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = ((0 << (int(4))) | int((injectionSwitch.x))); (~ (((~ (_injected_loop_counter)) - 0))) != 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    {
     if((true && (true)))
      {
       if((false))
        {
         if(true)
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((bool(bvec3(false, false, false)))))
    barrier();
   do
    {
     if(true)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(((((true && (((injectionSwitch.x) - 0.0) > injectionSwitch.y))))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
              }
             barrier();
            }
           do
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & 76713); _injected_loop_counter --)
              {
               if(((! (! ((false || (bool(bvec2((((bool(bvec2(true, true)))) && true), true)))))))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(false);
          }
        }
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; ((((_injected_loop_counter) | (0 >> (int(6))))) >> 0) != ((((1 << (int(2)))) | 0) >> (int(2))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((((false) || false)))
  barrier();
 if((false))
  barrier();
}
