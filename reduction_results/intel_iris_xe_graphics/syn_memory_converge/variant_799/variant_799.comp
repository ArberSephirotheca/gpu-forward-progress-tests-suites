#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) | (gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((min(((~ (~ ((max((((max(1u, 1u))) / 1u), (((max(((1u) | 0u), 1u))) / 1u)))))) ^ 0u), (((~ (uint(uvec3((clamp((~ (1u * (((1u)) << 0u))), (((~ (1u * (((1u)) << 0u)))) << 0u), (~ (1u * (((1u)) << 0u))))), 0u, 1u))))) ^ 0u))) * (((((workgroup_base + (min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) >> 0u) | (workgroup_base + ((subgroup_id * subgroup_size) >> uint((((injectionSwitch.x)) - 0.0))))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 ((((((0u + (1u * ((((((((! (! (false || ((bool(bvec3((bool(bvec3(((((false || (false)) && true))) || ((injectionSwitch.x > (clamp((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), ((true) && true), true))), false, (bool((bool(bvec4(bool(false), false, false, true)))))))))))))) ? (virtual_gid) : buf[virtual_gid] = (((~ (((~ (~ (~ ((((false ? ((0u | (subgroup_local_id))) : uint(subgroupAllEqual((uint((injectionSwitch.y)) * (write_val))))))))))) << 0u))) >> 0u))))) >> 0u)))) + uint((injectionSwitch.x))))) | 0u));
}
