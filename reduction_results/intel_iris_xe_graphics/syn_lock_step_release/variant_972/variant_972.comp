#version 460

struct _GLF_struct_6 {
 uvec3 _f0;
 vec4 _f1;
 mat4x2 _f2;
 uint _f3;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 ivec4 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_8 {
 uint virtual_gid;
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 bvec3 _f1;
 uint subgroup_size;
 mat2x3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 uvec2 _f1;
 mat2x4 _f2;
 mat3x2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 bool _f1;
 _GLF_struct_1 _f2;
 uint _f3;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 float _f1;
 _GLF_struct_2 _f2;
 vec2 _f3;
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size;
 uvec2 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(true)
  {
   if((false))
    {
     do
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     while(false);
    }
   if((false))
    barrier();
  }
 else
  {
  }
 uvec4 GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) ^ 0) & 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size;
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size;
    }
  }
 if((false))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(((bool(bool(false)))))
  {
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     do
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
        {
         do
          {
           barrier();
          }
         while(false);
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           if((false))
            {
             if(true)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if(true)
          {
           if((false))
            barrier();
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
    }
   while(((((injectionSwitch.x > injectionSwitch.y))) || false));
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(true)
  {
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((bool(bvec3(false, true, true)))))
            barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 _GLF_struct_3 _GLF_struct_replacement_3;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = (((1 << (int(1))) >> (int(1))) ^ 1); _injected_loop_counter != (((1 | 1)) / 1); _injected_loop_counter ++)
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y = subgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   do
    {
     barrier();
    }
   while(false);
  }
 if(true)
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((1 << (int(6))) >> ((min(int(6), ((int(6)) << 0))))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             do
              {
               if((((false) || false)))
                barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((! ((! (! (! ((bool(bvec4(false, false, true, true)))))))))))
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != (int((injectionSwitch.x)) ^ 1); _injected_loop_counter ++)
                {
                 if(((true && (false))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
             while(false);
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                barrier();
              }
            }
          }
        }
       while(false);
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 else
  {
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(ivec4(1), bvec3(true), gl_SubgroupSize, mat2x3(1.0), ivec3(1));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   do
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(true)
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((true && (false)))
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
      }
     if(((true && (false))))
      barrier();
    }
   _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.z = _GLF_struct_replacement_4.subgroup_size;
   if((false))
    {
     if(((bool(bvec3(false, false, false)))))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.y = subgroup_local_id;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
              }
            }
           else
            {
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
            {
             do
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(false);
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((true && (((false) && true)))))
          barrier();
         if((false))
          {
           if(true)
            {
             for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
      }
     if(((false || ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz.x = num_workgroup;
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(true)
    {
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
               if((false))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    barrier();
   GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.x = GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz.x;
   if(((false || (false))))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(false);
           barrier();
          }
         if((false))
          barrier();
        }
      }
     while(false);
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = ((1 << (int(6))) >> ((~ (~ (int(6)))))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1 << (((int(1)) * 1))) >> (int(1))); _injected_loop_counter != ((0 << (int(6))) >> (int(8))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
  }
 if(true)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (((0 | 0) | 0) >> (int(7))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(((true && (false))))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((! (! (false))))
        {
        }
       else
        {
         GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz.z = workgroup_size;
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         barrier();
        }
       barrier();
      }
     if((false))
      {
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if(((! (! (false)))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 & 1) << (int(6))) >> (int(6))); _injected_loop_counter ++)
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if((false))
            barrier();
          }
        }
       while(false);
       barrier();
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(true)
  {
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((false) && true))
      {
      }
     else
      {
       if((false))
        barrier();
       do
        {
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           do
            {
             _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.w = GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz.z;
             if((false))
              barrier();
            }
           while(false);
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       while(false);
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
      }
    }
   while(false);
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if(((! (! (false)))))
      barrier();
     do
      {
       barrier();
      }
     while(false);
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (457 & 0); _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   do
    {
     if(true)
      {
       barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if(((false || (false))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1) / 1); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.z = workgroup_id;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
      }
     barrier();
    }
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if((false))
        barrier();
       barrier();
      }
     while(false);
    }
   if(true)
    {
     if((false))
      barrier();
     if((((false) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     do
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
      }
     while(false);
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if((((false) && true)))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((((false) || false)))
    barrier();
   if((false))
    barrier();
  }
 uint workgroup_base = _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.w * GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.z;
 GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.w = workgroup_base;
 GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz.y = GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.w;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz.y + GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.z + _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.y, _GLF_struct_7(_GLF_struct_5(uvec4(1u), vec3(1.0)), ivec4(1), _GLF_struct_6(uvec3(1u), vec4(1.0), mat4x2(1.0), 1u)));
 uint next_virtual_gid = GLF_merged2_0_3_73_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_sizeworkgroup_base.xyz.y + GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.z + ((_GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.z);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = ((1 << (int(5))) >> (((int(5)) * 1))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(false);
  }
 _GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.x = next_virtual_gid;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(5))); _injected_loop_counter --)
    {
     buf[_GLF_struct_replacement_8.virtual_gid] = 1;
    }
  }
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if(true)
    {
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
               if((false))
                barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       while(false);
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(false)
    {
    }
   else
    {
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != ((69627 & 0) ^ 0); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if((true && (false)))
      {
      }
     else
      {
       barrier();
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter != (0 ^ (((1 << (int(1))) >> (int(1))) ^ 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) << (int(3))); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
             barrier();
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), true))))
            {
            }
           else
            {
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              barrier();
            }
          }
         if((((false) || false)))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if(true)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          barrier();
         if(true)
          {
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
            }
           while((bool(bvec3(false, false, false))));
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_struct_replacement_3.GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_size.x], uint(2), 4, 64, 4);
  }
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if(true)
        {
         if((false))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((false || (true)))
                  {
                   if(false)
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                    }
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while((((false || (false))) && true));
            }
          }
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((false) && true)))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         do
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
             if(((bool(bvec2(false, true)))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while((! (! ((bool(bvec2(false, false)))))));
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
     if(((false || ((true && (false))))))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((bool(bvec4(false, true, false, false)))))
      barrier();
    }
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
