#version 460

struct _GLF_struct_0 {
 uint subgroup_size;
 mat4x3 _f0;
 mat2x4 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false || ((bool(bvec2((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), false))), ((injectionSwitch.x > injectionSwitch.y))))) || ((true && (((! ((! (! (! (((((bool((bvec3(bvec4(bvec3(false, false, true), true))))) || false))))))))))))))))
  return;
 if(((((true && (((true && ((bool(bvec2(((bool(bool(((((bool(bvec4((! (! (((bool(bvec2(bool(bvec4(((! (! (((bool(bool(((((((! (! (false))) ? (- 5.2) : injectionSwitch.x)) > (min(((injectionSwitch) * mat2(1.0)), injectionSwitch)).y) && true))))) || false))))) && true, false, false, false)), true))))))), false, true, false))) || false))))))) && true, true))))))))))))
  return;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupSize, mat4x3(1.0), mat2x4(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (uint(((uvec4(((gl_WorkGroupID.x) | 0u), 0u, 0u, ((min((~ (~ (((clamp((~ (~ ((max(1u << (uint(3u)), (((((0u + (1u))) >> 0u)) / 1u) << (uint(3u))))))), 1u << (uint(3u)), 1u << (uint(3u))))) >> (uint(3u))))), (1u << (uint(3u))) >> ((0u ^ (((uint(((true ? 3u : (subgroup_id))))) << 0u))))))))) / uvec4(1u, 1u, 1u, 1u))));
 uint workgroup_base = (clamp((max((min(((0u ^ (uint((~ (~ ((max(uint(workgroup_size * workgroup_id), uint(workgroup_size * workgroup_id)))))))))), (min(workgroup_size * workgroup_id, ((workgroup_size) >> 0u) * workgroup_id)))), (min(workgroup_size * workgroup_id, (min((min(workgroup_size * workgroup_id, ((workgroup_size) >> 0u) * workgroup_id)), (min(workgroup_size * workgroup_id, ((workgroup_size) >> 0u) * workgroup_id)))))))), (min(workgroup_size * workgroup_id, (min(workgroup_size * workgroup_id, ((0u + ((((false ? ((workgroup_size --)) : uint(uvec2((workgroup_size), 1u))))) >> 0u))) * workgroup_id)))), (((min(workgroup_size * workgroup_id, (min(workgroup_size * workgroup_id, ((((workgroup_size) >> 0u) / 1u)) * workgroup_id)))) << 0u))));
 uint virtual_gid = ((((workgroup_base + subgroup_id * _GLF_struct_replacement_0.subgroup_size) ^ 0u)) >> 0u) + subgroup_local_id;
 uint next_virtual_gid = (max(workgroup_base + ((subgroup_id) ^ 0u) * _GLF_struct_replacement_0.subgroup_size + ((uint(((uint(((~ (~ ((max(subgroup_local_id, subgroup_local_id)) + ((1) | 0))))) % _GLF_struct_replacement_0.subgroup_size)) + 0u)))), ((workgroup_base + ((subgroup_id) ^ 0u) * _GLF_struct_replacement_0.subgroup_size + ((uint(((uint(((~ (~ ((max(subgroup_local_id, subgroup_local_id)) + ((1) | 0))))) % _GLF_struct_replacement_0.subgroup_size)) + 0u))))) + 0u)));
 buf[virtual_gid] = (((((0 ^ ((((((~ (~ (((~ (~ ((1) << 0)))))))) ^ int((((injectionSwitch) - vec2(0.0, 0.0)).x)))) >> 0)))) | (0 | (0)))) / 1);
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
}
