#version 460

struct _GLF_struct_1 {
 uint virtual_gid;
 bvec2 _f0;
} ;

struct _GLF_struct_0 {
 uint subgroup_size;
 ivec3 _f0;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupSize, ivec3(1));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((! ((false || (! ((((bool(bvec4(false, true, true, false))) || ((bool(bool(false))))))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > ((vec2(1.0, 1.0) * ((vec2(vec3(max((vec2(1.0, 1.0) * (injectionSwitch)), ((false ? (injectionSwitch) : injectionSwitch))), 1.0)))))).y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((((((((false)) || false)) || false)) || false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((((bool((((injectionSwitch.x > injectionSwitch.y)) || ((((! (! ((! (! (bool(((injectionSwitch.x > injectionSwitch.y)))))))))) || false))))) && true))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = (max(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if(((((injectionSwitch.x < injectionSwitch.y)) && (((false)))) || false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((bool(bvec4(false, (bool((bvec2(bvec3(bvec2(true, false), true))))), false, false)))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if(((! (((! (((injectionSwitch.x > injectionSwitch.y)))) && true)))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec2(false, true)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1((max(workgroup_base + subgroup_id * (min(_GLF_struct_replacement_0.subgroup_size, _GLF_struct_replacement_0.subgroup_size)), workgroup_base + subgroup_id * (min((~ (~ ((min(_GLF_struct_replacement_0.subgroup_size, _GLF_struct_replacement_0.subgroup_size))))), _GLF_struct_replacement_0.subgroup_size)))) + subgroup_local_id, bvec2(((((bool(bvec2(bool(((((bool((bool((false || ((true && (bool(true))))))))) && true)) || false)), false))))) || false)));
 if((((injectionSwitch.x > ((max(float(mat3x4(injectionSwitch.y, determinant(mat2(0.0, 1.0, 0.0, (injectionSwitch.x))), (dot(vec3(0.0, 0.0, round(length(normalize(1.0)))), vec3(0.0, tan(0.0), 1.0))), 1.0, (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), abs(tan(0.0)), (dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), abs(0.0), 0.0, 0.0, (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0)), float(mat3x4(injectionSwitch.y, determinant(mat2(0.0, 1.0, 0.0, (injectionSwitch.x))), (dot(vec3(0.0, 0.0, round(length(normalize(1.0)))), vec3(0.0, tan(0.0), 1.0))), 1.0, (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), abs(tan(0.0)), (dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), abs(0.0), 0.0, 0.0, (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0)))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = ((0u << (uint(6u))) ^ (((((workgroup_base)) | (((~ (~ (workgroup_base)))))) | (workgroup_base)) + subgroup_id * _GLF_struct_replacement_0.subgroup_size + ((~ (~ ((subgroup_local_id + 1)))) % _GLF_struct_replacement_0.subgroup_size)));
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((true && ((false))))
  {
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((true && ((false))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, (((! ((true && (! (true)))))) || false), (((bool(bvec4((((((injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4((true), false, true, true))))) && true), ((injectionSwitch.x > (float(mat2x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), true, true))) && true)))))))))
  barrier();
 if((false))
  {
   if(((bool(bvec2(false, false)))))
    barrier();
   if((((bool((bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if(((((false || ((vec2(0.0, 0.0) + ((max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((false)) || (false || (((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((false || (((! ((bool(bvec4(! (true), false, false, false))))) && (((injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     if((false))
      barrier();
     if(((((((clamp(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * ((((mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))) - mat2(0.0, 0.0, 0.0, 0.0))), ((injectionSwitch) * mat2(1.0))))) - vec2(((0.0) - 0.0), 0.0)).x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((bool(bvec2((false), true))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if(((! (! ((false || (false)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((! (! (bool(bvec2((bool(bvec2(false, true))), (true && ((bool(bvec2(((true && (bool(bvec4(false, true, false, false))))), false)))))))))))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((! ((! (! (bool(bvec4((! (false)), false, true, true)))))))))
  {
   if(((bool((bvec2(bvec3(bvec2(false, (((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((false) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((((bool(bvec3((false || ((((injectionSwitch.x > injectionSwitch.y))))), false, false))) && true)))
      barrier();
     if((false))
      barrier();
    }
  }
 if(((((((min(injectionSwitch.x, (max(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x))) - 0.0) > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((! ((((bool(bvec4(! (! (! ((false)))), false, (bool((bvec3(bvec4(bvec3(true, true, ((injectionSwitch.x < injectionSwitch.y))), true))))), false))) && true))))))
    {
     if((false))
      barrier();
     barrier();
     if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((bool(bool((false)))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[_GLF_struct_replacement_1.virtual_gid] = 1;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if(((! ((bool(bvec2(! (false), false)))))))
    barrier();
   if(((((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y) && true)))))
    {
     if((((((injectionSwitch.x > (((true ? vec2(mat2(((injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0)) : (vec2(6265.2804, - 76.76))))).y))) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > (((float(mat4x2((min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)))) / 1.0)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > (max((clamp((clamp((float(mat4(injectionSwitch.y, 1.0, ((1.0) - sin(0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), (float(mat4((vec2((float(mat2x4(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, (1.0 * (sqrt(1.0)))))), injectionSwitch[1])).y, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), (float(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, ((1.0) * 1.0), 1.0, 0.0, 0.0))))), (max(injectionSwitch.y, (max((min(injectionSwitch.y, injectionSwitch.y)), (min(injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y)))))))), injectionSwitch.y)), (clamp((clamp((float(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), (float(mat4((vec2((float(mat2x4(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, (mix(float((- 0.3)), float(1.0), bool(true))), sqrt(1.0)))), injectionSwitch[1])).y, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), (float(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, (clamp((max(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 1.0, ((1.0) * 1.0), 1.0, 0.0, 0.0))))), (max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((bool(bvec2((false), false))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(((((clamp((clamp(injectionSwitch, (vec2(1.0, 1.0) * (injectionSwitch)), ((injectionSwitch) / vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bool((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}
