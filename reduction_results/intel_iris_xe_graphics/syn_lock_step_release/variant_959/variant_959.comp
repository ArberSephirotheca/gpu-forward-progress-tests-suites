#version 460

struct _GLF_struct_13 {
 bool _f0;
 vec2 _f1;
 bvec3 _f2;
 bvec2 _f3;
 float _f4;
 mat3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_12 {
 mat2x4 _f0;
 float _f1;
 mat2 _f2;
 mat2 _f3;
 mat2 _f4;
 vec2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 ivec3 _f1;
 uint workgroup_id;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 vec2 _f1;
 ivec4 _f2;
 ivec4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_13 _f3;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
} ;

struct _GLF_struct_6 {
 uvec4 _f0;
} ;

struct _GLF_struct_5 {
 int _f0;
 vec2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 mat4x3 _f1;
 uvec3 _f2;
 float _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 ivec4 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2x3 _f2;
 _GLF_struct_2 _f3;
 mat3x2 _f4;
 uvec2 _f5;
 float _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_3 _f0;
 mat3x2 _f1;
 uint num_workgroup;
 _GLF_struct_8 _f2;
 mat2 _f3;
 bvec3 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
       return;
      }
     barrier();
    }
   if((false))
    return;
   return;
   if(true)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != ((min(int(ivec4(0, 0, 0, 0)), int(ivec4(0, 0, 0, 0))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          return;
        }
      }
    }
   else
    {
    }
  }
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) & - 84942); _injected_loop_counter --)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
          }
        }
       barrier();
       for(int _injected_loop_counter = ((1 << ((clamp(int(4), int(4), int(4))))) >> (int(4))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         do
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     else
      {
      }
     return;
     if(((! ((bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), true)))))))
      return;
     if((false))
      {
       if((((false) || false)))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((false))
        return;
       do
        {
         return;
        }
       while(false);
      }
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
       do
        {
         if((false))
          return;
        }
       while(false);
      }
    }
   barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           return;
          }
         while(false);
        }
       while(false);
      }
     while(false);
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
      }
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
    }
  }
 while(false);
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(true)
  {
   if(false)
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(false);
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
       else
        {
        }
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     barrier();
                    }
                  }
                 do
                  {
                   return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             else
              {
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
               if((false))
                break;
              }
             while(false);
             if((false))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 return;
                }
              }
             if(((! (! (false)))))
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
          }
        }
       while((bool(bvec2(false, false))));
      }
    }
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 | int((injectionSwitch.x))) >> (int(3))); _injected_loop_counter --)
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if((((false) || false)))
    barrier();
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    barrier();
   if((false))
    break;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     for(int _injected_loop_counter = ((1) >> 0); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((false) || false)))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      return;
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          break;
         barrier();
        }
       do
        {
         if((false))
          continue;
         if(((bool(bool(false)))))
          {
           if((false))
            barrier();
           continue;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
             else
              {
              }
            }
          }
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              barrier();
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           barrier();
          }
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if(((! (! (false)))))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if((false))
        break;
       if(((bool(bool(false)))))
        {
         for(int _injected_loop_counter = (int((injectionSwitch.x)) | (((1) << 0))); _injected_loop_counter > (0 << (int(3))); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if((false))
          break;
        }
      }
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 return;
                }
              }
             else
              {
              }
            }
           barrier();
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        break;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      break;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        continue;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(true)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      break;
     if((false))
      continue;
     continue;
    }
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
      {
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            continue;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if(true)
                {
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(true)
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if((false))
                barrier();
              }
            }
          }
        }
       while(false);
      }
    }
   while((true && (false)));
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((! (! (false)))))
  {
   if((false))
    {
     do
      {
       do
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(false);
     do
      {
       if((false))
        return;
      }
     while(false);
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   do
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       else
        {
        }
      }
    }
   while(false);
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if(true)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
        }
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               return;
              }
            }
          }
        }
       barrier();
      }
     barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if(((((bool(bvec3(false, false, true)))) || false)))
        return;
      }
     do
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
        }
       while(false);
      }
     while(false);
    }
   barrier();
  }
 if(((true && (((false) && true)))))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        {
         for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           return;
          }
        }
       if((false))
        return;
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   while(false);
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  {
   do
    {
     do
      {
       do
        {
         return;
        }
       while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
      }
     while(false);
    }
   while(false);
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(false);
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
      return;
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((true && (false))))
          continue;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             for(int _injected_loop_counter = ((1 << ((int(int(int(5)))))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
       if(((false || (false))))
        break;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
     if(((false || (false))))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    return;
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if((! (((! (true)) || false))))
      {
       barrier();
      }
     else
      {
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_3(_GLF_struct_0(vec4(1.0)), _GLF_struct_1(ivec3(1)), mat2x3(1.0), _GLF_struct_2(vec3(1.0)), mat3x2(1.0), uvec2(1u), 1.0), mat3x2(1.0), gl_NumWorkGroups.x, _GLF_struct_8(_GLF_struct_4(mat2x4(1.0), mat4x3(1.0), uvec3(1u), 1.0), _GLF_struct_5(1, vec2(1.0), vec2(1.0)), ivec4(1), _GLF_struct_6(uvec4(1u)), _GLF_struct_7(mat4x2(1.0))), mat2(1.0), bvec3(true));
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(true)
    {
     if(true)
      {
       if((false))
        {
         if(true)
          {
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           else
            {
            }
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               return;
              }
            }
           if((false))
            return;
           return;
          }
        }
       barrier();
      }
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     if(true)
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     else
      {
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            continue;
           return;
          }
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(1))); _injected_loop_counter --)
            {
             do
              {
               if(true)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = (0 >> ((clamp(int(8), (int(int(int(8)))), ((int(8)) * 1))))); _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         barrier();
                         if((false))
                          barrier();
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(true)
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           if((false))
                            {
                             if(true)
                              {
                               if((false))
                                break;
                               return;
                               if((false))
                                {
                                 if(((injectionSwitch.x < injectionSwitch.y)))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                   continue;
                                  }
                                 barrier();
                                }
                              }
                             else
                              {
                               if((false))
                                barrier();
                               if((false))
                                break;
                              }
                             if((false))
                              barrier();
                            }
                           do
                            {
                             if((false))
                              break;
                             return;
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         if((((false) || false)))
                          barrier();
                         if((false))
                          continue;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(true)
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(((bool(bvec4(((false) && true), true, false, false)))))
                            barrier();
                           barrier();
                          }
                         if((false))
                          return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if((false))
                          {
                           if(false)
                            {
                             if((false))
                              continue;
                            }
                           else
                            {
                             if((false))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             do
                              {
                               barrier();
                              }
                             while(false);
                             if((false))
                              barrier();
                             if(((! (! (false)))))
                              continue;
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         for(int _injected_loop_counter = ((1 << ((0 ^ (int(2))))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           if((false))
                            {
                             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (((true ? int(4) : (2670))))); _injected_loop_counter --)
                            {
                             do
                              {
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                }
                               else
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             while(false);
                             if((false))
                              return;
                            }
                           if(true)
                            {
                             for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(0))); _injected_loop_counter < (1 & (1 | 1)); _injected_loop_counter ++)
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    {
                                     if(((injectionSwitch.x < injectionSwitch.y)))
                                      {
                                       return;
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                         if((false))
                          return;
                        }
                      }
                     else
                      {
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if((false))
                      return;
                    }
                  }
                 if(false)
                  {
                   if((false))
                    continue;
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             while(false);
             if((false))
              barrier();
            }
          }
         else
          {
          }
        }
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if(false)
        {
        }
       else
        {
         return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if(((false || (false))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             return;
            }
          }
        }
       if(((bool(bvec2(false, false)))))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             return;
            }
           if((false))
            return;
          }
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                }
               barrier();
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             else
              {
              }
             if(((true && (false))))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(false);
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(true)
          {
           for(int _injected_loop_counter = ((int((injectionSwitch.x)) << (int(1))) | int((injectionSwitch.y))); _injected_loop_counter != (0 ^ (0 >> (int(4)))); _injected_loop_counter --)
            {
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               barrier();
              }
            }
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(true)
        {
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 if(true)
                  {
                   if((false))
                    continue;
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                continue;
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ (1 | 0)); _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       return;
                       if((false))
                        break;
                      }
                    }
                  }
                 if((false))
                  break;
                 if(true)
                  {
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    continue;
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     return;
                    }
                   if((false))
                    break;
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if((false))
              continue;
             if((false))
              barrier();
             if((false))
              return;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               do
                {
                 do
                  {
                   do
                    {
                     if((false))
                      {
                       do
                        {
                         return;
                        }
                       while(false);
                      }
                    }
                   while(false);
                  }
                 while(false);
                }
               while(false);
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
      }
     else
      {
       if((false))
        {
         do
          {
           for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter != ((1 << (int(1))) >> ((1 * (int(1))))); _injected_loop_counter ++)
            {
             return;
             if((false))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(false)
          {
          }
         else
          {
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      return;
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((0 >> (int(2))) ^ ((1 << (int(6))) >> (((int(6)) ^ 0)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter < ((((1 << (int(2))) >> (int(2))) << (int(0))) >> (int(0))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((bool(bvec4(false, false, true, false))))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = ((((1 << (int(2))) >> (int(2)))) * 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               return;
              }
            }
          }
        }
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
          }
         return;
        }
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((bool(bool(false))) && true)))
          {
          }
         else
          {
           if((false))
            return;
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if(((((false) && true)) || false))
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             if(((! ((! (! (! (false))))))))
              {
               if((false))
                break;
               if((false))
                return;
               if((false))
                return;
               if((false))
                continue;
               barrier();
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       barrier();
      }
     if(((! (! (false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(true)
          {
           return;
           if(true)
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if(((bool(bvec4((false || (false)), ((injectionSwitch.x < injectionSwitch.y)), false, true)))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if(((bool(bvec4(false, false, true, false)))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(((bool(bvec3(false, true, false)))))
        return;
      }
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
       do
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
       if(true)
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             do
              {
               return;
              }
             while(false);
            }
          }
        }
       else
        {
         if((false))
          barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(true)
  {
   if(true)
    {
     if((false))
      return;
     if((false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(true)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
     while(false);
    }
  }
 else
  {
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(true)
        {
         if((false))
          return;
         barrier();
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         if((false))
          return;
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_14(_GLF_struct_10(uvec4(1u), vec2(1.0), ivec4(1), ivec4(1), mat3x2(1.0)), _GLF_struct_11(ivec2(1), ivec3(1), gl_WorkGroupID.x), _GLF_struct_12(mat2x4(1.0), 1.0, mat2(1.0), mat2(1.0), mat2(1.0), vec2(1.0), bvec2(true)), _GLF_struct_13(true, vec2(1.0), bvec3(true), bvec2(true), 1.0, mat3(1.0), ivec2(1))));
 if((false))
  {
   do
    {
     barrier();
    }
   while((! (((! (false)) || false))));
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_15._f0._f1.workgroup_id;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((((bool(bvec4(false, false, true, true)))) && ((injectionSwitch.x < injectionSwitch.y)))))
        return;
       barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | int((injectionSwitch.y))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          break;
         if((false))
          {
           do
            {
             if((false))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           barrier();
          }
        }
      }
     else
      {
      }
     return;
    }
   return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if(false)
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if(true)
          {
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            barrier();
           if((false))
            {
             if(((bool(bvec2(false, false)))))
              barrier();
             return;
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = ((- 70433 & 0) >> (int(8))); _injected_loop_counter != ((1 << (int(4))) >> ((((max(int(4), int(4)))) ^ 0))); _injected_loop_counter ++)
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       do
        {
         if(false)
          {
          }
         else
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 | (0 | 1)) & 1); _injected_loop_counter ++)
              {
               if(false)
                {
                }
               else
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      {
                       if(((((bool(bvec3(false, true, false)))) || false)))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
        }
       while(false);
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y)) || (true)))
      {
       return;
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      continue;
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      {
       if(false)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
          }
        }
       else
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         return;
         for(int _injected_loop_counter = (0 >> (((((int(4)) | (int(4)))) >> 0))); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(true)
          {
           if((false))
            continue;
           if((false))
            {
             do
              {
               if(true)
                {
                 do
                  {
                   if((false))
                    return;
                  }
                 while(false);
                 do
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   do
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   while((false || (false)));
                  }
                 while(false);
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                return;
               barrier();
              }
             if((false))
              {
               if(((bool(bvec3(false, false, false)))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               continue;
              }
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
          }
        }
       if(((true && ((bool(bvec3(false, true, true)))))))
        {
         if((false))
          barrier();
         if(((false || (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if((false))
        {
         if(true)
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
            {
             if(((! (! (false)))))
              return;
            }
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
           barrier();
           if((false))
            continue;
          }
         if(false)
          {
           if((false))
            barrier();
           if(((((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))) && true)))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
             if(((! (! (false)))))
              barrier();
             if((false))
              return;
            }
          }
         else
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                continue;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((false) && true)))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     if((false))
                      barrier();
                     if((false))
                      return;
                     return;
                     if((false))
                      barrier();
                    }
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if(((! (! (false)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             for(int _injected_loop_counter = ((false ? (- 79595) : 1)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         barrier();
         if((false))
          continue;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            break;
           break;
          }
        }
       if((false))
        {
         if((false))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             barrier();
            }
           if((false))
            break;
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < (int(int(1))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if((false))
          continue;
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
        }
       if((false))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             barrier();
            }
          }
        }
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        break;
       if((false))
        continue;
       if((false))
        {
         if(true)
          {
           return;
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if((false))
        continue;
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      break;
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      continue;
     if((false))
      barrier();
     if((false))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         break;
        }
       continue;
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < ((1 << (((int(1)) - 0))) >> (int(1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if(true)
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           else
            {
            }
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          continue;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         else
          {
          }
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((false))
        barrier();
       barrier();
      }
     if((false))
      break;
     if((false))
      break;
     if((false))
      {
       if((false))
        {
         if(true)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if((false))
          return;
         for(int _injected_loop_counter = (0 ^ (1 | 1)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        break;
       barrier();
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((false))
        {
         if(((! (! (false)))))
          {
           if((false))
            break;
           break;
          }
         if((false))
          return;
         barrier();
        }
       if(true)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((false))
          break;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
       if((false))
        continue;
       do
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(false);
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     if((false))
      break;
     if((false))
      {
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         while((true && (false)));
         barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       return;
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       do
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
    }
   while(false);
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(false);
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       return;
       if((false))
        return;
      }
    }
  }
 while(false);
 if((false))
  return;
 do
  {
   if(true)
    {
     if((false))
      return;
     for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              continue;
             barrier();
            }
          }
         else
          {
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((false) && true)))
          barrier();
         if((false))
          continue;
         for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(4))) >> (int(4))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((false) && true)))
        {
         if((false))
          continue;
         break;
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (- 76949 & 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               if(((true) && true))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > (min(0, 0)); _injected_loop_counter --)
                    {
                     if((false))
                      continue;
                     buf[virtual_gid] = 1;
                    }
                  }
                }
               else
                {
                }
              }
             if(((! (! ((bool(bool(false))))))))
              continue;
            }
          }
        }
       if((false))
        {
         if(((bool(bvec2(false, true)))))
          break;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         break;
        }
       if(((bool(bvec3(false, true, false)))))
        {
         if(false)
          {
           if((false))
            continue;
          }
         else
          {
           barrier();
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((false))
          break;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((! (! (false)))))
            {
             if(true)
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              break;
             if(true)
              {
               do
                {
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               while(false);
              }
             else
              {
              }
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             barrier();
            }
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          break;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      {
       if((((false) && true)))
        {
         do
          {
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(false)
          {
           if((false))
            break;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        continue;
      }
     if((false))
      {
       do
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(false);
      }
     if(true)
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if((false))
        {
         if((! (! (false))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
  }
 while(false);
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     do
      {
       do
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       while(false);
      }
     while(false);
    }
  }
 while(false);
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != (0 << ((min(int(3), int(3))))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(false);
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(false);
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(2))); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       do
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if((false))
                break;
               barrier();
               do
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                 while(false);
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(false);
            }
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        continue;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if((false))
          {
           do
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(false);
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          return;
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if((false))
          {
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
          }
         if((false))
          return;
         if((false))
          continue;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(false)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if((false))
                {
                 for(int _injected_loop_counter = ((1 << (int(7))) >> (((false ? (_injected_loop_counter) : int(7))))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             while((! (! (false))));
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            continue;
           if((false))
            barrier();
           if((false))
            continue;
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                return;
               if(true)
                {
                 barrier();
                 if((false))
                  break;
                }
               else
                {
                }
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
        }
       while(false);
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
   if((false))
    break;
  }
 for(int _injected_loop_counter = ((1 << (((int(1)) + 0))) >> (int(1))); _injected_loop_counter > (0 << (int(2))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
  }
}
