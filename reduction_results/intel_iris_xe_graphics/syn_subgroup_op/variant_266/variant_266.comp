#version 460

struct _GLF_struct_4 {
 mat2x4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 ivec3 _f2;
 bvec4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_2 {
 int _f0;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 _GLF_struct_0 _f1;
 mat2 _f2;
 vec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_6 {
 bool _f0;
 _GLF_struct_1 _f1;
 mat3 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_5 _f4;
 uint subgroup_size;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(true, _GLF_struct_1(mat4(1.0), _GLF_struct_0(mat2x4(1.0)), mat2(1.0), vec2(1.0), true), mat3(1.0), _GLF_struct_2(1), _GLF_struct_5(_GLF_struct_3(ivec2(1), vec4(1.0)), _GLF_struct_4(mat2x4(1.0), mat4x2(1.0)), ivec3(1), bvec4(true), uvec3(1u)), gl_SubgroupSize);
 if((false))
  barrier();
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      break;
     if((false))
      barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter < ((0 >> (int(2))) ^ 1); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = (0 >> (((int(2)) << 0))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((bool(bvec3(false, true, true)))))
          {
           if((false))
            break;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              return;
             return;
            }
           if((false))
            barrier();
           if((false))
            continue;
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(4))) >> ((clamp(int(4), int(4), int(4))))); _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              {
               if((false))
                return;
               barrier();
              }
            }
           return;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if((false))
            barrier();
           if((false))
            continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            return;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           if(((! (! (false)))))
            barrier();
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            return;
          }
         while(false);
         if((false))
          {
           for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
            {
             if((false))
              return;
             barrier();
            }
          }
        }
       else
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        barrier();
       if((false))
        break;
       do
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             do
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((((injectionSwitch.x > injectionSwitch.y))) || false));
            }
          }
        }
       while(false);
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     if((false))
      continue;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if((false))
          barrier();
        }
       continue;
      }
     barrier();
     if((false))
      continue;
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     return;
    }
  }
 while(false);
 do
  {
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = (- 11412 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        continue;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              return;
             if(((false || (false))))
              barrier();
            }
           else
            {
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             if(((((! (! (false)))) || false)))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 do
                  {
                   if((false))
                    break;
                   return;
                   if((false))
                    continue;
                  }
                 while(false);
                }
               if((false))
                return;
              }
             while((! (! (false))));
             if((false))
              {
               if(((! (! (false)))))
                barrier();
               barrier();
              }
             if((false))
              continue;
             if((false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         barrier();
        }
       if((false))
        break;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if((false))
        continue;
       if((false))
        {
         if((false))
          {
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((bool(bvec4(false, false, false, true)))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
               if((false))
                barrier();
              }
            }
           while(false);
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
            {
             return;
             if((false))
              {
               if(((true && (false))))
                break;
               barrier();
              }
            }
           if((false))
            break;
           if((false))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              return;
            }
          }
         if((false))
          {
           if(((false) || ((injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if((false))
              barrier();
             return;
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                return;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               barrier();
              }
            }
           barrier();
          }
         do
          {
           if((false))
            barrier();
           do
            {
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  {
                   if((false))
                    return;
                   continue;
                  }
                 if((false))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                 if((false))
                  continue;
                }
               else
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    {
                     if((false))
                      break;
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              continue;
            }
           while(false);
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         return;
         if(true)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < (((0 ^ 1) << (((true ? int(4) : (_injected_loop_counter))))) >> (int(4))); _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       do
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if((false))
            break;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               if((false))
                barrier();
               break;
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              {
               if((false))
                return;
               if((false))
                barrier();
               do
                {
                 barrier();
                }
               while(false);
              }
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               return;
               if((false))
                barrier();
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             if(((bool(bvec2(false, false)))))
              {
               if((false))
                {
                 if((false))
                  break;
                 barrier();
                }
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
            }
          }
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         continue;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if((false))
          continue;
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((false))
          return;
         if((false))
          continue;
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              break;
             if((false))
              barrier();
            }
           else
            {
             if((false))
              break;
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    break;
                   barrier();
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             barrier();
            }
          }
         while(false);
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if((false))
          {
           if((false))
            {
             if((false))
              break;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(((((bool(bvec4(false, false, false, true))) && true))))
                barrier();
              }
             continue;
            }
           barrier();
          }
        }
      }
    }
   if((false))
    continue;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((~ (~ (int(1)))))) >> (int(1))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      break;
     barrier();
    }
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        continue;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(true)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(((true && (false))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((false) && true)))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       do
        {
         return;
        }
       while(false);
      }
     if((false))
      barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((true && (false))))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   return;
  }
 if(((true && (false))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        return;
      }
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
        }
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if(true)
          {
           if((false))
            {
             if(((! (! (false)))))
              return;
             barrier();
            }
           if((bool(bvec3(true, false, true))))
            {
             return;
             if((false))
              return;
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (false))))
        return;
       barrier();
      }
     if(true)
      {
       if(false)
        {
        }
       else
        {
         if((((false) || false)))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if((((false) || false)))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + subgroup_local_id;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     return;
    }
  }
 do
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     return;
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    return;
  }
 if((false))
  {
   if(true)
    {
     if(true)
      {
       barrier();
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      return;
     if((false))
      barrier();
    }
   else
    {
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    continue;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != (0 << (int(4))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             return;
            }
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        return;
      }
     do
      {
       if((false))
        {
         if((false))
          break;
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       for(int _injected_loop_counter = (clamp(0, 0, 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
            {
             if((false))
              continue;
             return;
             if((false))
              barrier();
            }
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
     if((! (! (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(((true && (false))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
  }
 for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if(((! (! (false)))))
    {
     if((false))
      return;
     do
      {
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       do
        {
         if((((true && (bool(bvec3(false, true, true)))))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
        }
       while(false);
       if((false))
        barrier();
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          break;
         barrier();
        }
       if((false))
        break;
       if((false))
        continue;
      }
     if((false))
      return;
     if(((bool(bool(false)))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(false);
      }
    }
   if((false))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = (max((0 & - 76504), (0 & - 76504))); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
      {
       if((((false) || false)))
        continue;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             barrier();
            }
           while(false);
          }
         return;
        }
      }
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
   if(((((bool(bvec2(false, true)))) || false)))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
            }
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if((false))
            barrier();
          }
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
        }
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        continue;
       barrier();
      }
     while(false);
     if((false))
      return;
    }
   if((false))
    break;
  }
 while(false);
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   buf[virtual_gid] = 1;
   if((false))
    {
     if((false))
      barrier();
     break;
    }
   if((false))
    continue;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((false || (false))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          break;
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                 if((false))
                  continue;
                }
               else
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  break;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(((false || (false))))
                    {
                     if((false))
                      continue;
                     barrier();
                    }
                   barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    {
                     if(((bool(bvec3(false, false, true)))))
                      break;
                     barrier();
                    }
                   if(false)
                    {
                     if((false))
                      return;
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(((! (! ((! (! (false))))))))
                      barrier();
                     if((((false) || false)))
                      return;
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
             return;
            }
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        return;
       if((((true && (bool(bvec3((bool(bvec4(false, false, true, true))), false, false)))))))
        {
         if((false))
          barrier();
         if((false))
          break;
         do
          {
           if((false))
            {
             for(int _injected_loop_counter = ((1 << (((int(0)) ^ 0))) >> (int(0))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((false))
              continue;
             if((false))
              barrier();
             if((false))
              return;
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                break;
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(true)
              {
               return;
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(((((injectionSwitch.x > injectionSwitch.y)) || ((false || (false))))))
                        {
                         if((false))
                          continue;
                         if((false))
                          barrier();
                         barrier();
                        }
                       if(((bool(bvec3(((false) || false), true, false)))))
                        barrier();
                      }
                     while(false);
                     if((false))
                      break;
                    }
                   while(false);
                   if(((! (! (false)))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     continue;
                    }
                   barrier();
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 return;
                 if((false))
                  barrier();
                 if(((false || (false))))
                  barrier();
                }
              }
             else
              {
              }
             if((((false) || false)))
              return;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                continue;
               if((false))
                {
                 for(int _injected_loop_counter = ((0) / ((1 << (int(7))) >> (int(7)))); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    return;
                   barrier();
                  }
                }
               return;
              }
            }
           if((false))
            continue;
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            continue;
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         barrier();
         if((false))
          {
           do
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(false);
          }
        }
      }
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     do
      {
       if(((bool(bvec4(false, false, ((injectionSwitch.x > injectionSwitch.y)), true)))))
        continue;
       if((false))
        return;
       if((false))
        barrier();
      }
     while(false);
    }
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 do
  {
   if((false))
    barrier();
  }
 while(false);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_6.subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != ((((1 << (int(7))) >> (int(7))) << ((min(int(4), int(4))))) >> (int(4))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(((bool((bvec2(bvec4(bvec2(false, true), true, false)))))))
          barrier();
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   do
    {
     if((false))
      {
       if((true && (true)))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
       if((false))
        barrier();
      }
    }
   while((false || (false)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((false || (false))))
      barrier();
     barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bool(false)))))
          continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
           if((false))
            continue;
          }
        }
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     if((false))
      break;
    }
   if((false))
    barrier();
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(((true && (false))))
      return;
    }
   if(((((! (! (false)))) || ((injectionSwitch.x > injectionSwitch.y)))))
    {
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (((false ? (50923) : int(2))))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     buf[next_virtual_gid] = 2;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      continue;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     subgroupAll(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        continue;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             do
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((! (! (false))))
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
              }
             while(false);
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         return;
        }
       do
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           continue;
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           barrier();
          }
        }
       while(false);
       if((false))
        continue;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(false);
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       buf[next_virtual_gid] = 2;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      continue;
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          continue;
        }
      }
     else
      {
      }
     if((false))
      break;
     if((false))
      {
       if((false))
        continue;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          break;
        }
       else
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
        }
      }
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if((false))
    {
     if(((bool(bvec4(false, true, true, true)))))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((((int(2)) | 0)) | 0))) >> (int(2))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        break;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
           if((false))
            {
             if((((false) || false)))
              break;
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
         if((false))
          continue;
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         if((false))
          barrier();
        }
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         subgroupAll(true);
        }
      }
     else
      {
      }
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(((! (! ((true && (false)))))))
    {
     do
      {
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      return;
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
       if((false))
        return;
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               barrier();
              }
             while((! (! ((true && (false))))));
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            continue;
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(false);
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(((! ((bool(bvec4(! (false), true, true, true)))))))
            barrier();
           return;
          }
        }
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        continue;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        continue;
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           if(((! (! ((bool(bool(false))))))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       else
        {
        }
      }
     while(false);
    }
   if((true && (true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((((false) && true)))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            return;
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              return;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((! (! (false)))))
                return;
               return;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(false);
       if((false))
        return;
       if((false))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))) && true))))
          barrier();
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
        }
       if((false))
        {
         if((false))
          break;
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       break;
       if((false))
        {
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         break;
        }
       if((false))
        break;
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(((bool(bvec3((! (! (false))), false, true)))))
            barrier();
           if((((false) || false)))
            return;
           barrier();
          }
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if((false))
      return;
    }
   else
    {
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           continue;
          }
         for(int _injected_loop_counter = (0 & - 16032); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             barrier();
             if((((false) || false)))
              barrier();
            }
          }
         barrier();
         if((false))
          break;
         if((false))
          barrier();
         if((false))
          return;
         for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != ((false ? (- 95919) : int((injectionSwitch.y)))); _injected_loop_counter ++)
          {
           if((false))
            return;
           if((false))
            barrier();
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              break;
             barrier();
            }
          }
         if((false))
          {
           if(((((false || (false))) && true)))
            break;
           return;
          }
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           do
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if(((bool(bvec4(false, false, true, false)))))
                return;
               return;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         continue;
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = (((int((injectionSwitch.x))) << 0) ^ (1 & 1)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        return;
       if((false))
        continue;
       if(((bool(bvec4((! (! (((injectionSwitch.x > injectionSwitch.y))))), false, true, true)))))
        return;
       barrier();
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           do
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if(((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             if((false))
              barrier();
            }
           while(false);
           return;
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if((false))
            break;
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           break;
          }
         if(((! (! (false)))))
          barrier();
         if((false))
          continue;
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
       if(true)
        {
         if((false))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             barrier();
             if((false))
              {
               if((false))
                break;
               barrier();
              }
            }
          }
         if((false))
          break;
        }
       else
        {
        }
       if((false))
        {
         if(((true && (false))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(((((bool(bvec3(false, true, false)))) && true)))
                continue;
               barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if((false))
              barrier();
             break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          continue;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        break;
      }
     do
      {
       if(((true && ((bool(bool(false)))))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         barrier();
        }
      }
     while(false);
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       barrier();
      }
     barrier();
     if((false))
      break;
    }
   if((false))
    continue;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   return;
   if((false))
    barrier();
  }
 if(true)
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         do
          {
           if(((((! (! (false)))) && true)))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
          }
         while(false);
        }
       if(true)
        {
         barrier();
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if(((! (! (false)))))
          return;
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((0 ^ 1) & 1); _injected_loop_counter ++)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
        }
      }
     barrier();
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          break;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        continue;
      }
     while(false);
    }
  }
 else
  {
  }
 if((false))
  barrier();
}
