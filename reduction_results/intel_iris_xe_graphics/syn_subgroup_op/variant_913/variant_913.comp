#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((bool(((! (! (! (! (bool(((false || (false)))))))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(((((true && (false || (false || ((! (! (! ((((((! (((((((max((injectionSwitch.x) / 1.0, (injectionSwitch.x) / 1.0))) > (clamp(injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y)), (mix(float((42.87)), float(injectionSwitch.y), bool(true)))))))) && true)))) && true))) || false))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((gl_NumWorkGroups.x)) + 0u) | (gl_NumWorkGroups.x));
 if((false))
  return;
 if((false))
  return;
 uint workgroup_size = (clamp((uvec3(gl_WorkGroupSize[((0) * 1)], (~ (~ ((min(gl_WorkGroupSize, gl_WorkGroupSize)))))[1], gl_WorkGroupSize[2])), gl_WorkGroupSize, ((true ? gl_WorkGroupSize : (uvec3(108135u, 114928u, 164902u)))))).x;
 if(((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((workgroup_size) | ((clamp(workgroup_size, workgroup_size, workgroup_size)))) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * (0u | ((0u ^ (subgroup_size)))) + subgroup_local_id;
 if(((((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))
  {
   if((((((((((injectionSwitch.x > injectionSwitch.y)) ? (1.6) : (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) - 0.0) > injectionSwitch.y))))
    {
     if((false))
      return;
     if(((true && ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = (~ (~ (1)));
 if((false))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   buf[next_virtual_gid] = 2;
   subgroupAll((true && (false)));
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
  }
 else
  {
   buf[next_virtual_gid] = 2;
   if(((((! (! (true && (((! (false || ((true && ((((((! ((! (! ((((false || (bool(bvec4(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))) || false), true, true, true))))) && true)))))) || false))) && true)))))))))))))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(((bool(bool(false)))))
        return;
       if((((false) && true)))
        return;
       return;
      }
     return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((false || ((bool(bvec3(false, true, false)))))))
      return;
    }
   subgroupAll(true);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
}
