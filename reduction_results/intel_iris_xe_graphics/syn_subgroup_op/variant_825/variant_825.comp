#version 460

struct _GLF_struct_9 {
 uvec3 _f0;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 mat2 _f1;
 int _f2;
 bool _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 ivec3 _f1;
 _GLF_struct_8 _f2;
 mat2x4 _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat3x4 _f1;
 mat3x2 _f2;
 bvec4 _f3;
 int _f4;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 bvec4 _f1;
 uvec4 _f2;
 bvec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 float _f1;
 _GLF_struct_4 _f2;
 ivec3 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
} ;

struct _GLF_struct_3 {
 uint _f0;
 vec4 _f1;
 vec3 _f2;
 mat2x4 _f3;
 _GLF_struct_0 _f4;
 _GLF_struct_1 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_11 {
 uint subgroup_size;
 _GLF_struct_3 _f0;
 bvec3 _f1;
 uint _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_10 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(gl_SubgroupSize, _GLF_struct_3(((false ? (subgroup_id) : 1u)), ((vec4(((false ? (mat3(- 5.8, 7.7, 8.5, - 5.4, 4.3, 9.7, - 8.7, - 6.5, - 83.74)) : (transpose(((false ? (mat3(- 49.60, - 4.3, 6414.1010, - 46.08, 880.480, 0.3, - 5.7, - 4.3, 720.524)) : (mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (transpose(mat3((((vec4(vec4((((mix(vec4((min(vec4((clamp(1.0, 1.0, 1.0))), vec4(1.0)))[0], (min(vec4((clamp(1.0, 1.0, 1.0))), vec4(1.0)))[1], (- 7.3), (min(vec4((clamp(1.0, 1.0, 1.0))), vec4(1.0)))[3]), vec4((- 8.3), (- 3401.5897), (min(vec4((clamp(1.0, 1.0, 1.0))), vec4(1.0)))[2], (8.5)), bvec4(false, false, true, false)))) - vec4(0.0, 0.0, 0.0, 0.0)))))) - vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0))))))))))))), ((false ? (vec3(33.90, - 207.662, 8591.9563)) : (((! (! (true))) ? vec3(1.0) : ((min(vec3(- 9.7, - 6.2, - 1941.0909), vec3(- 9.7, - 6.2, - 1941.0909)))))))), mat2x4(1.0), _GLF_struct_0(mat3x4((max(1.0, 1.0)))), _GLF_struct_1(ivec3(1), uvec3(1u)), _GLF_struct_2(bvec3((! (((! (((bool(bvec2((bool(bvec2((! (((! (! (true && (! ((((true) || false)))))))))), true))), false))) && true))) || false)))), bvec3((((! (! ((! (! (! ((! (true)))))))))) || false)))), ((bvec3(bvec4((bvec3(bvec3(bvec3(bvec4((bvec3(bvec3(((bvec3(bvec4(bvec3(bvec4(bvec3((false || (true))), ((((injectionSwitch.x > injectionSwitch.y) && true))))), true))))))), false))))), true)))), 1u, _GLF_struct_6(mat2(1.0), 1.0, _GLF_struct_4(uvec2(1u), bvec4(true), uvec4(((0u | (uint(uint((min(((1u) - ((0u) | (0u))), ((1u) >> 0u))))))))), bvec4(true), uvec4(1u)), ivec3(1), _GLF_struct_5(mat3x2(1.0), mat3x4(1.0), mat3x2(1.0), bvec4(true), 1)), _GLF_struct_10(_GLF_struct_7(uvec2(1u), mat2((((clamp(((1.0) - (injectionSwitch.x)), 1.0, (clamp((max(1.0, ((1.0) / 1.0))), 1.0, 1.0))))) / 1.0)), 1, true, uvec3(((0u >> ((0u ^ (uint(1u))))) ^ (1u)))), ivec3((~ (~ (1)))), _GLF_struct_8(vec2(1.0), mat2x4(1.0)), mat2x4(((false ? (- 4.7) : 1.0))), _GLF_struct_9(uvec3(1u))));
 if(((! (! (false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while((false || (false)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = (((uvec3(uvec4((uvec3(uvec4(false ? (max((((max(((((true ? uvec3((0u ^ ((min(0u, 0u)))), 0u, 0u) : (uvec3(173510u, 33744u, 196170u))))) | uvec3(0u, 0u, 0u)), uvec3((0u ^ ((min(0u, 0u)))), 0u, 0u))) >> (uvec3(4u))) ^ (((((((min(uvec3(166519u, 165179u, (((~ (~ (188998u)))) / 1u)), uvec3(166519u, 165179u, 188998u))) | (min(uvec3(166519u, 165179u, ((188998u) / 1u)), uvec3(166519u, 165179u, 188998u))))) + uvec3(0u, 0u, 0u)))))), ((min(uvec3(166519u, 165179u, (((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) ? (subgroup_id) : 188998u))), uvec3(166519u, 165179u, ((((188998u) * 1u) - 0u)))))))) : gl_WorkGroupID, 0u))), 1u))))).x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((((false || (false)) || ((! (! (((false) && true))))))))
    {
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 do
  {
   do
    {
     if((((injectionSwitch.x > (clamp(injectionSwitch.y, ((((injectionSwitch.x > injectionSwitch.y)) ? (injectionSwitch[1]) : (clamp(injectionSwitch.y, (1.0 * (injectionSwitch.y)), injectionSwitch.y)))), injectionSwitch.y))))))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         do
          {
           barrier();
           if(((((((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true)) && true)))
            barrier();
          }
         while((((((false || (injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))));
        }
      }
    }
   while(false);
  }
 while(false);
 if((false))
  barrier();
 if(true)
  {
   do
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((false) || false)))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + ((subgroup_id * _GLF_struct_replacement_11.subgroup_size) - 0u) + subgroup_local_id;
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_11.subgroup_size + (~ (~ (((subgroup_local_id + 1) % _GLF_struct_replacement_11.subgroup_size))));
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec4(bool(bvec2(((injectionSwitch.x < injectionSwitch.y)), true)), false, false, true)))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = (75513 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   do
    {
     if((! (! ((false)))))
      {
       if((false || ((false))))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         if((bool(bvec4((false), true, false, false))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         barrier();
         do
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (((int(6)) | (int(6))))) >> (int(6))); _injected_loop_counter ++)
              {
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
               while(false);
              }
            }
          }
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       while(false);
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false || (((((! (((! (false || ((((injectionSwitch.x > injectionSwitch.y)) || (((((injectionSwitch.x) / 1.0)) / determinant(mat2(1.0, 0.0, 1.0, 1.0))) > (max(injectionSwitch, injectionSwitch)).y))))) || false)))))))))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if((((false) && true)))
    barrier();
   do
    {
     if((((! ((true && (! (! ((((! ((((max(mix(float((8892.6674)), float(injectionSwitch.x), bool(true)), (mix(float(mix(float((8892.6674)), float(injectionSwitch.x), bool(true))), float((4.0)), bool(false)))))) > injectionSwitch.y)))) || false))))))))))
      {
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if(((true) && ((injectionSwitch.x < injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > (min(0, 0)); ((false ? (_injected_loop_counter) : _injected_loop_counter --)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(((((((((injectionSwitch.x < injectionSwitch.y)) ? ((mat2(0.0, 0.0, 0.0, 0.0) + (((mat2(mat4x3(mat2(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0))))) * (injectionSwitch) : (vec2(- 8.4, 8.7))))).x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > ((((false) && true) ? (4.1) : injectionSwitch.y))))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
          }
        }
       while(((false) || false));
       for(int _injected_loop_counter = (clamp(int((injectionSwitch.x)), int((injectionSwitch.x)), int((injectionSwitch.x)))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         barrier();
        }
      }
    }
   while(false);
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
     if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)), true, false))))))
      barrier();
     if((false))
      barrier();
    }
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(subgroup_local_id + 1 < _GLF_struct_replacement_11.subgroup_size)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((! (! (true))))
          {
           (~ (~ ((0u | ((~ (~ ((~ (~ (((0u | (0u)) ^ (((((((1u * ((((false ? (workgroup_size) : buf[next_virtual_gid] = 2)) - 0u)))) | (((1u << (uint(7u))) >> (uint(7u))) ^ ((1u << (uint(5u))) >> (uint(5u)))))))) - 0u)))))))))))));
          }
         else
          {
           if((false))
            barrier();
          }
         if((((bool(bool(bool(bvec3(bool((bvec2((bvec3(bvec3(bvec3(bvec2(true, true), ((injectionSwitch.x > injectionSwitch.y))))))))), true, true))))))))
          {
           if((false))
            barrier();
           subgroupAll((false || (false)));
          }
         else
          {
           if((false))
            barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > ((injectionSwitch.y) / (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))))))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = (((~ (~ (((((true ? ((((0 | 0) >> (int(ivec3(((min(int(7), int(7)))), 0, ((1 | 1) & 1)))))) | (((((((((0 | 0) | 0)) / 1)) - 0)) >> (int((ivec3(ivec3(ivec3(((min(int(7), int(7)))), 0, ((max(((true ? (1 | 1) : (- 73090))), (1 | 1))) & 1)))))))))) | int(((vec2((mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch, exp(0.0), 0.0))))).x)) : (- 96663))))))))) + ((((0) << (max(0, (int(ivec2(0, 1))))))) - (0 << (int(6))))); (bool((false || (bool(((((_injected_loop_counter) - (max(0, 0))) < ((1) - 0)) && ((injectionSwitch.x < injectionSwitch.y)))))))); _injected_loop_counter ++)
          {
           buf[next_virtual_gid] = 2;
          }
         do
          {
           if((false))
            {
             if((bool((! (! (bool(true)))))))
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(true)
          {
           if(((true && (((false || ((true && (bool(bool((bool(bvec4(((! (! ((injectionSwitch.x > (float(mat3(injectionSwitch.y, determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), abs(((true ? 0.0 : (41.76)))), 0.0, log(1.0), 0.0, 1.0, 1.0, sqrt(1.0))))))))), (bool(bvec4((true && (false)), false, true, (! (false || ((! (! ((true && (((! (! (! ((false || (true)))))))))))))))))), ((injectionSwitch.x > injectionSwitch.y)), true))))))))))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int((clamp(2, 2, (int(ivec4(2, int((injectionSwitch.x)), 1, (1 & 1))))))))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               do
                {
                 if(((false || (false))))
                  barrier();
                }
               while(false);
              }
             if((false))
              barrier();
             if((true && ((! ((false || (! (true))))))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 do
                  {
                   barrier();
                   if((false))
                    {
                     for(int _injected_loop_counter = ((false ? (max(41805, - 96230)) : 1)); _injected_loop_counter > (~ (~ (0))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 while(false);
                }
              }
             else
              {
              }
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if(((false || (false))))
            barrier();
          }
         if((false || ((false))))
          {
           for(int _injected_loop_counter = ((min(1, (clamp(1, 1, 1)))) | 0); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
             if((false))
              barrier();
            }
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((((float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, sin(abs(0.0)), (float((clamp(vec4(0.0, tan(0.0), determinant(mat2((dot(vec3(1.0, 0.0, 0.0), vec3((min(1.0, 1.0)), (((mix(float(0.0), float((- 4817.3063)), bool(false)))) * (injectionSwitch.y)), 0.0))), 1.0, 0.0, 1.0)), (mix(float(1.0), float((- 325.733)), bool(false)))), vec4(0.0, tan(0.0), (mix(float((((true ? float(mat2x3(determinant(mat2((dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, (1.0 * (0.0))))), 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0)) : (- 8453.6865))))), float((91.80)), bool(false))), 1.0), vec4(0.0, tan(0.0), determinant(mat2((dot(vec3(1.0, ((max(max((max(0.0, 0.0)), 0.0), max((max(0.0, 0.0)), 0.0)))), 0.0), vec3(1.0, 0.0, ((false ? (- 1.1) : 0.0))))), 1.0, 0.0, 1.0)), 1.0))))), 0.0, 1.0))) < injectionSwitch.y)))
              {
               subgroupAll(true);
               if((! ((bool(bvec4(! ((((! (! (bool(bvec4(true, true, ((injectionSwitch.x < injectionSwitch.y)), true)))))) && (true))), false, true, false))))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(false);
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(false);
          }
         while(false);
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
   while(false);
  }
 while((! (! (false))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
