#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((true ? gl_WorkGroupSize : (uvec3(59940u, 183351u, 40124u)))).x;
 uint workgroup_id = (uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], ((((injectionSwitch.x < injectionSwitch.y)) ? gl_WorkGroupID[2] : (subgroup_local_id))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + (clamp(subgroup_id * subgroup_size, ((subgroup_id * subgroup_size) >> uint((injectionSwitch.x))), subgroup_id * subgroup_size)) + ((subgroup_local_id) / 1u);
 uint next_virtual_gid = ((((workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size))) / 1u) + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   buf[next_virtual_gid] = ((((2) + 0)) ^ 0);
   if((((false) || false)))
    barrier();
   subgroupAll(((true && (bool(((bvec2(bvec3(bvec2(bvec3((bvec2(bvec3((bvec2(bvec4(bvec2(false, ((injectionSwitch.x > injectionSwitch.y))), false, true))), true))), true)), true)))))))));
  }
 else
  {
   ((buf[next_virtual_gid] = (~ (~ (2)))) >> 0u);
   subgroupAll(true);
  }
}
