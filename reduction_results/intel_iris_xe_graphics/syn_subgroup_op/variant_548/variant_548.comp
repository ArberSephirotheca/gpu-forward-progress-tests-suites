#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! ((true && (false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false) && true)))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(((bool((! (! (bool(false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false || (((false || (((false)) && true))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((((((uint(uvec4((min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), (clamp((min((~ ((min(~ (1u), ~ (1u))))), (~ ((min(~ (1u), ~ (1u))))))), (~ ((min(~ (1u), ~ (1u))))), ((true ? (~ ((min(~ (1u), ~ (1u))))) : (subgroup_id))))), 0u, 1u))) ^ 0u)))) | (((((uint(uvec4((min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), (clamp((min((~ ((min(~ (1u), ~ (1u))))), (~ ((min(~ (1u), ~ (1u))))))), (~ ((min(~ (1u), ~ (1u))))), ((true ? (~ ((min(~ (1u), ~ (1u))))) : (subgroup_id))))), 0u, 1u))) ^ 0u))))) | 0u);
 if((false))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((bool(bvec3((bool(bvec3((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), false, false))), true, false)))))
    {
     if((false))
      {
       if((((false) && true)))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false || ((true && ((false))))))
  {
   if(((! (! ((! (! (((false) || false)))))))))
    barrier();
   barrier();
  }
 if((((false) || ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))))
  {
   if((bool(bvec3((false), true, false))))
    return;
   if((((((true ? injectionSwitch.x : (- 9278.4549))) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((! (! (((true && (! (! ((false))))))))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
    }
   if(((false || (false))))
    barrier();
   barrier();
   if(((! (! (((((true ? injectionSwitch.x : (- 2788.8310))) > injectionSwitch.y)))))))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if(((((! ((false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((((false) && true)))
        barrier();
       return;
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((bool(bvec4((false), true, false, false))))
      {
       if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((bool(bool((false)))))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((bool(bvec3((false), true, false))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((false) && true)))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec2(false, true)))))
      barrier();
     return;
    }
   if(((((max((clamp(injectionSwitch.x, injectionSwitch.x, (1.0 * (injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint virtual_gid = ((((1u) | ((min(1u, (uint(uvec2(1u, 0u))))))) * (0u)) | ((((uint(((max(((clamp(uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u), (max(uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u), uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, (min((~ ((~ (~ (~ (0u)))))), (~ ((~ (~ (~ (0u))))))))))), uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u)))), ((((clamp(((uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u)) | (uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u))), (uvec4(0u, 0u, 0u, 0u) | ((uvec4((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) + (min(((max(uvec4((~ (((~ ((0u | (workgroup_base)))) << 0u))) + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u), uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, (~ ((~ (~ (~ (0u)))))))))), ((max(uvec4((~ (((~ ((0u | (workgroup_base)))) << 0u))) + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u), uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, (~ ((~ (~ (~ (0u))))))))))))))), uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, 1u, 0u))))) - uvec4(0u, 0u, 0u, 0u)))) ^ uvec4(0u, (0u + (0u)), 0u, 0u)))) | (uint(((uvec4((((clamp(uint(uvec3((workgroup_base), 0u, 1u)), (((((~ (~ (uint(uvec3(((min((~ (~ (workgroup_base))), workgroup_base))), 0u, 1u))))) << 0u)) >> 0u)), uint(uvec3((workgroup_base), 0u, 1u))))) - ((((0u) >> 0u)) ^ 0u)) + subgroup_id * subgroup_size + subgroup_local_id, ((true ? 0u : (workgroup_base))), 1u, 0u)) ^ ((false ? (uvec4(153761u, 159220u, 171728u, 109560u)) : uvec4(0u, 0u, 0u, 0u))))))))));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((bool(bvec2((true && (((((bool((bvec3(bvec3(bvec3((vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, true, true))))))))))), (bool(bvec2(false, false)))))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(((((! ((! (! (((! (injectionSwitch.x > injectionSwitch.y)) && (false || ((false || (true))))))))))))))
      barrier();
    }
   if((false))
    {
     if(((! ((! (! (! (false))))))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((bool(bool((false))))) || false))
      barrier();
    }
   if((false))
    barrier();
   if((! ((true && (! ((! (! ((false))))))))))
    barrier();
   barrier();
  }
 if(((((1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = (min(workgroup_base, ((workgroup_base) / 1u))) + (~ (~ (((subgroup_id)) * 1u))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(((! ((! (! ((! (! (! (false)))))))))))
  {
   if((((false) || false)))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false) && true)))
      barrier();
     if((false))
      return;
     return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false) || false)))
    {
     if((false))
      return;
     return;
    }
   barrier();
  }
 if(((((max((sin(vec2((float(float(0.0))), 0.0)) + (injectionSwitch)).x, (sin((max(vec2(0.0, 0.0), (((true ? (vec2((clamp((max(0.0, 0.0)), 0.0, 0.0)), 0.0)) / vec2((float((min(vec3(1.0, 1.0, 0.0), vec3(1.0, 1.0, 0.0))))), 1.0) : (clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))))))) + (injectionSwitch)).x)) > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = ((1) - ((0) + 0));
 if((((((injectionSwitch.x > ((min(mat2(1.0) * (injectionSwitch), mat2((float(((mat3(1.0, 0.0, 0.0, 1.0, 1.0, (1.0 * (0.0)), 0.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) * (injectionSwitch)))).y)))) || (false || ((((false || ((max(injectionSwitch.x, (0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))))))
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    barrier();
   if((bool(bvec3((((((injectionSwitch.x > ((true ? injectionSwitch : (min(vec2(9199.9574, - 1.1), vec2(13.56, - 9.2))))).y)))) && true), true, true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if(((((bool(bvec4(false, true, ((injectionSwitch.x > (vec2(mat2x4(((true ? injectionSwitch : (injectionSwitch))), 1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0))).y)), true))) && true))))
      barrier();
     return;
    }
   return;
   if((false))
    barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    barrier();
   buf[next_virtual_gid] = 2;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((((false) && true))) || ((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((! ((false || (! ((false)))))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   subgroupAll(false);
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   buf[next_virtual_gid] = (~ (~ (clamp((2), (2), (2)))));
   subgroupAll(true);
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if(((((true && (((injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false) && true)))
    barrier();
   if(((false || (false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((bool(bvec2((false), false))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((((false) && true)))
  barrier();
 if((bool(bvec2((bool(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), false))), true))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((true && (false))))
  barrier();
}
