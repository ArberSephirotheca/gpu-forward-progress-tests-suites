#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((((min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) || false)))
  {
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((false))
    return;
  }
 while((! ((! (! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))));
 do
  {
   if(((true) || false))
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        continue;
       break;
      }
     do
      {
       if((false))
        break;
       if((((((injectionSwitch.x > (max(injectionSwitch, (max((vec2(((clamp(mix(float(injectionSwitch[0]), float((98.59)), bool(false)), (mix(float((3942.1918)), float(mix(float(((injectionSwitch) / vec2(1.0, 1.0))[0]), float((98.59)), bool(false))), bool(((injectionSwitch.x < injectionSwitch.y))))), ((mix(float(injectionSwitch[0]), float((98.59)), ((bool(false)) && true))) + 0.0)))), injectionSwitch[1])), (((mix(vec2((((mix(vec2((mat2(1.0) * ((vec2((mix(float(injectionSwitch[0]), float((98.59)), bool(false))), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]))))[0], (- 985.808)), vec2((4495.7489), (mat2(1.0) * ((vec2((mix(float(injectionSwitch[0]), float((98.59)), bool(false))), injectionSwitch[1]))))[1]), bvec2(false, true)))))[0], (14.49)), vec2((- 203.843), (((mix(vec2((mat2(1.0) * ((vec2((mix(float(injectionSwitch[0]), float((98.59)), bool(false))), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]))))[0], (- 985.808)), vec2((4495.7489), (mat2(1.0) * ((vec2((mix(float(injectionSwitch[0]), float((98.59)), bool(false))), injectionSwitch[1]))))[1]), bvec2(false, true)))))[1]), bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))) / vec2(1.0, (clamp(1.0, 1.0, 1.0)))))))).y)) || false))))
        {
         if((false))
          continue;
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((false))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if((false))
          return;
        }
       while(false);
      }
    }
   else
    {
    }
   if((false))
    break;
  }
 while((bool(bvec4(((((false) || false)) || false), true, true, false))));
 if((false))
  return;
 do
  {
   if((((false) && ((! (! (true && (true))))))))
    {
     if((false))
      continue;
     if(false)
      {
      }
     else
      {
       if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
        {
         if((false))
          {
           if((false))
            return;
           break;
          }
         if((true && (true)))
          {
           if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
            break;
           if((false))
            {
             if((false))
              continue;
             if(((true && (false))))
              break;
             break;
            }
           return;
           if((((false) || false)))
            return;
          }
         else
          {
          }
         if((false))
          return;
        }
      }
     if(((false || (false))))
      {
       if(((! (! ((! (! (false))))))))
        continue;
       break;
      }
     if((false))
      break;
     if((false || ((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true))))))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if((((((true ? injectionSwitch : (injectionSwitch))).x > injectionSwitch.y))))
        return;
       if(((((false || ((false) && true))) || (false))))
        return;
       do
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       while(false);
       if(((false || (false))))
        return;
      }
     if((false))
      return;
     if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
  }
 while(((false) && ((injectionSwitch.x < injectionSwitch.y))));
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  return;
 uint workgroup_size = ((gl_WorkGroupSize) * uvec3(((1u) | ((uint(uvec2((min(1u, 1u)), 1u))))), 1u, (((uint(((true ? uvec4(1u, (0u | 0u), (uint(uint(0u))), 0u) : (uvec4(182424u, 34278u, 123479u, 191233u))))))) / (0u | 1u)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * (0u ^ ((max(workgroup_id, workgroup_id))));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) << (((0 | 0) ^ (int(0))))); _injected_loop_counter --)
  {
   if(((false || (false))))
    break;
   if(false)
    {
     if((false))
      continue;
    }
   else
    {
     if((false))
      return;
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       if((false))
        return;
      }
     while(false);
     if(true)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((false) || false)))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if((false))
        break;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((true) && true))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      break;
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         if((false))
                          return;
                         return;
                         if((false))
                          break;
                        }
                       if((false))
                        continue;
                      }
                     return;
                     if((false))
                      return;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
              }
             if(((bool(bvec2(false, true)))))
              continue;
             do
              {
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while((true && (false)));
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              return;
             return;
            }
          }
         if((false))
          break;
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if(((! (! (((! (((false || (bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, false)))))))))))))
            return;
          }
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        continue;
       if((false))
        break;
      }
     else
      {
       if((false))
        continue;
      }
     if((false))
      continue;
    }
  }
 uint virtual_gid = (uint(uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, ((1u & 1u) ^ 1u), 0u)));
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((((true ? injectionSwitch.x : (float(float((- 0.0)))))))); _injected_loop_counter --)
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((((bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, (((bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), false, false)))) && true))))) || false)))
      {
       if((((false || ((((((((injectionSwitch.x > injectionSwitch.y)) && true)))) || false)))) || false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 >> (((0 >> (int(5))) + ((min(int(2), (max(int(2), int(2))))))))); (false || (_injected_loop_counter != int((injectionSwitch.y)))); _injected_loop_counter ++)
            {
             if(((false) && true))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((bool(bool(((false) && true)))) || (((injectionSwitch.x > injectionSwitch.y))))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if((false))
                {
                 if((false))
                  break;
                 if((false))
                  return;
                 continue;
                }
               return;
              }
            }
          }
        }
      }
     else
      {
       if((false))
        return;
      }
     if(((((mix(float(((injectionSwitch.x) - 0.0)), float((- 0.1)), bool(false))) > injectionSwitch.y))))
      break;
     if((false))
      continue;
    }
  }
 for(int _injected_loop_counter = (~ ((clamp((min(~ ((1 | 0)), ~ ((1 | 0)))), ~ ((1 | 0)), ~ ((1 | 0)))))); (false || (_injected_loop_counter > 0)); _injected_loop_counter --)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((((false) || (bool(bvec4((true && (false)), false, ((injectionSwitch.x > injectionSwitch.y)), true))))))
      {
       if(((((max(((injectionSwitch) * (((false ? (mat2(7.1, - 0.4, - 3.0, 99.47)) : mat2(mat4x2(mat2(1.0))))))), injectionSwitch)).x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            break;
           return;
          }
         while(((false) && true));
        }
       return;
       if((false))
        continue;
      }
    }
   if((false))
    break;
   if((false))
    return;
   if(((((injectionSwitch.x < injectionSwitch.y))) || false))
    {
     if((false))
      {
       if((false))
        break;
       return;
       if((false))
        return;
      }
     if((false))
      break;
     if((((true && (true && (false))))))
      {
       if((false))
        continue;
       return;
      }
     if((((false) && true)))
      break;
    }
   else
    {
     if(((true && (false))))
      return;
     if((false))
      break;
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + ((false ? (subgroup_size) : subgroup_id)) * (0u | (((subgroup_size) | 0u))) + (((~ (~ (subgroup_local_id))) + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if((false))
  return;
 if((false))
  {
   do
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         for(int _injected_loop_counter = 1; (true && ((! (! (_injected_loop_counter != int((injectionSwitch.x))))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; (bool(bool(_injected_loop_counter < ((1 << ((((min((((((injectionSwitch.x > injectionSwitch.y)) ? ((+ (++ _injected_loop_counter))) : (max((int(2)), (int(2)))))) | 0), int(2))))) << 0)) >> (int(2)))))); _injected_loop_counter ++)
            {
             if((! (! ((bool((true && (bool((false))))))))))
              break;
             if((false))
              return;
             if((false))
              break;
             if(false)
              {
               if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                break;
              }
             else
              {
               if((false))
                return;
               return;
              }
             if((false))
              {
               if((false))
                break;
               continue;
              }
            }
          }
        }
       else
        {
        }
       if((false))
        continue;
       if(((! (! (false)))))
        return;
      }
     while(false);
     if((false))
      return;
    }
   while(false);
   if((false))
    {
     if((false))
      return;
     for(int _injected_loop_counter = ((1 << ((~ ((int((injectionSwitch.x)) ^ (~ ((0 + (int(5)))))))))) >> (int(5))); ((_injected_loop_counter > int(((((float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0)))) * 1.0)))) && true); _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          break;
         break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        break;
       if((bool((bool(bvec4(bool((((! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false, false))))))
        {
        }
       else
        {
         return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if((false))
          continue;
        }
       if((false))
        break;
       do
        {
         if(((true && (false))))
          return;
         do
          {
           if((false))
            {
             if((false))
              return;
             do
              {
               return;
              }
             while(false);
            }
          }
         while(false);
         if((false))
          continue;
        }
       while(false);
       if((((injectionSwitch.x > ((injectionSwitch.y) - tan(0.0))))))
        {
         if((false))
          continue;
         do
          {
           return;
           if((false))
            return;
           if(((((false || (false)) || false))))
            break;
           if((false))
            return;
          }
         while(false);
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if(true)
      {
       for(int _injected_loop_counter = ((1) | (1)); _injected_loop_counter > ((max(((0) << 0) & (0 ^ (16583)), ((0) << ((((((false ? (- 50152) : ((~ (~ (0))) + (0)))))) << 0) | 0)) & ((min((0 | (0)), ((0) ^ 0))) ^ (((16583)) | ((16583))))))); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            continue;
           break;
          }
         if((false))
          break;
         if((true && (subgroup_local_id + 1 < subgroup_size)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             buf[next_virtual_gid] = 2;
             if((false))
              continue;
            }
           else
            {
            }
           if((false))
            continue;
           if(false)
            {
            }
           else
            {
             subgroupAll(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(((((((((injectionSwitch.x) / 1.0)) + 0.0)) - 0.0) > (mix(vec2((- 462.879), (- 771.189)), vec2((max(((vec2(mat3(injectionSwitch, 0.0, (((clamp(1.0, 1.0, 1.0))) + 0.0), 0.0, ((1.0) - sin(0.0)), 1.0, 0.0, sqrt(0.0))))), ((vec2(mat3(injectionSwitch, 0.0, (((clamp(1.0, 1.0, 1.0))) + 0.0), 0.0, ((1.0) - sin(0.0)), 1.0, 0.0, sqrt(0.0)))))))[0], ((vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, ((1.0) - sin(0.0)), 1.0, 0.0, sqrt(0.0)))))[1]), bvec2(true, true))).y)))
            {
            }
           else
            {
             if(((true && ((! (! ((bool(bool((! (! ((((! (! ((((((! (! (false)))) && true)) || false))))) && true))))))))))))))
              {
               if(((! (! (false)))))
                {
                 if((false))
                  return;
                 break;
                }
               if((false))
                {
                 if((false))
                  return;
                 break;
                }
               continue;
              }
             if(true)
              {
               buf[next_virtual_gid] = 2;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 continue;
                }
              }
             else
              {
              }
            }
           subgroupAll(true);
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            break;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               if((false))
                return;
               return;
              }
             if((false))
              break;
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 | (- 57032 & 0)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 return;
                 if((false))
                  continue;
                }
              }
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (((int(4)) >> 0))); _injected_loop_counter --)
                  {
                   return;
                  }
                 if((false))
                  continue;
                }
              }
            }
          }
         if((false))
          return;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((false))
          break;
        }
      }
     else
      {
      }
    }
   while(false);
  }
 if((false))
  return;
}
