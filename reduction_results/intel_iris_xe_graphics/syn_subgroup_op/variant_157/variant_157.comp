#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   do
    {
     if((false))
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   while((bool(bvec3(false, false, false))));
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((bool(bvec4(true, true, false, false))))
      {
       if((bool(bvec3(false, true, true))))
        {
         if((false))
          return;
         if((false))
          return;
        }
       else
        {
         return;
        }
      }
     else
      {
      }
     if(true)
      {
       do
        {
         if((false))
          return;
        }
       while(false);
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 for(int _injected_loop_counter = (0 | (0 >> (int(2)))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((! (! (false)))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
  return;
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if(false)
  {
   if((false))
    {
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         do
          {
           if((false))
            {
             do
              {
               if(((! ((false || (! (false)))))))
                return;
              }
             while(false);
             return;
            }
          }
         while(false);
        }
       else
        {
        }
       if((false))
        return;
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          break;
         if(true)
          {
           return;
          }
         else
          {
          }
         if((false))
          break;
        }
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    return;
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > ((false ? (length(injectionSwitch)) : injectionSwitch.y))))))
    return;
   if(((((((min((vec2(vec2(injectionSwitch))), (vec2(mat2(injectionSwitch, 1.0, (injectionSwitch.y))))))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
     if(((bool(bvec4(false, true, true, false)))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
     if((false))
      return;
    }
   for(int _injected_loop_counter = (0 | (((true ? ((true ? 1 : (69236))) : (9735))))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((! (! (true))))
  {
   for(int _injected_loop_counter = (0 ^ int((injectionSwitch.y))); _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         do
          {
           return;
           if((false))
            return;
           for(int _injected_loop_counter = 0; _injected_loop_counter != (min(1, 1)); _injected_loop_counter ++)
            {
             if((false))
              break;
             if((false))
              {
               if((false))
                break;
               return;
               if((bool((bvec3(bvec3(bvec3((false), false, false)))))))
                return;
              }
            }
          }
         while(false);
        }
       do
        {
         if(true)
          {
           do
            {
             if((false))
              return;
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((bool(bvec2((((clamp(injectionSwitch, injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y)) || (true))))))
              {
               if(true)
                {
                 if(false)
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((bool(bool(true))))
              {
               if((false))
                return;
               if((false))
                {
                 if((((((true ? injectionSwitch.x : (9711.5565))) > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 return;
                }
               if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
                return;
              }
             else
              {
              }
            }
          }
         else
          {
           do
            {
             if((false))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         do
          {
           if((false))
            continue;
           if((false))
            continue;
           if((false))
            continue;
           return;
          }
         while(false);
        }
      }
    }
   if((false))
    return;
   if((false))
    {
     if((true && (((injectionSwitch.x < injectionSwitch.y)))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           return;
          }
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(false);
        }
      }
     else
      {
      }
    }
  }
 uint virtual_gid = (~ (~ (((uint(uvec2((workgroup_base + subgroup_id * subgroup_size) | 0u, 0u))))))) + subgroup_local_id;
 if((false))
  return;
 uint next_virtual_gid = (clamp(workgroup_base, ((workgroup_base) >> (0u << (uint(2u)))), workgroup_base)) + subgroup_id * ((((subgroup_size) ^ 0u)) | (subgroup_size)) + (((0u | (subgroup_local_id + 1))) % subgroup_size);
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(true)
  {
   buf[virtual_gid] = 1;
  }
 else
  {
   for(int _injected_loop_counter = int((((transpose(transpose(mat2(1.0)))) * (injectionSwitch)).y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
  }
 if((false))
  {
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if(true)
        {
         if((((! ((bool(bool(! (((! (! ((injectionSwitch.x < injectionSwitch.y)))) || false))))))))))
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if((bool(bvec3(true, false, false))))
      {
       if((false))
        break;
       return;
       if((false))
        break;
       if((! (! ((false || ((false)))))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if((false))
        continue;
      }
    }
  }
 if((((float(vec3(injectionSwitch.x, 0.0, 0.0))) < (float(vec3((clamp((mix(float(((7.3 - 7.2))), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) << ((max(int(7), int(7))))); _injected_loop_counter --)
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 << (int(1))) ^ 0)) >> ((~ (0 ^ ((~ ((true ? (int(1)) : (15828))))))))); _injected_loop_counter ++)
        {
         if(false)
          {
           if((false))
            {
             do
              {
               do
                {
                 if((false))
                  return;
                 if((((false) || false)))
                  return;
                 if((false))
                  continue;
                }
               while(false);
               if((false))
                continue;
              }
             while(((false) || (! ((false || (! (false)))))));
             if((false))
              continue;
             if(((((! ((false || (! (false)))))) && true)))
              continue;
             if((false))
              break;
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; ((_injected_loop_counter) >> (((((int(ivec2((0 << (int(1))), 0))) >> 0))) | ((0 << (int(1)))))) < 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             if((false))
              continue;
            }
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
            {
             if((false))
              {
               for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if((false))
            continue;
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((false) || false)))
                  continue;
                 break;
                }
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
                      {
                       if(((! (! ((injectionSwitch.x > injectionSwitch.y))))))
                        {
                        }
                       else
                        {
                         if(true)
                          {
                           do
                            {
                             for(int _injected_loop_counter = ((1) - 0); _injected_loop_counter != 0; _injected_loop_counter --)
                              {
                               return;
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if((false))
                                    {
                                     if(((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), false)))))
                                      continue;
                                     break;
                                    }
                                   continue;
                                  }
                                 continue;
                                 if((false))
                                  break;
                                }
                              }
                             if((false))
                              {
                               if((false))
                                {
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   return;
                                  }
                                }
                               break;
                              }
                            }
                           while(((false || (false)) || (false)));
                          }
                         else
                          {
                          }
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if((false))
                  break;
                 do
                  {
                   if(true)
                    {
                     if(((true && (true && (true)))))
                      {
                       for(int _injected_loop_counter = ((0 & 42013) | 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                        {
                         do
                          {
                           if((((false) && true)))
                            return;
                           if(false)
                            {
                            }
                           else
                            {
                             if((false))
                              continue;
                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if(false)
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                               else
                                {
                                 if((false))
                                  {
                                   if((false))
                                    {
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                     if((false))
                                      break;
                                     do
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (~ (~ (0))); _injected_loop_counter --)
                                          {
                                           return;
                                          }
                                        }
                                       while(false);
                                       if((false))
                                        continue;
                                      }
                                     while(false);
                                    }
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                   return;
                                  }
                                }
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                          }
                         while(false);
                         if((false))
                          break;
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if((((injectionSwitch.x > (float((transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))))))
                      break;
                    }
                   if((false))
                    continue;
                   if((false))
                    break;
                  }
                 while(false);
                }
               if((false))
                continue;
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                  {
                   if((false))
                    break;
                   return;
                  }
                }
              }
             else
              {
               if((false))
                continue;
              }
             if((false))
              return;
            }
           while(false);
          }
         if((! (! ((true && ((((injectionSwitch.x > injectionSwitch.y)))))))))
          break;
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           for(int _injected_loop_counter = 1; (false || (_injected_loop_counter > int((injectionSwitch.x)))); _injected_loop_counter --)
            {
             if(((! (! (false)))))
              break;
             if(((((((! (! (false)))) || false))) || false))
              return;
            }
           if((false))
            break;
           do
            {
             if((false))
              {
               if((false))
                return;
               return;
              }
             if((false))
              continue;
             if((false))
              continue;
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = ((clamp((((((1)) - 0)) / 1), (1), (1))) | 0); (bool(bvec4(_injected_loop_counter != 0, (((injectionSwitch.x < injectionSwitch.y)) && ((! (! (true))))), true, ((injectionSwitch.x > injectionSwitch.y))))); ((false ? ((_injected_loop_counter + _injected_loop_counter)) : ((_injected_loop_counter --) - ((((((0) ^ 0)) | 0)) >> int((injectionSwitch.x)))))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    break;
                   if((false))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   do
                    {
                     if((false))
                      return;
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if(true)
                    {
                     if((false))
                      continue;
                     do
                      {
                       do
                        {
                         if((false))
                          {
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                return;
                               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                             break;
                            }
                           return;
                           if(((false || (false))))
                            return;
                          }
                         if((false))
                          break;
                         if((false))
                          return;
                         if(false)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         else
                          {
                           return;
                          }
                        }
                       while(false);
                      }
                     while(false);
                    }
                   else
                    {
                     if((false))
                      break;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   do
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < (max(1, 1)); _injected_loop_counter ++)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = int((((injectionSwitch) / vec2(1.0, 1.0)).y)); _injected_loop_counter != 0; _injected_loop_counter --)
                            {
                             return;
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         do
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((~ (~ ((clamp(int(4), int(4), int(4)))))))) >> ((int(ivec3(((int(4)) | 0), 1, 0))))); _injected_loop_counter ++)
                            {
                             if(((((bool(bvec3((true && (((((! (! ((! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || false) && true))), true, true)))))))
                              return;
                            }
                          }
                         while((! (! (false))));
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(true)
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          return;
                         return;
                        }
                      }
                     else
                      {
                      }
                    }
                   while((! (! (false))));
                  }
                }
              }
             do
              {
               if((false))
                break;
               if((false))
                {
                 if((false))
                  continue;
                 return;
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if(((bool(bvec4((! (! (((injectionSwitch.x > injectionSwitch.y))))), false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
                return;
              }
            }
           while(false);
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
       if((false))
        break;
       if(false)
        {
        }
       else
        {
         if((false))
          continue;
         do
          {
           if((false))
            {
             if(true)
              {
               if((false))
                continue;
               return;
              }
             else
              {
              }
            }
          }
         while((bool(bvec3(((injectionSwitch.x > (clamp((float(mat4(injectionSwitch.y, 0.0, 0.0, 1.0, (dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0))), injectionSwitch.y, injectionSwitch.y)))), false, false))));
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(false)
          {
           if((false))
            continue;
          }
         else
          {
           if((false))
            break;
           if((bool(bvec3(true, false, true))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                return;
               if((false))
                {
                 if((false))
                  break;
                 return;
                }
              }
             else
              {
               if((false))
                {
                 if(true)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                       if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, ((injectionSwitch.y) + 0.0)))))))
                        continue;
                      }
                     else
                      {
                       if(((bool(bool(false)))))
                        {
                         if(true)
                          {
                           if(true)
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                         if((false))
                          break;
                        }
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          {
                           if(true)
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                              {
                               if(((true) || false))
                                {
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   return;
                                  }
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                           if((false))
                            break;
                           if((false))
                            continue;
                          }
                        }
                       if((false))
                        return;
                       if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))
                        return;
                       if((false))
                        return;
                       if((((false) && true)))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           return;
                           if((false))
                            {
                             if(true)
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                           if(((bool(bvec2(false, false)))))
                            {
                             if((false))
                              continue;
                             break;
                            }
                           if((false))
                            continue;
                          }
                        }
                       if(false)
                        {
                         if((false))
                          {
                           if((false))
                            continue;
                           continue;
                          }
                         if((false))
                          continue;
                         if((false))
                          continue;
                        }
                       else
                        {
                         for(int _injected_loop_counter = (39341 & 0); _injected_loop_counter != ((((1 & 1) & 1) << (int(0))) >> (((int(0)) | (int(0))))); _injected_loop_counter ++)
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         if((((! (! ((false || ((injectionSwitch.x > injectionSwitch.y)))))))))
                          return;
                         if(((((injectionSwitch.x > injectionSwitch.y)) || false)))
                          {
                          }
                         else
                          {
                           if((false))
                            return;
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             if((false))
              {
               if(true)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
              }
             if(true)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             else
              {
              }
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
            }
          }
        }
       for(int _injected_loop_counter = (~ (~ (1))); (! ((! (! (! (_injected_loop_counter != 0)))))); _injected_loop_counter --)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if((false))
            {
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
              }
             continue;
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if(true)
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
              }
            }
           continue;
          }
         if((false))
          {
           if((false))
            return;
           if((false))
            continue;
           if(((bool(bvec4(false, true, false, false)))))
            break;
           continue;
           if(((! (! (false)))))
            continue;
          }
         if((false))
          break;
         if((false))
          break;
         buf[next_virtual_gid] = 2;
         if(((((! (! (true))) && ((injectionSwitch.x > injectionSwitch.y))))))
          continue;
        }
       if((true && ((false))))
        return;
       do
        {
         if((false))
          return;
        }
       while(false);
       if((false))
        {
         if(((! (! (((injectionSwitch.x > (min((max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
        }
       if(false)
        {
        }
       else
        {
         if(false)
          {
           if((false))
            break;
          }
         else
          {
           if((false))
            {
             if(((bool(bvec4(false, true, true, false)))))
              continue;
             if(((((clamp(injectionSwitch, ((false ? (injectionSwitch) : (vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).x > injectionSwitch.y))))
              break;
             break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           for(int _injected_loop_counter = 1; (bool(bvec3(_injected_loop_counter != 0, false, true))); _injected_loop_counter --)
            {
             do
              {
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while((((! (! (false)))) || false));
                }
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              {
               if((false))
                continue;
               continue;
              }
            }
          }
         if(false)
          {
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              continue;
             subgroupAll(false);
            }
           if((false))
            continue;
          }
        }
       if((false))
        return;
       if((false))
        break;
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
       for(int _injected_loop_counter = (((((0 + (1 << (int(4))))) << 0)) >> (int(4))); (! (! (_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         if((((false) || false)))
          return;
         if((((! (! ((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(((! (! (false)))))
            return;
           break;
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(3))) >> (~ (~ ((int(3)))))); _injected_loop_counter ++)
          {
           if((((! (! ((bool(bvec4(false, false, false, false))))))) || false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(true)
              {
               buf[next_virtual_gid] = 2;
              }
             else
              {
              }
            }
          }
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               do
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); (~ (~ (((_injected_loop_counter ++) - 0)))))
                    {
                     return;
                    }
                  }
                 else
                  {
                   if((false))
                    break;
                  }
                 if((false))
                  continue;
                }
               while(false);
              }
            }
           else
            {
            }
           continue;
          }
         if(((false || (false))))
          continue;
         if((false))
          {
           if((false))
            return;
           continue;
          }
         if((false))
          {
           if((false))
            break;
           if((false))
            continue;
           return;
          }
         if((false))
          return;
         if(((false || ((bool(bool(false)))))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if(((((clamp((0.0 + (injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          break;
        }
       if((false))
        continue;
       do
        {
         subgroupAll(true);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        continue;
       if((false))
        continue;
       if((false))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           do
            {
             return;
             if((false))
              return;
             if((false))
              break;
            }
           while(false);
          }
        }
      }
     if((false))
      continue;
    }
  }
 else
  {
  }
 if((false))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      break;
     return;
    }
  }
}
