#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 if(((true && (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((! (! ((! ((false || (! ((false))))))))))
  {
   if((! ((! (! (! ((bool(bvec4(((! (! (((injectionSwitch.x > injectionSwitch.y)))))), false, ((false || (bool(bvec3(true, false, true))))), false))))))))))
    {
     if(((((false || ((mix(float((float(mat3(injectionSwitch.x, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, (dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0)))), float((- 2.0)), bool(false))) > injectionSwitch.y))))))
      return;
     if(((false || (false))))
      return;
     if((false))
      return;
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if((((false)) && true))
  return;
 if((false))
  {
   if(((((! (! (((injectionSwitch.x > injectionSwitch.y) && ((injectionSwitch.x < injectionSwitch.y))))))))))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) || ((((((((false) && ((injectionSwitch.x < injectionSwitch.y))))) || false)) || false)))) || false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((! (! ((((injectionSwitch.x < injectionSwitch.y)) && (false || ((((! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((true && ((((mix(vec2((67.43), (- 2428.1007)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 uint num_workgroup = (~ ((clamp(~ (gl_NumWorkGroups), ~ (((gl_NumWorkGroups) - uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))), ((~ (gl_NumWorkGroups)) / uvec3(1u, 1u, 1u)))))).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 uint workgroup_size = ((gl_WorkGroupSize.x) / ((false ? (27768u) : ((((true ? (clamp(1u, (clamp(1u, 1u, 1u)), (~ (~ ((max(1u, 1u))))))) : (subgroup_size)))) - 0u))));
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_id = (max(gl_WorkGroupID, gl_WorkGroupID)).x;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 uint virtual_gid = (((((uint(((((uvec4(false ? (workgroup_size) : workgroup_base + subgroup_id * ((max((((((subgroup_size) / 1u))) | ((subgroup_size))), (subgroup_size))) << (0u << (uint(2u)))) + ((true ? ((0u << (uint(5u))) ^ (subgroup_local_id)) : (subgroup_id))), 0u, 1u, 1u)) | uvec4((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))) - (uvec4(0u, 0u, 0u, 0u) << (uvec4(2u))))))) * 1u)));
 if((false))
  {
   if((false || ((false))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if(((((vec2(((mat3x4(injectionSwitch, sqrt(0.0), 1.0, (clamp((mix(float((injectionSwitch.y)), float((- 4756.4464)), bool(false))), ((false ? (7.5) : (mix(float((injectionSwitch.y)), float((- 3.0)), bool(false))))), (injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, sin(0.0))) * mat3(1.0)))).x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if(((true && ((! (! (false)))))))
  return;
 uint next_virtual_gid = ((((workgroup_base + ((subgroup_id) >> (0u << (uint(5u)))) * (uint(uvec3(subgroup_size, ((true ? ((1u << (uint(5u))) >> (uint(5u))) : (subgroup_local_id))), 1u))) + (0u ^ ((((min((((min(subgroup_local_id + 1, subgroup_local_id + 1))) | ((max(subgroup_local_id + 1, subgroup_local_id + 1)))), subgroup_local_id + 1))) % ((subgroup_size) | (subgroup_size)))))) | 0u)) - 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if(((bool(bvec4(false, true, false, false)))))
  barrier();
 if((((true && (bool(bvec4(false, true, true, false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     if(((! (! (false)))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((((((clamp(float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, ((vec2((injectionSwitch.x), (injectionSwitch.x)) + ((((mix(vec2((- 49.97), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 528.530)), bvec2(true, false)))) * vec2(1.0, 1.0)))).y), sqrt(length(vec2(0.0, 0.0))), determinant(mat2(1.0, tan(0.0), 0.0, 1.0)), 1.0)), float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, ((((float(mat2x3(((injectionSwitch.y)) * 1.0, 1.0, 0.0, 1.0, (injectionSwitch.x), 1.0))) - 0.0))), sqrt(length(vec2(0.0, 0.0))), determinant(mat2(1.0, (max(tan(0.0), (min(tan(0.0), tan(0.0))))), 0.0, 1.0)), 1.0)), float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, (injectionSwitch.y), sqrt(length(vec2(0.0, 0.0))), determinant(mat2(1.0, tan(0.0), 0.0, 1.0)), 1.0))))) > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      return;
     barrier();
     if((bool(((bool(bool((! (! ((bool(((bool(bvec4(false, false, true, true)))))) || false))))))))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      return;
    }
   if((false))
    barrier();
   barrier();
   if((false))
    return;
   if((((! ((bool(((bool(! (((((mix(float((- 326.326)), float((vec2(1.0, (clamp(((true ? 1.0 : (- 1.3))), 1.0, 1.0))) * (injectionSwitch)).x), bool(true)))) * abs(1.0)) > injectionSwitch.y)))) || false))))))))
    return;
   if((false))
    {
     if((! (((((! ((false))) && true)) && true))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
  }
 buf[virtual_gid] = 1;
 if((((((false)) && true)) || ((false) && true)))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((! (! ((bool(bvec3(! ((! ((bool((((false || (bool((! (! ((false)))))))) && ((injectionSwitch.x < injectionSwitch.y)))))))), true, false)))))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    return;
   if((false))
    return;
   if(((bool((bvec2(bvec3(bvec2((bool(bvec4(false, true, true, true))), false), true)))))))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   buf[next_virtual_gid] = 2;
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
   if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, false, false))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   subgroupAll(false);
   if((false))
    barrier();
   if(((((bool(((bool(false)) || ((injectionSwitch.x > injectionSwitch.y)))))) && true)))
    return;
   if((false))
    barrier();
  }
 else
  {
   if((! (! (((((vec2(mat3x2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0))).x > injectionSwitch.y)))))))
    {
     if((((false) && ((true) || false))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
   if((((bool(bvec4((((bool(bool((false)))) && true)), false, false, true))) || false)))
    return;
   if((false))
    {
     if((false))
      return;
     if(((false || (false))))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
     barrier();
    }
   if(((bool(bvec3((! (! (bool(bvec4((! (! ((false)))), false, (true && (true)), true))))), false, ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((! (! ((! (! ((false))))))))
    return;
   buf[next_virtual_gid] = 2;
   subgroupAll(true);
  }
 if((((false || ((true && ((false)))))) || false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((! (! ((false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((! (! (((false) && true))))))
        {
         if(((true && (((false) && true)))))
          return;
         barrier();
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((bool((bvec3(bvec4(bvec3((false), true, false), false))))))
      return;
     return;
     if((false))
      return;
    }
   barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
