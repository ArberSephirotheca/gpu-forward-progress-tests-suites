#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = ((min(uint(uvec2(gl_WorkGroupSize.x, 1u)), uint(uvec2(gl_WorkGroupSize.x, 1u)))));
 if(((bool(bool((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if(((bool(bool(bool(bvec4((bool(bvec4(false, true, false, true))), true, true, true)))))))
      {
       if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
        }
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(false)
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
             if((! (((injectionSwitch.x < (min(injectionSwitch, injectionSwitch)).y)) && ((! (false))))))
              {
              }
             else
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(false);
       if((false))
        barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   do
    {
     barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uint virtual_gid = workgroup_base + subgroup_id * ((0u ^ (((((injectionSwitch.x > injectionSwitch.y)) ? (num_workgroup) : uint(uvec2(subgroup_size, 0u))))))) + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((bool(((bool(bvec2(bool(((bvec3(bvec3((bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(bvec3(bool((! (! (((! (! ((((((false || (bool(bvec4(((((min((vec2(1.0, 1.0) * (injectionSwitch)), ((injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y))), true, (((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false))) ? (9.6) : injectionSwitch.x)) < injectionSwitch.y)), false))))) && true)) && true))))))))), false, true)))))))))))))), true))))))) && true))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * (clamp(subgroup_size, (max(subgroup_size, (max((min(subgroup_size, subgroup_size)), (max((0u ^ (subgroup_size)), (0u ^ (subgroup_size)))))))), subgroup_size)) + ((((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size)));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((((~ (~ ((min(int(7), int(7))))))) | (int(7))))) >> ((((injectionSwitch.x < injectionSwitch.y)) ? (int(7)) : (findLSB(_injected_loop_counter))))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   buf[next_virtual_gid] = 2;
   if((((injectionSwitch.x > ((false ? (vec2(- 7.9, 90.31)) : ((true ? injectionSwitch : (injectionSwitch))))).y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; (! ((bool(bvec4(! ((true && (((_injected_loop_counter != 0) && true)))), ((injectionSwitch.x > injectionSwitch.y)), true, false))))); (0 | (((_injected_loop_counter --) / 1))))
    {
     if(true)
      {
       if((((bool(((bvec3(bvec4(bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), true)), false)))))))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         subgroupAll(false);
        }
      }
     else
      {
      }
    }
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; ((bool((bvec2(bvec3(bvec2(bool(bvec3(((_injected_loop_counter != 1) || false), false, false)), true), false)))))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if((false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     ((buf[next_virtual_gid] = 2) * 1u);
    }
   subgroupAll(true);
   if((false))
    barrier();
  }
}
