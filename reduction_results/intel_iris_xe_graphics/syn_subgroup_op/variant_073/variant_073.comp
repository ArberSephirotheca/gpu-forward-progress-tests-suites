#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((! ((! (! (! ((false))))))))
  return;
 if((! (! ((false)))))
  return;
 if((false))
  barrier();
 if(((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, false))))) || (bool(bvec3(false, false, true)))))
  {
   if((((! (! ((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((false || (((false) && (false || ((! (! ((true && (true))))))))))))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > (((max((vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))) - abs(0.0))))))
    {
     if(((((mat2((injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
      {
       if(((((bool(bvec4((! (! ((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x > injectionSwitch.y)))))))))), true, false, false))) && true))))
        {
         if(((false || (false))))
          barrier();
         return;
        }
       if((! (! (((! (! (false))))))))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch.x > (max((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
      {
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         barrier();
         if((((! (! ((false))))) && true))
          barrier();
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  barrier();
 if(((! (((! (false)) || false)))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if(((false || (false))))
  barrier();
 if(((bool(((bvec2(bvec2(bvec2(bvec3(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), false))))))))))
  barrier();
 if((((((((true ? injectionSwitch : (abs(injectionSwitch))))) / vec2(1.0, 1.0)).x > (mat2(1.0) * (injectionSwitch)).y))))
  {
   if((false))
    {
     if(((bool(bool(false)))))
      return;
     if((false))
      return;
     barrier();
    }
   if((! (((! (((false || (false))))) || false))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((bool(bvec3((true && ((false))), true, true))))
    return;
   if(((! (! (false)))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((! (! (((false) && true))))))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = (uint(uint(gl_NumWorkGroups.x)));
 if((((injectionSwitch.x > (((max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((false))
  return;
 if(((((false || (false)) && (true && ((false || (true))))))))
  return;
 uint workgroup_size = ((gl_WorkGroupSize.x) | ((uint(uvec2((~ (~ (gl_WorkGroupSize))).x, 1u)))));
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((! (! (((vec2((vec2(1.0, 1.0) * (injectionSwitch))[0], injectionSwitch[((1) / (int(ivec3(1, 1, (0 ^ 0)))))])).x > ((((injectionSwitch) * (transpose(transpose(mat2(1.0))))) * mat2(1.0))).y)))) && true)))))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if(((((! (! (((injectionSwitch.x > (vec2(mat4(((false ? (vec2(- 8239.4573, 5.4)) : injectionSwitch)), 0.0, 1.0, 0.0, 1.0, log(1.0), 1.0, (injectionSwitch.x), ((max(float(((vec4((clamp(1.0, ((1.0) / 1.0), 1.0)), 0.0, 1.0, 1.0)) * mat4(1.0))), (mix(float((319.863)), float(float(((vec4((clamp(1.0, ((1.0) / 1.0), 1.0)), 0.0, 1.0, 1.0)) * mat4(1.0)))), bool(true)))))), 1.0, 0.0, 0.0, 0.0, (injectionSwitch.y), 1.0))).y)))))) && true)))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = (((((clamp(workgroup_size, workgroup_size, workgroup_size))) ^ 0u)) - ((((0u) | 0u)) / 1u)) * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((false))
    return;
  }
 if((! (! ((true && ((! (! (! ((! ((false)))))))))))))
  {
   if(((((max(injectionSwitch.x, injectionSwitch.x)) > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
      return;
     if((! (! ((false)))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((false)) || false))
        barrier();
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
     if((((false) || false)))
      barrier();
    }
   if(((((bool(bool(((((bool(((((bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2((((! ((! (! (! ((bool(bvec4(bool(bvec4(false || ((injectionSwitch.x > injectionSwitch.y)), true, false, true)), true, true, true))))))))))), true), false, true)), true, false)), false, false)), false, ((injectionSwitch.x > injectionSwitch.y)))))))))) && true)) || (true && (false))))))))))
    return;
   barrier();
  }
 if((((false) && true)))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > (vec2(0.0, 0.0) + (injectionSwitch)).y))))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > ((((injectionSwitch.y) + 0.0)) + 0.0)))) || false)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if(((bool(bool(bool((bvec2(bvec3(bvec2((! (! ((false)))), false), false)))))))))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((true && (false))))
    return;
   return;
  }
 if((((false) || false)))
  return;
 if((false))
  barrier();
 if(((((max(injectionSwitch.x, injectionSwitch.x)) > (mix(float(injectionSwitch.y), float((5934.0299)), bool(((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(((((! (! ((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + (min(subgroup_id * ((subgroup_size) >> ((true ? (~ (~ (((0u) >> 0u)))) : (num_workgroup)))), ((subgroup_id) * 1u) * subgroup_size)) + subgroup_local_id;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((false) || false)))
    barrier();
   if(((bool(bvec3(false, false, ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
   if((! (! ((false)))))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((! (((! ((((injectionSwitch.x > injectionSwitch.y))))) || false))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if(((! (! (false)))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + ((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) + ((((false || (true)) ? (1u * (((((clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) ^ 0u) % ((subgroup_size) + 0u))) : (((uint(uvec2((workgroup_base), 0u)))) >> 0u))));
 buf[virtual_gid] = 1;
 if((((((! (! (bool((bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, ((injectionSwitch.x < injectionSwitch.y)))))))))))))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((bool(bvec4((true && ((((float(mat4(injectionSwitch.x, sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), abs(1.0)))) > (min(injectionSwitch.y, injectionSwitch.y)))))), false, false, false)))))
  barrier();
 if(((bool((bvec3(bvec4(bvec3(false, true, true), (bool((bvec3(bvec4(((bvec3(bvec4(bvec3(bvec4(bvec3(false, true, false), true)), true)))), ((! (! (bool(bvec2(false, true))))))))))))))))))
  {
   if((((false) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if(subgroup_local_id + 1 < (~ (~ (((0u | (clamp(subgroup_size, subgroup_size, subgroup_size))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((((false) && true)))
    barrier();
   buf[next_virtual_gid] = ((clamp(((((int(ivec2(((false ? (68470) : 2)), (int((injectionSwitch.y)) & 1)))) / 1)) | (((int(((ivec2((0 + ((~ (~ (2))))), (int((float(mat4x3((injectionSwitch.y), 0.0, abs(sqrt(1.0)), 1.0, 0.0, 1.0, 1.0, (float(vec2(1.0, 1.0))), 0.0, 0.0, 0.0, 0.0)))) & 1))) >> (ivec2(0, 0) | ivec2((injectionSwitch.x), (injectionSwitch.x)))))) / 1))), (int(int(int(ivec2((((int((ivec3(0, 0, 0) ^ ((((clamp(ivec3((~ (~ (((2) / 1)))), 1, (0 | 1)), ivec3((~ (~ (((2) / 1)))), 1, (0 | 1)), ivec3((~ (~ (((2) / 1)))), 1, (0 | 1))))) | ivec3(0, 0, 0)))))) | (int(ivec3((~ (~ (((2) / 1)))), (0 | (1)), (0 | 1)))))), (int((injectionSwitch.y)) & 1)))))), int(ivec2(2, (int((injectionSwitch.y)) & 1))))));
   subgroupAll(false);
  }
 else
  {
   if((((! (! (bool(bvec3(false, false, true))))))))
    {
     if((true && ((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, true, true))))))
      return;
     return;
    }
   if((! (! ((bool(bvec4((false), ((injectionSwitch.x < injectionSwitch.y)), false, false)))))))
    {
     if(((bool(bvec3(bool(bvec4((false), false, true, ((injectionSwitch.x > injectionSwitch.y)))), false, false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        {
         if(((! (! (false)))))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      return;
     if(((bool(bool(((false || ((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((max(injectionSwitch, (max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((true && (((false)) || false))))
    {
     if((false))
      barrier();
     return;
    }
   buf[next_virtual_gid] = 2;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(((((max(injectionSwitch, injectionSwitch)).x > ((((injectionSwitch.x > injectionSwitch.y)) ? (0.1) : ((injectionSwitch.y) + 0.0)))))))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      return;
    }
   if(((((true && (false)) || false))))
    {
     if((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))))
      return;
     if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if(((! (bool(bvec3((! (bool((bvec2(bvec3((bvec2(bvec2(bvec2(((! (! ((! (! (false))))))), ((injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x < injectionSwitch.y)))))))), true, false))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > ((injectionSwitch.y) / abs(1.0))))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((((((injectionSwitch.x) / abs(1.0)) > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
     return;
    }
   if(((! (! (bool(bvec3((false), ((injectionSwitch.x < (min(injectionSwitch.y, injectionSwitch.y)))), true)))))))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec3(false, true, false)))))
      barrier();
     barrier();
    }
   if(((true && (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((bool((bvec2(bvec2((bvec2(bvec2(bvec2((((injectionSwitch.x > ((false ? (dot(vec3(487.258, 7.4, 1.9), vec3(6.2, - 5895.0898, 58.53))) : ((injectionSwitch.y) * 1.0)))))), true))))))))))
    barrier();
   if(((false || (false))))
    return;
   subgroupAll(true);
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
}
