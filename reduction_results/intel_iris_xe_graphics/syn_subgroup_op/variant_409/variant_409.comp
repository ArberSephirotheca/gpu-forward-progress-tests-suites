#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((((false) || false)))
    barrier();
   barrier();
  }
 if(((bool(bvec2(((false) || false), false)))))
  {
   if((! (! ((((bool(bool(bool(bool(false)))))))))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((! (! (! ((((! ((true && ((false))))) && ((injectionSwitch.x < injectionSwitch.y)))))))))
  barrier();
 if(((((((((max(((true ? injectionSwitch.x : ((false ? (5.9) : (9.3))))), ((true ? injectionSwitch.x : ((false ? (5.9) : (9.3)))))))) / 1.0)) / determinant(mat2(1.0, 0.0, (injectionSwitch.x), 1.0))) > (mix(vec2(((max((min(injectionSwitch, injectionSwitch)), injectionSwitch)))[0], (float(mat2x3(((max((min(injectionSwitch, injectionSwitch)), injectionSwitch)))[1], 1.0, 0.0, 0.0, 1.0, 1.0)))), vec2((8.2), (float(- 26587))), bvec2(((injectionSwitch.x > injectionSwitch.y)), false))).y))))
  barrier();
 if((((injectionSwitch.x < ((true ? injectionSwitch : (injectionSwitch))).y)) && ((true && (! ((! (! (! (((! (! ((false)))))))))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((false) || (false || (false)))))
    {
     if((false))
      {
       if((bool(bvec4((((((injectionSwitch.x > injectionSwitch.y)))) && true), true, true, true))))
        barrier();
       if(((bool((bool((bvec3(bvec3(bvec3(bool(false), (true && (true)), true))))))))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((bool(bvec3(bool(bvec2(false, false)), ((injectionSwitch.x < (mix(float((271.040)), float(injectionSwitch.y), bool(true))))), (false || (true))))))))
    {
     if((true && ((false))))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
     if(((true && ((true && (false))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((bool(bool((! (((! (((injectionSwitch.x > injectionSwitch.y)))) && true))))))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((false) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = (~ (~ ((min((uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[(max(2, 2))])), gl_WorkGroupID)).x)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((true && (false))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((bool(bvec2((false || ((false || ((bool(((bvec3(bvec3((bvec3(bvec4(bvec3(bvec3(((bvec3(bvec3(bvec3(bvec4((bvec3(bvec3(bvec3(((false) || false), true, ((injectionSwitch.x < injectionSwitch.y)))))), true)))))))), false))))))))))))), true)))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = (max(((false ? (((subgroup_local_id) / 1u)) : workgroup_size * workgroup_id)), workgroup_size * workgroup_id));
 if((false))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = (((max((max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, (max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size)) + subgroup_local_id) | uint((injectionSwitch.x)));
 if((false))
  {
   if((! (! ((false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * ((true ? subgroup_size : ((subgroup_size + workgroup_id)))) + (min((((min((0u << (uint(7u))), (clamp((0u << (uint(7u))), (0u << (uint(7u))), (uint(uvec3((0u << (uint(7u))), 0u, 0u))))))) | (clamp((((~ (((~ (subgroup_local_id + 1)) - uint((injectionSwitch.x)))))) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((min((subgroup_local_id + (min(1, (~ (~ (((1) ^ ((0) << 0)))))))), ((max(uint(uvec3((subgroup_local_id + (min(1, (~ (~ (((1) ^ 0))))))), (0u >> (uint(2u))), 0u)), uint(uvec3((subgroup_local_id + (min(1, (~ (~ (((1) ^ 0))))))), (0u >> (uint(2u))), 0u))))))) % subgroup_size))))), (((min((0u << (uint(7u))), (clamp((0u << (uint(7u))), (0u << (uint(7u))), (uint(uvec3((0u << (uint(7u))), 0u, 0u))))))) | (clamp((((~ (((~ (subgroup_local_id + 1)) - uint((injectionSwitch.x)))))) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((min((subgroup_local_id + (min(1, (~ (~ (((1) ^ ((0) << 0)))))))), ((max(uint(uvec3((subgroup_local_id + (min(1, (~ (~ (((1) ^ 0))))))), (0u >> (uint(2u))), 0u)), uint(uvec3((subgroup_local_id + (min(1, (~ (~ (((1) ^ 0))))))), (0u >> (uint(2u))), 0u))))))) % subgroup_size)))))));
 buf[virtual_gid] = 1;
 if(((false || (((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if((((false || (bool(bool(((((((injectionSwitch) * mat2(1.0)).x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) && true))))))))
  {
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((bool(bvec3(bool(bvec4((((false) && true) || (false)), ((((false) || ((injectionSwitch.x > injectionSwitch.y)))) && true), false, (((! (! (! ((((((true && (false || (! (! ((((! (((bool(bvec4((false) || false, true, true, true))))))) && true))))))))) && true))))) && true)))), true, (((! (! (false)))) && true)))))))
    {
     if(((((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 163.826), (85.16)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(((! (! ((! (((false || ((! (((false || (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((((bool(bvec3(false, false, false))) || ((! ((! (! (bool(bvec4(((bool(bvec3((true && (! ((! (! ((((((subgroup_local_id + 1) / 1u)) | 0u) < subgroup_size))))))), true, ((injectionSwitch.x > injectionSwitch.y)))))), true, true, true))))))) || false)))) || false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   buf[next_virtual_gid] = 2;
   subgroupAll(false);
  }
 else
  {
   if((false))
    barrier();
   ((buf[next_virtual_gid] = 2) | 0u);
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((((true && (false))) || false)))
    barrier();
   subgroupAll(((bool(bool(bool(bool(true)))))));
   if((false))
    barrier();
  }
 if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((((injectionSwitch.x) - log(1.0)) > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   barrier();
  }
}
