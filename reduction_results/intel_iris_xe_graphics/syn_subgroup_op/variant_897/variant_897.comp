#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((((float(mat2(injectionSwitch.x, 1.0, 1.0, log(1.0)))) + 0.0)) > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((true && (((mix(vec2((0.8), ((min(injectionSwitch, injectionSwitch)))[1]), vec2((injectionSwitch)[0], (83.32)), bvec2(true, (((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), false)))) || false)))).x > injectionSwitch.y))))))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((((false)) || false))
  {
   if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((false) && true)))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if(((false || (false))))
        return;
       barrier();
      }
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (clamp(4.9, - 5.2, normalize(1.7))) : injectionSwitch.y))))))
      barrier();
     return;
    }
   if((false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if(((! (! ((((true && (bool(bvec3((bool(bvec4(! (! (false)), false, false, true))), ((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (asinh(vec2(- 74.86, 7.7))) : ((injectionSwitch) + sin(vec2(0.0, 0.0))))).y)), ((injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   if((false))
    barrier();
   return;
  }
 uint num_workgroup = ((gl_NumWorkGroups.x) | uint(((min(((true ? (mix(float(((vec3(3657.6718, 33.14, 5553.4086).s / 92.90))), float(injectionSwitch.x), bool(true))) : (- 8132.3948))), (mix(float(((vec3(3657.6718, 33.14, 5553.4086).s / 92.90))), float(injectionSwitch.x), bool(true))))))));
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > (max((max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((((max((0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((true && (true && (((false))))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   barrier();
  }
 if((! (! ((false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((((((((injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
  return;
 if(((bool(bool(((false) || false))))))
  {
   if((false))
    barrier();
   if((((((mix(vec2((mat2((injectionSwitch.y)) * (injectionSwitch))[0], (- 1.2)), vec2((58.81), (mat2((injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)), true)))).x > (mix(vec2((injectionSwitch)[0], (7.0)), vec2((float(- 50846)), (injectionSwitch)[1]), bvec2((((max(((false ? (9362.3510) : injectionSwitch.x)), ((max(float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0)), float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0))))))) > ((injectionSwitch.y) * 1.0))), true))).y))))
    return;
   return;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 uint workgroup_base = (max(workgroup_size * workgroup_id, workgroup_size * workgroup_id));
 if(((! (! (((((false ? (- 443.199) : ((false ? ((((mix(float(min((615.349), (615.349))), float((9388.3326)), bool(((false) || false)))))) / 1.0) : injectionSwitch.x)))) > (mix((mix(float(float(injectionSwitch.y)), float((6.6)), bool(false))), float((830.255)), bool(false))))))))))
  barrier();
 if((bool(bvec4((! ((((bool(bvec3(! ((((! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false))))) && true)), false, false, true))))
  barrier();
 if((false))
  {
   if((false || ((((((injectionSwitch.x > injectionSwitch.y)))) || false))))
    barrier();
   return;
  }
 if(((true && ((true && (((injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if((false))
  {
   if(((! (! (((((false) || false))) || false)))))
    barrier();
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((true && (((bool(bvec2(false, false)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if((((((false)) && ((injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((((true && (bool((bvec2(bvec4(bvec2((false), false), true, true)))))))) && true))
      return;
     barrier();
    }
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((((false)) && true))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > (min((((clamp(injectionSwitch, injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1]))))) / vec2(1.0, 1.0)), injectionSwitch)).y))))
    {
     if(((! (! (false)))))
      barrier();
     if((((injectionSwitch.x > (((vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).y))))
      {
       if((false))
        {
         if((false))
          barrier();
         if(((bool(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         barrier();
        }
       if((((((min((mix(vec2((8.4), (- 8489.8288)), vec2((vec2(vec4(injectionSwitch, 0.0, 1.0)))[0], (vec2(vec4(injectionSwitch, 0.0, 1.0)))[1]), bvec2(true, true))), (vec2(0.0, 0.0) + ((max(vec2(vec4(injectionSwitch, 0.0, 1.0)), vec2(vec4(injectionSwitch, 0.0, 1.0))))))))).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if((((bool(bvec4((bool(bvec2((((((! (! (true && (injectionSwitch.x > injectionSwitch.y))))) || false))), false))), false, true, false))))))
      return;
     if((false))
      return;
    }
   if((false))
    barrier();
   return;
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
    return;
   return;
  }
 uint virtual_gid = (~ (((~ ((min((max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, (max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size)))) - 0u))) + subgroup_local_id;
 if((false))
  return;
 if((! (true && (((((true && (((! (((bool(bool((((injectionSwitch.x < injectionSwitch.y)) && ((! ((! ((false))) || false)) && (true && (true))))))))))) || false)))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if(((((vec2(((mat2x4(((injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * mat2(1.0)))).x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
     if((false))
      barrier();
    }
   if(((((bool(bvec4((((bool(bvec2((((vec2(mat4x3((min(injectionSwitch, injectionSwitch)), 1.0, 0.0, (max(1.0, 1.0)), 0.0, (max((clamp(1.0, 1.0, 1.0)), 1.0)), 0.0, 0.0, (injectionSwitch.y), 1.0, 0.0))).x > injectionSwitch.y)), false)))) || false), false, true, false)))) && true)))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
    }
   return;
  }
 if(((((true && (! ((false || (! (! (! (((! (! (bool(bool(false))))))))))))))))))
  return;
 if((false))
  return;
 if(((((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))) && true))))
  barrier();
 if((false))
  {
   if(((! (! (((((true && (false))) || false) || (false)))))))
    barrier();
   if((true && ((false))))
    return;
   if(((! (! ((! (! (false))))))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((((false) || false)))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   barrier();
   if((((false)) && true))
    barrier();
  }
 if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + (max(1, 1))) % subgroup_size);
 buf[virtual_gid] = 1;
 if((! (! (((subgroup_local_id + 1 < subgroup_size) && (! (! ((bool(bvec4((bool(bvec3((bool((! (bool(bool((! (bool(true))))))))), ((((injectionSwitch.x) / 1.0) < (min((1.0 * (injectionSwitch.y)), injectionSwitch.y)))), (bool(bvec4((true && (true)), false, false, true)))))), true, false, ((injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if(((! ((false || (bool(bvec3((! ((! (! (false))))), ((injectionSwitch.x < injectionSwitch.y)), false))))))))
    {
     if((((bool(bool((! (! ((! (! ((false)))))))))) || false)))
      return;
     return;
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((bool(bool((((false)) && ((true) && true))))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(((! ((! (true && ((! (! ((((bool(bvec4(((injectionSwitch.x > (max(((injectionSwitch.y) - 0.0), injectionSwitch.y)))), true, false, true))))) && true))))))))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   ((((false ? (workgroup_base) : ((((0u >> (uint(((8u) >> ((((true ? (uint(uvec4((0u ^ ((0u << (uint(7u))))), 1u, 1u, 0u))) : (subgroup_size)))) | ((0u << (uint(7u))))))))) | (buf[next_virtual_gid] = ((false ? ((ivec2(- 50789, - 67684) * - 81570).x) : 2)))))))) << 0u) | ((min(uint(uvec2((0u << ((0u + (((uint((0u | (((min(((~ (~ (8u)))) * 1u, ((~ (~ (8u)))) * 1u))))))) * 1u))))), 0u)), ((((uint(uvec2((0u << ((((0u + (uint(((false ? (subgroup_local_id) : (0u | ((((~ ((((0u ^ 0u) ^ ((((~ (8u)) ^ 0u)) + 0u)))))) * 1u)))))))))) / 1u)), 0u))) | (((uint(uvec2((0u << ((((0u + (uint(((false ? (subgroup_local_id) : (0u | ((((~ ((((0u ^ 0u) ^ ((((~ (8u)) ^ 0u)) + 0u)))))) * 1u)))))))))) / 1u)), 0u))) << 0u)))) | (uint(uvec2((0u << ((((0u + (uint(((false ? (subgroup_local_id) : (0u | ((((~ ((((0u ^ 0u) ^ ((((~ (8u)) ^ 0u)) + 0u)))))) * 1u)))))))))) / 1u)), 0u))))))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((clamp((clamp((clamp(injectionSwitch, (min((max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)), (clamp(injectionSwitch, (min((max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)), (clamp(injectionSwitch, (min((max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)))).x, ((mix(float((28.55)), (1.0 * (float((max(((((((vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], injectionSwitch[1]))) + vec2(0.0, 0.0)).x) * 1.0) / 1.0), (((injectionSwitch.x) * 1.0) / 1.0)))))), bool(true)))), injectionSwitch.x)) > (min((max((clamp(injectionSwitch.y, injectionSwitch.y, (float(vec3(injectionSwitch.y, 0.0, 0.0))))), injectionSwitch.y)), (max((clamp(injectionSwitch.y, injectionSwitch.y, (float(vec3(injectionSwitch.y, 0.0, 0.0))))), injectionSwitch.y))))))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((true && ((true && (((injectionSwitch.x > injectionSwitch.y))))))))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((! (! (bool((bool(((! (! ((bool(bool((bool(bvec4(false, false, false, true))))))))) && true))))))))))
      return;
     return;
     if((false))
      barrier();
    }
   if((! (! ((false)))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((! (! (false)))))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     if((((((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch.x > injectionSwitch.y))))) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     return;
     if((false))
      barrier();
     if((false))
      return;
     if(((! ((bool(bvec3(! (((false) || false)), ((injectionSwitch.x < injectionSwitch.y)), false)))))))
      return;
    }
   subgroupAll(true);
   if(((((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false)))
    return;
   if((false))
    return;
   if((true && ((false))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(((true && (false))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
}
