#version 460

struct _GLF_struct_0 {
 uint subgroup_size;
 uvec3 _f0;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupSize, uvec3(1u));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((uvec3(uvec4(gl_WorkGroupSize, 1u))).x) - 0u);
 uint workgroup_id = (uvec3((((uvec3(0u, 0u, 0u) | (gl_WorkGroupID))[0]) >> 0u), (min(gl_WorkGroupID, gl_WorkGroupID))[1], ((gl_WorkGroupID[((((2) / 1)) | ((false ? (int(true)) : ((((int(ivec4(((1 ^ 0) >> 0), 1, 0, int((injectionSwitch.y)))))) * ((((int((injectionSwitch.x)) | ((((0 | (2))) >> 0)))) << 0)))))))]) | (gl_WorkGroupID[((((2) / 1)) | ((false ? (int(true)) : ((((int(ivec4(((1 ^ 0) >> 0), 1, 0, int((injectionSwitch.y)))))) * ((((int((injectionSwitch.x)) | ((((0 | (2))) >> 0)))) << 0)))))))])))).x;
 uint workgroup_base = workgroup_size * ((((workgroup_id) / ((1u) | (1u)))) - ((clamp(0u, 0u, 0u)) << (uint(3u))));
 uint virtual_gid = (1u * ((min(workgroup_base, (clamp(workgroup_base, ((true ? workgroup_base : (workgroup_id))), workgroup_base)))))) + ((subgroup_id * (min(_GLF_struct_replacement_0.subgroup_size, _GLF_struct_replacement_0.subgroup_size))) ^ 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + (~ (((((((((min(~ (~ (((true ? ((~ (subgroup_id)) << 0u) : (virtual_gid))))), ~ (~ (((true ? ((~ (subgroup_id)) << 0u) : (virtual_gid)))))))))) | 0u)) | ((0u | (((~ (~ (((true ? ((~ (subgroup_id)) << 0u) : (virtual_gid)))))))))))) | 0u)) * _GLF_struct_replacement_0.subgroup_size + ((subgroup_local_id + ((1) ^ 0)) % _GLF_struct_replacement_0.subgroup_size);
 buf[virtual_gid] = 1;
 for(int _injected_loop_counter = ((max(max(1, 1), ((((((max((min(1, 1)), 1)) | (max((max(1, 1)), 1)))) | (((max((min(1, 1)), 1)) | (max((max(1, 1)), 1)))))) ^ (0 >> (int(((((injectionSwitch.x > injectionSwitch.y)) ? (63129) : 0))))))))); ((((_injected_loop_counter != int((max(((max((mix(vec2(((max(injectionSwitch, ((((max(clamp(injectionSwitch, ((injectionSwitch) * exp(vec2(0.0, 0.0))), injectionSwitch), clamp(injectionSwitch, ((injectionSwitch) * exp(vec2(0.0, 0.0))), injectionSwitch)))) + vec2(0.0, 0.0))))))[0], (- 4.1)), vec2((14.29), ((max(injectionSwitch, ((((max(clamp(injectionSwitch, ((injectionSwitch) * exp(vec2(0.0, 0.0))), injectionSwitch), clamp(injectionSwitch, ((injectionSwitch) * exp(vec2(0.0, 0.0))), injectionSwitch)))) + vec2(0.0, 0.0))))))[1]), bvec2(false, true))).x, (max(injectionSwitch, (clamp(injectionSwitch, ((injectionSwitch) * exp(vec2(0.0, 0.0))), injectionSwitch)))).x))), (1.0 * (((max(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)))))))) || false) || false); _injected_loop_counter --)
  {
   if((((max(((((0u + (0u))) - 0u) | ((max(((max((~ (~ (((false ? (subgroup_local_id) : (subgroup_local_id)))))), (((uint(((uvec3((subgroup_local_id), 0u, 1u)) | (uvec3((subgroup_local_id), 0u, 1u))))) + 0u)))) >> 0u), ((true ? max((max((~ (~ (((false ? (subgroup_local_id) : ((~ (~ (subgroup_local_id))))))))), (~ (~ (((false ? (subgroup_local_id) : ((~ (~ (subgroup_local_id))))))))))), (uint(((uvec3((subgroup_local_id), 0u, (~ (~ (1u))))) | (uvec3(((false ? ((-- workgroup_id)) : (subgroup_local_id))), 0u, 1u)))))) : (subgroup_local_id))))))), subgroup_local_id))) / 1u) + 1 < _GLF_struct_replacement_0.subgroup_size)
    {
     (~ (~ (buf[next_virtual_gid] = 2)));
     subgroupAll(false);
    }
   else
    {
     buf[next_virtual_gid] = 2;
     if(((false || ((injectionSwitch.x < injectionSwitch.y)))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         subgroupAll(true);
        }
      }
     else
      {
      }
    }
  }
}
