#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(false);
           barrier();
          }
         barrier();
         if(((true && (false))))
          barrier();
        }
       do
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
      }
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((1 ^ int((injectionSwitch.y))) | 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((false) && true));
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           else
            {
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter != ((1) + 0); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((bool(bvec3(false, true, false)))))
      {
       do
        {
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 else
  {
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((bool(bvec4(false, false, false, true)))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (((int(7)) * 1))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec3(false, true, false)))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(5)) + 0))) >> (int(5))); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     if(((true && (false))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if(((bool(bvec3(false, true, true)))))
      barrier();
     do
      {
       if((((false) || false)))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
     do
      {
       if((false))
        barrier();
      }
     while((bool(bool(((injectionSwitch.x > injectionSwitch.y))))));
     if(((! (! (false)))))
      barrier();
    }
   else
    {
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((false) || false)))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      barrier();
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
      }
     while(false);
     do
      {
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while((bool(bool(false))));
          }
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
           if((((bool(bvec4(bool(bvec4(((false) || false), false, false, true)), false, true, true))))))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if(((bool(bvec3((! (! (((injectionSwitch.x > injectionSwitch.y))))), true, true)))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(((bool((bvec2(bvec4(bvec2(false, false), false, false)))))))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
        }
       while((true && (false)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if(true)
        {
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(true)
            {
             if((false))
              barrier();
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(4))); _injected_loop_counter --)
              {
               barrier();
               if(((! (! (false)))))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if(((bool(bvec3(false, true, true)))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     while(false);
     if((false))
      barrier();
    }
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((bool(bool(false))))
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   while(false);
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if(((bool(bvec4((! (! (false))), true, true, ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != (((((0 ^ 1) << (int(5))) >> (int(5))) << (int(7))) >> (((int(7)) + 0))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           barrier();
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     else
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((((false) && true)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (max(((1 << (int(2))) >> (int(2))), ((1 << (int(2))) >> (int(2))))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           do
            {
             barrier();
            }
           while(false);
          }
        }
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       else
        {
        }
       if((false))
        {
         if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
          barrier();
         barrier();
        }
      }
     if(((! (! (false)))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
      }
    }
   else
    {
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << ((~ (~ (((int(2)) | (int(2)))))))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(false);
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((false) || false)))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       do
        {
         if(true)
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
       while(false);
       if((false))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(((true && (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if(((false || (false))))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
      }
     while(false);
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(2))); _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(false)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(true)
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   buf[virtual_gid] = 1;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if(((! (! (false)))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if((((false) || false)))
    {
     if(true)
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if((false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
      }
     if(((false || (false))))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if((false))
        barrier();
       if(((true && (false))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if((false))
          {
           if((((false) && true)))
            barrier();
           if((false))
            barrier();
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (((int(0)) / 1))) >> (int(0))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
      }
     while(false);
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((bool(bvec4(false, true, true, true)))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   int i = 0;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false || (bool(bvec2(false, true)))))))
      barrier();
     if(true)
      {
       do
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
      }
     else
      {
      }
     if(true)
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if(((true && (false))))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if(((true) && true))
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if((false))
        barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((bool(bvec2(false, false)))))
      barrier();
    }
   if((false))
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((((! (! (false)))) || false)))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(false);
     if((false))
      barrier();
     barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (0 >> ((max(int(1), int(1))))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((0 >> ((max(int(5), int(5))))) | 1); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 ^ int((injectionSwitch.y))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
      }
    }
   buf[next_virtual_gid] = 2;
  }
 else
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
         if(((! (! (false)))))
          barrier();
        }
      }
     while(false);
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           do
            {
             if(((! ((! (! (! (false))))))))
              barrier();
            }
           while(false);
          }
         else
          {
           do
            {
             if((false))
              {
               if(((bool(bvec4(false, true, true, true)))))
                barrier();
               barrier();
              }
            }
           while(false);
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
         do
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               do
                {
                 barrier();
                }
               while(false);
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                }
               if(((false || (false))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         while(false);
        }
       if(true)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         barrier();
        }
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if(false)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if(((! (! (false)))))
              barrier();
            }
           if((false))
            {
             if(true)
              {
               if((false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = ((1 & 1) ^ 1); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((((false) && true)))
              barrier();
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                }
               else
                {
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         do
          {
           barrier();
           if((false))
            barrier();
          }
         while(false);
        }
       for(int _injected_loop_counter = ((int(true) >> - 26144) & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(true)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               barrier();
              }
            }
           else
            {
            }
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
          {
           if((false))
            {
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(true)
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(true)
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if(((true && ((! (! (false)))))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       do
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while((bool(bvec2(false, false))));
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if(true)
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((false) && true));
             barrier();
            }
          }
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((((false) || false)))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while((true && (false)));
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while((false || ((bool(bvec4((! (! (false))), true, false, false))))));
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                }
               while(false);
               for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 | 0) << (int(0))) >> ((int(ivec4((max(int(0), int(0))), 0, 1, 1))))); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                      }
                     barrier();
                    }
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         do
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(false);
          }
         while(false);
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         if((((false) || false)))
          barrier();
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         barrier();
         if(((bool(bvec3(false, false, false)))))
          barrier();
        }
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     buf[next_virtual_gid] = 2;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (((int(3)) | (int(3))))) >> (((int(3)) >> 0))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (max(0, 0)); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if(true)
        {
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
        }
       else
        {
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if(((bool(bvec2(false, false)))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (((1 ^ 0) << (int(0))) >> (((int(0)) << 0))); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                   if(((bool(bvec3(false, true, false)))))
                    barrier();
                  }
                }
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
        }
       else
        {
        }
       if(((! (! (false)))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(true)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}
