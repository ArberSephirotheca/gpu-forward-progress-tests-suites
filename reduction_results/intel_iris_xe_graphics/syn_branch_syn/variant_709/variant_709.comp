#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((((! (! (((false))))) && true)) && true))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((bool((false || (((false || ((true && (true)))) && (bool(((((injectionSwitch.x > (((min(true ? injectionSwitch.y : ((true ? (5.0) : (164.437))), true ? injectionSwitch.y : ((true ? (5.0) : (164.437)))))))) || ((injectionSwitch.x > injectionSwitch.y))))))))))))))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((((! (! (((injectionSwitch.x < injectionSwitch.y)) && (false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (! (((false) && true))))))
    return;
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint workgroup_id = ((((~ (~ (clamp(((true ? (min((0u + (((((injectionSwitch.x > injectionSwitch.y)) ? (uvec2(61742u, 197509u)[1]) : gl_WorkGroupID.x)))), ((((1u * (0u)) + (gl_WorkGroupID.x))) | 0u))) : (subgroup_size))), gl_WorkGroupID.x, (~ ((uint(uint(~ (((((((((injectionSwitch.x < injectionSwitch.y)) ? ((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_local_id) : gl_WorkGroupID.x : (workgroup_size)))))) / 1u)))))))))))) | 0u));
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((false)) && true))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = (uint(uvec3(((true ? workgroup_base + (0u ^ (((((((subgroup_id) << 0u)) << 0u) | ((subgroup_id) << 0u))))) * subgroup_size : (workgroup_size))), (1u | (0u ^ 0u)), 1u))) + ((true ? (((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> 0u) : (floatBitsToUint(1746.1818))));
 if((((injectionSwitch.x > (min((max(injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)))).y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((((! (! ((true && ((injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     return;
    }
   return;
  }
 uint next_virtual_gid = (~ (~ ((~ ((min(~ ((clamp(((workgroup_base + subgroup_id * ((subgroup_size) - 0u) + ((((true ? (max((((((~ (~ (subgroup_local_id))) + 0u))) | 0u), (((~ (~ (subgroup_local_id)))) | ((~ (~ (subgroup_local_id))))))) : ((workgroup_size * num_workgroup)))) + 1) % subgroup_size)) << 0u), ((workgroup_base + subgroup_id * ((subgroup_size) - 0u) + ((((true ? (max((((((~ (~ (subgroup_local_id))) + 0u))) | 0u), (((~ (~ (subgroup_local_id)))) | ((~ (~ (subgroup_local_id))))))) : ((workgroup_size * num_workgroup)))) + 1) % subgroup_size)) << 0u), ((workgroup_base + subgroup_id * ((subgroup_size) - 0u) + ((((true ? (max((((((~ (~ (subgroup_local_id))) + 0u))) | 0u), (((~ (~ (subgroup_local_id)))) | ((~ (~ (subgroup_local_id))))))) : ((workgroup_size * num_workgroup)))) + 1) % subgroup_size)) << 0u)))), ~ ((clamp(((workgroup_base + subgroup_id * ((subgroup_size) - 0u) + ((((true ? (max((((((~ (~ (subgroup_local_id))) + 0u))) | 0u), (((~ (~ (subgroup_local_id)))) | ((~ (~ (subgroup_local_id))))))) : ((workgroup_size * num_workgroup)))) + 1) % subgroup_size)) << 0u), ((workgroup_base + subgroup_id * ((subgroup_size) - 0u) + ((((true ? (max((((((~ (~ (subgroup_local_id))) + 0u))) | 0u), (((~ (~ (subgroup_local_id)))) | ((~ (~ (subgroup_local_id))))))) : ((workgroup_size * num_workgroup)))) + 1) % subgroup_size)) << 0u), ((workgroup_base + subgroup_id * ((subgroup_size) - 0u) + ((((true ? (max((((((~ (~ (subgroup_local_id))) + 0u))) | 0u), (((~ (~ (subgroup_local_id)))) | ((~ (~ (subgroup_local_id))))))) : ((workgroup_size * num_workgroup)))) + 1) % subgroup_size)) << 0u)))))))))));
 if((((bool(bvec3((injectionSwitch.x > (clamp((max(((true ? (min((vec2(injectionSwitch[0], injectionSwitch[1])), (vec2(injectionSwitch[0], injectionSwitch[1])))) : (injectionSwitch))), (mix(vec2((8.3), ((vec2((transpose(transpose(mat2x4(injectionSwitch, (injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 1.0)))))))[1]), vec2((injectionSwitch)[0], (max((- 73.60), (- 73.60)))), bvec2(true, false))))), ((injectionSwitch) - vec2(((0.0) + 0.0), 0.0)), (clamp((mix(vec2((injectionSwitch)[0], (6.1)), vec2((5.1), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, injectionSwitch)))).y), false, (! (! ((((((! (((bool(bvec2((! (! (true))), false))) && (! (bool(bvec2((bool(bool((! (bool(bvec4((! (((true && ((float(mat4x3((((((vec2(vec2((vec2(0.0, 0.0) + (injectionSwitch))))) + vec2(0.0, 0.0))).x) / round(length(normalize(1.0)))), (min(sqrt(1.0), (mix(float((- 8.8)), float(sqrt(1.0)), bool(true))))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0))) > injectionSwitch.y))))), ((injectionSwitch.x > injectionSwitch.y)), false, true))))))), false)))))))) || false))))))))))))
  return;
 ((uint((injectionSwitch.x)) | 0u) ^ ((0u + (buf[virtual_gid] = 1))));
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   if((false))
    return;
   if((false))
    {
     if(((bool(bvec2(false, false)))))
      return;
     return;
    }
   buf[next_virtual_gid] = 2;
   if((false))
    return;
  }
 else
  {
   if(((bool(bvec4(false, true, ((injectionSwitch.x < injectionSwitch.y)), (false || (false)))))))
    return;
   (0u + (buf[next_virtual_gid] = (((clamp(2, 2, 2))) / 1)));
  }
}
