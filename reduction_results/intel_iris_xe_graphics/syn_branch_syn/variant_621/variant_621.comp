#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (((((0u + ((0u | 0u) ^ ((max((0u | (((min(workgroup_size, workgroup_size))))), (workgroup_size))) | (workgroup_size)))))) | 0u)) * workgroup_id;
 uint virtual_gid = ((((((workgroup_base + (0u + (((subgroup_id)) | uint(((float(float(((injectionSwitch) - vec2(0.0, 0.0)).x))))))) * subgroup_size) ^ 0u)) >> 0u)) << (((true ? (((0u) - ((true ? 0u : (((subgroup_size)) >> 0u))))) : (((~ (~ (packUnorm2x16(injectionSwitch) >> subgroup_id))))))) << 0u)) + subgroup_local_id;
 if((false || ((bool(bvec3(((true && (((injectionSwitch.x > injectionSwitch.y))))), false, false))))))
  return;
 uint next_virtual_gid = workgroup_base + ((min((uint(uvec2((uint(uint(0u ^ ((((max(subgroup_id, ((false ? (subgroup_id) : (((0u ^ (subgroup_id))) ^ uint((injectionSwitch.x))))))) ^ 0u)))))), (((((clamp((~ (~ (1u))), 1u, 1u)) << (uint(1u))) >> (uint(((~ (~ (uint(((uvec2(1u, 0u)) - uvec2(0u, 0u)))))))))) / ((1u << (uint(2u))) >> (uint(2u)))))))), ((false ? (subgroup_id) : 0u ^ ((((~ (((((((false ? (workgroup_base) : ~ ((max(((subgroup_id) / 1u), (((0u ^ (((subgroup_id) | 0u)))) ^ uint((injectionSwitch.x))))) ^ 0u)) ^ 0u))) << 0u)))))))))))) * subgroup_size + ((((((max(((uint((injectionSwitch.y)) * (subgroup_local_id + 1))), ((~ (~ (min(((((((((uint((~ (uvec3(0u, 0u, 0u) ^ ((~ (uvec3((((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) / 1u)), 0u, ((1u << ((~ (~ (uint(1u)))))) >> (uint(1u))))))))))) + 1)) << 0u)) << 0u)) - 0u), (uint(uvec3((((((subgroup_local_id + 1)) - 0u)) << 0u), 0u, 1u))))))))))) * 1u)) / 1u) % subgroup_size);
 buf[virtual_gid] = 1;
 if((((bool(bool(false))) ? (bitfieldExtract(((num_workgroup) * 1u), - 98991, - 70078)) : (~ (~ ((max(~ ((((true ? (uint(uint(~ ((uint(uint(((((0u | (~ (~ ((true ? ((((true ? clamp(((((subgroup_local_id) - 0u)) | 0u), subgroup_local_id, (min(subgroup_local_id, (clamp(((((injectionSwitch.x > injectionSwitch.y)) ? (num_workgroup) : subgroup_local_id)), subgroup_local_id, (uint(uint(subgroup_local_id)))))))) : (workgroup_base)))) >> ((uint(((uvec4(((0u) | (0u)), 1u, uint((injectionSwitch.x)), 0u)) << uvec4(0u, 0u, 0u, 0u)))) << (uint(7u)))) : (atomicMax(virtual_gid, num_workgroup))))))))))))))))) : (virtual_gid))))), ~ ((~ ((~ (~ (((uint(uvec4(uint((~ (~ ((uint(uvec3(uint((((clamp(subgroup_local_id, ((~ ((max(~ ((subgroup_local_id)), ~ ((subgroup_local_id)))))) | (subgroup_local_id)), subgroup_local_id))) | ((clamp((clamp(subgroup_local_id, subgroup_local_id, (uint(uvec2(subgroup_local_id, ((1u) | (1u))))))), subgroup_local_id, subgroup_local_id))))), 1u, 1u))))))), 1u, 0u, ((clamp(0u ^ 1u, 0u ^ 1u, (0u | (0u ^ 1u)))))))))))))))))))) + 1)) < subgroup_size)
  {
   int i = ((((0) / 1)) | 0);
   if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, (! ((! (! (! (false)))))), false)))))))
    return;
   buf[next_virtual_gid] = 2;
   if((true && ((((true && ((((injectionSwitch.x > ((injectionSwitch.y) / determinant(mat2(1.0, sin(0.0), (float(mat2x3(0.0, 1.0, 0.0, abs(1.0), 1.0, 1.0))), 1.0))))) && true))))))))
    return;
  }
 else
  {
   buf[next_virtual_gid] = 2;
  }
}
