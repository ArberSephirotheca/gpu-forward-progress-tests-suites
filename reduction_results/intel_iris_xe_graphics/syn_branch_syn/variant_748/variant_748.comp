#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id;
 if((false))
  barrier();
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((((injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(false);
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > (max(((injectionSwitch) / vec2(1.0, 1.0)), ((false ? (pow(injectionSwitch, injectionSwitch)) : injectionSwitch)))).y))))
        return;
       if(((bool(bvec2(false, false)))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(true)
    {
     return;
    }
   else
    {
    }
   if((false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size;
 if((false))
  return;
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec4(false, false, false, ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
     if((false))
      return;
     if(true)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         do
          {
           return;
          }
         while(false);
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 5.2), (- 7.2)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     break;
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if(((true && (((false) && true)))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id;
 if((false))
  barrier();
 if(((bool(bvec4(false, false, false, false)))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y = subgroup_id;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x = ((false ? (subgroup_id) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y));
 if((false))
  return;
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((((false) || false)))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          break;
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(false);
       return;
       if((false))
        barrier();
      }
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if(((false || (false))))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      return;
     return;
     if((false))
      return;
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = int((max(((vec2(injectionSwitch[0], injectionSwitch[1])).y), (injectionSwitch.y)))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x;
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        break;
      }
     else
      {
       return;
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((bool((bvec2(bvec2(bvec2((((injectionSwitch.x > injectionSwitch.y))), false)))))))
    {
     if((false))
      barrier();
     break;
    }
  }
 while(((injectionSwitch.x > ((injectionSwitch.y) - 0.0))));
 if(((injectionSwitch.x < (((0.0 + (injectionSwitch.y))) / 1.0))))
  {
   for(int _injected_loop_counter = 0; (~ (~ (_injected_loop_counter))) < (clamp(1, ((1) | (((1) | (clamp((1), (((~ (~ ((1))))) * 1), (~ (~ ((1))))))))), 1)); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((bool((bvec3(bvec4(bvec3(false, true, true), false)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       if(((true && (false))))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.y = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z;
        }
       else
        {
         do
          {
           if((false))
            barrier();
           if(((((clamp(injectionSwitch, (max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
            {
             if((((((injectionSwitch.x > injectionSwitch.y)))) || ((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(false);
        }
      }
     else
      {
      }
    }
   while(false);
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((((((injectionSwitch.x < injectionSwitch.y)) && (((bool((bvec2(bvec3(bvec2((((((false) && true))) && true), true), true))))) && true)))) && true)) && true)))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        return;
       if((false))
        {
         do
          {
           barrier();
           if((false))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if(false)
      {
      }
     else
      {
       return;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > (min(injectionSwitch.y, ((injectionSwitch.y) * 1.0)))))))
        {
         if((false))
          continue;
         for(int _injected_loop_counter = (0 ^ ((max(1, ((1) | (1)))))); _injected_loop_counter > ((0) << 0); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if(((! (! (false)))))
      return;
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((false || (false))))
  barrier();
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 while(false);
 uint subgroup_size = gl_SubgroupSize;
 if(false)
  {
  }
 else
  {
   GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y = subgroup_size;
  }
 GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y;
 if((false || ((false))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z = subgroup_local_id;
  }
 while((((false || ((injectionSwitch.x < injectionSwitch.y)))) && (((injectionSwitch.x > injectionSwitch.y)))));
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.y = num_workgroup;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.z = workgroup_size;
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
   GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.y = workgroup_id;
  }
 if(((false || ((true && (false))))))
  barrier();
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((((! (! (false)))) || false)))
  barrier();
 if((((((false) && ((injectionSwitch.x < injectionSwitch.y)))) && true)))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.w = GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.y;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 uint workgroup_base = ((GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.z * GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.w) | (GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.z * GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.w));
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.w = workgroup_base;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((true && ((false || ((false))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.w;
 for(int _injected_loop_counter = ((1) >> 0); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (min((1 & 1), (1 & 1))); _injected_loop_counter > (0 | ((~ (~ ((0 << ((true ? (int(4)) : (- 82284))))))) & 65914)); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((bool(((bool(false)) || false))))
        {
        }
       else
        {
         barrier();
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     do
      {
       if((false))
        {
         if((true && (((! (! (bool((bvec2(bvec4(bvec2((false), ((injectionSwitch.x > injectionSwitch.y))), true, false)))))))))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((bool(bvec4(((true) && true), true, ((injectionSwitch.x > injectionSwitch.y)), true))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(((! ((! (! (! ((bool(bool((((! (! (bool(bvec3((bool((bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), true, false, false))))), false, true))))))))))))))))))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              {
               if(((! ((false || ((false || (! (((injectionSwitch.x > injectionSwitch.y)))))))))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               break;
              }
             barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              return;
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (int(((min(injectionSwitch.y, injectionSwitch.y)))) & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = (0 ^ int((injectionSwitch.y))); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                   if((false))
                    {
                     if(((true && (false))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                 if((((((false || ((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))) && true)))
                  continue;
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > (((((0) | 0) ^ (((0) / 1)))) | 0); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((! (! (false)))))
                  barrier();
                 return;
                 if((false))
                  barrier();
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((! ((! (! (! (false))))))))
                barrier();
               break;
              }
             if(true)
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if(false)
          {
           if((false))
            continue;
           if((((false) && true)))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(((bool(bool(false)))))
                  break;
                }
               else
                {
                }
               if(((bool((bvec3(bvec4(bvec3(false, true, true), true)))))))
                barrier();
              }
             if((false))
              break;
             if((((false) || false)))
              barrier();
             if((false))
              barrier();
             do
              {
               barrier();
               if(((true && (false))))
                barrier();
               if((false))
                continue;
              }
             while((! (! (false))));
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
          }
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((bool(bvec4(((false) && true), true, true, ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  return;
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w + GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.y * GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z;
 if((false))
  barrier();
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.z = virtual_gid;
 do
  {
   if((((false)) && true))
    {
     if((false))
      barrier();
     if((false))
      continue;
     do
      {
       barrier();
      }
     while(false);
     if((false))
      return;
    }
   if((false))
    barrier();
  }
 while(((false) || false));
 if(((bool(bvec4(false, false, true, false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.z = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.z;
 if((false))
  {
   if((false))
    barrier();
   return;
   if(((true && (false))))
    barrier();
  }
 if((false))
  barrier();
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w + GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.y * GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x + ((~ (~ ((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1)))) % GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x = next_virtual_gid;
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((false || (false))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.x = GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   barrier();
  }
 GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
  }
 if(((((clamp(injectionSwitch, injectionSwitch, ((true ? injectionSwitch : (injectionSwitch))))).x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  barrier();
 buf[GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.z] = 1;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    barrier();
  }
 else
  {
   if((! (! ((false)))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   if(((! (! (false)))))
    barrier();
   if((! (! ((false)))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((! (! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     return;
    }
  }
 else
  {
   if((false))
    barrier();
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1 < GLF_merged3_0_1_13_1_1_12_2_1_14subgroup_sizeworkgroup_idworkgroup_size.x)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (((int(((ivec3(1, 1, (int(ivec2(0, (clamp(0, 0, 0))))))) | (ivec3(1, 1, 0))))) << 0)); _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     if((((true && (bool(bool(false)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((! (! (false)))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      return;
     if((((false) && true)))
      return;
    }
   if((false))
    return;
   if(((((bool(bvec3(false, true, false)))) && true)))
    barrier();
   int i = 0;
   if(((injectionSwitch.x > ((injectionSwitch) - sqrt((mat2(1.0) * (vec2(0.0, 0.0))))).y)))
    {
     if(((! (! (false)))))
      {
       if(((bool(bvec2(false, false)))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          break;
         return;
        }
      }
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     else
      {
       if((bool(bool(true))))
        {
         if((((injectionSwitch.x > ((false ? (5.6) : injectionSwitch.y))))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
    }
   else
    {
     do
      {
       ((false ? (subgroup_id) : ((((((true ? buf[GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.x] = 2 : (num_workgroup)))) / 1u)) ^ 0u)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   while(false);
   if((false))
    barrier();
   if((((((bool(bvec2(bool(bool((clamp((((mix(float((- 85.91)), float((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true)))) * 1.0), (((vec2(injectionSwitch[0], injectionSwitch[1])).x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)), false))))))))
    return;
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(((false || (bool(bvec2((true && (((injectionSwitch.x > injectionSwitch.y)))), true))))));
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      return;
     if((false))
      return;
    }
   do
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        break;
       barrier();
      }
     if(((true && (false))))
      barrier();
     buf[GLF_merged4_0_1_16_1_1_11_2_1_11_3_1_12next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.x] = 2;
    }
   while(false);
  }
}
