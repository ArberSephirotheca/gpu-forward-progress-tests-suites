#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((mix(vec2((injectionSwitch)[0], (- 2.8)), vec2((- 6.1), ((max(injectionSwitch, (((mix(vec2((885.258), (- 3.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0)))))[1]), bvec2(false, true))).x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((0u ^ (uint((injectionSwitch.x)) | ((false ? (subgroup_local_id) : gl_WorkGroupSize.x))))));
 uint workgroup_id = ((0u | ((gl_WorkGroupID.x))) | 0u);
 uint workgroup_base = workgroup_size * ((false ? (subgroup_local_id) : workgroup_id));
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (clamp((~ ((uint(uvec2(((~ (workgroup_base + ((((0u ^ (((uint((max(uvec3((min((~ (~ ((((0u | ((((uint(uvec3(subgroup_id * subgroup_size, 1u, 1u)))) / 1u)))) ^ 0u)))), (0u | ((((uint(uvec3(((subgroup_id) ^ 0u) * subgroup_size, 1u, 1u)))) / 1u))))), uint((injectionSwitch.x)), 0u), uvec3((0u | ((((uint(uvec3((0u ^ (((subgroup_id) / 1u))) * subgroup_size, 1u, 1u)))) / 1u))), uint((injectionSwitch.x)), 0u))))) << 0u)))) << 0u)))) - 0u), 0u))))), (~ ((uint(uvec2(((~ (workgroup_base + ((((0u ^ (((uint((max(uvec3((min((~ (~ ((((0u | ((((uint(uvec3(subgroup_id * subgroup_size, 1u, 1u)))) / 1u)))) ^ 0u)))), (0u | ((((uint(uvec3(((subgroup_id) ^ 0u) * subgroup_size, 1u, 1u)))) / 1u))))), uint((injectionSwitch.x)), 0u), uvec3((0u | ((((uint(uvec3((0u ^ (((subgroup_id) / 1u))) * subgroup_size, 1u, 1u)))) / 1u))), uint((injectionSwitch.x)), 0u))))) << 0u)))) << 0u)))) - 0u), 0u))))), (~ ((uint(uvec2(((~ (workgroup_base + ((((0u ^ (((uint((max(uvec3((min((~ (~ ((((0u | ((((uint(uvec3(subgroup_id * subgroup_size, 1u, 1u)))) / 1u)))) ^ 0u)))), (0u | ((((uint(uvec3(((subgroup_id) ^ 0u) * subgroup_size, 1u, 1u)))) / 1u))))), uint((injectionSwitch.x)), 0u), uvec3((0u | ((((uint(uvec3((0u ^ (((subgroup_id) / 1u))) * subgroup_size, 1u, 1u)))) / 1u))), uint((injectionSwitch.x)), 0u))))) << 0u)))) << 0u)))) - 0u), 0u))))))) + ((((((clamp((max(clamp(subgroup_local_id, subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id))), clamp(subgroup_local_id, subgroup_local_id, ((subgroup_local_id) | ((max(subgroup_local_id, subgroup_local_id))))))), (((0u | ((max(clamp(subgroup_local_id, subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id))), clamp(subgroup_local_id, subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id)))))))) ^ uint((injectionSwitch.x))), (max(clamp(subgroup_local_id, subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id))), clamp(((true ? (0u ^ ((uint(uvec2(subgroup_local_id, 1u))))) : (subgroup_local_id))), subgroup_local_id, ((subgroup_local_id) | (subgroup_local_id)))))))) + 1) % subgroup_size) << 0u));
 if(((false || (((bool(bvec4((false), ((injectionSwitch.x > injectionSwitch.y)), true, ((false) && true))))) && true))))
  return;
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < ((~ (~ ((((((uint((injectionSwitch.x)) ^ ((subgroup_size))))) >> 0u)) | ((((max(((uint((injectionSwitch.x)) ^ ((subgroup_size)))), ((uint((injectionSwitch.x)) ^ ((subgroup_size))))))) * 1u))))) << (((0u ^ ((((56413u) << 0u) | ((56413u) << 0u))))) & ((min(((0u) | 0u), 0u)) >> (uint(6u))))))
  {
   if((false))
    return;
   int i = 0;
   buf[next_virtual_gid] = 2;
   if((false))
    return;
  }
 else
  {
   if((bool(bool(((((false || (((injectionSwitch.x > injectionSwitch.y) && (bool(bvec2(true, true)))))))))))))
    return;
   if(((((((bool(bvec2((bool(bvec4(((((false) && true)) || false), false, true, true))), (true && (false))))) || false)))) || false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(((((float(float((max(injectionSwitch.x, ((max((injectionSwitch.x), (((injectionSwitch.x)) + 0.0))) - 0.0)))))) > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((! (! ((! (! (! ((! (! ((! ((! (! ((false)))))))))))))))))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((((((dot((vec4(0.0, 0.0, 0.0, 0.0) + ((mix(vec4((vec4(0.0, 0.0, 1.0, 1.0))[0], (vec4(0.0, 0.0, 1.0, 1.0))[1], (87.34), (vec4(0.0, 0.0, 1.0, 1.0))[3]), vec4((995.215), (2.4), (vec4(0.0, 0.0, 1.0, 1.0))[2], (628.373)), bvec4(false, false, true, false))))), vec4(1.0, 1.0, 0.0, 0.0))) + ((mix(float((- 382.895)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
    return;
   (((clamp(((1u) | (1u)), 1u, 1u)) * ((1u * ((buf[next_virtual_gid] = 2) | 0u)))));
   if((false))
    return;
   if(((! (false || ((! (false)))))))
    return;
  }
}
