#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (min(((uvec3(0u, (1u * (0u)), 0u) | (uvec3(uvec3(gl_NumWorkGroups))))), gl_NumWorkGroups)).x;
 uint workgroup_size = (~ ((((max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))) / uvec3(1u, 1u, (clamp(1u, (max(1u, 1u)), 1u)))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (~ (~ (uint(uint((min((max((((workgroup_id) | 0u)), (((false ? ((-- num_workgroup)) : ((((max((((workgroup_id) | 0u)) * ((1u) << (0u << (uint(5u)))), (((workgroup_id) | 0u)) * ((1u) << (0u << (uint(5u))))))) - 0u))))))), (((uint(uint((((workgroup_id) | 0u)))))) >> 0u))))))));
 uint virtual_gid = ((workgroup_base) | ((min(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (uint(uint(workgroup_base + (~ (((~ (subgroup_id * subgroup_size)) << 0u)))))) + ((~ ((~ (~ (0u | (((((((0u ^ (~ (((true ? (((subgroup_local_id + (min(1, 1))) - 0u)) % subgroup_size : (num_workgroup)))))))) - 0u)) >> 0u))))))));
 buf[virtual_gid] = 1;
 if(((((subgroup_local_id + 1) << (0u << (uint(7u)))) < subgroup_size) || (false || (false))))
  {
   int i = 0;
   buf[next_virtual_gid] = 2;
  }
 else
  {
   buf[next_virtual_gid] = (min(2, 2));
  }
}
