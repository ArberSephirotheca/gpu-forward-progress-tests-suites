#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 ^ 1) & 1, max((0 ^ 1) & 1, (0 ^ 1) & 1)))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_IDENTITY(true, ! (! (true))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(false)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - _GLF_IDENTITY(0.0, (0.0) / 1.0)), injectionSwitch[1])).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0))))), ! (! (bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0))))), ! (! (bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0)))))))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0))))), ! (! (bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0))))))))))), ! (! (bool(! (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0))))), ! (! (bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), ! (! (bool(_injected_loop_counter > 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))), ! (! ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))))) && true)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) >> 0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, (0) + (0 ^ 0)) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z = subgroup_size;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), max(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch))), max(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bvec2(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 1.0, 0.0))))), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-1.0), (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), vec2((clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch))[0], _GLF_FUZZED(vec3(701.895, 5.9, 734.778).g)), bvec2(true, false)))).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x > injectionSwitch.y))), bool(bvec3(bool(! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x > injectionSwitch.y))), true, true)))))))))), ! (! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, exp(sqrt(0.0)), 1.0, determinant(mat4(1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0))), 0.0, 1.0))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8090.4409, -3.7)))).x > injectionSwitch.y))), bool(bvec3(bool(! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-8090.4409, -3.7), min(_GLF_IDENTITY(vec2(-8090.4409, -3.7), (vec2(-8090.4409, -3.7)) * vec2(1.0, 1.0)), vec2(-8090.4409, -3.7))))), (false ? _GLF_FUZZED(vec2(-2.7, -5.1)) : (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-8090.4409, -3.7), min(_GLF_IDENTITY(vec2(-8090.4409, -3.7), (vec2(-8090.4409, -3.7)) * vec2(1.0, 1.0)), vec2(-8090.4409, -3.7)))))))).x > injectionSwitch.y))), true, true))))))))))))))))))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec3(! (_GLF_IDENTITY(false, (false) || false)), false, false)))))))), _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec3(! (_GLF_IDENTITY(false, (false) || false)), false, false)))))))), _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))) && true), true), false, false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, true)))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true))))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), false, false)))))), (_GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), true, true, true)))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, (true) || false)), false, false)))))), ((! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, true)))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), false, false))))))) && true)) && true)))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u * (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (false ? _GLF_FUZZED(subgroup_id) : (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) << 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).x), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 1.0, 1.0, 0.0)))) * 1.0)))));
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))));
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y) && true))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), false), false)))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true), false)))), bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.9)), bool(false))))), true), false), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) - 0)) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(ivec4(4, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1))), 4))))), (((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) - _GLF_IDENTITY(0, (0) - 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 1, 0))) > (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0))), 0 + (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0)))))) << 0))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (_GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) | 0)) >> 0)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || false))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))), true, false)))))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))) >> (1u ^ 1u)), 0u, ((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), 0u | (uint(_GLF_IDENTITY(7u, (_GLF_IDENTITY(7u, (7u) / 1u)) ^ 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED((+ 54735u)) : gl_WorkGroupSize.x));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (true ? _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID))))) | (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(45131u, 118419u, 41955u)) : gl_WorkGroupID)))) : _GLF_FUZZED(uvec3(178868u, 95902u, 6218u)))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sin(0.0) + (injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false, false))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sin(0.0) + (injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false, false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u)), clamp(~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u)), ~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u)), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u)), min(~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), 1u * ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)))) >> 0u)), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u), min(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w), ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) >> 0u)))))))))))) + subgroup_id * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z + GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, max(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)), clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)).z + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1, ~ (~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1)))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1, ~ (~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1)))), uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1, ~ (~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1)))), 0u))), 0u))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, min(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)), GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)))))), clamp(_GLF_IDENTITY(~ (~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)), max(~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base), max(~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base), ~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)))), ~ (~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)))), ~ (~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base)), ~ (~ (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base))))).z, (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z) * _GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uint(1u))), ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(~ (1u), 1u, 1u), (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), clamp(uvec3(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY((uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), ((uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) / uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))) * (uvec3(~ (_GLF_IDENTITY(1u, (1u) | (1u))), 1u, 1u))), _GLF_IDENTITY(max(uvec3(_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u), 1u, 1u), uvec3(~ (1u), 1u, 1u)), ~ (_GLF_IDENTITY(~ (max(uvec3(_GLF_IDENTITY(~ (1u), (~ (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(1u, 1u, (1u | 1u), 1u), (uvec4(1u, 1u, (1u | 1u), 1u)) | (uvec4(1u, 1u, (1u | 1u), 1u))))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u | (1u))) | 0u), 1u), uvec3(~ (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) >> 0u)))), 1u, 1u))), clamp(~ _GLF_IDENTITY((max(uvec3(_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u), 1u, 1u), uvec3(~ (1u), 1u, 1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(84612u, 121762u, 54889u)) : (max(uvec3(_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u), 1u, 1u), uvec3(~ (1u), 1u, 1u))))), ~ (max(uvec3(_GLF_IDENTITY(~ (1u), (~ _GLF_IDENTITY((1u), ((1u)) >> 0u)) / 1u), 1u, 1u), uvec3(~ (1u), 1u, 1u))), _GLF_IDENTITY(~ (max(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), max(~ (1u), ~ (1u))), (~ (1u)) / 1u), 1u, 1u), uvec3(~ (1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u + (1u))) ^ 0u), 1u))), uvec3(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) - 0u), 1u)), 1u, 1u) * (~ (max(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) | (_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u))), 1u, 1u), uvec3(~ (1u), 1u, 1u))))))))))), max(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))), 1u, 1u), _GLF_IDENTITY(max(uvec3(~ _GLF_IDENTITY((1u), 0u ^ ((1u))), 1u, 1u), uvec3(~ _GLF_IDENTITY((1u), ~ (~ ((1u)))), 1u, 1u)), (_GLF_IDENTITY(max(uvec3(~ _GLF_IDENTITY((1u), 0u ^ ((1u))), 1u, 1u), uvec3(~ (1u), 1u, 1u)), (false ? _GLF_FUZZED(uvec3(149984u, 54684u, 15145u)) : max(uvec3(~ _GLF_IDENTITY((1u), 0u ^ ((1u))), 1u, 1u), uvec3(~ (1u), 1u, 1u))))) << uvec3(0u, 0u, 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(~ (1u), 1u, 1u), max(uvec3(~ (1u), 1u, 1u), uvec3(_GLF_IDENTITY(~ _GLF_IDENTITY((1u), (false ? _GLF_FUZZED(subgroup_local_id) : (1u))), (~ (_GLF_IDENTITY(1u, 0u ^ (1u)))) | _GLF_IDENTITY((~ (1u)), ~ (~ ((~ (1u)))))), 1u, _GLF_IDENTITY(1u, (1u) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(~ (1u), 1u, 1u), max(uvec3(~ (1u), 1u, 1u), uvec3(_GLF_IDENTITY(~ (1u), (~ (1u)) | _GLF_IDENTITY((~ (1u)), ~ (~ ((~ (1u)))))), 1u, _GLF_IDENTITY(1u, (1u) ^ 0u)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6621.3468, -5.7)))).y)) ? _GLF_FUZZED((true ? uvec3(105270u, 26599u, 97007u) : uvec3(126248u, 40481u, 170106u))) : _GLF_IDENTITY(uvec3(~ (1u), 1u, 1u), max(uvec3(~ (1u), 1u, 1u), uvec3(_GLF_IDENTITY(~ (1u), (~ (1u)) | _GLF_IDENTITY((~ (1u)), ~ (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED(workgroup_id)))), (~ (_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, (1u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(workgroup_id))))) - 0u)))))), 1u, _GLF_IDENTITY(1u, (1u) ^ 0u))))))) - uvec3(0u, 0u, 0u))))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8388.1815)), float(injectionSwitch.x), bool(true)), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-8388.1815)), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(-327.355)), float(mix(float(_GLF_FUZZED(-8388.1815)), float(injectionSwitch.x), bool(true))), bool(true))), mix(float(_GLF_FUZZED(-8388.1815)), float(injectionSwitch.x), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0)) * 1.0) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)))))))))) && true), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x))))) * 1.0)) * 1.0) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)))))))))) && true, ((bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((roundEven(44.44) * -1269.7490))))))) && true)))))))))) && true) && true))))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, true, false, true)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bool((_GLF_IDENTITY(false, (false) || false)))))))) && true), ! (! (false)))))) || false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), (false) || false)) && true), ! (! (false)))))), ! (! ((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), (false) || false)) && true), ! (! (false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), ! (! (false)))))) || false), bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), ! (! (false)))))) || false), false)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true)))) || _GLF_IDENTITY(false, (false) && true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec2(0.0, 0.0), vec2(1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0), (mat3x4(injectionSwitch, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec2(0.0, 0.0), vec2(1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, false || (true)) && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(8.9)), float(_GLF_IDENTITY(injectionSwitch[1], float(float(injectionSwitch[1])))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0]))) * 1.0), injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (vec2(vec4(injectionSwitch, 0.0, 1.0))) - abs(vec2(0.0, 0.0))))[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[0])), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0))), injectionSwitch[1])).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (! ((true))))) || false))))) || false)) && ((injectionSwitch.x > injectionSwitch.y))))))), (! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6665.9870), _GLF_FUZZED(8.7)), bvec2(false, false))))), injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(2285.3696)), float(injectionSwitch[0]), bool(true))))), injectionSwitch[1]))[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - _GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(16.05)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) + vec2(0.0, 0.0))))[1])).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((-7.8 + -7.9))), float(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), bool(true))), injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0))), injectionSwitch[1])).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) - vec2(0.0, 0.0))[0], injectionSwitch[1])).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) || false)) && ((injectionSwitch.x > injectionSwitch.y)))))))) || false))))))
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(9.6)), bool(false)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true)))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false)) || false)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(-1.3, -90.25, -16.41, 6.8).r)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))) > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)) > injectionSwitch.y) || false)))))
              barrier();
            }
          }
        }
      }
     else
      {
      }
    }
  }
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x = next_virtual_gid, (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x = next_virtual_gid) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(subgroup_id) : uint(0u))))));
 buf[virtual_gid] = _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), clamp(1, 1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-32260))))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-32260)))))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) << 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-32260)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1))))), 0 ^ (~ (~ (1))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(~ (1), ~ (1)))))))), ~ (~ (_GLF_IDENTITY(1, (1) * 1)))), 1))))), 0 ^ (_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) | (~ (~ (1)))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1))), (true ? _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) * 1), 1))) : _GLF_FUZZED(-79423))), _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(4), int(4))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)), ~ (~ (int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)))))))))), 0 ^ (~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) << 0)) | (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(28446)))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)), max(int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)), int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1))))))), 0 ^ (~ (~ (1))))))))), 0 | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(~ (1), ~ (1)))))))), ~ (~ (_GLF_IDENTITY(1, (1) * 1)))), 1))))), 0 ^ (_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) | (~ (~ (1)))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1))), (true ? _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) * 1), 1))) : _GLF_FUZZED(-79423))), _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(4), int(4))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)), ~ (~ (int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)))))))))), 0 ^ (~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) << 0)) | (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(28446)))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)), max(int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1)), int(ivec2(_GLF_IDENTITY(1, (1) * 1), 1))))))), 0 ^ (~ (~ (1))))))))))))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1 < GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || (false)) || false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))) || false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true, false, true)), true && (bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true, false, true))))), false, true)), (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8955.9234) : injectionSwitch.x))) - 0.0) > injectionSwitch.y)), false, false, true))) && true))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-50.13))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true))) && true)))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true))) && true))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)), (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y)), false, false, true))) && true)))) && true))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       int i = 0;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(291.482)), float(injectionSwitch.y), bool(true))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))), bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1)))))) << 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1)))))) << 0)))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x] = _GLF_IDENTITY(2, (2) / int(_GLF_ONE(1.0, injectionSwitch.y)));
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 1, 1))) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, ~ (~ (2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x] = _GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)) / 1) > (_GLF_IDENTITY(0, int(ivec2(0, 0))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, true)))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, true && (true))) && true), false))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), bool(bvec2(! (! (true)), true)))))))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(38.30) : injectionSwitch.x)) < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), bool(bvec2(! (! (true)), true)))))))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(38.30) : injectionSwitch.x)) < injectionSwitch.y))))) || false), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec3(! (true), false, false), bvec3(bvec3(bvec3(! (true), false, false)))))), true, true, false))))), (_GLF_IDENTITY(true, ! (! (true)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8.6)))))).x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-60222) : _injected_loop_counter)) != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(39.70, mix(float(_GLF_FUZZED(-8.9)), float(39.70), bool(true)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9.1)), bvec2(true, false))), injectionSwitch)).x > injectionSwitch.y))));
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (! (_GLF_WRAPPED_LOOP(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! ((_GLF_WRAPPED_LOOP(false)))))))))))))))));
 if(_GLF_DEAD(false))
  barrier();
}
