#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), mix(float(float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), float(_GLF_FUZZED(7.8)), bool(false)))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bool(false))) || (false))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), bool(bvec2(! ((_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), false)))))))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (73997 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) * 1))) != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))), false)))))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))))) && true)) || false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))) || false)))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(tan(0.0), (true ? _GLF_IDENTITY(tan(0.0), mix(float(tan(0.0)), float(_GLF_FUZZED(-40.39)), bool(false))) : _GLF_FUZZED(step(-206.483, -8.6))))), vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(float(1.0))))), 0.0)), dot(vec2(1.0, _GLF_IDENTITY(tan(0.0), float(_GLF_IDENTITY(mat4x2(tan(0.0), 0.0, exp(0.0), 0.0, abs(1.0), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0), mat4x2(mat4x3(mat4x2(tan(0.0), 0.0, exp(0.0), 0.0, abs(1.0), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0))))))), vec2(1.0, 0.0))), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0)), 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
      {
       return;
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch[0]) - 0.0), injectionSwitch[1])), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-2896.9259, 8.6)), vec2(1.0, 1.0) * (_GLF_FUZZED(vec2(-2896.9259, 8.6)))) : injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     break;
    }
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), bool(_GLF_IDENTITY(bool(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))), bool(bool(bool(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) && true), true, true)))))), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(false))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec2(197463u, 183005u), (true ? uvec2(197463u, 183005u) : _GLF_FUZZED((uvec2(15939u, 70115u) / atomicAdd(subgroup_size, virtual_gid)))))[1]) : (subgroup_local_id + 1))) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) >> 0u)) | _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), clamp(uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) >> 0u)) | _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), clamp(uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size)))))))), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) >> 0u)) | _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), clamp(uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size)))))))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) >> 0u)) | _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), uint(_GLF_IDENTITY(uint((((subgroup_local_id + 1) % subgroup_size))), clamp(uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size))), uint((((subgroup_local_id + 1) % subgroup_size))))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), min(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) + 0), (subgroup_local_id + _GLF_IDENTITY(1, (1) + 0)) | (subgroup_local_id + _GLF_IDENTITY(1, (1) + 0)))) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), min(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | 0u)))))) << 0u) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), min(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)) ^ uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(195573u, 50273u, 123650u)))))), max(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(48151u, 7342u, 63953u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), (false ? _GLF_FUZZED((+ 35581u)) : _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), min(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | 0u)))))) << 0u) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), min(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)) ^ uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(195573u, 50273u, 123650u)))))), max(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(48151u, 7342u, 63953u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), 0u + (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), min(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | 0u)))))) << 0u) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), min(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)) ^ uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(195573u, 50273u, 123650u)))))), max(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(48151u, 7342u, 63953u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), min(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))) | 0u)))))) << 0u) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), min(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), (uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)) ^ uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(195573u, 50273u, 123650u)))))), max(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))), (0u & 19210u), 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(48151u, 7342u, 63953u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u))), (uvec3(uvec3(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (0u & 19210u), 1u)))) << uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size)) >> 0u))))), _GLF_IDENTITY(0u, ~ (~ (0u))) | (((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size)))))) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(virtual_gid))), (subgroup_id * subgroup_size) >> 0u)) >> 0u), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(virtual_gid))), (subgroup_id * subgroup_size) >> 0u)) >> 0u), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(virtual_gid))), (subgroup_id * subgroup_size) >> 0u)) >> 0u)) << 0u), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(virtual_gid))), (subgroup_id * subgroup_size) >> 0u)) >> 0u), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(virtual_gid))), (subgroup_id * subgroup_size) >> 0u)) >> 0u))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u)) | ((subgroup_local_id + 1))), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u)) | ((subgroup_local_id + 1))))) + 0u)))) % subgroup_size), min(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), uint(uvec3(subgroup_local_id, (1u | 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))))) + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size), uint(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), (1u | 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size))), (false ? _GLF_FUZZED(uint(8097.5042)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size))))), (1u | 0u)), uvec2(0u, 0u) ^ (uvec2(((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), (1u | 0u))))) << uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(0u, ~ (~ (0u)))) ^ (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) | (((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u)))) % subgroup_size)))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))) && true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0)).y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) || false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           return;
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(false))
        break;
      }
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), ((injectionSwitch) + vec2(0.0, 0.0)) * mat2(1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)))))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), max(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))))))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true, false, false))) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(bool(bvec2(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true)), bool(bool(bool(bvec2(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true)))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (0 & 65139) | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (0 & 65139) | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))) / (1 & 1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (0 & 65139) | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (0 & 65139) | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))) / (1 & 1)), (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (0 & 65139) | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (0 & 65139) | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))) / (1 & 1))) - 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6)))) - _GLF_IDENTITY(0, 0 | (0))), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) / 1))))), int(ivec2((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6)))) - _GLF_IDENTITY(0, 0 | (0))), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), ~ (~ (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) / 1))))), 0)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6)))) - _GLF_IDENTITY(0, 0 | (0))), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) / 1))))), int(ivec2((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6)))) - _GLF_IDENTITY(0, 0 | (0))), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), ~ (~ (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-54293) : _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) / 1))))), 0)))), true))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), _injected_loop_counter)) != 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(38.25)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), min(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)))), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true)), clamp(mix(vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(38.25)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), min(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)))), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true)), mix(vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(38.25)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), min(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)))), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true)), mix(vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(38.25)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), min(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)), vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1513.0263, 8.0)) : injectionSwitch)))[1], ((injectionSwitch)[1]) * 1.0)))), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true))))).x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                continue;
              }
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0), 0 + (clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0))))); _injected_loop_counter --)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(bool(bvec4(false, true, false, false)))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0))))) && true))))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 1 * (1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0, sqrt(1.0))), mix(float(float(mat4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0, sqrt(1.0)))), float(_GLF_FUZZED(-8863.5183)), bool(false)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             do
              {
               atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(max(4, 4), (true ? _GLF_IDENTITY(max(4, 4), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(max(4, 4), _GLF_IDENTITY(max(max(4, 4), max(4, 4)), (max(max(4, 4), max(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-90880) : 4)), 4))) * 1))), ((_GLF_IDENTITY(max(4, 4), _GLF_IDENTITY(max(max(4, 4), max(4, 4)), (max(max(4, 4), max(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-90880) : 4)), 4))) * 1)))) >> 0))) : _GLF_FUZZED(2705))), (_GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(4, min(4, 4)), 4), (max(4, 4)) | (max(4, 4))), (true ? max(4, 4) : _GLF_FUZZED(47127)))) << 0)))), 64, 4);
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), bool(bvec2((! (_GLF_WRAPPED_LOOP(false))), true)))));
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) && true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
     subgroupAll(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), bool(bvec2((! (true)), true)))))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true)), ! (! (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.7) : injectionSwitch.x)) > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))), int(ivec4(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), 2))), 4, 64, 4);
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(_GLF_IDENTITY(true, (true) || false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true), ! (! (false)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
}
