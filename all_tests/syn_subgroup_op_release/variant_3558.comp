#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2)))))), max(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2)))))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2))))))))); _injected_loop_counter ++)
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 1.0))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)))))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, true))))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true)), bool(bvec3((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true)), true, false)))) && true)); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)) >> 0)) * 1)) : _injected_loop_counter --))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x), float(_GLF_FUZZED(-52.78)), bool(false))) < injectionSwitch.y))))
                      {
                       do
                        {
                         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           do
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-97.26)), float(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.8)), float(injectionSwitch.x), bool(true))))))), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-871.053)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), true, true, true))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), true, true, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(38.58, -877.181)) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y))), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true))), false))))))), true, false)), true, true, true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))))))))), true, false)), true, true, true)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), true, true, true))))))), false)))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))), min((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1)))) | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1)))))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY((1 & 1), int(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (ivec3((1 & 1), 1, 0)) >> ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) | ivec3(0, 0, 0)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), int(1))) + 0), _GLF_IDENTITY(int(1), int(1))))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (90678 & _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(0.0, round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(float(1.0))), 1.0)))))), 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 0.0), clamp(vec3(0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 0.0), vec3(0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 0.0), vec3(0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 0.0)))) - sin(cross(vec3(9.0, -8.1, 6.6), vec3(9.0, -8.1, 6.6)))), (true ? _GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (true ? vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec3(-7182.6315, -8383.7096, -77.92), mix(vec3((vec3(-7182.6315, -8383.7096, -77.92))[0], _GLF_FUZZED(649.951), _GLF_FUZZED(-5987.0485)), vec3(_GLF_FUZZED(300.306), (vec3(-7182.6315, -8383.7096, -77.92))[1], _GLF_IDENTITY((vec3(-7182.6315, -8383.7096, -77.92))[2], ((vec3(-7182.6315, -8383.7096, -77.92))[2]) - 0.0)), bvec3(false, true, true)))), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)), (false ? _GLF_FUZZED(vec3(-718.614, 9657.6882, -45.80)) : _GLF_IDENTITY(_GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)), vec3(mat2(_GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)), 0.0))))), _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)), _GLF_IDENTITY(_GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec3(6.2, -9.3, 4.2)) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)), mix(vec3(_GLF_FUZZED(98.57), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))) ? _GLF_FUZZED(vec3(6.2, -9.3, 4.2)) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92))), max((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))) ? _GLF_FUZZED(vec3(6.2, -9.3, 4.2)) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))) ? _GLF_FUZZED(vec3(6.2, -9.3, 4.2)) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)))))[1], _GLF_FUZZED(((-6.8 - 9.8)))), vec3((false ? _GLF_FUZZED(vec3(6.2, -9.3, 4.2)) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)))[0], _GLF_FUZZED((7.3 * -7.4)), (false ? _GLF_FUZZED(vec3(6.2, -9.3, 4.2)) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)))[2]), bvec3(true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) : _GLF_FUZZED(acosh(vec3(-3475.7965, -9565.5995, 6.2))))))), 0.0)), max(float(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), _GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (true ? _GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, (0.0) + sin(0.0))), (true ? vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)))) : _GLF_FUZZED(acosh(vec3(-3475.7965, _GLF_IDENTITY(-9565.5995, (-9565.5995) - 0.0), 6.2))))))), 0.0)), float(mat3(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), (false ? _GLF_FUZZED(-997.234) : 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), vec2(_GLF_IDENTITY(vec3(normalize(vec2(1.0, 1.0)), 0.0), (false ? _GLF_FUZZED(floor(vec3(-87.60, 5.8, -266.907))) : _GLF_IDENTITY(vec3(normalize(vec2(1.0, 1.0)), 0.0), max(vec3(normalize(vec2(1.0, 1.0)), 0.0), vec3(normalize(vec2(1.0, 1.0)), 0.0))))))))), 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (true ? vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)))) : _GLF_FUZZED(acosh(vec3(-3475.7965, -9565.5995, 6.2))))), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-5872.0863)), bool(false)))), float(_GLF_FUZZED(-946.565)), bool(false))), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), vec3(mat2(mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0))), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) * vec3(1.0, 1.0, 1.0))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 0.0))))) + abs(vec3(0.0, 0.0, 0.0)), min((_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), vec3(mat2(mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0))), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) * vec3(1.0, 1.0, 1.0))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 0.0))))) + abs(vec3(0.0, 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), vec3(mat2(mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0))), (_GLF_IDENTITY(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(vec4(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), 1.0)))) * vec3(1.0, 1.0, 1.0))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 0.0))))) + abs(vec3(0.0, 0.0, 0.0))))), (true ? vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0) : _GLF_FUZZED(vec3(-7182.6315, -8383.7096, -77.92)))) : _GLF_FUZZED(acosh(vec3(-3475.7965, -9565.5995, 6.2)))))) * mat3(1.0)))), 0.0))))) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), (int(1)) << 0), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), (~ (~ (int(6)))) + 0)), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(6), int(6))), 0 ^ (int(1 << _GLF_IDENTITY(int(6), int(6)))))), min(int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(6), int(6))), 0 ^ (int(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(int(6), int(6)))))))), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), min(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))), 0 ^ (int(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 ^ (6))) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) * 1))))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) ^ 0)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) || false)))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)) && true)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                          continue;
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, ((false) || false) || false))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u), uvec3(0u, 0u, 0u) | (uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec3(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))))))) | 0u, clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u), uvec3(0u, 0u, 0u) | (uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec3(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, uint(uvec3(_GLF_IDENTITY(6u, (6u) | (6u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : 1u)), 1u)))))), 0u)))))))) | 0u, ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) << 0u)), 0u), uvec3(0u, 0u, 0u) | (uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec3(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))))))) | 0u) + 0u), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(true, false || (true)) ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 1u * (6u))), uint(6u))), 0u)))), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec3(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))))))) | 0u, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u), uvec3(0u, 0u, 0u) | (uvec3(true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec3(true ? subgroup_id * subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(-7.2, -27.53, -57.57, -4629.5390))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u)))))))) | 0u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), min(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), clamp(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), subgroup_local_id + _GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, ((1) - 0) | 0))))))), min(~ (~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) << int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1)), _GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) + (1)), min(1, _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1))))), (1) - 0)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))))) | 0u, min(_GLF_IDENTITY(((_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))))) | 0u, (((_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))))) | 0u) | (((_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))))) | 0u)), ((_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))))) | 0u))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))), 0u ^ (_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)))))), 0u, (1u & 1u)), (uvec3(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)))))), 0u, (1u & 1u))) | (uvec3(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), 0 ^ (_GLF_IDENTITY(1, (1) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0))), 0u ^ (_GLF_IDENTITY(0u, (0u) * (1u & 1u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)))))), 0u, (1u & 1u)))))))), (~ _GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) | (1u))))) * (1u & _GLF_IDENTITY(1u, min(1u, 1u)))) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1)))))) - 0)))))), clamp((~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u), min(_GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u), (false ? _GLF_FUZZED(183181u) : _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u))))))) * (1u & _GLF_IDENTITY(1u, min(1u, 1u))), ((_GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u), min(_GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u), (false ? _GLF_FUZZED(183181u) : _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u))))))) * (1u & _GLF_IDENTITY(1u, min(1u, 1u)))) ^ 0u)) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1)))))) - 0)))))), (~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u))) * (1u & _GLF_IDENTITY(1u, min(1u, 1u)))) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1)))))) - 0)))))), (~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ((true ? 0u : _GLF_FUZZED(subgroup_size))) * 1u))) * (1u & _GLF_IDENTITY(1u, min(1u, 1u)))) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1)))))) - 0))))))))) >> 0u)))) % _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 1u))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (0 & 11519); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
    {
     buf[virtual_gid] = 1;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(6037.5885) : injectionSwitch[0])), injectionSwitch[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))))))])).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, min(1, 1))), (max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, min(1, 1)))) | (_GLF_IDENTITY(max(1, _GLF_IDENTITY(1, min(1, 1))), clamp(_GLF_IDENTITY(max(1, _GLF_IDENTITY(1, min(1, 1))), (max(1, _GLF_IDENTITY(1, min(1, 1)))) * 1), max(1, _GLF_IDENTITY(1, min(1, 1))), max(1, _GLF_IDENTITY(1, min(1, 1))))))))) - 0u) < subgroup_size)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1, (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1) << (0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))))), 0))) - (1 ^ (1 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                                    {
                                     return;
                                    }
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
                                  return;
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         return;
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     if(_GLF_DEAD(false))
                                      break;
                                    }
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(66825) : _GLF_IDENTITY(2, _GLF_IDENTITY((2), _GLF_IDENTITY(int(ivec4((2), 1, 0, 1)), clamp(int(ivec4((2), 1, 0, 1)), int(ivec4((2), 1, 0, 1)), int(ivec4((2), 1, 0, 1))))) ^ 0)), (_GLF_IDENTITY((false ? _GLF_FUZZED(66825) : _GLF_IDENTITY(2, _GLF_IDENTITY((2), int(ivec4((2), 1, 0, 1))) ^ 0)), ((false ? _GLF_FUZZED(66825) : _GLF_IDENTITY(2, _GLF_IDENTITY((2), int(ivec4((2), 1, 0, 1))) ^ 0))) / _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (true ? _GLF_IDENTITY(clamp(1, 1, 1), clamp(clamp(1, 1, 1), clamp(1, 1, 1), clamp(1, 1, 1))) : _GLF_FUZZED((~ _injected_loop_counter))))))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(2, (false ? _GLF_FUZZED(66825) : _GLF_IDENTITY(2, _GLF_IDENTITY((2), int(ivec4((2), 1, 0, 1))) ^ 0)))), ((_GLF_IDENTITY(2, (false ? _GLF_FUZZED(66825) : _GLF_IDENTITY(2, _GLF_IDENTITY((2), int(ivec4((2), 1, 0, 1))) ^ 0))))) >> (-14259 & 0)) << 0)), 4, 64, 4);
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                               if(_GLF_DEAD(false))
                                return;
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false)))), (bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))) && true)), (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  break;
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)))) && true), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true), false, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true), false, false))))), false, false, false)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec3(_injected_loop_counter != 0, false, false)))))))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true)))))
                        return;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                                {
                                 for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, 0 ^ (1 | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((51518 & 0), ((51518 & 0)) | ((51518 & 0)))); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                            {
                                             return;
                                            }
                                           else
                                            {
                                            }
                                          }
                                         else
                                          {
                                          }
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                                          continue;
                                        }
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                    }
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | ((0 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0))))), int(_GLF_ONE(1.0, injectionSwitch.y))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))) | (int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0))))), int(_GLF_ONE(1.0, injectionSwitch.y))))))))); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), true), true)))))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(2.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(floatBitsToInt(1383.6741)) : int(6))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        return;
                       do
                        {
                         if(_GLF_DEAD(false))
                          break;
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0))), ~ (~ (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), false, true))); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
                          return;
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> (1 ^ 1)))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             subgroupAll(false);
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(subgroup_local_id)))) << 0u), 4, 64, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(16074) : _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, clamp(4, 4, 4))))) << 0, max(_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, clamp(4, 4, 4))))) << 0, max((_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, clamp(4, 4, 4))))) << 0, (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, clamp(4, 4, 4))))) << 0)), (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, clamp(4, 4, 4))))) << 0))), 4)))));
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), true && (false)), ! (! (false)))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-812.012) : injectionSwitch.y))), float(_GLF_FUZZED(8186.1157)), bool(false)))))))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         do
                          {
                           for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7)))))) >> _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (true ? ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter))) | (_GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec3(1, 0, 0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, (0) + (0 | 0))))); _injected_loop_counter --)
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, true))))))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                                    return;
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                     break;
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.4)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), bool(true))))) < injectionSwitch.y))))
                                {
                                 do
                                  {
                                   do
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                      break;
                                     if(_GLF_DEAD(false))
                                      break;
                                     do
                                      {
                                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                                        {
                                         if(_GLF_DEAD(false))
                                          continue;
                                         return;
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         return;
                                        }
                                       else
                                        {
                                        }
                                      }
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        return;
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(false))
                                    break;
                                   do
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         subgroupAll(true);
                                        }
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                     if(_GLF_DEAD(false))
                                      break;
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))));
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       return;
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_DEAD(false))
                                    break;
                                  }
                                }
                               break;
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0)).y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
}
