#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true)))))))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), true, true))));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))) || false); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) | (0 >> _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 break;
                }
               if(_GLF_DEAD(false))
                break;
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(mod(vec2(-2836.9124, -4.5), vec2(4.4, -8.3)))))).y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, determinant(mat4(1.0, abs(1.0), 0.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.7)), bool(false))), 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 1.0))), clamp(vec3(injectionSwitch, determinant(_GLF_IDENTITY(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(float(_injected_loop_counter)) : 1.0))), (_GLF_IDENTITY(mat4(1.0, abs(1.0), 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0), (mat4(1.0, abs(1.0), 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0)), clamp(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0))))) * (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-0.5) : 0.0)))), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) / 1.0, float(mat2x3((0.0) / 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x))))), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) - mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), vec3(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 0.0))), determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(1.0, float(float(1.0)))), bool(true))), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(injectionSwitch, determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 1.0)))))), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 1.0, 1.0, 1.0, tan(tan(0.0)), 0.0, determinant(mat3(0.0, tan(0.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, exp(0.0), 0.0)), (float(mat3x4(1.0, 1.0, 1.0, 1.0, tan(tan(0.0)), 0.0, determinant(mat3(0.0, tan(0.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, exp(0.0), 0.0))) / 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0))), clamp(vec3(injectionSwitch, determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(vec4(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), 0.0, 0.0, 1.0))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false))))), mat3(_GLF_IDENTITY(mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))), mat3(1.0) * (mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(40.87)), float(0.0), bool(true))), 0.0)), 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)) ? _GLF_FUZZED(1.2) : 0.0))), 0.0, 0.0)), clamp(vec2(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(vec4(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), 0.0, 0.0, 1.0))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false))))), mat3(_GLF_IDENTITY(mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))), mat3(1.0) * (mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(40.87)), float(0.0), bool(true))), 0.0)), 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)) ? _GLF_FUZZED(1.2) : 0.0))), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(vec4(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), 0.0, 0.0, 1.0))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false))))), mat3(_GLF_IDENTITY(mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))), mat3(1.0) * (mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(40.87)), float(0.0), bool(true))), 0.0)), 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)) ? _GLF_FUZZED(1.2) : 0.0))), 0.0, 0.0)), (vec2(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(vec4(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), 0.0, 0.0, 1.0))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false))))), mat3(_GLF_IDENTITY(mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))), mat3(1.0) * (mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(40.87)), float(0.0), bool(true))), 0.0)), 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)) ? _GLF_FUZZED(1.2) : 0.0))), 0.0, 0.0))) + vec2(0.0, 0.0)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(vec4(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), 0.0, 0.0, 1.0))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false))))), mat3(_GLF_IDENTITY(mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))), mat3(1.0) * (mat3(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(40.87)), float(0.0), bool(true))), 0.0)), 0.0))), float(_GLF_FUZZED(3.5)), bool(false)))))))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)) ? _GLF_FUZZED(1.2) : 0.0))), 0.0, 0.0))))), determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(injectionSwitch, determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0))))), mat3(1.0) * (_GLF_IDENTITY(vec3(injectionSwitch, determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(log(-865.969)))))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), clamp(vec3(injectionSwitch, determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 0.0))), determinant(mat4(1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(injectionSwitch, determinant(mat4(1.0, abs(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(-3.2))), 0.0, 0.0, 0.0), transpose(transpose(mat2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(-3.2))), 0.0, 0.0, 0.0))))))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0))))))))) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))).x > injectionSwitch.y))));
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(43.69)), bool(false))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(7), int(7))) | 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))); _injected_loop_counter ++)
    {
     return;
    }
  }
 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y = workgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(vec4(379.886, -1.9, 2.6, 8.8))) : injectionSwitch.y)))))) || false))), false || (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - (0u << _GLF_IDENTITY(uint(0u), uint(0u))));
 uint workgroup_base = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))), true, true)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))), true, true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))), bool(bvec4(bool((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))), false, true, false)))))), true)))) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (workgroup_base)), clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), uint(workgroup_base)))), max(uint(uint(workgroup_base)), _GLF_IDENTITY(uint(uint(workgroup_base)), (uint(uint(workgroup_base))) | (_GLF_IDENTITY(uint(uint(workgroup_base)), (_GLF_IDENTITY(uint(uint(workgroup_base)), ~ (~ (uint(uint(workgroup_base)))))) / 1u)))))), (false ? _GLF_FUZZED(workgroup_base) : workgroup_base))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), uint(workgroup_base)))), max(uint(uint(workgroup_base)), uint(uint(workgroup_base))))), (false ? _GLF_FUZZED(workgroup_base) : workgroup_base))) : _GLF_FUZZED(workgroup_size))), ~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_base) : workgroup_base)), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) ^ 0u), ~ (~ (_GLF_FUZZED(workgroup_base)))), max(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base))) : workgroup_base))))), ((~ (~ (_GLF_IDENTITY(workgroup_base, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (~ (_GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(max(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base)), (max(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base))) << 0u)) : workgroup_base)))))) | ((~ (~ (_GLF_IDENTITY(workgroup_base, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (~ (_GLF_FUZZED(workgroup_base)))), max(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base))) : workgroup_base)))))))))), workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0))))) % subgroup_size);
 _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid, (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))))) : next_virtual_gid))) | 0u)) - 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 do
  {
   buf[virtual_gid] = 1;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec3((true), false, false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))), true, false, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))), true, false, false)), true, false, false)))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-544.883), _GLF_FUZZED(-969.988)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))) < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))))), bvec3(bvec3(bvec3(false, true, false))))))));
 if(_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), (true ? (subgroup_local_id) : _GLF_FUZZED(workgroup_id)))) - (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1 < subgroup_size)
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x], uint(2), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 0, 1, 1)), ~ (~ (int(ivec4(4, 0, 1, 1)))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (((0 ^ _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) / 1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 + (_GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(false || (bool(bvec2(false, true))), true && (_GLF_IDENTITY(false || (bool(bvec2(false, true))), bool(bvec2(false || (bool(bvec2(false, true))), true)))))))))) || false), bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-795.339))) < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(false || (bool(bvec2(false, true))), true && (_GLF_IDENTITY(false || (bool(bvec2(false, true))), bool(bvec2(false || (bool(bvec2(false, true))), true)))))))))) || false), bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-795.339))) < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(false || (bool(bvec2(false, true))), true && (_GLF_IDENTITY(false || (bool(bvec2(false, true))), bool(bvec2(false || (bool(bvec2(false, true))), true)))))))))) || false), bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-795.339))) < injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(false || (bool(bvec2(false, true))), true && (_GLF_IDENTITY(false || (bool(bvec2(false, true))), bool(bvec2(false || (bool(bvec2(false, true))), true)))))))))) || false), bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-795.339))) < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(false || (bool(bvec2(false, true))), true && (_GLF_IDENTITY(false || (bool(bvec2(false, true))), bool(bvec2(false || (bool(bvec2(false, true))), true)))))))))) || false), bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-795.339))) < injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), min(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)))))))).y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), min(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) >> 0), 1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        return;
       for(int _injected_loop_counter = (((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), min(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), int(5))), clamp((_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), min(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), min(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), min(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), int(5))), 1)), max(int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), min(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), int(5))), 1)), int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), min(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), int(5))), 1))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), min(clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), int(5))))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          break;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x, (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x) * 1u)], uint(2), 4, 64, 4);
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(int(int(7))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(int(int(7)))), (~ (int(int(int(7))))) >> 0)), ((_GLF_IDENTITY(~ (int(int(int(7)))), (~ (int(int(int(7))))) >> 0))) - 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))), ! (! (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec2(7, 0), (ivec2(7, 0)) >> ivec2(0, 0))))), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), ((int(7))) << _GLF_IDENTITY(0, clamp(0, 0, 0))) / 1))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec2(7, 0), (ivec2(7, 0)) >> ivec2(0, 0))))), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), ((int(7))) << _GLF_IDENTITY(0, clamp(0, 0, 0))) / 1))) >> _GLF_IDENTITY(int(7), int(7))), 0 | (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec2(7, 0), (ivec2(7, 0)) >> ivec2(0, 0))))), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), ((int(7))) << _GLF_IDENTITY(0, clamp(0, 0, 0))) / 1))) >> _GLF_IDENTITY(int(7), int(7)))))) | (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec2(7, 0), (ivec2(7, 0)) >> ivec2(0, 0))))), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), ((int(7))) << _GLF_IDENTITY(0, clamp(0, 0, 0))) / 1))) >> _GLF_IDENTITY(int(7), int(7))))), bool(bvec2(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) / 1), 1))) << _GLF_IDENTITY(int(7), int(7))), 0 | _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7)))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7)))), (((1 << _GLF_IDENTITY(int(7), int(7))))) | 0), ((1 << _GLF_IDENTITY(int(7), int(7))))))) >> _GLF_IDENTITY(int(7), int(7))), false))))))); _injected_loop_counter ++)
      {
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true)))))))
      return;
    }
  }
}
