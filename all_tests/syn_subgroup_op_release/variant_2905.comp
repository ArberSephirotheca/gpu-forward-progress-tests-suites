#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- -9.5))), bool(false))))) > injectionSwitch.y)))))) && true)))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
      }
     continue;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  return;
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + tan(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), 0, 0, 1))) : _GLF_FUZZED(floatBitsToInt((- -518.021)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) + uvec3(0u, 0u, 0u), ((gl_NumWorkGroups) + uvec3(0u, 0u, 0u)) | ((gl_NumWorkGroups) + uvec3(0u, 0u, 0u)))), 0u))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 57413)); _injected_loop_counter --)
          {
           return;
          }
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), (gl_WorkGroupID) << uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat4(863.453, -2.0, -8.4, 44.24, 2.1, -414.041, 5.8, -0.0, 0.2, -150.435, 694.136, -6.8, -2956.3600, 357.894, -874.470, -23.29)) : mat4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, 1.0, 1.0))))).x), _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), max(_GLF_IDENTITY(min(0.0, 0.0), clamp(min(0.0, 0.0), min(0.0, 0.0), min(0.0, 0.0))), min(0.0, 0.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-670.196))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0))), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))), vec2(1.0, 1.0), vec2(1.0, 1.0)))))).y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       return;
      }
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y = workgroup_base;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) || (true)) ? injectionSwitch : _GLF_FUZZED(vec2(0.8, _GLF_IDENTITY(455.884, min(455.884, 455.884)))))).y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint virtual_gid = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + subgroup_id * subgroup_size + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(faceforward(75.93, 1.1, 40.75)))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0)), 0.0, cos(0.0), 1.0, 0.0, 1.0, 1.0)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (7) | (7))))), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, max(7, 7))) | (7))), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY((_GLF_IDENTITY(int(7), int(7))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(7), int(7))), clamp((_GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(int(7), int(7))))) << 0), _GLF_IDENTITY(int(7), int(7))))) << 0))); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 uint next_virtual_gid = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[0], 0u | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[0])), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[1], clamp(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[1], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[1], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[1])))).x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, max(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x))) >> 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x) >> 0u)), ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x) >> 0u))) ^ 0u) | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x) >> 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x) >> 0u)), ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x) >> 0u))) ^ 0u) | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x) >> 0u)))))))), 0u | (~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x), ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x)) >> 0u) >> 0u)))))) + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   buf[virtual_gid] = 1;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(1.0)) > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1 < _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) - 0u))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             break;
                            }
                           do
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))));
                             if(_GLF_DEAD(false))
                              break;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           return;
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3983.4419) : injectionSwitch.x)) > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           return;
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 return;
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           return;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)))))
                      return;
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           subgroupAll(false);
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((0 & 10161) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(82.83)), float(1.0), bool(true))))), _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), _GLF_IDENTITY(bool(true), ! (! (bool(true))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), _GLF_IDENTITY(bool(true), ! (! (bool(true))))))), ((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))))) - log(1.0))) * 1.0) + _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-611.560)))), vec2(0.0, 0.0))))), clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), float(mat2x3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), 1.0, 1.0, cos(0.0), 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) : _GLF_FUZZED(-6.4))))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) : _GLF_FUZZED(-6.4))))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) : _GLF_FUZZED(-6.4))))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), clamp(0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), max(0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0)), 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), cos(0.0) * (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, tan(0.0), 1.0, 0.0, 0.0)), float(mat2(float(mat2x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, tan(0.0), 1.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))))), 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9.6)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(78.83)), float(1.0), bool(true))), max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), max(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED((-38.53 * injectionSwitch)))))), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))), clamp(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))))))))))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) * abs(1.0)), 1.0, 1.0)))))), clamp(_GLF_IDENTITY((1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(88.02) : 1.0)))), max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true)))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(59.60, -1.4)))), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.5) : length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(84.15), _GLF_FUZZED(-9.9), (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[2], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[0], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-425.889)), bvec4(true, true, false, false)))))), min(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(84.15), _GLF_FUZZED(-9.9), (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[2], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[0], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-425.889)), bvec4(true, true, false, false)))))), _GLF_IDENTITY(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(84.15), _GLF_FUZZED(-9.9), (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[2], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[0], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-425.889)), bvec4(true, true, false, false)))))), min(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(84.15), _GLF_FUZZED(-9.9), (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[2], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[0], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-425.889)), bvec4(true, true, false, false)))))), round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(84.15), _GLF_FUZZED(-9.9), (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[2], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[0], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-425.889)), bvec4(true, true, false, false)))))))))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 0.0 + (0.0))) / 1.0), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), mat3(mat4(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0)))), mix(float(float(_GLF_IDENTITY(mat3x4(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(59.60, -1.4)))), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(0.5), mix(float(true ? 1.0 : _GLF_FUZZED(0.5)), float(_GLF_FUZZED(float(false))), bool(false))))), 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 1.0))), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), float(mat3x2(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, 1.0, 0.0))))), 1.0, sqrt(1.0))), 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, sin(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat3(mat4(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))))), float(_GLF_FUZZED(-2981.3308)), bool(false))), min(float(_GLF_IDENTITY(mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), sqrt(0.0), 0.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), sqrt(1.0))), 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (true ? mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat3(9294.4596, -1031.5152, -678.981, -3961.1188, 1.7, 1.9, -8.4, 1.8, 815.960))))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0)))), float(_GLF_IDENTITY(mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3087.2278)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch.x), (false ? _GLF_FUZZED(tanh(-7.0)) : _GLF_ZERO(0.0, injectionSwitch.x))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2x4(mat2(0.0, 0.0, 1.0, 0.0)), (mat2x4(mat2(0.0, 0.0, 1.0, 0.0))) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat2(mat2x4(mat2(_GLF_IDENTITY(mat2x4(mat2(0.0, 0.0, 1.0, 0.0)), (mat2x4(mat2(0.0, 0.0, 1.0, 0.0))) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) + 0.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0), mat3x4(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.0))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(9.7)))), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))))))), float(mat4x2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(59.60, -1.4)))), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(61.38) : 1.0)))), 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(84.15), _GLF_FUZZED(-9.9), (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[2], (vec4(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[0], (vec4(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-425.889)), bvec4(true, true, false, false)))))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), mat3(mat4(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0)))), mix(float(float(_GLF_IDENTITY(mat3x4(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(59.60, -1.4)))), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(0.5))), 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 1.0))), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, _GLF_IDENTITY(sin(0.0), 1.0 * (_GLF_IDENTITY(sin(0.0), clamp(_GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0), sin(0.0), sin(0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(356.350))), 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0))))), 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat3(mat4(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))))), float(_GLF_FUZZED(-2981.3308)), bool(false))), min(float(_GLF_IDENTITY(mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), sqrt(0.0), 0.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (true ? mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat3(9294.4596, -1031.5152, -678.981, -3961.1188, 1.7, 1.9, -8.4, 1.8, 815.960))))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0)))), float(_GLF_IDENTITY(mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3087.2278)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch.x), (false ? _GLF_FUZZED(tanh(-7.0)) : _GLF_ZERO(0.0, injectionSwitch.x))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))) - sqrt(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) + 0.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0), mat3x4(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.0))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec3(-4.2, 4.1, -5.8), vec3(233.647, -84.80, -5998.7914))) : 1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, sqrt(1.0))), 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))))))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), dot(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - 0.0), 1.0), vec2(0.0, 0.0)))))), injectionSwitch.y))), _GLF_IDENTITY(int(ivec4((1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x))), vec2(0.0, 0.0)))))), injectionSwitch.y))), 1, 0, 0)), max(int(ivec4((1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)), clamp(mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true))) / 1.0), mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(74.45) : 0.0)))))))), injectionSwitch.y))), 1, 0, 0)), int(ivec4((1 ^ int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) * cos(0.0)), clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), (true ? max(1.0, 1.0) : _GLF_FUZZED(2.7)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3625.6605), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(3625.6605), 1.0, 0.0, 1.0)), (float(vec4(_GLF_FUZZED(3625.6605), 1.0, 0.0, 1.0))) * exp(0.0)))), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))), injectionSwitch.y))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) * 1))), 0, 0))))), _GLF_IDENTITY((1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-934.431 / 15.08))), bool(false))), (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), int(ivec3((_GLF_IDENTITY(1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(-77.74) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))))), injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(-77.74) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))))), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))))), injectionSwitch.y)), clamp(_GLF_IDENTITY(1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(-77.74) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))))), injectionSwitch.y)), (1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(-77.74) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mod(vec2(-2.4, 43.46), 409.920)) : _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))))), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))))), injectionSwitch.y))) + 0), 1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(-77.74) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0)))), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))))), injectionSwitch.y)), 1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(-77.74) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))), max(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0))), (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), (1.0) / 1.0)))) + 0.0))))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3625.6605)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))))), injectionSwitch.y)))))))), 0, 0))), (1 ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, max(_GLF_IDENTITY((1.0) / 1.0, max(_GLF_IDENTITY((1.0) / 1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)), (true ? float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)) : _GLF_FUZZED(-90.11))), clamp(_GLF_IDENTITY(float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)), (true ? float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)) : _GLF_FUZZED(-90.11))), _GLF_IDENTITY(float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)), (true ? float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)) : _GLF_FUZZED(-90.11))), _GLF_IDENTITY(float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)), (true ? float(float((_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)) : _GLF_FUZZED(-90.11)))))), (1.0) / 1.0)), (1.0) / 1.0))))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3625.6605), clamp(_GLF_FUZZED(3625.6605), _GLF_FUZZED(3625.6605), _GLF_FUZZED(3625.6605)))), float(1.0), bool(_GLF_IDENTITY(true, false || (true)))))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.3)), float(injectionSwitch.y), bool(true))))))))); _injected_loop_counter --)
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), false, true))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       subgroupAll(true);
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    break;
                   break;
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
    {
     return;
    }
  }
}
