#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (gl_WorkGroupSize)).x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), _GLF_IDENTITY(1u, (1u) >> 0u))) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(1u, (1u) - 0u) & 1u))), 1u)))), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(subgroup_local_id) : uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), _GLF_IDENTITY(1u, (1u) >> 0u))) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(1u, (1u) - 0u) & 1u))), 1u)))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | _GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)), ((uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u))) | ((uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), (_GLF_IDENTITY(0u, 0u | (0u))) / 1u))), (1u & 1u), 1u)))))))))), (gl_WorkGroupSize.x) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), _GLF_IDENTITY((uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)), ((uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) | ((1u & 1u))), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))) / uvec4(1u, 1u, 1u, 1u)))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))), 0u ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))), min(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))), ~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))))) : _GLF_FUZZED(114359u))))))), (gl_WorkGroupSize.x) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), _GLF_IDENTITY((uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)), ((uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))) | uvec4(0u, 0u, 0u, 0u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u & 1u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u & 1u, ~ (~ (_GLF_IDENTITY(1u & 1u, 0u ^ (1u & 1u))))), (1u | 0u)), ~ (~ (uvec2(_GLF_IDENTITY(1u & 1u, ~ (~ (_GLF_IDENTITY(1u & 1u, 0u ^ (1u & 1u))))), (1u | 0u)))))))), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))).x, 0u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u), gl_WorkGroupSize.x)), 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u))))))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u))))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u))))))))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u))))))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u))))))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u))))))))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))))))))), _GLF_IDENTITY((gl_WorkGroupSize.x), max((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, 0u | (1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), min((1u & 1u), _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(41912u) : (1u & 1u))))), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED((++ num_workgroup)) : gl_WorkGroupSize.x)), gl_WorkGroupSize.x)), 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), min(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) | (_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) * uvec4(1u, 1u, 1u, 1u)))))))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 0u + (gl_WorkGroupSize.x)), 0u, _GLF_IDENTITY((1u & 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(1u & 1u, 0u | (1u & 1u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((false ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(1u & 1u, 0u | (1u & 1u))))))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) / (1u | 1u), (_GLF_IDENTITY((1u) / (1u | 1u), (false ? _GLF_FUZZED(subgroup_id) : (1u) / (1u | 1u)))) * 1u)) & 1u), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), clamp(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x))))), gl_WorkGroupSize.x)), 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), gl_WorkGroupSize.x)), 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), min((1u & 1u), (1u & 1u))), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))))), (gl_WorkGroupSize.x) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), 0u | ((1u & 1u))), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | _GLF_IDENTITY((uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) + 0u))) & 1u), 1u)), ((uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) + 0u))) & 1u), 1u))) >> uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u & 1u, (1u & 1u) ^ 0u)), 1u), (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 1u * (0u))))), (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))), (false ? _GLF_FUZZED(((subgroup_local_id | uvec4(17238u, 148176u, 27046u, 37523u)) + uvec4(59622u, 198210u, 80769u, 165062u))) : _GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))), max(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))), _GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))))))))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : (1u & 1u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)).x, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | _GLF_IDENTITY((uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)), (false ? _GLF_FUZZED(uvec4(96780u, 105764u, 181119u, 160959u)) : (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | _GLF_IDENTITY((uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), max(_GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY(0u, 0u | (0u)))))), (1u & 1u), 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), max(_GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY(0u, 0u | (0u)))))), (1u & 1u), 1u)), uvec4(0u, 0u, 0u, 0u) ^ ((uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), max(_GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY(0u, 0u | (0u)))))), (1u & 1u), 1u))))), (~ (_GLF_IDENTITY((uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), max(_GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY(0u, 0u | (0u)))))), (1u & 1u), 1u)), uvec4(0u, 0u, 0u, 0u) ^ ((uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), max(_GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY(0u, 0u | (0u)))))), (1u & 1u), 1u)))))) ^ uvec4(0u, 0u, 0u, 0u)))))))))))), (gl_WorkGroupSize.x) ^ 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, (0u) | (0u)), (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupSize)), (uvec3(uvec3(gl_WorkGroupSize))) + uvec3(0u, 0u, 0u))).x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u))))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), min(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) * uvec4(1u, 1u, 1u, 1u)), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY((1u & 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), ((1u & 1u)) | ((1u & 1u)))) >> 0u))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, (1u) / (1u | 1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), 0u, (1u & 1u), 1u)) << uvec4(0u, 0u, 0u, 0u))))), (true ? uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (_GLF_IDENTITY(1u, 0u ^ (1u)) & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size))))))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u), (uvec4(gl_WorkGroupSize.x, 0u, (1u & 1u), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u), _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), (1u & 1u), 1u)))))))))), (gl_WorkGroupSize.x) ^ 0u)))) ^ 0u), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))), 0u, 0u) | (gl_WorkGroupSize)), gl_WorkGroupSize)), gl_WorkGroupSize)), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)), gl_WorkGroupSize)), gl_WorkGroupSize)), min(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)), gl_WorkGroupSize)), gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)), gl_WorkGroupSize)), gl_WorkGroupSize))))))).x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)).x) ^ 0u)) ^ 0u))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(74254) : int(0))))))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, float(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, 1.0))) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (true ? 6u : _GLF_FUZZED(num_workgroup)))) | (_GLF_IDENTITY(6u, 1u * (6u))))), uint(6u))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) << 0u), clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_size) << 0u) << 0u, (((subgroup_size) << 0u) << 0u) >> 0u), (_GLF_IDENTITY(((subgroup_size) << 0u) << 0u, (((subgroup_size) << 0u) << 0u) >> 0u)) | (_GLF_IDENTITY(((subgroup_size) << 0u) << 0u, (((subgroup_size) << 0u) << 0u) >> 0u))))), uint(uvec4(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), min(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))))) * (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))) << 0u), 0u, 1u, 0u))))) + (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) ^ 0u) + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))))))), 0u, 1u), (false ? _GLF_FUZZED(uvec3(108098u, 120471u, 126345u)) : uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), uvec2(uvec3(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), uvec2(uvec3(uvec2(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))), 0u), 1u))), 0u))))), min(subgroup_local_id, subgroup_local_id))) >> 0u) + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))), 0u, 1u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, max(0u, 0u))), ~ (~ (uvec2(subgroup_local_id, 0u))))), 1u * (uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), ~ (~ (uvec2(subgroup_local_id, 0u)))))))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) / 1)))), 0u, 1u), (false ? _GLF_FUZZED(uvec3(108098u, 120471u, 126345u)) : uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)), max((subgroup_local_id + 1), (subgroup_local_id + 1))), 0u, 1u))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) ^ 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | 0u))), ~ (~ (uvec2(subgroup_local_id, 0u))))), 1u * (uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), ~ (~ (uvec2(subgroup_local_id, 0u)))))))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) / 1)))), 0u, 1u), (false ? _GLF_FUZZED(uvec3(108098u, 120471u, 126345u)) : uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)), max((subgroup_local_id + 1), (subgroup_local_id + 1))), 0u, 1u))))))) | 0u)) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 _GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) * _GLF_IDENTITY(1u, (1u) << 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, sin(0.0), 1.0, 0.0)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? injectionSwitch : vec2(-4.4, -1.9))) : injectionSwitch)), vec2(mat2(injectionSwitch, determinant(mat3(0.0, 1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0))).y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)), (false ? _GLF_IDENTITY(_GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))), min(_GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))), _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))))) : subgroup_local_id + 1)) < subgroup_size, false || (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), _GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u)))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_IDENTITY(_GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))), min(_GLF_IDENTITY(_GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))), (_GLF_IDENTITY(_GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))), clamp(_GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))), _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))), _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633)))))) | 0u), _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))))) : subgroup_local_id + 1) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) / 1u), (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u))), 1u, ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(_GLF_IDENTITY(5836.4168, max(5836.4168, 5836.4168)), -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, _GLF_IDENTITY((false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1)))) << _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) : _GLF_FUZZED(mix(workgroup_base, workgroup_base, true)))))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))) ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u))), 1u, ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), clamp(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, _GLF_IDENTITY(-31.01, (_GLF_IDENTITY(-31.01, (-31.01) * 1.0)) - 0.0), -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(_GLF_IDENTITY(5836.4168, _GLF_IDENTITY(float(float(_GLF_IDENTITY(5836.4168, (5836.4168) / 1.0))), mix(float(float(float(_GLF_IDENTITY(5836.4168, (5836.4168) / 1.0)))), float(_GLF_FUZZED(-50.82)), bool(false)))), -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u))), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)), 1u, 1u)), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, _GLF_IDENTITY((false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1), min((false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1), (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1))) << 0u))), 1u, ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, 0u | (1u))), uint(1u))))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u), (true ? _GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u) : _GLF_FUZZED(workgroup_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1) << 0u)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(_GLF_IDENTITY(vec4(5836.4168, -1.2, -31.01, -3529.5633), min(_GLF_IDENTITY(vec4(5836.4168, -1.2, -31.01, -3529.5633), (vec4(5836.4168, -1.2, -31.01, -3529.5633)) * vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(5836.4168, -1.2, -31.01, -3529.5633), mix(vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(58.77), _GLF_FUZZED(81.23), (vec4(5836.4168, -1.2, -31.01, -3529.5633))[3]), vec4((vec4(5836.4168, -1.2, -31.01, -3529.5633))[0], (vec4(5836.4168, -1.2, -31.01, -3529.5633))[1], (vec4(5836.4168, -1.2, -31.01, -3529.5633))[2], _GLF_FUZZED(-9.1)), bvec4(true, true, true, false))))))) : _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) | (subgroup_local_id + 1)), (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : _GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)))))) << 0u))), 1u, ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))))))) ^ 0u)))) < subgroup_size, false || (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + 1)) < subgroup_size, true && (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + _GLF_IDENTITY(1, (0 & -5692) | (1))), ((false ? _GLF_FUZZED(packSnorm4x8(vec4(5836.4168, -1.2, -31.01, -3529.5633))) : subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(0, ~ (~ (0))) & -5692) | (1)))) | 0u)) < subgroup_size)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (bool(bool(! (_GLF_DEAD(false))))))))))
          break;
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.9)), vec2(_GLF_FUZZED(70.41), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (false) && true), true))).x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        break;
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))), (_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))) - 0u)], uint(2), 4, 64, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) << 0) : _GLF_FUZZED(-59897))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true), bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.0)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-26128))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-26128))) : _GLF_FUZZED(-30566))))) ^ (_GLF_IDENTITY(2, min(2, 2))), max(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0) ^ (2))))), 4, 64, 4);
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(5275.3943)), float(injectionSwitch.y), bool(true)), float(mat2x4(mix(float(_GLF_FUZZED(5275.3943)), float(injectionSwitch.y), bool(true)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, cos(0.0))), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, cos(0.0))))))), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(5275.3943)), float(injectionSwitch.y), bool(true)), float(mat2x4(mix(float(_GLF_FUZZED(5275.3943)), float(injectionSwitch.y), bool(true)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, _GLF_IDENTITY(1.0, float(mat4(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 0.0, cos(0.0))), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, cos(0.0)))))))) + 0.0)), injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0))))))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, true)))))))))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_IDENTITY(true, ! (! (true)))), false)), bool(bvec2(bool(bvec3(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false), false))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               subgroupAll(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), false || (! (true))))))));
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(8.6)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_IDENTITY(mix(float(_GLF_FUZZED(8.6)), float(injectionSwitch.y), bool(true)), (true ? mix(float(_GLF_FUZZED(8.6)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-5850.6752)), bool(false))), bool(true)) : _GLF_FUZZED(6958.8040)))), float(_GLF_FUZZED((0.7 * 6497.1762))), bool(false)))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3737.5275)), float(injectionSwitch.y), bool(true)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
}
