#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 | (5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
          break;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size)))))) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(uvec4(uvec2(subgroup_size, 0u), 1u, 1u)))) << (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u)))))))) | ((subgroup_size))) << 0u)) | (subgroup_size)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), _GLF_IDENTITY(0u, ~ (~ (0u))) + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) / 1u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))) | _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) / (uvec4(1u, 1u, 1u, 1u) ^ uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) - 0u)), uint(3u))), (_GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(uint(3u), uint(3u))), ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))) | ((1u << _GLF_IDENTITY(uint(3u), uint(3u)))))) + 0u) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), _GLF_IDENTITY(clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(3u), (uint(3u)) * 1u)), uint(uvec2(~ (_GLF_IDENTITY(uint(3u), (uint(3u)) * 1u)), 1u))))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))), (clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))))) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))) | (clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))))))))), min(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), ~ (~ (_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), clamp(uint(3u), uint(3u), uint(3u)))))), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((subgroup_size) << 0u, (subgroup_size) << 0u, _GLF_IDENTITY((subgroup_size) << 0u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ ((subgroup_size) << 0u)))))) | (subgroup_size))), ((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((subgroup_size) << 0u, (subgroup_size) << 0u, _GLF_IDENTITY((subgroup_size) << 0u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ ((subgroup_size) << 0u)))))) | (subgroup_size)))) >> ((0u & 160943u) >> _GLF_IDENTITY(uint(2u), uint(2u))))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))) | uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(true ? 0u : _GLF_FUZZED((true ? subgroup_local_id : workgroup_base)), min(true ? 0u : _GLF_FUZZED((true ? subgroup_local_id : workgroup_base)), true ? 0u : _GLF_FUZZED((true ? subgroup_local_id : workgroup_base)))))))) / 1u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ (uint(uvec2(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u, 0u ^ (_GLF_IDENTITY((subgroup_size) << 0u, ~ (_GLF_IDENTITY(~ ((subgroup_size) << 0u), (true ? ~ ((subgroup_size) << 0u) : _GLF_FUZZED(num_workgroup))))))))) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) << (0u | 0u))), _GLF_IDENTITY(clamp(uint(3u), uint(3u), uint(3u)), (false ? _GLF_FUZZED(64437u) : _GLF_IDENTITY(clamp(uint(3u), uint(3u), uint(3u)), (clamp(uint(3u), uint(3u), uint(3u))) ^ 0u))))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, (_GLF_IDENTITY((subgroup_size) << 0u, clamp((subgroup_size) << 0u, (subgroup_size) << 0u, _GLF_IDENTITY((subgroup_size) << 0u, ((subgroup_size) << 0u) << 0u)))) | 0u))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) - 0u))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))) | (subgroup_size)), _GLF_IDENTITY(0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size))), 0u | (0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size))))), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u ^ 0u)), (subgroup_size) << 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), max((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), max((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), 0u ^ ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), _GLF_IDENTITY((~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), 0u ^ ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), 0u ^ ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), 0u ^ ((~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), 0u ^ ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), 0u ^ ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))))))))))) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), ~ (~ (~ (0u)))))), _GLF_IDENTITY(0u, (0u) | (0u)))))) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))) | uvec4(0u, 0u, 0u, 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))))))) | (subgroup_size)))), 0u, 0u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))), clamp(uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))), uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))), uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))))))), clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), uint(uvec2((subgroup_size), 1u))))) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))), (false ? _GLF_FUZZED(subgroup_id) : (1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))) ^ (0u & 112733u)))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size))) * 1u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))))))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) | (3u))) << 0u)), min(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size))) | (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, ((subgroup_size) << 0u) + 0u))) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))))), ((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))))))) | (subgroup_size)))), 0u, 0u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))), clamp(uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))), uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))), uint(uint(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))), ~ (~ (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))))))), clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), uint(uvec2((subgroup_size), 1u))))) << 0u)) | (subgroup_size)), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))), (false ? _GLF_FUZZED(subgroup_id) : (1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))))) ^ (0u & 112733u)))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size))) * 1u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))))))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) | (3u))) << 0u)), min(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size))) | (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size)))), 0u + (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, ((subgroup_size) << 0u) + 0u))) | (subgroup_size)))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))))))))) >> uvec4(0u, 0u, 0u, 0u))))))) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), _GLF_IDENTITY(~ (subgroup_local_id + 1), max(~ (subgroup_local_id + 1), ~ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))))))))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), true, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), bool(bvec2(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true))))))), bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), ((! (true))) || false))))))), false || (bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), ((! (true))) || false))))))))), true, false)))), false)))))), (true) && true) ? (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))))) + 0u) + 1), _GLF_IDENTITY(max(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), 0u | (_GLF_IDENTITY(max(~ _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ (subgroup_local_id + 1)), (max(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ~ (subgroup_local_id + 1))) | (max(_GLF_IDENTITY(~ (subgroup_local_id + 1), clamp(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), ~ (subgroup_local_id + 1)))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))))) + 0u) + 1), _GLF_IDENTITY(max(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), 0u | (_GLF_IDENTITY(max(~ _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ (subgroup_local_id + 1)), (max(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ~ (subgroup_local_id + 1))) | (max(_GLF_IDENTITY(~ (subgroup_local_id + 1), clamp(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), ~ (subgroup_local_id + 1)))))))))), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))))) + 0u) + 1), _GLF_IDENTITY(max(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), 0u | (_GLF_IDENTITY(max(~ _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ (subgroup_local_id + 1)), (max(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ~ (subgroup_local_id + 1))) | (max(_GLF_IDENTITY(~ (subgroup_local_id + 1), clamp(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), ~ (subgroup_local_id + 1))))))))))))) << _GLF_IDENTITY(0u, (0u) | (0u))))) % subgroup_size : _GLF_FUZZED(_GLF_IDENTITY((subgroup_id - (num_workgroup * subgroup_id)), 0u | (_GLF_IDENTITY((subgroup_id - (num_workgroup * subgroup_id)), clamp((subgroup_id - (num_workgroup * subgroup_id)), (subgroup_id - (num_workgroup * subgroup_id)), (subgroup_id - (num_workgroup * subgroup_id))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), true, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), bool(bvec2(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true))))))), bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), ((! (true))) || false))))))), false || (bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), ((! (true))) || false))))))))), true, false)))), false)))))), (true) && true) ? (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))))) + 0u) + 1), _GLF_IDENTITY(max(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), 0u | (_GLF_IDENTITY(max(~ _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ (subgroup_local_id + 1)), (max(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ~ (subgroup_local_id + 1))) | (max(_GLF_IDENTITY(~ (subgroup_local_id + 1), clamp(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), ~ (subgroup_local_id + 1)))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))))) + 0u) + 1), _GLF_IDENTITY(max(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), 0u | (_GLF_IDENTITY(max(~ _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ (subgroup_local_id + 1)), (max(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ~ (subgroup_local_id + 1))) | (max(_GLF_IDENTITY(~ (subgroup_local_id + 1), clamp(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), ~ (subgroup_local_id + 1)))))))))), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))))) + 0u) + 1), _GLF_IDENTITY(max(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), 0u | (_GLF_IDENTITY(max(~ _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), ~ (subgroup_local_id + 1)), (max(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ~ (subgroup_local_id + 1))) | (max(_GLF_IDENTITY(~ (subgroup_local_id + 1), clamp(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), ~ (subgroup_local_id + 1))))))))))))) << _GLF_IDENTITY(0u, (0u) | (0u))))) % subgroup_size : _GLF_FUZZED(_GLF_IDENTITY((subgroup_id - (num_workgroup * subgroup_id)), 0u | (_GLF_IDENTITY((subgroup_id - (num_workgroup * subgroup_id)), clamp((subgroup_id - (num_workgroup * subgroup_id)), (subgroup_id - (num_workgroup * subgroup_id)), (subgroup_id - (num_workgroup * subgroup_id)))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), min((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ (subgroup_local_id + 1), _GLF_IDENTITY(min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((min(~ _GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 1u, (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))), ~ (subgroup_local_id + 1))), (_GLF_IDENTITY((_GLF_IDENTITY(min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), 0u | (min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))))), uint(uint((min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))))))) + 0u) | (min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), (_GLF_IDENTITY((min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), (_GLF_IDENTITY((min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), uint(uint((_GLF_IDENTITY(min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)), (false ? _GLF_FUZZED((+ subgroup_local_id)) : min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))))))))) + 0u) | (min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)))) ^ 0u), (false ? _GLF_FUZZED((173484u << workgroup_id)) : _GLF_IDENTITY((min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), (_GLF_IDENTITY((min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))), uint(uint((min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1))))))) + 0u) | (min(~ _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u | (_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (true ? uint(uvec3((subgroup_local_id + 1), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(subgroup_id)))))), _GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ (~ (subgroup_local_id + 1)), (~ (~ (subgroup_local_id + 1))) + 0u))))))))), _GLF_IDENTITY(~ (subgroup_local_id + 1), max(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(subgroup_local_id, 0u, 0u, (175195u & 0u))), 0u | (uint(uvec4(subgroup_local_id, 0u, 0u, (175195u & 0u)))))) + 1), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))) + 1)))))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + 1), (0u ^ 0u) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), min(~ _GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED((~ workgroup_size)) : (subgroup_local_id + 1))), ~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))), max((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), 1))), (subgroup_local_id + 1))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + (1u ^ 1u)) + _GLF_IDENTITY(1, 0 | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + (1u ^ 1u)) + _GLF_IDENTITY(1, 0 | (1)), clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + (1u ^ 1u)) + _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + (1u ^ 1u)) + _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + (1u ^ 1u)) + _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + (1u ^ 1u)) + _GLF_IDENTITY(1, 0 | (1))))), max(~ (subgroup_local_id + 1), ~ (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(virtual_gid) : subgroup_local_id + 1)))))))))) % subgroup_size)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), false || ((true))))) && true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), (injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         return;
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              return;
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), true && (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, max(0, 0))], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-48.61)), bool(false))), injectionSwitch[1])).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) || _GLF_IDENTITY(false, false || (false)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) || false)))) || false)));
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) || false), true, false)))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     buf[virtual_gid] = 1;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true))))))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
              continue;
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         do
          {
           for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) ^ 1) << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) && true))
          continue;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) / _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(vec2(1.0, 1.0)), vec2(vec3(vec2(vec2(1.0, 1.0)), 1.0)))), clamp(vec2(_GLF_IDENTITY(vec2(vec2(1.0, 1.0)), vec2(vec3(vec2(vec2(1.0, 1.0)), 1.0)))), vec2(_GLF_IDENTITY(vec2(vec2(1.0, 1.0)), vec2(vec3(vec2(vec2(1.0, 1.0)), 1.0)))), vec2(_GLF_IDENTITY(vec2(vec2(1.0, 1.0)), vec2(vec3(vec2(vec2(1.0, 1.0)), 1.0)))))))).y))));
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), false, false))) || false)))
          continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), ~ (~ (_GLF_IDENTITY(0 ^ (1), min(_GLF_IDENTITY(0 ^ (1), 0 | (0 ^ (1))), 0 ^ (1))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) > (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))))) / 1)), 0 | (_GLF_IDENTITY(int(int(1)), (false ? _GLF_FUZZED(65985) : int(int(1))))))) ^ (1 & _GLF_IDENTITY(1, 1 * (1))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(subgroup_local_id + 1 < subgroup_size)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) && true)))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && _GLF_IDENTITY((bool(_GLF_DEAD(false))), ! (! ((bool(_GLF_DEAD(false))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               return;
              }
             if(_GLF_DEAD(false))
              break;
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, _GLF_IDENTITY((1 & 1) - _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(min(0, 0), (min(0, 0)) << 0), (min(0, 0)) | (min(0, 0))))), (int(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (min(0, 0)) | (min(0, 0)))))) + 0))), min((1 & 1) - _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(min(0, 0), (min(0, 0)) | (min(0, 0))), (min(0, 0)) << 0), (min(0, 0)) | (min(0, 0))))), (int(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (min(0, 0)) | (_GLF_IDENTITY(min(0, 0), (true ? min(0, 0) : _GLF_FUZZED(-29903)))))))) + 0))), (1 & 1) - _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(min(0, 0), (min(0, 0)) << 0), (min(0, 0)) | _GLF_IDENTITY((min(0, 0)), clamp((min(0, 0)), (min(0, 0)), (min(0, 0))))))), (int(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (min(0, 0)) | (min(0, 0)))))) + 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 1, 0)))))); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), clamp((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, min(3, 3)), 3, 3))), (int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, (3) << 0), 3)))) / 1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(_injected_loop_counter)))), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(_injected_loop_counter)))), int(3)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(_injected_loop_counter)))), int(3))))) | 0) : _GLF_FUZZED(_injected_loop_counter)))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + (3))) | (_GLF_IDENTITY(3, (3) << 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + (3))) | (_GLF_IDENTITY(3, _GLF_IDENTITY((3) << 0, ((3) << 0) | 0))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + (3))) | (_GLF_IDENTITY(3, (3) << 0))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + _GLF_IDENTITY((3), int(_GLF_IDENTITY(ivec4((3), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), clamp(ivec4((3), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((3), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((3), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))))))) | (_GLF_IDENTITY(3, (3) << 0)))), (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + (3))) | (_GLF_IDENTITY(3, (3) << 0))))) / 1))), _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) / 1, max((int(3)) / 1, (int(3)) / 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        break;
                                       continue;
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         return;
                                         if(_GLF_DEAD(false))
                                          continue;
                                        }
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          break;
                                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), true && (bool(bvec2(_GLF_DEAD(false), false)))))))))
                                          continue;
                                         return;
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     else
                                      {
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true, false, true)))))));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)) : _GLF_FUZZED(length(vec2(7.9, -97.40))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))) + sin(0.0))) : _GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), mix(float(_GLF_FUZZED(892.968)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(_GLF_IDENTITY(7.9, 0.0 + (7.9)), -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(1.0))), max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(1.0))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, _GLF_IDENTITY(-97.40, mix(float(_GLF_FUZZED(-3.2)), float(-97.40), bool(true)))))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(78.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(1.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(1.0))), max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(_GLF_IDENTITY(7.9, clamp(7.9, 7.9, 7.9)), -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.2) : 0.0)), 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(1.0))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat2(1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))))))))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)) * mat2(1.0))), max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) - 0.0))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), _GLF_IDENTITY(1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))), float(_GLF_IDENTITY(mat3x2(1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat3x2(1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))), 0.0, 1.0, 1.0, 1.0, 1.0)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))), float(mat2x3((_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))), 1.0, 0.0, sin(0.0), 1.0, tan(0.0)))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))), max((_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(1.0))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40))))), (_GLF_IDENTITY(_GLF_FUZZED(length(vec2(7.9, -97.40))), 1.0 * (_GLF_FUZZED(length(vec2(7.9, -97.40)))))) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) * mat2(1.0)))))) : _GLF_FUZZED(3.7)))) / 1.0)), bool(true)))))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y)), (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED((773.079 * 69.62))), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))))).y)) : _GLF_FUZZED(4770.0820))) : _GLF_FUZZED(length(vec2(7.9, -97.40))))), clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(97.82)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(375.173)), bool(false)))), bool(true))), injectionSwitch.y)), injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40))))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40))))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40))), mix(float(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40))), max(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40))), mix(float(_GLF_FUZZED(5.5)), float(true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40)))), bool(true))), true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40)))))), float(_GLF_FUZZED(4.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec2(7.9, -97.40)))))))))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))) && true))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, abs(0.0), 0.0)), mat2(1.0) * (vec2(vec4(injectionSwitch, abs(0.0), 0.0))))).y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), clamp(0 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2)))))), _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), 0 | (0 << _GLF_IDENTITY(int(2), int(2))))) ^ 0), 0 << _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))) || false)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                    continue;
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(true && (_GLF_IDENTITY(false, (false) && true)), true)))) && true))))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ! (! ((! (_GLF_IDENTITY(false, (false) && true)))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))), (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec3((! (false)), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3((! (false)), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3((! (false)), false, false), false)))))))))), true && (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec3((! (false)), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((! (false)), true && ((! (false)))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3((! (false)), false, false), false)))))))))), true && (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ((false)) && true))))))) || false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     for(int _injected_loop_counter = (0 & 10104); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter ++)
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             do
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 0)))), int(2))), (false ? _GLF_FUZZED(atomicMin(_injected_loop_counter, _injected_loop_counter)) : ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 0)))), int(2))))) << _GLF_IDENTITY(int(7), int(7)), int(_GLF_IDENTITY(int(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 0)))), _GLF_IDENTITY(int(2), min(int(2), int(2))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), int(ivec4(_GLF_IDENTITY(int(7), int(7)), 0, (0 | 0), 0)))), max(_GLF_IDENTITY(int(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, 0)), (int(ivec3(2, 1, 0))) ^ 0))), int(2)), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, 0)), (int(ivec3(2, 1, 0))) ^ 0))), int(2))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, 0)), (int(ivec3(2, 1, 0))) ^ 0))), int(2))))) << _GLF_IDENTITY(int(7), int(7))), (int(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 0)))), int(2))) << _GLF_IDENTITY(int(7), int(7)))) >> 0), int(((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) ^ (44669 & 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 1, 0)))), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) + 0)))) << _GLF_IDENTITY(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --))) / 1))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, max(4, 4)), 64, _GLF_IDENTITY(4, _GLF_IDENTITY(min(4, _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), (0 | (4)) | 0))))), int(ivec2(_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), (0 | (4)) | 0))))), (min(4, _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), (0 | (4)) | 0)))))) | 0), 1)))));
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(false))), false || (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))))), false || (! (! (_GLF_WRAPPED_LOOP(false)))))))));
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
                  continue;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y)), 0.0, 0.0)), max(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((false ? _GLF_FUZZED((- _GLF_IDENTITY(_GLF_IDENTITY(-0.4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(5.7), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), clamp(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), min(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)))), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0))))) : _GLF_IDENTITY(-0.4, clamp(-0.4, -0.4, -0.4)))), max(_GLF_IDENTITY(-0.4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(5.7), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), clamp(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), min(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)))), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0))))) : _GLF_IDENTITY(-0.4, clamp(-0.4, -0.4, -0.4)))), _GLF_IDENTITY(-0.4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(5.7), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), clamp(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), min(float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0)))), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(5.7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(5.7) : _GLF_FUZZED(mod(5441.7816, -9.5)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0, 0.0))))) : _GLF_IDENTITY(-0.4, clamp(-0.4, -0.4, -0.4)))))))) : injectionSwitch.y), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y), ((false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y)) - 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0), (mat3x4(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY((- -0.4), float(vec4((- -0.4), 0.0, cos(0.0), 1.0)))) : injectionSwitch.y), ((_GLF_IDENTITY(false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y, mix(float(false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y), float(_GLF_FUZZED(vec3(-5.3, -10.56, -39.83).x)), bool(false)))) * 1.0))) - 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * mat3(1.0))))), 0.0, 0.0)), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y)), 0.0, 0.0)), float(vec2(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0)).y, (false ? _GLF_FUZZED((- -0.4)) : injectionSwitch.y)), 0.0, 0.0)), 1.0))))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false)))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(989.377)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         break;
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        break;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             do
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (true ? 1 & 1 : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (true ? 1 & 1 : _GLF_FUZZED(_injected_loop_counter)))))) | (_GLF_IDENTITY(1 & 1, min(1 & 1, _GLF_IDENTITY(1 & 1, (true ? 1 & 1 : _GLF_FUZZED(_injected_loop_counter))))))))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_DEAD(false))
                                  continue;
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                   if(_GLF_DEAD(false))
                                    continue;
                                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          continue;
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
                                          {
                                           if(_GLF_DEAD(false))
                                            continue;
                                           if(_GLF_DEAD(false))
                                            return;
                                           return;
                                          }
                                        }
                                       do
                                        {
                                         do
                                          {
                                           return;
                                           if(_GLF_DEAD(false))
                                            break;
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0))), 0.0, determinant(mat3(0.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, sqrt(0.0), 1.0, sqrt(1.0), 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), mat4x3(mat4(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0))), 0.0, determinant(mat3(0.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, sqrt(0.0), 1.0, sqrt(1.0), 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))).y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                 else
                                  {
                                   subgroupAll(false);
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                      return;
                     continue;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    break;
                   continue;
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))) && true))))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
                  break;
                }
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), false), false))))))))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                      }
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                      continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 break;
                 if(_GLF_DEAD(false))
                  break;
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, clamp(4, 4, 4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0), max(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (int(_GLF_IDENTITY(6, clamp(6, 6, 6))))), ((~ (int(6)))) ^ 0), 0 | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0), (~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0)) << 0))), ~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(_GLF_IDENTITY(6, int(ivec2(_GLF_IDENTITY(6, int(ivec4(6, 1, 0, 1))), 1)))), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            return;
                           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7435.3232)), float(injectionSwitch.x), bool(true))))) ^ 0, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0) >> 0))); _injected_loop_counter --)
                              {
                               return;
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       do
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               return;
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                      }
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(mat3x2(injectionSwitch[1], 0.0, 0.0, 1.0, 1.0, length(log(1.0)))), (float(mat3x2(injectionSwitch[1], 0.0, 0.0, 1.0, 1.0, length(log(1.0))))) + 0.0)))).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false))))))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0)))[1])).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)))))))
            break;
           subgroupAll(true);
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), false || ((! (injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))))))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
}
