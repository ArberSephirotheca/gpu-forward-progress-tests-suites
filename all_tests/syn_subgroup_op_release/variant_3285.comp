#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))))), true, false, true))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(1 | 1, (1 | 1) | _GLF_IDENTITY((1 | 1), ((1 | 1)) / 1))) - 0))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), _GLF_IDENTITY(1, (1) << (0 | 0)) * ((_injected_loop_counter ++))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(ivec2(1, 1)))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8315.4520) : injectionSwitch.y))) - 0.0)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
        barrier();
       barrier();
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) || false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                }
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true)))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) | _GLF_IDENTITY(0u, min(0u, 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], float(mat3x2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[1], 0.0, 0.0, 1.0, 0.0, 1.0)))), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-9.3, clamp(_GLF_IDENTITY(-9.3, min(-9.3, -9.3)), _GLF_IDENTITY(-9.3, max(-9.3, -9.3)), _GLF_IDENTITY(-9.3, (-9.3) / 1.0))))), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-0.7), _GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], min(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], ((mat2(1.0) * (injectionSwitch))[1]) / 1.0), (mat2(1.0) * (injectionSwitch))[1])), mix(float(_GLF_FUZZED(-77.73)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))), max((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), min(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), clamp(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), clamp(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(vec2(-5838.1144, 864.588)) : min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-1489.6296, 1127.3838)))))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]) : _GLF_FUZZED(acos(52.84)))))), bool(true)))), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(float(2600))), bvec2(true, false)), max(mix(vec2(_GLF_FUZZED(-0.7), _GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], min(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], ((mat2(1.0) * (injectionSwitch))[1]) / 1.0), (mat2(1.0) * (injectionSwitch))[1])), mix(float(_GLF_FUZZED(-77.73)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))), max((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), min(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), clamp(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), clamp(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(vec2(-5838.1144, 864.588)) : min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-1489.6296, 1127.3838)))))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]) : _GLF_FUZZED(acos(52.84)))))), bool(true)))), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(float(2600))), bvec2(true, false)), mix(vec2(_GLF_FUZZED(-0.7), _GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], min(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], ((mat2(1.0) * (injectionSwitch))[1]) / 1.0), (mat2(1.0) * (injectionSwitch))[1])), mix(float(_GLF_FUZZED(-77.73)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))), max((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), min(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), clamp(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), clamp(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(vec2(-5838.1144, 864.588)) : min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-1489.6296, 1127.3838)))))), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), min((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch))))))[1]) : _GLF_FUZZED(acos(52.84)))))), bool(true)))), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(float(2600))), bvec2(true, false)))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(93.42) : 1.0)))), 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))), mix(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(9790.4483)), vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))))[0], (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (_GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), min(float(mat2x3(1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat2x3(1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))))))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(77.72)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mat2(_GLF_IDENTITY(mat3(mat2(mat3x2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(77.72)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), _GLF_IDENTITY(float(mat3x4(mix(float(0.0), float(_GLF_FUZZED(77.72)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), 0.0, cos(0.0), 1.0, 1.0, sin(0.0), abs(0.0), abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(1.0))), dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), max(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0))))), tan(0.0))), max(float(mat3x4(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(77.72, (_GLF_IDENTITY(77.72, min(77.72, 77.72))) * 1.0))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), 0.0, cos(0.0), 1.0, 1.0, sin(0.0), abs(0.0), _GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, _GLF_IDENTITY(abs(1.0), (false ? _GLF_FUZZED((+ 8.0)) : abs(1.0))))), dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), _GLF_IDENTITY(vec4(1.0, 0.0, tan(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))), 0.0), max(vec4(1.0, 0.0, tan(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))), 0.0), vec4(1.0, 0.0, tan(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))), 0.0)))), max(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0))))), tan(0.0))), _GLF_IDENTITY(float(mat3x4(mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(77.72)), max(float(_GLF_FUZZED(77.72)), _GLF_IDENTITY(float(_GLF_FUZZED(77.72)), max(float(_GLF_FUZZED(77.72)), float(_GLF_IDENTITY(_GLF_FUZZED(77.72), min(_GLF_FUZZED(77.72), _GLF_FUZZED(77.72)))))))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), 0.0, cos(0.0), 1.0, 1.0, sin(0.0), abs(0.0), abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(1.0))), dot(vec3(0.0, 0.0, cos(0.0)), vec3(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), (true ? float(mat3x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(82.16)))), 0.0)), 0.0, abs(1.0)))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.2)), float(1.0), bool(true))))), _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, _GLF_IDENTITY(tan(0.0), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(-6.7) : tan(0.0))), 1.0, 0.0, abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (mat3x2(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(-6.7) : tan(0.0))), 1.0, 0.0, abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))) * mat3(1.0)))), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), max(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0))))), tan(0.0))), max(float(mat3x4(mix(float(0.0), float(_GLF_FUZZED(77.72)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), 0.0, cos(0.0), 1.0, 1.0, sin(0.0), abs(0.0), abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6393.2747)), float(1.0), bool(true)))))), dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(_GLF_IDENTITY(0.0, min(0.0, 0.0)))), vec4(1.0, 0.0, tan(0.0), 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(vec4(-3.7, -341.423, 95.80, 17.96)) : vec4(1.0, tan(0.0), 0.0, sqrt(0.0)))), vec4(1.0, 0.0, tan(0.0), 0.0)), max(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0))))), tan(0.0))), float(mat3x4(mix(float(0.0), float(_GLF_FUZZED(77.72)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), 0.0, _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), cos(0.0), cos(0.0))), cos(0.0))), 1.0, 1.0, sin(0.0), abs(0.0), abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(1.0))), dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, abs(1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), _GLF_IDENTITY(0.0, (0.0) * 1.0), sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), max(dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(1.0, 0.0, tan(0.0), 0.0)), dot(vec4(1.0, tan(0.0), 0.0, sqrt(0.0)), vec4(_GLF_IDENTITY(1.0, (1.0) + sqrt(0.0)), 0.0, tan(0.0), 0.0))))), tan(0.0)))))))))), (mat2(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), max(_GLF_IDENTITY(float(0.0), (float(0.0)) * 1.0), float(0.0))), float(_GLF_FUZZED(77.72)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))).x > injectionSwitch.y)))))))))) + mat2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), float(vec4(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), 1.0, 1.0, 0.0)))), 0.0, 0.0))))), (_GLF_IDENTITY(mat3(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (false ? _GLF_FUZZED(length(injectionSwitch)) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), (false ? _GLF_FUZZED(-297.559) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0))) : _GLF_FUZZED(-5.4))))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED(77.72), mix(float(_GLF_FUZZED(77.72)), float(_GLF_FUZZED(vec4(26.51, 4242.9086, -5.4, 35.97).a)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), mat3(mat4x3(mat3(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(77.72, _GLF_IDENTITY((77.72) - 0.0, (false ? _GLF_FUZZED(float(false)) : (77.72) - 0.0))))), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y : _GLF_FUZZED(8264.7008)))) / 1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true, true)))) ? mat2(1.0) : _GLF_FUZZED(mat2(39.74, 7758.3640, -6617.7007, 155.748)))) * (injectionSwitch))), clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y : _GLF_FUZZED(8264.7008)))) / 1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true, true)))) ? mat2(1.0) : _GLF_FUZZED(mat2(39.74, 7758.3640, -6617.7007, 155.748)))) * (injectionSwitch))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y : _GLF_FUZZED(8264.7008)))) / 1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true, true)))) ? mat2(1.0) : _GLF_FUZZED(mat2(39.74, 7758.3640, -6617.7007, 155.748)))) * (injectionSwitch))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y : _GLF_FUZZED(8264.7008)))) / 1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true, true)))) ? mat2(1.0) : _GLF_FUZZED(mat2(39.74, 7758.3640, -6617.7007, 155.748)))) * (injectionSwitch))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(545.279), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat3x2((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.3)), bvec2(true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y : _GLF_FUZZED(8264.7008)))) / 1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true, true)))) ? mat2(1.0) : _GLF_FUZZED(mat2(39.74, 7758.3640, -6617.7007, 155.748)))) * (injectionSwitch)))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), clamp(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), _GLF_IDENTITY(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), min(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))))), vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))))), vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.4)), bool(false))), (0.0) + 0.0)))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), clamp(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), (_GLF_IDENTITY(vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0))), (vec2(_GLF_FUZZED(4267.2913), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(9790.4483, (9790.4483) + 0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(28.30)), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(28.30)), (float(_GLF_FUZZED(28.30))) + 0.0), float(_GLF_FUZZED(28.30)), float(_GLF_FUZZED(28.30)))), float(_GLF_IDENTITY(9790.4483, _GLF_IDENTITY((9790.4483), mix(float((9790.4483)), float(_GLF_FUZZED((+ 0.5))), bool(false))) + 0.0)), _GLF_IDENTITY(bool(true), bool(bool(bool(true))))))))) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), vec2(_GLF_IDENTITY(_GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), _GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))), mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))), float(_GLF_FUZZED((7.0 / 2.7))), bool(false)))))))))), (mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, float(vec3(0.0, sqrt(1.0), 0.0)))))), min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))))))))))) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(mat4(mat2(1.0, 1.0, 1.0, 1.0)))))) : _GLF_FUZZED(mat2(8285.7677, 4560.8323, -726.287, 272.739)))), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * _GLF_IDENTITY((mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))), mat2(1.0) * ((mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))))), min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))) - mat2(0.0, 0.0, 0.0, 0.0)), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(63.65)))))))), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), _GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), _GLF_IDENTITY((mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-1115.2056, mix(float(_GLF_IDENTITY(-1115.2056, (true ? -1115.2056 : _GLF_FUZZED(5.3)))), float(_GLF_FUZZED(4.1)), bool(false))))), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(63.65, (63.65) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))))))))))))), mat2(mat4x2((mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(63.65, (63.65) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))))))))))))))))) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))) : _GLF_FUZZED(mat2(8285.7677, 4560.8323, -726.287, 272.739)))), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 0.0)))))))), _GLF_IDENTITY(min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-21.95, -8.6, 3.9, 8612.7530)))) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))), (true ? _GLF_IDENTITY(min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-21.95, -8.6, 3.9, 8612.7530)))) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))), mat2(1.0) * (min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-21.95, -8.6, 3.9, 8612.7530)))) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))))) : _GLF_FUZZED(vec2(-1.3, 4.3))))), clamp(_GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(2.9))), (true ? 0.0 : _GLF_FUZZED(63.65)))))))), _GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), (mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-38.88)), float(0.0), bool(true))), (true ? 0.0 : _GLF_FUZZED(63.65))))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(mat2(8285.7677, 4560.8323, -726.287, 272.739)))), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(determinant(mat4(5.3, -16.74, -30.33, -86.88, 794.293, 1.2, 59.90, 9.6, -0.5, -347.165, -71.12, -781.554, 9.6, -181.464, 22.74, -545.209))) : _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) - 0.0))), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))), (false ? _GLF_FUZZED(mat2(-1.3, 525.603, -8.7, -21.16)) : _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (_GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(mat2x4(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))))))))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), (false ? _GLF_FUZZED(mat2(602.826, -775.607, 6112.3577, -819.622)) : mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), _GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), (mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(63.65, float(_GLF_IDENTITY(mat3(63.65, 0.0, 0.0, length(vec2(0.0, 0.0)), tan(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))))), 0.0, 0.0, 1.0), (mat3(63.65, 0.0, 0.0, length(vec2(0.0, 0.0)), tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), 0.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))))))) / mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0, 1.0))) : _GLF_FUZZED(mat2(8285.7677, 4560.8323, -726.287, 272.739)))), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (_GLF_IDENTITY(mat2(mat3x2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), (mat2(injectionSwitch, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), (true ? mat2(mat3x2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), (mat2(injectionSwitch, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED((mat3x2(-91.16, -1.7, 69.75, 2.5, 0.6, -2026.4558) * mat2x3(mat2x4(-7.1, 1332.1979, 6.8, 179.209, 5.4, 9295.4201, -776.146, 688.833))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-1115.2056, max(-1115.2056, -1115.2056)))), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), _GLF_IDENTITY(_GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), (mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))))))))))) / mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.5))))), mat2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), (mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))))))))))) / mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.5)))))), mat3(mat4(mat3(_GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), (mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))))))))))) / mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.5)))))))))))) : _GLF_FUZZED(mat2(8285.7677, 4560.8323, -726.287, 272.739)))), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), (mat2(injectionSwitch, 1.0, 0.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))))), min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))))), vec2(1.0, 1.0) * (_GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-1115.2056)), (float(_GLF_FUZZED(-1115.2056))) / 1.0), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(63.65, (63.65) - 0.0))))))))), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))), _GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), _GLF_IDENTITY((mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-1115.2056)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5.3) : float(_GLF_FUZZED(-1115.2056)))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.4)), bool(false))), min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), max(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), _GLF_IDENTITY(bool(false), ! (! (bool(false)))))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), (false ? _GLF_FUZZED(-704.957) : min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))))))))))))))), (true ? _GLF_IDENTITY((mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), max(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), (false ? _GLF_FUZZED(-704.957) : min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))))))))))))))), ((mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), max(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))), (false ? _GLF_FUZZED(-704.957) : min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))))))))) - mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat2(232.253, 536.395, 1.0, 33.24)))) / mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0))) : _GLF_FUZZED(mat2(8285.7677, 4560.8323, -726.287, 272.739)))), _GLF_IDENTITY(mat2(mat3x2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 0.0))), mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)))) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), min((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))) - 0.0), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))))))))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(63.65), mix(float(_GLF_FUZZED((- 13.62))), float(_GLF_FUZZED(63.65)), bool(true))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(63.65), mix(float(_GLF_FUZZED((- 13.62))), float(_GLF_FUZZED(63.65)), bool(true))), clamp(_GLF_IDENTITY(_GLF_FUZZED(63.65), mix(float(_GLF_FUZZED((- 13.62))), float(_GLF_FUZZED(63.65)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(63.65), mix(float(_GLF_FUZZED((- 13.62))), float(_GLF_FUZZED(63.65)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(63.65), mix(float(_GLF_FUZZED((- 13.62))), float(_GLF_FUZZED(63.65)), bool(true))))), _GLF_IDENTITY(_GLF_FUZZED(63.65), mix(float(_GLF_FUZZED((- 13.62))), float(_GLF_FUZZED(63.65)), bool(true)))))))))))), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(true, ! (! (true))) ? 0.0 : _GLF_FUZZED(63.65)))))))), _GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1115.2056)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65)))))))))), (mat2(mat3x4(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED(-1115.2056), max(_GLF_IDENTITY(_GLF_FUZZED(-1115.2056), clamp(_GLF_FUZZED(-1115.2056), _GLF_FUZZED(-1115.2056), _GLF_FUZZED(-1115.2056))), _GLF_IDENTITY(_GLF_FUZZED(-1115.2056), min(_GLF_FUZZED(-1115.2056), _GLF_FUZZED(-1115.2056)))))), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), false, false, false)), ! (! (bool(bvec4(bool(false), false, false, false)))))))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(63.65))))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(mat2(8285.7677, 4560.8323, -726.287, 272.739)))), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), min(_GLF_IDENTITY((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (_GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))))), max(_GLF_IDENTITY((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))), (true ? (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))) : _GLF_FUZZED(refract(injectionSwitch, injectionSwitch, 71.43)))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0)))))))), mat2(1.0) * ((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))))))))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))), mix(vec2((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))[0], (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))[1]), vec2(_GLF_FUZZED(3274.3962), _GLF_FUZZED(7.3)), bvec2(false, false))))))))[0], (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))), mat2(1.0) * (mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))))))[1]), bvec2(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), false || (true)))))).x) - 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 | (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), float(_GLF_FUZZED(4.8)), bool(false)))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (false) || false)))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (ivec2(-17699, 89567).t & 0) ^ (7))) - 0)), int(7)))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1), clamp(ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1), ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1), ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1)))), ~ (~ (int(_GLF_IDENTITY(ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1), clamp(ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1), ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1), ivec3(1, (0 << _GLF_IDENTITY(int(1), int(1))), 1))))))))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-536.181) : injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 | 1) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0), 0 + ((0))), (_GLF_IDENTITY((0), 0 + ((0)))) | 0), _GLF_IDENTITY((0), ((0)) << 0), (0)))) / (1 | (0 >> _GLF_IDENTITY(int(1), int(1))))) | (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(76323, 0 + (76323))) : _GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), 0 + ((0))), _GLF_IDENTITY((0), ((0)) << 0), (0)))) / (1 | (0 >> _GLF_IDENTITY(int(1), int(1))))) | (0)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (((0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))) > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bool(! (_GLF_WRAPPED_IF_TRUE(true))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))) || false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) - uvec2(0u, 0u)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
   for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) + 0))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1))), 0), (ivec2(_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1))), 0)) - ivec2(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))) || false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))
            barrier();
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.7)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.1), _GLF_FUZZED(7.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(6.2)), bool(false))), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(4.7), mix(float(_GLF_FUZZED(4.7)), float(_GLF_FUZZED(-5.7)), bool(false)))), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), false, false, true))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(! (! (_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (! (! (_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))) && true))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, true))))))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))), bool(_GLF_IDENTITY(bool((! (false))), ! _GLF_IDENTITY((! (bool((! (false))))), bool(bvec3((! (bool((! (false))))), false, true))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(findMSB(subgroup_local_id)) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 37353)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), min(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))) && true))), false, false)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))), true))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     do
      {
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(64, (64) >> 0), _GLF_IDENTITY(4, (4) - 0));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, (true) || false), true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               subgroupAll(true);
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), bool(bvec4(_GLF_IDENTITY((bool(false)), ! (! ((bool(false))))), true, false, false))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false)))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec4(bool(bvec4(false, false, true, false)), true, true, false)))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 | 0) | 0)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(0.0)), clamp(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(0.0)), vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(0.0)), vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(0.0))))), (true ? float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(0.0)), clamp(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(0.0)), vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(0.0)), vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))) : _GLF_FUZZED(5974.3492)))) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) || false))), bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, (true) || false)))), true && (bool(bool(bool(_GLF_IDENTITY(true, (true) || false))))))))), true && (true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true))))) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(true)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-1701.7611 / -9117.9694))), bvec2(true, false))), injectionSwitch)).y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}
