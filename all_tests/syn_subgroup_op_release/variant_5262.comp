#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 ivec3 _f0;
 float _f1;
 ivec4 _f2;
 mat3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 mat4x3 _f1;
 vec4 _f2;
 ivec3 _f3;
 mat2x3 _f4;
 ivec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 uvec4 _f1;
 bvec2 _f2;
 mat3x4 _f3;
 mat3x4 _f4;
 _GLF_struct_6 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_8 {
 int _injected_loop_counter;
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 mat3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 mat4 _f1;
 mat4x3 _f2;
 mat3 _f3;
 mat2x3 _f4;
 bvec4 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_0 {
 uint subgroup_id;
 mat2 _f0;
 mat4x2 _f1;
 vec2 _f2;
 ivec2 _f3;
 ivec2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 ivec4 _f1;
 mat4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(_GLF_struct_0(gl_SubgroupID, mat2(1.0), mat4x2(1.0), vec2(1.0), ivec2(1), ivec2(1), bvec4(true)), _GLF_struct_1(uvec4(1u), mat4(1.0), mat4x3(1.0), mat3(1.0), mat2x3(1.0), bvec4(true), mat2x4(1.0)), _GLF_struct_2(bvec4(true), mat3(1.0), bvec4(true))), ivec4(1), mat4(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_4._f0._f0.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_4._f0._f0.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   buf[virtual_gid] = 1;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(_GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))), _GLF_struct_7(_GLF_struct_5(mat2x3(1.0), mat4x3(1.0), vec4(1.0), ivec3(1), mat2x3(1.0), ivec4(1), 1u), uvec4(1u), bvec2(true), mat3x4(1.0), mat3x4(1.0), _GLF_struct_6(ivec3(1), 1.0, ivec4(1), mat3(1.0), mat2(1.0)), mat4x3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_8._injected_loop_counter > (0 ^ 0)); _GLF_struct_replacement_8._injected_loop_counter --)
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       subgroupAll(false);
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       subgroupAll(true);
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
