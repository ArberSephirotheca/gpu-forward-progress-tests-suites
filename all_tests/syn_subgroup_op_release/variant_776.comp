#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), _GLF_IDENTITY((bool(bvec4(false, false, false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) || false)), ((bool(bvec4(false, false, false, true)))) || _GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (_GLF_IDENTITY(bool(bvec4(false, false, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4(false, false, false, true))))))), ((bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false, false, true)))) || false))))) && _GLF_IDENTITY(true, bool(bvec2(true, false)))))))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), _GLF_IDENTITY(0 + (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), (0 + (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)))) | 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) ^ 0)) * ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), int(3)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) ^ 0), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 | (3))) | 0)), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - _GLF_IDENTITY(0, (0) >> 0))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) ^ 0), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, clamp(3, 3, 3)))))), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - 0)) - 0)))) ^ 0), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))) - 0, ((_GLF_IDENTITY(int(3), int(3))) - 0) | (0 >> _GLF_IDENTITY(int(4), int(4))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), (bool(bool(_GLF_IDENTITY(false, false || (false))))) && true)) ? _GLF_FUZZED((uvec3(86742u, 146260u, 101475u) | (136015u % uvec3(76190u, 103657u, 38010u)))) : _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec4((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(uvec3(86742u, 146260u, 101475u) | (136015u % uvec3(76190u, 103657u, 38010u)), ~ (~ (_GLF_IDENTITY(uvec3(86742u, 146260u, 101475u) | (136015u % uvec3(76190u, 103657u, 38010u)), uvec3(0u, 0u, 0u) | (uvec3(86742u, 146260u, 101475u) | (136015u % uvec3(76190u, 103657u, 38010u))))))))), (true ? _GLF_FUZZED((uvec3(86742u, 146260u, _GLF_IDENTITY(101475u, (_GLF_IDENTITY(101475u, 1u * (101475u))) | (101475u))) | (136015u % uvec3(76190u, 103657u, 38010u)))) : _GLF_FUZZED(uvec3(5100u, 127531u, 196592u)))) : _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u), 0u)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec4((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED((uvec3(86742u, 146260u, 101475u) | (136015u % uvec3(76190u, 103657u, 38010u)))) : _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))))) ^ uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)), 0u, 0u), 0u)))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u) * (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED((174578u % (uvec3(100010u, 2534u, 193921u) * uvec3(189265u, 91386u, 43460u))))))), ~ (~ ((gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u))), max((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED((174578u % (uvec3(100010u, 2534u, 193921u) * uvec3(189265u, 91386u, 43460u))))))), ~ (~ ((gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED((174578u % (uvec3(100010u, 2534u, 193921u) * uvec3(189265u, 91386u, 43460u))))))), ~ (~ ((gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u)), ~ (~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED((174578u % (uvec3(_GLF_IDENTITY(100010u, 0u ^ (100010u)), 2534u, 193921u) * uvec3(189265u, 91386u, 43460u))))))), ~ (~ (_GLF_IDENTITY((gl_WorkGroupSize), ~ (~ (_GLF_IDENTITY((gl_WorkGroupSize), min((gl_WorkGroupSize), _GLF_IDENTITY((gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize)))))))))))) << uvec3(0u, 0u, 0u))))))))), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED((_GLF_IDENTITY(174578u % (uvec3(100010u, 2534u, 193921u) * uvec3(189265u, 91386u, 43460u)), uvec3(0u, 0u, 0u) ^ (174578u % (uvec3(100010u, 2534u, 193921u) * uvec3(189265u, 91386u, 43460u))))))))), ~ (~ _GLF_IDENTITY(((gl_WorkGroupSize)), clamp(((gl_WorkGroupSize)), _GLF_IDENTITY(((gl_WorkGroupSize)), clamp(((gl_WorkGroupSize)), ((gl_WorkGroupSize)), ((gl_WorkGroupSize)))), ((gl_WorkGroupSize)))))) << uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))), min((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) * 1u))))).x, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u))) ^ uvec3(0u, 0u, 0u)).x) ^ 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize)))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize)))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)) ^ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)), ~ (~ (uvec3(0u, 0u, 0u)))), clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec4(~ _GLF_IDENTITY((0u), uint(uvec2(_GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_size) : (0u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))), 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (uvec4(~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(0u)))) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, (0u) | 0u)))))), 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) | 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) | 0u)), ~ (~ ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) | 0u))))))) >> 0u)), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), min((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u | (0u))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u))) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))).x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u))) + (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), (gl_WorkGroupSize) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))) ^ uvec3(0u, 0u, 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)), min(uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))))))) + _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) + ((gl_WorkGroupSize)))), _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u))) + (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))), _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))) + uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) - 0u))) ^ uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u)).x), clamp((_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), _GLF_IDENTITY(clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))), (false ? _GLF_FUZZED(uvec3(22384u, 120193u, 4894u)) : _GLF_IDENTITY(clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))), (clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))) ^ uvec3(0u, 0u, 0u))))), (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) >> 0u))) | (0u)), 0u))) ^ uvec3(0u, 0u, 0u)).x), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), clamp(_GLF_IDENTITY((gl_WorkGroupSize), uvec3(1u, 1u, 1u) * ((gl_WorkGroupSize))), (gl_WorkGroupSize), (gl_WorkGroupSize))) << uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)))), 0u, 0u), uvec3(uvec3(_GLF_IDENTITY((gl_WorkGroupSize), clamp(_GLF_IDENTITY((gl_WorkGroupSize), uvec3(1u, 1u, 1u) * ((gl_WorkGroupSize))), (gl_WorkGroupSize), (gl_WorkGroupSize))) << uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), clamp(_GLF_IDENTITY((gl_WorkGroupSize), uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) ^ 0u)) * ((gl_WorkGroupSize))), (gl_WorkGroupSize), (gl_WorkGroupSize))) << uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u))), (clamp(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)))) | (clamp(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0u)))))), 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))) / uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u)).x), (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) | uvec3(0u, _GLF_IDENTITY(0u, (0u) * 1u), 0u))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), (gl_WorkGroupSize) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(uint(-10168)) : 0u))))) ^ uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u))) ^ uvec3(0u, 0u, 0u)).x))) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(1u, 1u, 1u) | uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)) * (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u)))))))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u)))))) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))))))) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(1u, 1u, 1u) | uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)) * (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u)))))))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u)))))) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))))))) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)).x, 1u, (1u ^ 1u), 1u)), 0u ^ (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(1u, 1u, 1u) | uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)) * (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u)))))))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))), (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u)))))) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4((gl_WorkGroupSize), 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(163396u, 0u | (163396u)), 23832u, 21157u)) : uvec3(uvec4((gl_WorkGroupSize), 0u))))))))) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)).x, 1u, (1u ^ 1u), 1u)))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(60343u, 76280u, 63898u)) : _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, tan(0.0), 0.0, 0.0, 0.0))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, _GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), (false ? _GLF_FUZZED(clamp(injectionSwitch, -6.4, dot(715.929, -7519.1454))) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.4)), vec2(_GLF_FUZZED((vec4(7.1, -3408.6492, 4.7, 61.76).p * 249.511)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))).y)), true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ 0u)) | (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         break;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), clamp(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), _GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), clamp(_GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), int(ivec4(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), 1, (1 ^ 0), 1))), _GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), (true ? 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))) : _GLF_FUZZED(int(-9.1)))), _GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), int(ivec3(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), 0, 1))))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-24978))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6)))), 0 + (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), clamp((_GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(int(6), int(6))))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6))))))))) - 0))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) + 0, int(int((int(6)) + 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), clamp(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), _GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), clamp(_GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), int(ivec4(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), 1, (1 ^ 0), 1))), _GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), (true ? 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))) : _GLF_FUZZED(int(-9.1)))), _GLF_IDENTITY(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), int(ivec3(0 ^ (1 << _GLF_IDENTITY(int(6), int(6))), 0, 1))))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-24978))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (1 << _GLF_IDENTITY(int(6), int(6)))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6)))), 0 + (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), clamp((_GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(int(6), int(6))))) << 0), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) | (1 << _GLF_IDENTITY(int(6), int(6))))))))) - 0))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) + 0, int(int((int(6)) + 0)))))) | 0))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))), bool(bvec3((_GLF_IDENTITY(false, false || (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) || false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), bool(bvec2(! (false), false))))))), false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size), (clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size)) | 0u), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y) - _GLF_IDENTITY(0.0, (0.0) - tan(0.0)), _GLF_IDENTITY(clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y) - 0.0, clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0))), min(_GLF_IDENTITY(clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y) - 0.0, clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0))), max(clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y) - 0.0, clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0))), clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y) - 0.0, clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0))))), clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y) - 0.0, clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))), float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(uintBitsToFloat(num_workgroup)) : _GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(1.0, min(1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, log(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))))) / 1.0)))))), injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(uint(uvec2((subgroup_id), 1u)), (uint(uvec2((subgroup_id), 1u))) >> 0u)))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))) << 0u)), 1u))))) / 1u) * subgroup_size, max(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.7)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)))), 0.0, _GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)))), 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) / exp(0.0))), 1.0, 0.0, log(1.0))))), injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch)).y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0)), vec2(_GLF_FUZZED(9.7), _GLF_FUZZED(-3.0)), bvec2(false, false))).y) - 0.0, min(_GLF_IDENTITY((injectionSwitch.y) - 0.0, max((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, _GLF_IDENTITY(0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y) * (0.0)))), 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0))))), injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), (true ? clamp(0.0, 0.0, 0.0) : _GLF_FUZZED(825.932)))), 0.0, _GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)))), 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0))))), injectionSwitch.y))))))))) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))) / _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))) * subgroup_size, 0u + _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))) / _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), clamp(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, min(1u, 1u))))))) * subgroup_size), (true ? (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))) / _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), clamp(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, min(1u, 1u))))))) * subgroup_size) : _GLF_FUZZED(workgroup_base)))), 1u * (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7319.8850)), bool(false))), 0.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0)))), mix(float(_GLF_FUZZED(-3.6)), float(_GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7319.8850)), bool(false))), 0.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0)))))))).y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((2.0 - -7.5))), float(0.0), bool(true))) : _GLF_FUZZED(fract(638.070)))), _GLF_IDENTITY(log(1.0), (_GLF_IDENTITY(log(1.0), (true ? log(1.0) : _GLF_FUZZED(4.2)))) - 0.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0)))))))).y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((2.0 - -7.5))), float(0.0), bool(true))) : _GLF_FUZZED(fract(638.070)))), _GLF_IDENTITY(log(1.0), (_GLF_IDENTITY(log(1.0), (true ? log(1.0) : _GLF_FUZZED(4.2)))) - 0.0)))), (_GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0)))))))).y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((2.0 - -7.5))), float(0.0), bool(true))) : _GLF_FUZZED(fract(638.070)))), _GLF_IDENTITY(log(1.0), (_GLF_IDENTITY(log(1.0), (true ? log(1.0) : _GLF_FUZZED(4.2)))) - 0.0))))) / 1.0), _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0)))))))).y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((2.0 - -7.5))), float(0.0), bool(true))) : _GLF_FUZZED(fract(638.070)))), _GLF_IDENTITY(log(1.0), (_GLF_IDENTITY(log(1.0), (true ? log(1.0) : _GLF_FUZZED(4.2)))) - 0.0))))))), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) && true))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) >> 0u) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), 0u | ((subgroup_id))) * 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(subgroup_id, subgroup_id), (max(subgroup_id, subgroup_id)) + 0u)), _GLF_IDENTITY(0u, (0u) | (0u)) ^ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), uint(uvec3(0u ^ _GLF_IDENTITY((subgroup_id), clamp((subgroup_id), (subgroup_id), _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id))))) ^ 0u))), 1u, 0u))))))) / _GLF_IDENTITY(1u, (1u) / 1u)) * subgroup_size)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(1.0, 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0))), log(1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0))))), (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y), clamp(_GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.y), float(mat3x2((_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), 0.0, 1.0, 1.0, 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_FUZZED((- -8.8))), float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), bool(true))), 1.0, 0.0, log(1.0))))) : _GLF_FUZZED(-4148.8536))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0))))), (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y), clamp(_GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.y), float(mat3x2((_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), 0.0, 1.0, 1.0, 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_FUZZED((- -8.8))), float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), bool(true))), 1.0, 0.0, log(1.0))))) : _GLF_FUZZED(-4148.8536))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, log(1.0))))), (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4(_GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y), clamp(_GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.y), float(mat3x2((_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), 0.0, 1.0, 1.0, 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_FUZZED((- -8.8))), float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), bool(true))), 1.0, 0.0, log(1.0))))) : _GLF_FUZZED(-4148.8536))))), injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), min(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) - 0u), _GLF_FUZZED(workgroup_size))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), min((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), clamp(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), (false ? _GLF_FUZZED(uvec2(102720u, 199171u)) : _GLF_IDENTITY(uvec2(0u, 1u), uvec2(0u, 0u) | (uvec2(0u, 1u))))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))))) ^ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (0u ^ (subgroup_id)) >> _GLF_IDENTITY(0u, max(0u, 0u))))))))) / 1u) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, 0u)))) | 0u))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), true, true))))), true, true))))))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(_GLF_IDENTITY(ivec4((1), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(28621, (_GLF_IDENTITY(28621, min(28621, 28621))) / 1)) : 0)), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ~ (~ (ivec4((1), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
  {
   buf[virtual_gid] = _GLF_IDENTITY(1, min(1, 1));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), false)))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), false, true))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(false, false, true)))), false))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, true), true)), false))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, true), true)), false))))), true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), false))), false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), false))), false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))), false))), false)))))))))))))))))))), false), true, true))))))
    break;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) / 1))
              {
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                return;
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true, false)), true, false, false))))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), true, false)), ! _GLF_IDENTITY((! (bool(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bool(true))))), true, false)))), ((! (bool(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bool(true))))), true, false))))) || false)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y)) || ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), true, false))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5.4)), bool(false)))))))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true && ((injectionSwitch.x > injectionSwitch.y))))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false, true), bvec3(bvec3(bvec3(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false, true)))))))))
              break;
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) && true)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(float(injectionSwitch[1]))))).y, false))) && true))))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (false)), bool(bool((! (false))))))), (bool(bool(_GLF_IDENTITY((! (false)), bool(bool((! (false)))))))) || false)) && true)))))) && true)))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false, false, false))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0)), clamp(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0)), (float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0))) / 1.0), float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.8)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0))))))))))))
            break;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       subgroupAll(false);
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || (_GLF_IDENTITY(true, (true) && true)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) / 1), _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), ~ (~ (_GLF_IDENTITY(4, 1 * (4))))), 4)), 64, 4);
   subgroupAll(true);
  }
}
