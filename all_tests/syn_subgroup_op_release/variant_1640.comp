#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 bool _f0;
 int _f1;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 uint _f1;
} ;

struct _GLF_struct_1 {
 uint _f0;
 _GLF_struct_0 _f1;
 bvec3 _f2;
 bvec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 uint subgroup_size;
 float _f1;
 ivec4 _f2;
 uint _f3;
 _GLF_struct_2 _f4;
 ivec4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_1(1u, _GLF_struct_0(mat4x2(1.0), 1u), bvec3(true), bvec3(true), mat4x3(1.0)), gl_SubgroupSize, 1.0, ivec4(1), 1u, _GLF_struct_2(true, 1), ivec4(1));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_3.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_3.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_3.subgroup_size);
 buf[virtual_gid] = 1;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 0, (0 << _GLF_IDENTITY(int(1), int(1)))), ~ (~ (ivec3(int(6), 0, (0 << _GLF_IDENTITY(int(1), int(1)))))))))))); _injected_loop_counter ++)
  {
   if(subgroup_local_id + 1 < _GLF_struct_replacement_3.subgroup_size)
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     subgroupAll(false);
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (bool(bvec3(true, true, false))) && true))))
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
      }
     else
      {
      }
     subgroupAll(true);
    }
  }
}
