#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 ivec4 _f0;
 int _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 mat4x2 _f1;
 _GLF_struct_13 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_11 {
 uvec2 _f0;
 uvec2 _f1;
 mat2x3 _f2;
 mat4x3 _f3;
 float _f4;
 bool _f5;
} ;

struct _GLF_struct_10 {
 uint num_workgroup;
 mat2x3 _f0;
 uvec3 _f1;
 ivec3 _f2;
 mat2x3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 _GLF_struct_10 _f1;
 float _f2;
 _GLF_struct_11 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 bvec4 _f1;
 _GLF_struct_14 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
 uint _f1;
 float _f2;
 bool _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_4 {
 float _f0;
 ivec2 _f1;
 int _f2;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 uint _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 mat4x2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_1 {
 uint workgroup_id;
 _GLF_struct_0 _f0;
 mat4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base;
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_5(mat4(1.0), _GLF_struct_2(uvec4(1u), 1u, mat3x2(1.0), mat2x4(1.0), mat2x4(1.0)), _GLF_struct_3(mat4(1.0), gl_SubgroupID), _GLF_struct_4(1.0, ivec2(1), 1), mat4x2(1.0), ivec2(1)), _GLF_struct_8(_GLF_struct_6(vec2(1.0), vec3(1.0)), _GLF_struct_7(bvec3(true), 1u, 1.0, true, mat3x4(1.0)), uvec3(1u)));
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y = _GLF_struct_replacement_9._f0._f2.subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y = subgroup_size;
 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.x = subgroup_local_id;
 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_12(ivec3(1), _GLF_struct_10(gl_NumWorkGroups.x, mat2x3(1.0), uvec3(1u), ivec3(1), mat2x3(1.0), bvec4(true)), 1.0, _GLF_struct_11(uvec2(1u), uvec2(1u), mat2x3(1.0), mat4x3(1.0), 1.0, true), mat2x4(1.0)), bvec4(true), _GLF_struct_14(mat3x2(1.0), mat4x2(1.0), _GLF_struct_13(ivec4(1), 1, mat4x2(1.0)), ivec2(1)), uvec3(1u));
 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.x = _GLF_struct_replacement_15._f0._f1.num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.z = workgroup_size;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(gl_WorkGroupID.x, _GLF_struct_0(ivec2(1), bvec4(true)), mat4(1.0));
 uint workgroup_base = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.z * _GLF_struct_replacement_1.workgroup_id;
 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z = workgroup_base;
 uint virtual_gid = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y + GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x;
 uint next_virtual_gid = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y + ((GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = 1;
 if(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x + 1 < GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
