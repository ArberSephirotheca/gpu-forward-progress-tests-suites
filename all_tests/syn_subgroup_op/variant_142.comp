#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_22 {
 bool _f0;
 vec2 _f1;
 uvec3 _f2;
 uint num_workgroup;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
 mat3 _f1;
 bvec2 _f2;
 bvec3 _f3;
 bvec4 _f4;
 uvec2 _f5;
 int _f6;
} ;

struct _GLF_struct_18 {
 mat4x2 _f0;
 vec2 _f1;
 ivec4 _f2;
 uvec2 _f3;
 bvec3 _f4;
 mat2x4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_17 {
 mat2x3 _f0;
} ;

struct _GLF_struct_16 {
 float _f0;
 mat4 _f1;
 mat3 _f2;
 mat3 _f3;
 mat4x3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_15 {
 uint _f0;
} ;

struct _GLF_struct_14 {
 float _f0;
 mat2 _f1;
 mat4 _f2;
 mat2x3 _f3;
 float _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
 uint workgroup_size;
 _GLF_struct_19 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_21 {
 _GLF_struct_20 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_11 {
 uvec2 _f0;
 vec3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_9 {
 mat2 _f0;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 mat4x2 _f1;
 bvec3 _f2;
 bvec4 _f3;
 float _f4;
 mat2 _f5;
 bool _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 mat4x2 _f1;
 int _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_6 {
 int _f0;
 vec2 _f1;
 bvec3 _f2;
 ivec4 _f3;
 vec4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 uint _f1;
 ivec2 _f2;
 uint _f3;
 mat4 _f4;
 int _f5;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 uvec2 _f1;
 uvec3 _f2;
 float _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 ivec3 _f1;
 ivec4 _f2;
 bvec4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 vec2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 bvec3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_0 {
 uint _f0;
 ivec3 _f1;
 bvec4 _f2;
 mat3x2 _f3;
 vec3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_1 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_10 _f2;
 ivec3 _f3;
 vec3 _f4;
 uint workgroup_base;
 _GLF_struct_12 _f5;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-71.51), clamp(_GLF_FUZZED(-71.51), _GLF_FUZZED(-71.51), _GLF_FUZZED(-71.51))))), injectionSwitch.y)))))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false))), false, true)))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(22.46)), float(injectionSwitch.y), bool(true))))), injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-0.9))), bool(false))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(true, vec2(1.0), uvec3(1u), gl_NumWorkGroups.x);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_20(_GLF_struct_14(1.0, _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.9)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2710.4528)))), bool(true)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat2(-485.898), (mat2(-485.898)) / mat2(1.0, 1.0, 1.0, 1.0))) : mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.9)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2710.4528)))), bool(true)))))), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0)), mat4(1.0), mat2x3(1.0), 1.0, bvec3(true)), _GLF_struct_15(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_struct_16(1.0, mat4(1.0), mat3(1.0), mat3(1.0), mat4x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))), mix(vec4((_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))))[0], _GLF_FUZZED(-4.9), (_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))))[2], _GLF_FUZZED(-1046.7973)), vec4(_GLF_FUZZED((-4.4)), (_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), _GLF_IDENTITY(max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0)), (max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))) - sqrt(vec4(0.0, 0.0, 0.0, 0.0)))))[1], _GLF_FUZZED(-454.787), (_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))))[3]), bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))), mat2x4(1.0)), _GLF_struct_17(mat2x3(1.0)), _GLF_struct_18(mat4x2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + length(0.0)), float(mat3x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), length(vec2(0.0, 0.0)), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), 0.0, 1.0)))))), vec2(1.0), ivec4(1), uvec2(1u), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), mat2x4(1.0), mat4(1.0)), gl_WorkGroupSize.x, _GLF_struct_19(bvec3(true), _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY((mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat3(1.0) * ((mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), bvec2(true), bvec3(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, false, false))), bool(bvec2(! (bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, false, false))), true))))))), uvec2(1u), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))) / 1)))), mat3x2(1.0)), mat3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(859.695), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-69.77)), bvec2(true, false))).x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(859.695), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-69.77)), bvec2(true, false))).x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(! (_GLF_DEAD(false)), false)), (_GLF_IDENTITY(bool(bvec2(! _GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, _GLF_IDENTITY(true, ! (! (true))), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4((_GLF_DEAD(false)), true, _GLF_IDENTITY(true, ! (! (true))), false)), true, false, false)), (bool(bvec4(bool(bvec4((_GLF_DEAD(false)), true, _GLF_IDENTITY(true, ! (! (true))), false)), true, false, false))) && true)), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, true, false)), ! _GLF_IDENTITY((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))), false || (_GLF_IDENTITY((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))), _GLF_IDENTITY(bool(bool((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))), ! (! (bool(bool((! _GLF_IDENTITY((bool(bvec4((_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), true, true, false))), ! (! ((bool(bvec4((_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), true, true, false))))))))))))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, true, false)), ! _GLF_IDENTITY((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))), false || (_GLF_IDENTITY((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))), _GLF_IDENTITY(bool(bool((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))), ! (! (bool(bool((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))))))))))), bool(bool((_GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, true, false)), ! _GLF_IDENTITY((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))), _GLF_IDENTITY(bool(bool((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))), ! (! (bool(bool((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))), _GLF_IDENTITY(bool(bool((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))), ! (! (bool(bool((! (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))))))))))))))))))))))), false)), (bool(bvec2(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, false, true))))), false)), false || (bool(bvec4((_GLF_DEAD(false)), true, true, false))))))), (_GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, true, false)), false || (bool(bvec4((_GLF_DEAD(false)), true, true, false)))))))) || false), false))) && true)) && true)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))) && true))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            barrier();
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, float(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 1.0, round(length(normalize(1.0))), 1.0)))) * 1.0), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, float(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 1.0, round(length(normalize(1.0))), 1.0)))) * 1.0))), false || (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, float(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 1.0, round(length(normalize(1.0))), 1.0)))) * 1.0))))))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(atan(-840.691)) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-711.209)), bool(false))))) > injectionSwitch.y)))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, (false) || false))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-14.96) : injectionSwitch.x)) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true)))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true)))), true, false)))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED((vec3(-77.48, -9.5, -4.3).p + -2795.3104)), _GLF_FUZZED(11.50)), bvec2(false, false))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), mix(float(_GLF_FUZZED(-69.04)), float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), bool(true)))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
    barrier();
   return;
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_1(_GLF_struct_0(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, 0u ^ (1u)), 1u)))) - 0u), ivec3(1), bvec4(true), mat3x2(1.0), vec3(1.0), mat2x4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-11.21)), bool(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), true))))))))))), _GLF_struct_7(_GLF_struct_2(mat4x3(1.0), _GLF_IDENTITY(vec2(1.0), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.7)), bool(false)))) - 0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), mix(float(_GLF_FUZZED(6899.8197)), float(1.0 * (1.0)), bool(true))))))), _GLF_IDENTITY(max(vec2(1.0), vec2(1.0)), max(_GLF_IDENTITY(max(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (1.0))), vec2(1.0)), mix(vec2((max(vec2(1.0), vec2(1.0)))[0], _GLF_FUZZED(3.7)), vec2(_GLF_FUZZED(1451.6150), _GLF_IDENTITY((max(vec2(1.0), vec2(1.0)))[1], min((max(vec2(1.0), vec2(1.0)))[1], (max(vec2(1.0), vec2(1.0)))[1]))), bvec2(false, true))), max(vec2(1.0), vec2(1.0))))), vec2(1.0))), vec2(1.0)), _GLF_struct_3(mat2x3(1.0), ivec3(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) << ivec2(0, 0))))))), _GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1))), bvec4(true), uvec2(1u)), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), _GLF_struct_4(mat3x4(1.0), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> 0u), (_GLF_IDENTITY(1u, (1u) >> 0u)) << 0u), _GLF_IDENTITY(1u, (1u) >> 0u)))), ~ (~ (uvec2(1u)))), uvec3(1u), 1.0, uvec3(1u)), _GLF_struct_5(mat4x3(1.0), 1u, ivec2(1), 1u, _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0))))), (false ? _GLF_FUZZED(mat4(-5161.7939, 23.15, -4.2, 8137.0418, -8.6, -5.7, -6421.4463, -7522.5109, -299.911, 9.6, -645.100, 4.2, -1.5, -9.2, -823.586, 67.80)) : transpose(mat4(1.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0))))), (false ? _GLF_FUZZED(mat4(-5161.7939, 23.15, -4.2, 8137.0418, -8.6, -5.7, -6421.4463, -7522.5109, -299.911, 9.6, -645.100, 4.2, -1.5, -9.2, -823.586, 67.80)) : transpose(mat4(1.0)))))), (_GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0))))), (false ? _GLF_FUZZED(mat4(-5161.7939, 23.15, -4.2, 8137.0418, -8.6, -5.7, -6421.4463, -7522.5109, -299.911, 9.6, -645.100, 4.2, -1.5, -9.2, -823.586, 67.80)) : transpose(mat4(1.0))))))) - mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1), _GLF_struct_6(1, vec2(1.0), bvec3(true), ivec4(1), vec4(1.0), vec4(1.0))), _GLF_struct_10(_GLF_struct_8(ivec2(1), mat4x2(1.0), bvec3(true), bvec4(true), _GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0) + (1.0)), mat2(1.0), true), mat4x2(1.0), 1, _GLF_struct_9(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.52)), float(injectionSwitch.x), bool(true))), max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.52)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.52)), float(injectionSwitch.x), bool(true))))) : _GLF_FUZZED(515.161), mix(float(_GLF_FUZZED(61.91)), float(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.52)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(515.161), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.52)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(515.161), min(true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.52)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(515.161), true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.52)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(515.161)))) / 1.0)), bool(true)))))))))), ivec3(1), vec3(1.0), _GLF_IDENTITY(_GLF_struct_replacement_21._f0.workgroup_size * workgroup_id, clamp(_GLF_struct_replacement_21._f0.workgroup_size * workgroup_id, _GLF_struct_replacement_21._f0.workgroup_size * workgroup_id, _GLF_struct_replacement_21._f0.workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) - (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_struct_12(mat2(1.0), _GLF_struct_11(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(min(uvec2(1u), uvec2(1u)), min(min(uvec2(1u), _GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u)))), _GLF_IDENTITY(min(uvec2(1u), _GLF_IDENTITY(uvec2(1u), max(uvec2(1u), _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u)))))), (min(uvec2(1u), uvec2(1u))) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))))))) << uvec2(_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) - 0u), (1u & 1u), 1u, (1u & 1u)))), 0u)), vec3(1.0), bvec4(true))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), max((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))) / 1.0) - 0.0, float(mat4(_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))) - 0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))) - 0.0 : _GLF_FUZZED(-403.688))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, sqrt(abs(0.0)), sqrt(1.0), 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), 1.0, 0.0))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-63.64) : 1.0)), injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.y) / _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-63.64) : 1.0)), injectionSwitch.y), (true ? (injectionSwitch.y) / _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-63.64) : 1.0)), injectionSwitch.y) : _GLF_FUZZED(-6366.1958)))) - 0.0))))) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), max((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))) / 1.0), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), max((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, sqrt(0.0))), (float(mat4(_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), max((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))), (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, sqrt(0.0)))) * 1.0)) - 0.0, float(mat4(_GLF_IDENTITY((mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))) - 0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-14.49)), bool(false))) - 0.0 : _GLF_FUZZED(-403.688))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, sqrt(abs(0.0)), sqrt(1.0), 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), 1.0, 0.0))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-63.64) : 1.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(abs(degrees(injectionSwitch))) : injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.y) / _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-63.64) : 1.0)), injectionSwitch.y), (true ? (injectionSwitch.y) / _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-63.64) : 1.0)), injectionSwitch.y) : _GLF_FUZZED(-6366.1958)))) - 0.0))))) && true))) || false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_struct_replacement_13.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 uint next_virtual_gid = _GLF_struct_replacement_13.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_IDENTITY(buf[virtual_gid] = 1, ~ (~ (_GLF_IDENTITY(buf[virtual_gid] = 1, (false ? _GLF_FUZZED(next_virtual_gid) : buf[virtual_gid] = 1)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, false || ((! (false)) || false))))), (injectionSwitch.x > injectionSwitch.y)))) && true)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), true && ((_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), (vec2(injectionSwitch.y, 1.0)) - vec2(0.0, 0.0)))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0) > injectionSwitch.y)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), true && ((_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), true && ((_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(46.40)))) - 0.0)))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))) + 0.0) > injectionSwitch.y)))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), ((_GLF_IDENTITY(! (false), (! (false)) || false))) && true), true, true, false)))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0) > injectionSwitch.y))))))) || false)))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(bool(bool(bvec4(false, false, false, false))))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true)))))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), (bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))) && true))), true && (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), (bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))) && true))))))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)), false, false))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), true, true, false)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (! (false))), _GLF_IDENTITY(true, false || (true)), true, false))))) && true))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, true && (false))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(51.25), _GLF_FUZZED(float(130818u))), bvec2(false, false))).x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   _GLF_IDENTITY(buf[next_virtual_gid] = 2, 0u + _GLF_IDENTITY((buf[next_virtual_gid] = 2), (false ? _GLF_FUZZED((_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(clamp(~ (workgroup_id), ~ (workgroup_id), ~ (workgroup_id)), 1u * (clamp(~ (workgroup_id), ~ (workgroup_id), ~ (workgroup_id))))))) * subgroup_local_id)) : (buf[next_virtual_gid] = 2))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))) || false)))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   buf[next_virtual_gid] = 2;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), bool(bvec4(! (_GLF_IDENTITY(true, ! (! (true)))), true, true, true)))))), true, false)), (bool(bvec3(! (true), true, false))) || false)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(! (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], max((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), vec2(_GLF_FUZZED(772.042), _GLF_FUZZED(float(177398u))), bvec2(false, false)))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
