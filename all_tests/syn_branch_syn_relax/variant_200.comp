#version 430

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup;
 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)))))))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true)), false)))), true))), true)), false)), false))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), false, true), _GLF_IDENTITY(true, (true) && true))))))))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), clamp(~ (int(4)), ~ (int(4)), ~ (int(4)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec2 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 uvec3 GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gid;
 do
  {
   GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz = GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gid;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))) && true));
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, (_GLF_IDENTITY(true ? GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size : _GLF_FUZZED(uvec2(35239u, 102739u)), (true ? GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size : _GLF_FUZZED(uvec2(35239u, 102739u))) | (uvec2(0u, 0u) | uvec2(0u, 0u)))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, round(length(normalize(sqrt(1.0)))), cos(0.0)))).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, round(length(normalize(sqrt(1.0)))), cos(0.0)))).y : _GLF_FUZZED(2668.8883)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)))))) * 1)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << (0 & 34432)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))) || false), _GLF_IDENTITY((false) || false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), bool(bvec4(! (_GLF_IDENTITY(! ((false) || false), (! (_GLF_IDENTITY((false), ! (! ((false)))) || false)) && true)), true, true, true)))) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((_GLF_IDENTITY(false, ! (! (false)))) || false)) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) || false), (! ((false) || false)) && true)), bool(bvec4(! (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY((! ((false) || false)), bool(bvec2((! ((false) || false)), true))) && true)), true, true, true)))) && true)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), _GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), ! (! ((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true))))), true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), ! (! ((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true))))), true, true, true)), ! (! (bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), ! (! ((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true))))), true, true, true)))))))))) && true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((_GLF_IDENTITY(false, ! (! (false)))) || false)) && true)), bool(bvec4(! (_GLF_IDENTITY(! _GLF_IDENTITY(((false) || false), bool(bvec3(((false) || false), false, false))), (! ((false) || false)) && true)), true, true, true)))) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), false || ((false))) || false), (! ((false) || false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), bool(bvec4(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), true, true, true)))) && true)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! _GLF_IDENTITY(((false) || false), ! (! (_GLF_IDENTITY(((false) || false), (((false) || false)) && true))))) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), false || ((false))))) || false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false) || false), (! ((false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))) && true)), bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)), ! (! ((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true))))), true, true, true)))) && true))))))))))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.z = subgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(atomicMin(_injected_loop_counter, 37940)) : _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))); _injected_loop_counter --)
  {
   GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.x = _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) - uvec4(0u, 0u, 0u, 0u)).z;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - sin(vec2(0.0, 0.0))), injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (18674 & 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 35720)); _injected_loop_counter --)
            {
             GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y = subgroup_size;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.9))), injectionSwitch.y))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.9))), injectionSwitch.y))))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x = subgroup_local_id;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.w = _GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup)), ~ (~ (GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.w = num_workgroup)));
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), int(int(int(8))))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(15724)))) ^ 0))
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.xy.y = workgroup_size;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))));
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(uvec4(~ _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-76.52, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-76.52, max(-76.52, -76.52)) : _GLF_FUZZED(-7938.5896)))))), injectionSwitch.x))), 0u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(uvec4(~ _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-76.52))), injectionSwitch.x))), 0u)))), uvec3(0u, 0u, 0u) ^ (~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(uvec4(~ _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-76.52, min(_GLF_IDENTITY(-76.52, max(-76.52, -76.52)), -76.52))))), injectionSwitch.x))), 0u))))))) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), min(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), max(uvec4(~ (gl_WorkGroupID), 0u), uvec4(_GLF_IDENTITY(~ (gl_WorkGroupID), (~ (gl_WorkGroupID)) | (~ (gl_WorkGroupID))), 0u))), _GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), uvec4(0u, 0u, 0u, 0u) + (uvec4(~ (gl_WorkGroupID), 0u)))))))), ((_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), clamp(uvec4(~ (gl_WorkGroupID), 0u), uvec4(~ _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(0u, 0u, 0u)), 0u), _GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(~ (gl_WorkGroupID), 0u))))), min(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), _GLF_IDENTITY(max(uvec4(~ (gl_WorkGroupID), 0u), uvec4(~ (gl_WorkGroupID), 0u)), max(max(uvec4(~ (gl_WorkGroupID), 0u), uvec4(~ (gl_WorkGroupID), 0u)), _GLF_IDENTITY(max(uvec4(~ (gl_WorkGroupID), 0u), uvec4(~ (gl_WorkGroupID), 0u)), max(max(uvec4(~ (gl_WorkGroupID), 0u), uvec4(~ (gl_WorkGroupID), 0u)), max(uvec4(~ (gl_WorkGroupID), 0u), uvec4(~ (gl_WorkGroupID), 0u))))))), _GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u))))), _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec4(0u, 0u, 0u, 0u) + (uvec4(~ (gl_WorkGroupID), 0u))))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), min(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), max(uvec4(~ (gl_WorkGroupID), 0u), uvec4(~ (gl_WorkGroupID), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupID), 0u), (uvec4(~ (gl_WorkGroupID), 0u)) ^ uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(~ (gl_WorkGroupID), 0u)))))))))), clamp(~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(uvec4(_GLF_IDENTITY(~ (gl_WorkGroupID), (~ (gl_WorkGroupID)) ^ (uvec3(0u, 0u, 0u) | (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))), 0u)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(uvec4(~ _GLF_IDENTITY((gl_WorkGroupID), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) >> uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), 0u), (uvec4(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) >> uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), 0u)) + uvec4(0u, 0u, 0u, 0u)))), 0u)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), _GLF_IDENTITY(uvec3(uvec4(~ (gl_WorkGroupID), 0u)), (uvec3(uvec4(~ (gl_WorkGroupID), _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(num_workgroup))), 0u, 0u, 0u)))))) >> uvec3(0u, 0u, 0u))))))) ^ uvec3(0u, 0u, 0u))).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), int(ivec3((0 ^ 0), 0, _GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY((0 ^ 0), int(ivec3((0 ^ 0), 0, _GLF_IDENTITY(1, min(1, 1)))))) | (0 << _GLF_IDENTITY(int(7), int(7)))) << _GLF_IDENTITY(int(4), int(4))), min((_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), int(ivec3((0 ^ 0), 0, _GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY((0 ^ 0), int(ivec3((0 ^ 0), 0, _GLF_IDENTITY(1, min(1, 1)))))) | (0 << _GLF_IDENTITY(int(7), int(7)))) << _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), int(ivec3((0 ^ 0), 0, _GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY((0 ^ 0), int(ivec3((0 ^ 0), 0, _GLF_IDENTITY(1, min(1, 1)))))) | (0 << _GLF_IDENTITY(int(7), int(7)))) << _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) / 1) & (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) - 0)), int(7))), _GLF_IDENTITY(int(ivec3((1 << _GLF_IDENTITY(int(7), int(7))), 1, (1 & _GLF_IDENTITY(1, ~ (~ (1)))))), _GLF_IDENTITY(0, (0) | 0) + (int(ivec3((1 << _GLF_IDENTITY(int(7), int(7))), 1, (1 & 1)))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, _GLF_IDENTITY((7), clamp((7), _GLF_IDENTITY((7), (true ? (7) : _GLF_FUZZED(_injected_loop_counter))), (7))) - (0 << _GLF_IDENTITY(int(5), int(5))))) << int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.9) : 0.0)))), injectionSwitch.x)))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y = workgroup_id;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, uvec4(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u)))) << 0u), 0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid))), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid))), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid)))))) | ((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid))))), (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid))), clamp((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid))), (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, _GLF_IDENTITY((GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid), ((GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid)) ^ uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid) | (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid)))))))).xy.y * _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(uvec3(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec3(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id) ^ uvec2(0u, 0u)).y, 0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), max(1u << _GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), clamp(1u << _GLF_IDENTITY(uint(3u), uint(3u)), 1u << _GLF_IDENTITY(uint(3u), uint(3u)), 1u << _GLF_IDENTITY(uint(3u), uint(3u))))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec3(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, 0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(3u), uint(3u)) : _GLF_FUZZED(111986u)))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)))) ^ 0u));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.x * GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y, clamp(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.x * GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y, GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.x * GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y, _GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.x * GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y, (GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.x * GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y) << (80311u & 0u)))) + GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0)))), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) - _GLF_IDENTITY(0, max(0, 0)))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0)))), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) - 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.w = virtual_gid;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0))), mat2(_GLF_IDENTITY(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0)))), transpose(transpose(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0)))))))))), (true ? _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0))), mat2(_GLF_IDENTITY(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0)))), transpose(transpose(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0)))))))))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0))), mat2(_GLF_IDENTITY(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0)))), transpose(transpose(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, length(0.0), exp(log(1.0))))))))))) + 0.0) : _GLF_FUZZED(6.4)))) > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))) && true)))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z = _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.w, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.w, (GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.w) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), bool(bvec2(! (_GLF_IDENTITY(true, (true) || false)), false))))), ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, true && ((_GLF_IDENTITY(true, bool(bool(true)))) || false)))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).x > injectionSwitch.y))), false)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).x > injectionSwitch.y))), false))))) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | (1 ^ 0))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.x * GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y + ((GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x + 1) % GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.y);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
  {
   GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.xy.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u);
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6205.8541))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (int(3))))) | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (int(3)))))))); _GLF_IDENTITY(_injected_loop_counter --, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))), ~ (_GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (_GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (true ? _GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (~ (~ (_injected_loop_counter --))) | 0) : _GLF_FUZZED(_injected_loop_counter)))) << 0)))), ((_GLF_IDENTITY(~ (_injected_loop_counter --), ~ (_GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (_GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (true ? _GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (~ (~ (_injected_loop_counter --))) | 0) : _GLF_FUZZED(_injected_loop_counter)))) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0)))))))))) << 0)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       _GLF_IDENTITY(buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1, 0u ^ (_GLF_IDENTITY(buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1, (true ? _GLF_IDENTITY(buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1, (true ? buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1 : _GLF_FUZZED((false ? subgroup_local_id : next_virtual_gid)))))) : _GLF_FUZZED(workgroup_base))))) : _GLF_FUZZED(num_workgroup), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1, 0u ^ (_GLF_IDENTITY(buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1, (true ? buf[GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup.xyz.z] = 1 : _GLF_FUZZED(workgroup_base))))) : _GLF_FUZZED(num_workgroup)) << 0u)));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = (70458 & (0 | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, (0) ^ 0)), 0, _GLF_IDENTITY(0, min(0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x + 1 < _GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, (_GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), min(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u))) | (GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup)), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup)), max(_GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, uvec4(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup), min((GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup), (GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup)))), _GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup)))), _GLF_IDENTITY(GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup)))), GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup, GLF_merged2_0_3_67_3_1_13GLF_merged3_0_1_11_1_1_13_2_1_11subgroup_idsubgroup_sizevirtual_gidnum_workgroup))) + uvec4(0u, 0u, 0u, 0u)).xyz.y)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            barrier();
           int i = 0;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
                    {
                     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))));
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 0.0))).x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))));
                }
              }
            }
           do
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + 0.0), injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(8627.8212))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0)) * (injectionSwitch.y)))) || (_GLF_DEAD(false))))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               atomicStore(buf[GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.xy.x], uint(2), 4, 64, 0);
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), true))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))))));
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), ! (! (! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), ! (! (! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), ! (! (! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false, false))) || false)) && true)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           atomicStore(buf[GLF_merged3_0_2_55_2_1_11_3_1_11GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_sizesubgroup_idvirtual_gid.xy.x], uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (2) << 0), 2))) ^ 0)), 4, 64, 0);
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), (int(1)) | 0))), int(1)))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((36621 & 0) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
}
