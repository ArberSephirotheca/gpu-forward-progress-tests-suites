#version 430

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uvec2 _f0;
 bool _f1;
 bvec3 _f2;
 bvec4 _f3;
 bvec4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat2x3 _f1;
 int _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 float _f1;
 uint num_workgroup;
 vec2 _f2;
 ivec2 _f3;
 _GLF_struct_1 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat3(1.0), 1.0, gl_NumWorkGroups.x, vec2(1.0), ivec2(1), _GLF_struct_1(_GLF_struct_0(uvec2(1u), true, bvec3(true), bvec4(true), bvec4(true), mat2x4(1.0)), mat2x3(1.0), 1, ivec4(1)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = (1 | (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec3(int(3), 0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   buf[virtual_gid] = 1;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       int i = 0;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
          }
         else
          {
          }
        }
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))));
}
