#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))) - log(vec2(1.0, 1.0))).x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0 | 0, 0), (ivec2(0 | 0, 0)) / ivec2(1, 1))), (true ? int(_GLF_IDENTITY(ivec2(0 | 0, 0), (ivec2(0 | 0, 0)) / ivec2(1, 1))) : _GLF_FUZZED(83435))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))) || false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + tan(0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), (true ? float(vec2(1.0, 0.0)) : _GLF_FUZZED(5.4)))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, log(1.0)))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), (true ? float(vec2(1.0, 0.0)) : _GLF_FUZZED(5.4)))), 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), log(1.0)))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) && true))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
              {
               for(int _injected_loop_counter = (10406 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - 0), int(1))) >> _GLF_IDENTITY(int(1), int(1))) | 1) & 1)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-4558.7552), (true ? injectionSwitch.x : _GLF_FUZZED(-4558.7552)) + 0.0))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4558.7552))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4558.7552))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4558.7552))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), float(mat3x2(clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4558.7552))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, sqrt(1.0))))) / 1.0)))) > injectionSwitch.y)) && true), true, true, true))))))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) << 0u)) | (gl_WorkGroupSize)).x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (uvec3(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * (1u | 0u)), (_GLF_IDENTITY(0u, (0u) * (1u | 0u))) | (_GLF_IDENTITY(0u, (0u) * (1u | 0u)))), 0u, 0u)), 0u) ^ _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), uint(uvec3(uint(uvec4(0u, 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)), min(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)))), 1u)), 1u, 1u))))), (true ? _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u), clamp((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u)), clamp((uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u)), _GLF_IDENTITY((uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec4((uvec3(0u, 0u, 0u)), 1u)), clamp(uvec3(uvec4((uvec3(0u, 0u, 0u)), 1u)), uvec3(uvec4((uvec3(0u, 0u, 0u)), 1u)), uvec3(uvec4((uvec3(0u, 0u, 0u)), 1u))))))) ^ uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u))), ((uvec3(0u, 0u, 0u)) ^ uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) << 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) << 0u)), max(~ (_GLF_IDENTITY(0u, (0u) << 0u)), ~ (_GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))))))), ~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) << 0u)))))), 0u, 0u)) - uvec3(0u, 0u, 0u))))) : _GLF_FUZZED(uvec3(4921u, 61023u, _GLF_IDENTITY(44877u, (_GLF_IDENTITY(44877u, max(44877u, 44877u))) - 0u)))))) | (gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) - 0u), (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) - 0u)) / 1u) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), false), true)))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), false), true)))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))))) ^ 0u))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), (true ? (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : _GLF_FUZZED(virtual_gid)))));
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), false || (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), false, false)), true && (bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), false, false))))), false, false, false))) || false))))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, (1 ^ 0), _GLF_IDENTITY(0, (0) - 0))), max(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), _GLF_IDENTITY(0, (0) - 0))), min(int(ivec3(1, (1 ^ 0), _GLF_IDENTITY(0, (0) - 0))), int(ivec3(1, (1 ^ 0), _GLF_IDENTITY(0, (0) - 0))))), int(ivec3(1, (1 ^ 0), _GLF_IDENTITY(0, (0) - 0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-18.44)), bool(false))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) && true)))), ! (! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)))))))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))))
          {
           for(int _injected_loop_counter = (0 & 36841); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) | (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(subgroup_id))))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(0u | (subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u | (subgroup_local_id + 1), (0u | (subgroup_local_id + 1)) | (0u | (subgroup_local_id + 1)))), (~ (_GLF_IDENTITY(0u | (subgroup_local_id + 1), (0u | (subgroup_local_id + 1)) | (0u | (subgroup_local_id + 1))))) ^ 0u)))), 0u, 1u, 1u))) < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))))))))), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))) ^ ((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))))))))))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))))))))), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))) ^ ((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))))))))))), (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))))))))), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))) ^ ((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712)))))))))))) | uvec2(0u, 0u)))))))), uint(uvec2(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 1u)))), uint(1u))) + (_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), min(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u))))))) : _GLF_FUZZED(subgroup_local_id))))), 1u * (_GLF_IDENTITY(subgroup_size, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))), 0u ^ (uint(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(5118.9712, min(5118.9712, 5118.9712))))))))))), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))) ^ ((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712)))))), (true ? _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712)))))) : _GLF_FUZZED(-5.8)))))))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))), 0u ^ (_GLF_IDENTITY(uint(1u), (true ? _GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))) : _GLF_FUZZED(workgroup_id))))), uint(1u), uint(1u))), uint(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (uint(1u)) - 0u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ _GLF_IDENTITY((uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), 0u | (_GLF_IDENTITY((uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), ((uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) | 0u)))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), float(mat3(_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), clamp(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0)), clamp((_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), float(mat3(_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), clamp(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0)), (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), float(mat3(_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), clamp(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), float(mat3(_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), clamp(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0)), (false ? _GLF_FUZZED(-2.6) : (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), float(mat3(_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), clamp(true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712), true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0))))))))))))), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), uvec2(0u))) ^ ((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (_GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(uvec3(uint(1u), 1u, 0u), uvec3(0u, 0u, 0u) | (uvec3(uint(1u), 1u, 0u))))))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)) : _GLF_FUZZED(vec2(-9.6, 206.515)))).y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712))))))))))), (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(_GLF_IDENTITY(1u, (1u) << 0u)))), uint(1u), uint(1u))), uint(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y : _GLF_FUZZED(5118.9712))))))))), (uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (true ? uvec2(0u) : _GLF_FUZZED((uvec2(43017u, 165955u) >> (uvec2(157142u, 128965u) | uvec2(160056u, 52947u)))))), uvec2(0u))) ^ ((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), 0u))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(5118.9712)))))))))))) | uvec2(0u, 0u)))))))), uint(uvec2(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), uint(1u), uint(1u))), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec2(_GLF_IDENTITY(uint(1u), clamp(_GLF_IDENTITY(uint(1u), 0u ^ _GLF_IDENTITY((uint(1u)), 0u + ((uint(1u))))), uint(1u), _GLF_IDENTITY(uint(1u), ~ (~ (_GLF_IDENTITY(uint(1u), (uint(1u)) >> 0u)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 1u)))), uint(_GLF_IDENTITY(1u, 0u | (1u))))) + (_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), min(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u))))))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), uint(uvec3(_GLF_FUZZED(subgroup_local_id), 0u, 0u))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
        }
       else
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-60.63 / -2.7))), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.5) : injectionSwitch.x))), bool(true))) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-60.63 / -2.7))), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.5) : injectionSwitch.x))), bool(true))) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-60.63 / -2.7))), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.5) : injectionSwitch.x))), bool(true))) > injectionSwitch.y))), true)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-60.63 / -2.7))), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.5) : injectionSwitch.x))), bool(true))) > injectionSwitch.y))), true)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     int i = 0;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y) || false) || false, bool(bvec4(((injectionSwitch.x > injectionSwitch.y) || false) || false, false, true, true)))))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y) || false) || false, bool(bvec4(((injectionSwitch.x > injectionSwitch.y) || false) || false, false, true, true)))))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, false || (false))) || false))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(_GLF_IDENTITY(-2184 * 41056, _GLF_IDENTITY((-2184 * 41056), int(ivec2((-2184 * 41056), 1))) | (_GLF_IDENTITY(-2184 * 41056, (-2184 * _GLF_IDENTITY(41056, (41056) >> 0)) * 1))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(-2184, 0 + (_GLF_IDENTITY(-2184, 0 + (_GLF_IDENTITY(-2184, 0 + (-2184)))))) * 41056, (-2184 * 41056) | (_GLF_IDENTITY(-2184 * 41056, _GLF_IDENTITY((-2184 * 41056) * 1, ~ (~ ((-2184 * 41056) * _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, 1), ivec4(0, 0, 0, 0) + (ivec4(1, 0, 1, 1)))))))))))))) & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, clamp(64, 64, 64))))), clamp(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, int(_GLF_IDENTITY(int(64), (int(64)) >> 0)))))))), _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) * 1), clamp(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(ivec4(64, 1, 0, (0 << _GLF_IDENTITY(int(2), int(2))))))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))), 64, 64)), min(_GLF_IDENTITY(64, clamp(64, 64, 64)), _GLF_IDENTITY(64, clamp(64, 64, 64))))))), _GLF_IDENTITY(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, clamp(64, 64, 64))))), int(ivec2(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, clamp(64, 64, 64))))), 0))))), 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, cos(0.0) * (injectionSwitch.y))))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-36714) : int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), false || (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))))), true)))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(radians(vec2(-9571.0256, 8209.0371))) : injectionSwitch)).x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
