#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-65720))), max(_GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, int(ivec2(2, 1))), 2)), _GLF_IDENTITY(2, (2) ^ 0)))) | 0), 0))))))), int(2))), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (true ? 0 << _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(-87255))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED((_GLF_IDENTITY(vec2(-0.8, -468.534) + -3.0, (false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(-3.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0)))))))))))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED((_GLF_IDENTITY(vec2(-0.8, -468.534) + -3.0, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(-3.0, (false ? _GLF_FUZZED(distance(-81.96, -8.2)) : _GLF_IDENTITY(-3.0, mix(float(-3.0), float(_GLF_FUZZED(-16.35)), bool(false)))))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0))))))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(-3.0, (false ? _GLF_FUZZED(distance(-81.96, -8.2)) : _GLF_IDENTITY(-3.0, mix(float(-3.0), float(_GLF_FUZZED(-16.35)), bool(false)))))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0))))))), mix(vec2(((false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(-3.0, (false ? _GLF_FUZZED(distance(-81.96, -8.2)) : _GLF_IDENTITY(-3.0, mix(float(-3.0), float(_GLF_FUZZED(-16.35)), bool(false)))))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0))))))))[0], _GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(-3.0, (false ? _GLF_FUZZED(distance(-81.96, -8.2)) : _GLF_IDENTITY(-3.0, mix(float(-3.0), float(_GLF_FUZZED(-16.35)), bool(false)))))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0))))))))[1], min(((false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(-3.0, (false ? _GLF_FUZZED(distance(-81.96, -8.2)) : _GLF_IDENTITY(-3.0, mix(float(-3.0), float(_GLF_FUZZED(-16.35)), bool(false)))))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0))))))))[1], ((false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(-3.0, (false ? _GLF_FUZZED(distance(-81.96, -8.2)) : _GLF_IDENTITY(-3.0, mix(float(-3.0), float(_GLF_FUZZED(-16.35)), bool(false)))))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0))))))))[1]))), vec2(_GLF_FUZZED(3.9), _GLF_FUZZED(9.1)), bvec2(false, false))), (false ? _GLF_FUZZED(vec2(6657.1695, -56.59)) : vec2(-0.8, -468.534) + _GLF_IDENTITY(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(-3.0, (false ? _GLF_FUZZED(distance(-81.96, -8.2)) : _GLF_IDENTITY(-3.0, mix(float(-3.0), float(_GLF_FUZZED(-16.35)), bool(false)))))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(-3.0, min(-3.0, _GLF_IDENTITY(-3.0, min(-3.0, -3.0))))))))))))))) + tan(tan(vec2(0.0, 0.0)))).x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_IDENTITY(false, false || (false)))))))))))))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & (70378))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))))))) && true)))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (1) ^ (ivec2(32288, 39272).y & 0)) & 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
        break;
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (true)), true && (! (! (true))))), ! (! (! (_GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x) - 0.0) < injectionSwitch.y)), true, false))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) - 0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true))))), true, true), false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) * 1u), workgroup_size))))) ^ 0u, (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) * 1u), workgroup_size))))) ^ 0u, 0u | ((_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) * 1u), workgroup_size))))) ^ 0u))) << (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u ^ (_GLF_IDENTITY(6u, 0u ^ (_GLF_IDENTITY(6u, ~ (~ (6u)))))))), uint(6u))))) * workgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u) * _GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(workgroup_size) : workgroup_id)))), 0u | (_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 1u)))) * workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u) * workgroup_id, uint(uvec2(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u) * workgroup_id, 0u)))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(vec2(-9220.4331, 1.4)[0]) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (vec2(injectionSwitch.x, 1.0)) - vec2(0.0, 0.0))), clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (vec2(injectionSwitch.x, 1.0)) - vec2(0.0, 0.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (vec2(injectionSwitch.x, 1.0)) - vec2(0.0, 0.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (vec2(injectionSwitch.x, 1.0)) - vec2(0.0, 0.0)))))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (injectionSwitch), mix(vec2(_GLF_FUZZED(164.313), (mat2(1.0) * (injectionSwitch))[1]), vec2((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(782.335), _GLF_FUZZED((+ 2.0))), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))[0], _GLF_FUZZED(7.8)), bvec2(true, false)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(164.313), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + ((injectionSwitch))))))[0], _GLF_FUZZED(7.8)), bvec2(true, false)))).y, cos(0.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(164.313), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + ((injectionSwitch))))))[0], _GLF_IDENTITY(_GLF_FUZZED(7.8), max(_GLF_FUZZED(7.8), _GLF_FUZZED(7.8)))), bvec2(true, false)))).y))))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size))), subgroup_id * subgroup_size)) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(atomicAdd(subgroup_local_id, workgroup_id)))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), uint(uvec3(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), 0u, 0u))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) >> 0u, (_GLF_IDENTITY((subgroup_id) >> 0u, ((subgroup_id) >> 0u) - _GLF_IDENTITY(0u, min(0u, 0u)))) - 0u))) : subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_size))) + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_size))), max(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_size)))) + 0u))))) + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) << 0u) : subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) << 0u) : subgroup_local_id) | (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) << 0u) : subgroup_local_id)), 0u + (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, (false ? _GLF_FUZZED(workgroup_id) : false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id))))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))), 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id))))))), (_GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))), 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id))))))), 1u * (min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))), 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), uint(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))))))) >> (0u & 117842u)))), false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1) % subgroup_size), clamp(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1, (_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) * 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), ~ (~ _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_local_id), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))))), 0u ^ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)))))))))) << (_GLF_IDENTITY(1u, ~ (~ (1u))) ^ 1u)))))), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1) * 1u)) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), 1u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1) % subgroup_size), (true ? workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (false ? _GLF_FUZZED(workgroup_id) : max(subgroup_local_id, subgroup_local_id)))) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (false ? _GLF_FUZZED(workgroup_id) : max(subgroup_local_id, subgroup_local_id)))) << 0u, 0u | ((_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (false ? _GLF_FUZZED(workgroup_id) : max(subgroup_local_id, subgroup_local_id)))) << 0u))) << 0u))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), 1u, 1u, 0u))) : _GLF_FUZZED(uvec2(76047u, 101650u)[1])))))), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, _GLF_IDENTITY(0u, min(0u, 0u)) + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 0u, 0u))), 0u | ((_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (false ? _GLF_FUZZED(workgroup_id) : max(subgroup_local_id, subgroup_local_id)))) << 0u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, _GLF_IDENTITY(0u, min(0u, 0u)) + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 0u, 0u)))))) : _GLF_FUZZED(virtual_gid))), workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), subgroup_local_id, subgroup_local_id)), ~ _GLF_IDENTITY((~ (subgroup_local_id)), ~ (~ _GLF_IDENTITY(((~ (subgroup_local_id))), ((_GLF_IDENTITY((~ (subgroup_local_id)), uint(_GLF_IDENTITY(uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u))))), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1) % subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), subgroup_local_id, subgroup_local_id)), ~ _GLF_IDENTITY((~ (subgroup_local_id)), ~ (~ _GLF_IDENTITY(((~ (subgroup_local_id))), ((_GLF_IDENTITY((~ (subgroup_local_id)), uint(_GLF_IDENTITY(uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4((~ (subgroup_local_id)), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u))))), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, 0u + (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) + 1) % subgroup_size)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   buf[virtual_gid] = 1;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 1.0, abs(1.0), 1.0, 0.0))) > injectionSwitch.y))))
      return;
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), 0 | (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))), int(0))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) - 0), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0, 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) >> 0)))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))), ((_GLF_IDENTITY(1, min(1, 1)))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (true ? _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), _GLF_IDENTITY((min(1, 1)) << 0, ((min(1, 1)) << 0) * 1))) : _GLF_IDENTITY(_GLF_FUZZED(13372), int(_GLF_IDENTITY(ivec3(_GLF_FUZZED(13372), 0, 1), min(ivec3(_GLF_FUZZED(13372), 0, 1), ivec3(_GLF_FUZZED(13372), 0, 1)))))))))) - 0)))) - 0))) < _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     int i = 0;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (uint(2)) | 0u), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), bool(bvec3(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), false, false))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), bool(bvec4(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), true, true, false))), false, true)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))), ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) && true, ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))) && true), false || (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          break;
         continue;
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(4, 4)), 4, 4)));
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
    }
  }
}
