#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) * 1), (0 ^ 0) | (_GLF_IDENTITY(int(0), (int(0)) * 1))))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false)), float(mat2x3(mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false)), 0.0, 1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.0)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3928.4572)))), bool(true))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(determinant(mat2(5201.9715, 7841.2927, -3101.6637, -71.66))))), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.0)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3928.4572)))), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), 0.0, 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), (true ? float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), 0.0, 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-472.007)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(16.74, 40.41)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x, mix(float(_GLF_FUZZED(-3.0)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), min(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0)))), float(mat4(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), min(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0)))), 1.0, abs(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))))), bool(true))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-809.903)), vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, tan(0.0), 0.0, _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), 0.0, log(1.0)), (mat2x4(injectionSwitch, 0.0, tan(0.0), 0.0, _GLF_IDENTITY(tan(0.0), max(tan(0.0), _GLF_IDENTITY(tan(0.0), (_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0)))) / 1.0))), 0.0, log(1.0))) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), vec2(injectionSwitch[0], injectionSwitch[1])))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) + tan(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-809.903), max(_GLF_FUZZED(-809.903), _GLF_FUZZED(-809.903)))), vec2(_GLF_FUZZED(_GLF_IDENTITY(81.03, float(mat3(_GLF_IDENTITY(81.03, (true ? 81.03 : _GLF_FUZZED(-89.19))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(238.795) : injectionSwitch[0])), injectionSwitch[1]), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_FUZZED(-34.05)), vec2(_GLF_FUZZED(-4.3), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(false, true))), min(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_FUZZED(-34.05)), vec2(_GLF_FUZZED(-4.3), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(false, true))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_FUZZED(-34.05)), vec2(_GLF_FUZZED(-4.3), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(false, true)))))) / vec2(1.0, 1.0))))) : _GLF_FUZZED(sinh(vec2(-81.37, 748.342))))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), max(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), (_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch)) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch)))))), mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, _GLF_IDENTITY(1, ~ (~ (1))), 1), ivec3(0, 0, 0) ^ (ivec3(0, 1, 1)))))], _GLF_FUZZED(-809.903)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), float(mat4x2(_GLF_FUZZED(_GLF_IDENTITY(81.03, mix(float(81.03), float(_GLF_FUZZED(-77.02)), bool(false)))), _GLF_IDENTITY(0.0, (0.0) / 1.0), length(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))), (injectionSwitch)[1]), _GLF_IDENTITY(max(vec2(_GLF_FUZZED(81.03), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1])))), (max(vec2(_GLF_FUZZED(81.03), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]))))) / vec2(1.0, 1.0))), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))[0], injectionSwitch[1])))).y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false)), float(mat2x3(mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false)), 0.0, 1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.0)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3928.4572)))), bool(true)))), float(mat3(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false)), float(mat2x3(mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false)), 0.0, 1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.0)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3928.4572)))), bool(true)))), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(determinant(mat2(5201.9715, 7841.2927, -3101.6637, -71.66))))), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.0)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3928.4572)))), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7299.4516)), mix(float(float(_GLF_FUZZED(7299.4516))), float(_GLF_FUZZED((7.1 - -0.4))), bool(false))), _GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY((true ? float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), 0.0, 1.0, abs(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-472.007)), mix(float(_GLF_IDENTITY((true ? float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), 0.0, 1.0, abs(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-472.007)), 0.0 + ((true ? float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7299.4516)), bool(false))), 0.0, 1.0, abs(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-472.007))))), float(_GLF_FUZZED(-529.881)), bool(false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(16.74, mix(float(_GLF_FUZZED(-5.5)), float(16.74), bool(true))), 40.41)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), min(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(16.74, mix(float(_GLF_FUZZED(-5.5)), float(16.74), bool(true))), 40.41)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(16.74, mix(float(_GLF_FUZZED(-5.5)), float(16.74), bool(true))), 40.41)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(16.74, mix(float(_GLF_FUZZED(-5.5)), float(16.74), bool(true))), 40.41)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), mix(vec2(_GLF_FUZZED(-0.3), _GLF_FUZZED(-9281.2852)), vec2((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(16.74, mix(float(_GLF_FUZZED(-5.5)), float(16.74), bool(true))), 40.41)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(16.74, mix(float(_GLF_FUZZED(-5.5)), float(16.74), bool(true))), 40.41)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, true))))))).x, mix(float(_GLF_FUZZED(-3.0)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), 1.0 * ((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), min(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0)))), float(mat4(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), min(vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0), vec3(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572)), mix(float((true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(3928.4572))), float(_GLF_FUZZED(-208.358)), bool(false))), 1.0, 0.0)))), 1.0, abs(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))))), bool(true))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-809.903, clamp(-809.903, _GLF_IDENTITY(-809.903, min(-809.903, -809.903)), _GLF_IDENTITY(-809.903, min(-809.903, -809.903)))))), vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, tan(_GLF_IDENTITY(0.0, (0.0) + 0.0)), 0.0, _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), 0.0, log(1.0)), (mat2x4(injectionSwitch, 0.0, tan(0.0), 0.0, _GLF_IDENTITY(tan(0.0), max(tan(0.0), _GLF_IDENTITY(tan(0.0), (_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0)))) / 1.0))), 0.0, log(1.0))) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 0.0)))), vec2(injectionSwitch[0], injectionSwitch[1])))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) + tan(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-809.903), max(_GLF_FUZZED(-809.903), _GLF_FUZZED(-809.903)))), vec2(_GLF_FUZZED(_GLF_IDENTITY(81.03, float(mat3(_GLF_IDENTITY(81.03, (_GLF_IDENTITY(true, ! (! (true))) ? 81.03 : _GLF_FUZZED(-89.19))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1], clamp((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]))), bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(238.795) : injectionSwitch[0])), injectionSwitch[1]), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_FUZZED(-34.05)), vec2(_GLF_FUZZED(-4.3), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(false, true))), min(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]))[0], _GLF_FUZZED(-34.05)), vec2(_GLF_FUZZED(-4.3), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(false, true))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_FUZZED(-34.05)), vec2(_GLF_FUZZED(-4.3), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(false, true)))))) / vec2(1.0, 1.0))))) : _GLF_FUZZED(sinh(vec2(-81.37, 748.342))))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) - vec2(0.0, 0.0)), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), (_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch)) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)) * (injectionSwitch)))))), mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, _GLF_IDENTITY(1, ~ (~ (1))), 1), ivec3(0, 0, 0) ^ (ivec3(0, 1, 1)))))], _GLF_FUZZED(-809.903)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), float(mat4x2(_GLF_FUZZED(_GLF_IDENTITY(81.03, mix(float(81.03), float(_GLF_FUZZED(-77.02)), bool(false)))), _GLF_IDENTITY(0.0, (0.0) / 1.0), length(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))]), min(vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), float(mat4x2(_GLF_FUZZED(_GLF_IDENTITY(81.03, mix(float(81.03), float(_GLF_FUZZED(-77.02)), bool(false)))), _GLF_IDENTITY(0.0, (0.0) / 1.0), length(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))]), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), float(mat4x2(_GLF_FUZZED(_GLF_IDENTITY(81.03, mix(float(81.03), float(_GLF_FUZZED(-77.02)), bool(false)))), _GLF_IDENTITY(0.0, (0.0) / 1.0), length(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))]), (vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), float(mat4x2(_GLF_FUZZED(_GLF_IDENTITY(81.03, mix(float(81.03), float(_GLF_FUZZED(-77.02)), bool(false)))), _GLF_IDENTITY(0.0, (0.0) / 1.0), length(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))])) * mat2(1.0)))), _GLF_IDENTITY(max(vec2(_GLF_FUZZED(81.03), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), vec2(_GLF_FUZZED(81.03), _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(float((injectionSwitch)[1]), (float((injectionSwitch)[1])) / 1.0))))))), _GLF_IDENTITY((max(vec2(_GLF_FUZZED(81.03), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_IDENTITY(_GLF_FUZZED(-606.790), (false ? _GLF_FUZZED(-8.7) : _GLF_IDENTITY(_GLF_FUZZED(-606.790), (_GLF_FUZZED(-606.790)) + sqrt(0.0))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-6.0), _GLF_FUZZED(4.7)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (injectionSwitch), (injectionSwitch)))))[0], (injectionSwitch)[1]), bvec2(true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) + 0)], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), max(vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), (_GLF_FUZZED(81.03)) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]))))), min((max(vec2(_GLF_FUZZED(81.03), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_IDENTITY(_GLF_FUZZED(-606.790), (false ? _GLF_FUZZED(-8.7) : _GLF_IDENTITY(_GLF_FUZZED(-606.790), (_GLF_FUZZED(-606.790)) + sqrt(0.0))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-6.0), _GLF_FUZZED(4.7)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (injectionSwitch), (injectionSwitch)))))[0], (injectionSwitch)[1]), bvec2(true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) + 0)], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), max(vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), (_GLF_FUZZED(81.03)) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]))))), (max(vec2(_GLF_FUZZED(81.03), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_IDENTITY(_GLF_FUZZED(-606.790), (false ? _GLF_FUZZED(-8.7) : _GLF_IDENTITY(_GLF_FUZZED(-606.790), (_GLF_FUZZED(-606.790)) + sqrt(0.0))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-6.0), _GLF_FUZZED(4.7)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (injectionSwitch), (injectionSwitch)))))[0], (injectionSwitch)[1]), bvec2(true, true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[1]), bvec2(true, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) + 0)], (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-606.790)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]), max(vec2(_GLF_IDENTITY(_GLF_FUZZED(81.03), (_GLF_FUZZED(81.03)) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(81.03), (injectionSwitch)[1]))))))) / vec2(1.0, 1.0))), bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))[0], injectionSwitch[1])))).y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) || false), bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) || false), ! (! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false)), (false) && true)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-44.05)), float(injectionSwitch.y), bool(true))), (false ? _GLF_FUZZED(86.81) : injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-5617.4844, 0.5)))).x, mix(float(_GLF_FUZZED(-9.8)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-5617.4844, 0.5), min(vec2(-5617.4844, 0.5), vec2(-5617.4844, 0.5)))))).x), bool(true))) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-5617.4844, 0.5)))).x, mix(float(_GLF_FUZZED(-9.8)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-5617.4844, 0.5)))).x), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-5617.4844, 0.5)), min(_GLF_FUZZED(vec2(-5617.4844, 0.5)), _GLF_FUZZED(vec2(-5617.4844, 0.5)))))).x, mix(float(_GLF_FUZZED(-9.8)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-5617.4844, 0.5)))).x), bool(true))) > injectionSwitch.y))) || false)), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-5617.4844, _GLF_IDENTITY(0.5, max(0.5, 0.5)))))).x, mix(float(_GLF_FUZZED(-9.8)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) ? injectionSwitch : _GLF_FUZZED(vec2(-5617.4844, 0.5)))).x), bool(true))) > injectionSwitch.y)))))))))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true))))), true && (bool(bvec3(false, false, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true))))), true && (bool(bvec3(false, false, false))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true))))), true && (bool(bvec3(false, false, false))))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, false || (true))), false, _GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true))))), true && (bool(bvec3(false, false, false))))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), bool(bvec4(bool(bvec3(_GLF_DEAD(false), false, false)), false, false, false)))), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (_GLF_IDENTITY(! ((_GLF_DEAD(false)) || false), ! (_GLF_IDENTITY(! (! ((_GLF_DEAD(false)) || false)), bool(bool(_GLF_IDENTITY(! (! ((_GLF_DEAD(false)) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! ((_GLF_DEAD(false)) || false)), (! (! ((_GLF_DEAD(false)) || false))) && true), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(! (! ((_GLF_DEAD(false)) || false)), (! (! ((_GLF_DEAD(false)) || false))) && true), true, false)))))))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-25.74), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(false))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))))))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(clamp(workgroup_size, workgroup_size, workgroup_size), _GLF_IDENTITY(clamp(clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size)), min(_GLF_IDENTITY(clamp(clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size)), 0u | (clamp(clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size)))), clamp(clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size)))))) * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-841.716)), bool(false))), 1.0, abs(0.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(log2(5.7)) : 0.0)), 1.0))) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0))) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ((! (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0))) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) && true))))))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0))) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0))), float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0))), sqrt(1.0), abs(1.0), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0))) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ((! (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0))) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) && true))))))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (-63602 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), clamp(ivec4(int(5), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.8)), bool(false))))), 0, 1), ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))), (_GLF_IDENTITY(ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), clamp(ivec4(int(5), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.8)), bool(false))))), 0, 1), ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))) | (_GLF_IDENTITY(ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), clamp(ivec4(int(5), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.8)), bool(false))))), 0, 1), ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7877.9999), _GLF_FUZZED(-0.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(0))), int(0))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(626.156)), float((injectionSwitch)[1]), bool(true)))), vec2(_GLF_FUZZED(910.331), _GLF_FUZZED(9663.2228)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, sin(0.0), 1.0, 1.0), mat2(1.0) * (mat2(injectionSwitch.y, sin(0.0), 1.0, 1.0)))))), bool(bvec2((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(910.331), _GLF_IDENTITY(_GLF_FUZZED(9663.2228), float(mat3x2(_GLF_FUZZED(9663.2228), 0.0, 0.0, 1.0, log(1.0), 0.0)))), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, sin(0.0), 1.0, 1.0), mat2(1.0) * (mat2(injectionSwitch.y, sin(0.0), 1.0, 1.0)))))), false))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, false)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_DEAD(false))))), false)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2((false), true))) && true)))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY(0u, (0u) | (0u))) + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))) || false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (_GLF_IDENTITY(true, ! (! (true)))))) && true) && _GLF_IDENTITY(((bool(bool(false)))), bool(bvec4(((bool(bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true))))))), ((bool(bool(false)))) && _GLF_IDENTITY(true, bool(bvec2(true, true)))) || false)), (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))) && (false))) || false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, ! (! (false)))) || false)))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) || false)))), true, false)))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2125.7967), _GLF_FUZZED(3.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), bvec2(true, true))).y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), true && (! ((true)))))))) || false), (injectionSwitch.x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), true && (! ((true)))))))) || false), (injectionSwitch.x < injectionSwitch.y))))))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))), false, true)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1)) < subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size, ! (! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size, ! (! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (1) | 0))) < subgroup_size, ! (! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (1) | 0))) < subgroup_size, ! (! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) ^ (0u & 124062u)))) < subgroup_size, ! (! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)))))))), false), false, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)), _GLF_IDENTITY(bool(bvec4(bool(! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)), false, false, false)), bool(bool(bool(bvec4(bool(! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)), false, false, false))))))), true && (bool(bool(! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ! (! (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))) < subgroup_size))), false), false, false))))) && true))) && _GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec4(! (_GLF_IDENTITY(false, true && (false))), true, true, false)))))))
            barrier();
          }
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), true, true)))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true)))))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec4(int(5), _GLF_IDENTITY(1, max(1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     int i = 0;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, true, false))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))))))
            barrier();
          }
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, min(2, 2)))))) | (2))), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, _GLF_IDENTITY(exp(0.0), mix(float(exp(0.0)), float(_GLF_FUZZED(-9.9)), bool(false))))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), exp(0.0)))))).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(997.028) : _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))))))), exp(0.0))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), min((1.0), (1.0))))) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), exp(0.0)))))).y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, exp(0.0))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), exp(0.0)))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, exp(0.0))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), exp(0.0)))))).y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))), bool(bool(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(997.028) : _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))))))), exp(0.0))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), min((1.0), (1.0))))) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), exp(0.0)))))).y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, exp(0.0))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), exp(0.0)))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, exp(0.0))), max(vec2(vec3(injectionSwitch, exp(0.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), exp(0.0)))))).y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))), false, true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) ^ 0), _injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.1, 28.56)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.1, 28.56)) : injectionSwitch)).y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.1, 28.56)) : injectionSwitch)).y))), false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true)), true && (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 & (83519 * 7556), _GLF_IDENTITY(int(ivec2(0 & (83519 * 7556), 1)), clamp(int(ivec2(_GLF_IDENTITY(0 & (83519 * 7556), (_GLF_IDENTITY(0 & (83519 * 7556), max(0 & (83519 * 7556), 0 & (83519 * 7556)))) + 0), 1)), int(ivec2(0 & (83519 * 7556), 1)), _GLF_IDENTITY(int(ivec2(0 & (83519 * 7556), 1)), 0 + (int(ivec2(0 & (83519 * 7556), 1))))))))); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) + 0)) / 1), 64, 4);
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
}
