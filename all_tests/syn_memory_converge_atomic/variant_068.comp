#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 mat3x4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 mat2x4 _f1;
 mat4 _f2;
 int _f3;
} ;

struct _GLF_struct_4 {
 bool _f0;
 uvec2 _f1;
 uvec4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_3 {
 int _f0;
 mat3x4 _f1;
 int _f2;
 ivec2 _f3;
 mat3x4 _f4;
 mat4x2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 mat3x4 _f3;
 mat3x4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 mat2x3 _f3;
 _GLF_struct_4 _f4;
 mat3x4 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uvec4 _f1;
 uvec2 _f2;
 uvec3 _f3;
 mat2x3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_0 _f0;
 uint workgroup_base;
 mat2 _f1;
 mat4x3 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_9 _f4;
 uvec3 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_0(bvec3(true), uvec4(1u), uvec2(1u), uvec3(1u), mat2x3(1.0), uvec3(1u)), workgroup_size * workgroup_id, mat2(1.0), mat4x3(1.0), _GLF_struct_6(_GLF_struct_1(bvec3(true), mat3x4(1.0), uvec2(1u), mat3x4(1.0), mat3x4(1.0), mat3x4(1.0)), _GLF_struct_2(ivec2(1)), _GLF_struct_3(1, mat3x4(1.0), 1, ivec2(1), mat3x4(1.0), mat4x2(1.0), mat2x4(1.0)), mat2x3(1.0), _GLF_struct_4(true, uvec2(1u), uvec4(1u), bvec4(true)), mat3x4(1.0), _GLF_struct_5(vec3(1.0), mat2x4(1.0), mat4(1.0), 1)), _GLF_struct_9(_GLF_struct_7(ivec3(1)), _GLF_struct_8(mat3x4(1.0), mat2x4(1.0))), uvec3(1u));
 uint virtual_gid = _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
  }
 else
  {
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
