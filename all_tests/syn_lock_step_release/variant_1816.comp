#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 ivec3 _f0;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 mat3x2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 _GLF_struct_10 _f3;
 uint virtual_gid;
 ivec2 _f4;
 mat2 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 bool _f1;
 uvec4 _f2;
 uvec2 _f3;
 uvec4 _f4;
 mat2x3 _f5;
 int _f6;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 mat2x3 _f1;
 mat2x3 _f2;
 mat3x4 _f3;
 vec2 _f4;
 ivec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_2 {
 bool _f0;
 mat4 _f1;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 bvec2 _f2;
 mat2x3 _f3;
 _GLF_struct_2 _f4;
 int _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 vec3 _f1;
 uint num_workgroup;
 _GLF_struct_6 _f2;
 uvec4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_3(_GLF_struct_0(ivec2(1)), _GLF_struct_1(mat4x2(1.0)), bvec2(true), mat2x3(1.0), _GLF_struct_2(true, mat4(1.0)), 1, ivec4(1)), vec3(1.0), gl_NumWorkGroups.x, _GLF_struct_6(_GLF_struct_4(bvec2(true), mat2x3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat2x3(1.0), mat3x4(1.0), vec2(1.0), ivec2(1), mat2(1.0)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, 0u | (1u))), (uvec4(1u)) << uvec4(0u, 0u, 0u, 0u)), mat2x3(1.0), _GLF_struct_5(vec4(1.0), true, uvec4(1u), uvec2(1u), uvec4(1u), mat2x3(1.0), 1)), uvec4(1u));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? gl_WorkGroupID : _GLF_FUZZED(uvec3(119346u, 126437u, 134951u)))).x;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y = workgroup_id;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u) * GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_8(mat4x2(1.0)), mat4x2(1.0), mat2x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.2))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - 0.0)))), _GLF_struct_10(_GLF_struct_9(mat4(1.0)), mat3x2(_GLF_IDENTITY(1.0, (1.0) / 1.0)), bvec4(true)), workgroup_base + GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * subgroup_size + subgroup_local_id, ivec2(1), mat2(1.0), _GLF_struct_11(ivec3(1)));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[_GLF_struct_replacement_12.virtual_gid] = 1;
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
}
