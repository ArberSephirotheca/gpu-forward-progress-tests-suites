#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(802.603) : _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 1.0, 1.0)))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), ! (! (! ((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))))))))))))), ! (! (! (false))))))), true && (! (_GLF_IDENTITY(! (false), false || (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) || false))))))))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + (0 << _GLF_IDENTITY(int(2), int(2)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))) || false))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)), true && (bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(! (true), false, false)), (bool(bvec3(! (true), false, false))) || false))))), true)))))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-3.7, 7376.4160)) : injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.7, 7376.4160)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-796.994), _GLF_FUZZED(-6.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-96.38) : _GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-13.96) : (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true)))) * mat2(1.0)))).x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8802.8369), _GLF_FUZZED(77.51)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), true, true, true)), _GLF_IDENTITY(! (! (bool(bvec4(! (false), true, true, true)))), true && (! (! (bool(bvec4(! (false), true, true, true))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (false), true, true, true)), bool(bool(bool(bvec4(! (false), true, true, true))))), ! (! (bool(bvec4(! (false), true, true, true))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, ! (! (false))) || (! (false))), _GLF_IDENTITY(bool(bvec4(! (false), true, true, _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec4(! (false), true, true, true)))))))))) || false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), int(_GLF_IDENTITY(ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec3(17455, -69820, -51036)))))), int(_GLF_IDENTITY(int(~ (~ (1))), (int(~ (~ (1)))) | _GLF_IDENTITY((int(~ (~ (1)))), int(ivec2((int(~ (~ (1)))), 0)))))))) - 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), int(_GLF_IDENTITY(ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec3(17455, -69820, -51036)))))), min(_GLF_IDENTITY(~ (~ (1)), int(_GLF_IDENTITY(ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec3(17455, -69820, -51036)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), int(_GLF_IDENTITY(ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec3(17455, -69820, -51036)))))), (_GLF_IDENTITY(~ (~ (1)), int(_GLF_IDENTITY(ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec3(17455, -69820, -51036))))))) | (_GLF_IDENTITY(~ (~ (1)), int(_GLF_IDENTITY(ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec3(~ (~ (1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec3(17455, -69820, -51036)))))))))), int(_GLF_IDENTITY(int(~ (~ (1))), (int(~ (~ (1)))) | _GLF_IDENTITY((int(~ (~ (1)))), int(ivec2((int(~ (~ (1)))), 0)))))))) - 0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true))), true, true)))))))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | (0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(0.2))), 0.0 + (injectionSwitch.y))) - 0.0)))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), bool(bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                            {
                             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -74796); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) | (0)))))) * (1 | 1)), ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 1 * (0)))), ~ (~ (0)))) * (1 | 1))))), (true ? 0 : _GLF_FUZZED(-29346))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(-29346), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(-29346), clamp(true ? 0 : _GLF_FUZZED(-29346), true ? 0 : _GLF_FUZZED(-29346), _GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(0, (0) - 0) : _GLF_FUZZED(-29346)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(-29346), (true ? 0 : _GLF_FUZZED(-29346)) - 0))))))), _GLF_IDENTITY(min(int(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(-29346)), max((true ? 0 : _GLF_FUZZED(-29346)), (true ? 0 : _GLF_FUZZED(-29346))))), ~ (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))), ~ (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) - 0), (true ? 0 : _GLF_FUZZED(-29346)))))))), max(min(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))))), ~ (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))), ~ (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346)))))))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))), ~ (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> 0), 0, _GLF_IDENTITY(0, (0) >> 0))), (true ? 0 : _GLF_FUZZED(-29346))), ~ (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-29346))))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))), mat2x3(mat4x3(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), mat3(1.0) * (mat2x3(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))))))))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, (true) || false), true), bvec3(bvec4(bvec3(false, true, true), true)))))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1) | _GLF_IDENTITY(0, (0) - 0)), 1 * ((int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(734.916, min(_GLF_IDENTITY(734.916, (734.916) * 1.0), _GLF_IDENTITY(734.916, (734.916) - 0.0)))) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))))) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), bool(bvec4(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), false, true, false))))), (injectionSwitch.x > injectionSwitch.y))), true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, 0u ^ (workgroup_size * workgroup_id));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u ^ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), subgroup_id)) * subgroup_size) << 0u) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size)) + ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), clamp(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (false ? _GLF_FUZZED(38846) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(98226) : 1))))))) ^ 0))), _GLF_IDENTITY(1, (1) ^ 0)))))) % subgroup_size);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), ((true)) && true))))) && _GLF_IDENTITY(true, false || (true)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134))))), vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(_GLF_IDENTITY(clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134)), max(clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134)), _GLF_IDENTITY(clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134)), clamp(clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134)), clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134)), clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134))))))))), max(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134))))), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(clamp(round(injectionSwitch), vec2(-4512.4120, -898.665), vec2(84.74, 832.134))))))), 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), min(vec3(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec3(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0)), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(-9.1, -6271.7706, -4830.3317, -7670.8681)) : mat2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0)), 0.0, 1.0, 0.0))))), 1.0, 0.0))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9.1))))), 0.0)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false))).y, injectionSwitch.y), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false)), vec2(1.0, 1.0) * (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false)), vec2(vec3(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false)), log(1.0))))))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED(_GLF_IDENTITY((4.7 / 19.82), (_GLF_IDENTITY((4.7 / 19.82), max((4.7 / 19.82), (4.7 / 19.82)))) * 1.0))), bvec2(false, false)), vec2(1.0, 1.0) * (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false)), vec2(vec3(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false)), log(1.0))))))), mat2(1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false)))), _GLF_IDENTITY(mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false))))), clamp(mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false))))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false))))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((4.7 / 19.82))), bvec2(false, false))))))))))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), mix(float(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7 / 19.82, max(_GLF_IDENTITY(4.7 / 19.82, 0.0 + (4.7 / 19.82)), _GLF_IDENTITY(4.7 / 19.82, (false ? _GLF_FUZZED(-9.8) : _GLF_IDENTITY(4.7 / 19.82, 0.0 + (4.7 / 19.82))))))))), bvec2(false, false))).y, injectionSwitch.y), _GLF_IDENTITY((true ? min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(4.7, mix(float(_GLF_FUZZED(-9.9)), float(4.7), bool(true))) / 19.82), (_GLF_IDENTITY((_GLF_IDENTITY(4.7, mix(float(_GLF_FUZZED(-9.9)), float(4.7), bool(true))) / 19.82), (true ? _GLF_IDENTITY((_GLF_IDENTITY(4.7, mix(float(_GLF_FUZZED(-9.9)), float(4.7), bool(true))) / 19.82), mix(float(_GLF_FUZZED(-476.182)), float((_GLF_IDENTITY(4.7, mix(float(_GLF_FUZZED(-9.9)), float(4.7), bool(true))) / 19.82)), bool(true))) : _GLF_FUZZED(-87.89)))) - 0.0))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3)), min(_GLF_IDENTITY((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(float(_GLF_FUZZED(-9.9)), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3)), mix(float(_GLF_FUZZED(-7.1)), _GLF_IDENTITY(float((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))))[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.9)), (_GLF_IDENTITY(true, ! (! (true))) ? float(_GLF_FUZZED(-9.9)) : _GLF_FUZZED((7568.7994 / -252.805)))), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3))), max(_GLF_IDENTITY(float((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))))[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.9)), (_GLF_IDENTITY(true, ! (! (true))) ? float(_GLF_FUZZED(-9.9)) : _GLF_FUZZED((7568.7994 / -252.805)))), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3))), min(float((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))))[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.9)), (_GLF_IDENTITY(true, ! (! (true))) ? float(_GLF_FUZZED(-9.9)) : _GLF_FUZZED((7568.7994 / -252.805)))), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3))), float((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))))[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.9)), (_GLF_IDENTITY(true, ! (! (true))) ? float(_GLF_FUZZED(-9.9)) : _GLF_FUZZED((7568.7994 / -252.805)))), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3))))), _GLF_IDENTITY(float((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))))[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.9)), (_GLF_IDENTITY(true, ! (! (true))) ? float(_GLF_FUZZED(-9.9)) : _GLF_FUZZED((7568.7994 / -252.805)))), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3))), (true ? float((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))))[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9.9)), (_GLF_IDENTITY(true, ! (! (true))) ? float(_GLF_FUZZED(-9.9)) : _GLF_FUZZED((7568.7994 / -252.805)))), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3))) : _GLF_FUZZED(8.9))))), bool(true))), _GLF_IDENTITY((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(float(_GLF_FUZZED(-9.9)), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3)), ((true ? min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-58.18), _GLF_FUZZED((_GLF_IDENTITY(4.7, mix(float(_GLF_FUZZED(-9.9)), float(4.7), bool(true))) / 19.82))), bvec2(false, false))).y, injectionSwitch.y) : _GLF_FUZZED(-6.3))) - 0.0))))), float(_GLF_IDENTITY(_GLF_FUZZED(5.2), max(_GLF_FUZZED(5.2), _GLF_FUZZED(5.2)))), bool(false))) : _GLF_FUZZED(-9.9))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) << 0u), (false ? _GLF_FUZZED(_GLF_IDENTITY((uvec2(3343u, 148025u) & uvec2(74938u, _GLF_IDENTITY(14058u, (true ? _GLF_IDENTITY(14058u, _GLF_IDENTITY(0u, (0u) + 0u) ^ (14058u)) : _GLF_FUZZED(187467u))))).r, clamp((uvec2(3343u, 148025u) & uvec2(74938u, _GLF_IDENTITY(14058u, (true ? _GLF_IDENTITY(14058u, _GLF_IDENTITY(0u, (0u) + 0u) ^ (14058u)) : _GLF_FUZZED(187467u))))).r, (uvec2(3343u, 148025u) & uvec2(74938u, _GLF_IDENTITY(14058u, (true ? _GLF_IDENTITY(14058u, _GLF_IDENTITY(0u, (0u) + 0u) ^ (14058u)) : _GLF_FUZZED(187467u))))).r, (uvec2(3343u, 148025u) & uvec2(74938u, _GLF_IDENTITY(14058u, (true ? _GLF_IDENTITY(14058u, _GLF_IDENTITY(0u, (0u) + 0u) ^ (14058u)) : _GLF_FUZZED(187467u))))).r))) : buf[virtual_gid] = 1));
                    }
                   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false, false))), false))) || false, ! (! ((bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false, false))), false))) || false))))), true)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false)), true)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (_GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || _GLF_IDENTITY(false, ! (! (false))))) || false)), true)))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), _GLF_IDENTITY(false, (false) && true)))), false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))), false)))) && true) || false)), true)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), false, false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), false), true))))), false))), ((bool(bvec2(false, false)))) && true) || false)), true))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)), true, false, false))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)), true, false, false))), true)))))) && true, ((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(((bool(bvec2(false, false)))) && true, false || (_GLF_IDENTITY(((bool(bvec2(false, false)))), ! (_GLF_IDENTITY(! (((bool(bvec2(false, false))))), ! (! (_GLF_IDENTITY(! (((bool(bvec2(false, false))))), ! (! (! (((bool(bvec2(false, false))))))))))))) && true))) || false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(log(1.0), 1.0, 0.0), vec3(0.0, cos(0.0), 0.0)), _GLF_IDENTITY(dot(vec3(log(1.0), 1.0, 0.0), vec3(0.0, cos(0.0), 0.0)), (dot(vec3(log(1.0), 1.0, 0.0), vec3(0.0, cos(0.0), 0.0))) / 1.0)), 0.0, abs(1.0), 0.0, 0.0))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y)))))))))))), true))) && true) || false), false || (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false), false || (_GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)))))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))) && true, ((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(((bool(bvec2(false, false)))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(((bool(bvec2(false, false)))) && true, true && (_GLF_IDENTITY((_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))) && true, ! (! (((bool(bvec2(false, false)))) && true)))))))) || false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true, false))), bool(bool(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false))))))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))))))))))))), true))) && true) || false)))) || false))))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false, false))), false))) || false)), true)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false, false))), false))) || false)), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false, false))), false))) || false)), true)), (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false, false))), false))) || false)), true))) || false)) && true))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false)), true)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (false)))), (bool(bvec2(false, false))) || _GLF_IDENTITY(false, ! (! (false))))) || false)), true)))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) || false)) || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (bool(false))), ! (! (_GLF_IDENTITY((! (bool(false))), ! (! ((! (bool(false))))))))))))))), false))), false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true) || false)), true)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), false, false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))), false))), _GLF_IDENTITY(((bool(bvec2(false, false)))) && true, ! (! (((bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) && true)))) || false)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((bool(bvec2(false, false)))) && true) || false)), true))) && true, ((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true))) && true) || false), false || (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, false), false))))))))) && true) || _GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false))))), true && (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false)))))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) || false), ! (! (! (true))))))))) && true, ((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(((bool(bvec2(false, false)))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(((bool(bvec2(false, false)))) && true, true && (_GLF_IDENTITY(((bool(bvec2(false, false)))) && true, ! (! (((bool(bvec2(false, false)))) && true)))))))) || false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(false, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), true), bvec2(bvec4(bvec2(bool(bvec2(false, false)), true), false, false)))))), ((_GLF_IDENTITY(bool(bvec2(false, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), true), bvec2(bvec4(bvec2(bool(bvec2(false, false)), true), false, false))))))) || false)) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), ! _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! (! ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(bool(bvec3(_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))), true))) && true) || false)))) || false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false)))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(true && (! (_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (! (_GLF_WRAPPED_IF_TRUE(true))), ! (! (true && (! (_GLF_WRAPPED_IF_TRUE(true))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (! (_GLF_WRAPPED_IF_TRUE(true))), ! (! (true && (! (_GLF_WRAPPED_IF_TRUE(true))))))), bool(bvec3(! (_GLF_IDENTITY(true && (! (_GLF_WRAPPED_IF_TRUE(true))), ! (! (true && (! (_GLF_WRAPPED_IF_TRUE(true))))))), false, true))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 + (_GLF_IDENTITY(1, clamp(1, 1, 1))))); _injected_loop_counter ++)
      {
       do
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2) ^ 0, _GLF_IDENTITY(0 | ((2) ^ 0), (false ? _GLF_FUZZED((~ atomicMax(_injected_loop_counter, -25274))) : 0 | ((2) ^ 0))))), 2), (clamp(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2) ^ 0, 0 | ((2) ^ 0))), 2)) | (clamp(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2) ^ 0, 0 | ((2) ^ 0))), 2)))), clamp(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) | 0), 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY(0 | (2), 1 * _GLF_IDENTITY((0 | (2)), ((0 | (2))) | ((0 | (2))))))) * 1)) ^ _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
