#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) << _GLF_IDENTITY(0, clamp(0, 0, 0)))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! _GLF_IDENTITY((! (_injected_loop_counter < 1)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_injected_loop_counter < 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_injected_loop_counter < 1))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_injected_loop_counter < 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_injected_loop_counter < 1))))), ! (! (! (_GLF_IDENTITY((! (_injected_loop_counter < 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_injected_loop_counter < 1)))))))))))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false)))))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, abs(1.0)), _GLF_IDENTITY((vec4(injectionSwitch, 0.0, abs(1.0))) * mat4(1.0), mix(vec4(((vec4(injectionSwitch, 0.0, abs(1.0))) * mat4(1.0))[0], _GLF_FUZZED(854.638), _GLF_FUZZED(5.2), _GLF_FUZZED(4688.9956)), vec4(_GLF_FUZZED(-853.046), ((vec4(injectionSwitch, 0.0, abs(1.0))) * mat4(1.0))[1], ((vec4(injectionSwitch, 0.0, abs(1.0))) * mat4(1.0))[2], ((vec4(injectionSwitch, 0.0, abs(1.0))) * mat4(1.0))[3]), bvec4(false, true, true, true)))))).x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       return;
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(0, 0, 1) : _GLF_IDENTITY(_GLF_FUZZED(ivec3(-80970, 15949, -62013)), ivec3(1, 1, 1) * (_GLF_IDENTITY(_GLF_FUZZED(ivec3(-80970, 15949, -62013)), (_GLF_FUZZED(ivec3(-80970, 15949, -62013))) + ivec3(0, 0, 0))))))) - ivec3(0, 0, 0))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0)))), (mat2(injectionSwitch, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0))), mix(vec2(_GLF_FUZZED(35.26), _GLF_FUZZED(5678.6109)), vec2((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0)))), (mat2(injectionSwitch, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0))))[0], (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0)))), (mat2(injectionSwitch, 0.0, length(tan(vec4(0.0, 0.0, 0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0))))[1]), bvec2(true, true)))).y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)) * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1))) / 1u)) << 0u)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size)))))) ^ 0u)), clamp((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1))) / 1u)) << 0u)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size)))))) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1))) / 1u)) << 0u)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size)))))) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1))) / 1u)) << 0u)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size)))))) ^ 0u))));
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     subgroupAll(false);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), injectionSwitch)).y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), max(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(tanh(-5.7)) : 1.0))), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)))) - _GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))) + (_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec4(mat3x4(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), cos(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), max(max(1.0, 1.0), max(1.0, 1.0)))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))) - _GLF_IDENTITY(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, 0.0, 0.0)) + vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), vec4(0.0, 0.0, 0.0, 0.0))), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4912.2014)), float(0.0), bool(true)))) + 0.0)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.3))) : _GLF_FUZZED(-2.3))), 0.0))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, cos(0.0), tan(0.0), 1.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, cos(0.0), tan(0.0), 1.0, 0.0)))))), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)), min(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)), (determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0))) - 0.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(vec4(-0.4, -8056.6429, 9058.9905, 9.3)) : _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.4) : 0.0)), 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))))), vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0), mat2(1.0) * (mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), mix(vec3((vec3(abs(0.0), 0.0, 1.0))[0], _GLF_FUZZED(382.129), (vec3(abs(0.0), 0.0, 1.0))[2]), vec3(_GLF_FUZZED(-1.2), (vec3(abs(0.0), 0.0, 1.0))[1], _GLF_FUZZED(56.60)), bvec3(false, true, false)))), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.6) : 0.0))))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(abs(0.0), float(_GLF_IDENTITY(mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED((mat2x4(-533.622, -94.55, -101.369, -5.6, -529.643, 2.4, 1519.7763, -5.1) * mat2(-492.891, 3.2, 1430.8421, 6.3))) : _GLF_IDENTITY(mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 1.0, 0.0, sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))))), max(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), mix(vec3((vec3(abs(0.0), 0.0, 1.0))[0], _GLF_FUZZED(382.129), (vec3(abs(0.0), 0.0, 1.0))[2]), vec3(_GLF_FUZZED(-1.2), (vec3(abs(0.0), 0.0, 1.0))[1], _GLF_FUZZED(56.60)), bvec3(false, true, false)))), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.6) : 0.0))))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(abs(0.0), float(_GLF_IDENTITY(mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED((mat2x4(-533.622, -94.55, -101.369, -5.6, -529.643, 2.4, 1519.7763, -5.1) * mat2(-492.891, 3.2, 1430.8421, 6.3))) : _GLF_IDENTITY(mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 1.0, 0.0, sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))))), float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), mix(vec3((vec3(abs(0.0), 0.0, 1.0))[0], _GLF_FUZZED(382.129), (vec3(abs(0.0), 0.0, 1.0))[2]), vec3(_GLF_FUZZED(-1.2), (vec3(abs(0.0), 0.0, 1.0))[1], _GLF_FUZZED(56.60)), bvec3(false, true, false)))), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.6) : 0.0))))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(abs(0.0), float(_GLF_IDENTITY(mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (false ? _GLF_FUZZED((mat2x4(-533.622, -94.55, -101.369, -5.6, -529.643, 2.4, 1519.7763, -5.1) * mat2(-492.891, 3.2, 1430.8421, 6.3))) : _GLF_IDENTITY(mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (mat2x4(abs(0.0), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 1.0, 0.0, sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))))))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(float(_GLF_IDENTITY(mat2(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), min(_GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), clamp(vec3(abs(0.0), 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), max(vec3(abs(0.0), 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))))), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), vec3(1.0, 1.0, 1.0) * (vec3(abs(0.0), 0.0, 1.0)))))), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 1.0)), 0.0 + (dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 1.0)))), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)), min(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0))))), 1.0, 1.0, 1.0), mat2(1.0) * (mat2(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(74.45) : _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(191.968)), float(injectionSwitch.y), bool(true))) : _GLF_FUZZED(-6.1))))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), mix(vec3((vec3(0.0, 0.0, 1.0))[0], _GLF_IDENTITY((vec3(0.0, 0.0, 1.0))[1], mix(float(_GLF_FUZZED(-4.3)), float((vec3(0.0, 0.0, 1.0))[1]), bool(true))), (vec3(0.0, 0.0, 1.0))[2]), vec3(_GLF_FUZZED(-5304.7588), _GLF_FUZZED((-2.4 / 5.6)), _GLF_FUZZED(518.102)), bvec3(false, false, false))), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0))), sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0))), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7976.7508)), float(1.0), bool(true))), 1.0, 1.0, 0.0, 1.0))), 0.0)), 1.0)))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0), mat2(1.0) * (mat2(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), max(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0)))) / vec3(1.0, 1.0, 1.0)), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, sqrt(0.0), 0.0, 1.0))), (vec4(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 1.0)), mix(float(dot(vec3(0.0, 0.0, 1.0), vec3(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 1.0))), float(_GLF_FUZZED((5.7 - -7.5))), bool(false))), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), (_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))) / 1.0), 0.0)), 1.0)))) - _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, 0.0, 0.0)) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0))))))), float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), (_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)))) / 1.0), 1.0, determinant(mat3(_GLF_IDENTITY(1.0, (1.0) - sin(0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / _GLF_ONE(1.0, injectionSwitch.y)), 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-0.6) : _GLF_IDENTITY(1.0, (1.0) - tan(0.0))))))), (vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(radians(-9756.4989)) : 1.0)), determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, sqrt(1.0), 1.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-71.46), max(_GLF_FUZZED(-71.46), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-71.46), float(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(-71.46), _GLF_IDENTITY(float(mat4x2(_GLF_FUZZED(-71.46), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)), clamp(float(mat4x2(_GLF_FUZZED(-71.46), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)), float(mat4x2(_GLF_FUZZED(-71.46), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)), float(mat4x2(_GLF_FUZZED(-71.46), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(_GLF_FUZZED(367.576)), bool(false)))), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)))), float(mat3x4(_GLF_FUZZED(-71.46), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), _GLF_IDENTITY(float(0.0), max(float(0.0), _GLF_IDENTITY(float(0.0), float(mat3(float(0.0), 0.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 0.0, cos(0.0)))))), bool(true))))), 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(605.404))))))))) - vec4(0.0, 0.0, 0.0, 0.0))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, log(1.0), 1.0)), vec2(0.0, 0.0) + (vec2(mat2(injectionSwitch, log(1.0), 1.0))))))).y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), clamp(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec4(-76.91, 9162.7180, 2.3, 1.2).x), _GLF_FUZZED(-3.6)), bvec2(false, false)), mix(vec2((mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), clamp(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec4(-76.91, 9162.7180, 2.3, 1.2).x), _GLF_FUZZED(-3.6)), bvec2(false, false)))[0], (mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), clamp(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec4(-76.91, 9162.7180, 2.3, 1.2).x), _GLF_FUZZED(-3.6)), bvec2(false, false)))[1]), vec2(_GLF_FUZZED(67.19), _GLF_FUZZED(-90.26)), bvec2(false, false)))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, 1.0)), clamp(float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(vec4(-76.91, 9162.7180, 2.3, 1.2).x), _GLF_FUZZED(-3.6)), bvec2(false, false))).x) / 1.0) > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))));
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(true, true && (true)) ? next_virtual_gid : _GLF_FUZZED(subgroup_id)))], uint(2), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false)))), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false)))))))) || ((injectionSwitch.x > injectionSwitch.y)))) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               return;
              }
             return;
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) & -18176); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec3(int(4), 0, 0), ivec3(ivec3(ivec3(int(4), 0, 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), injectionSwitch[1])))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(0.8) : _GLF_ZERO(0.0, injectionSwitch.x))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0)), max(float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0)), float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), true), true, true))))))) && (! (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))), false || (! (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), true)))))))))))))); _injected_loop_counter --)
              {
               subgroupAll(true);
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false, true, true)))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false, true, true))))))))) && _GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.6, 337.469)) : injectionSwitch)))).y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
}
