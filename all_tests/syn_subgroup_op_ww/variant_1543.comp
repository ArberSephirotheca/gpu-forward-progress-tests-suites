#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0)), min(_GLF_IDENTITY(float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0)), max(float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0)), float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0)))), _GLF_IDENTITY(float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0)), min(float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0)), float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0))))))))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 0.0, 1.0, abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0))), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), 0.0), (mat4x2(1.0, 0.0, 1.0, abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0))), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), 0.0)) * mat4(1.0))))) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(846.606), _GLF_FUZZED(-3.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(96.47) : injectionSwitch[1])))), injectionSwitch)))).y)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))), (! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))) || false), (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) || false)))), bool(bool(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))) - abs(vec2(0.0, 0.0))).y))))))))) || false)) || false)))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(vec2(-508.389, 5.7).s), _GLF_FUZZED(-5292.4701)), vec2((mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), abs(1.0), 1.0, log(1.0), 0.0, 0.0, 0.0))))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y)))))), (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))) && true))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))), true, false, true))), true && _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, 1.0, 0.0)), max(float(vec4(1.0, 1.0, 1.0, 0.0)), float(vec4(1.0, 1.0, 1.0, 0.0)))))) / round(length(normalize(1.0))))) * (injectionSwitch)).y))))))))), ((! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))) && true))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))), true, false, true))), true && _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, 1.0, 0.0)), max(float(vec4(1.0, 1.0, 1.0, 0.0)), float(vec4(1.0, 1.0, 1.0, 0.0)))))) / round(length(normalize(1.0))))) * (injectionSwitch)).y)))))))))) || false)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))))))) && true), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-5275.4542)), float(injectionSwitch[0]), bool(true))))), injectionSwitch[1])).y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-5275.4542)), float(injectionSwitch[0]), bool(true))))), injectionSwitch[1])).y)))), false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(7269) : _injected_loop_counter ++)))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) << 0), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, false)))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))), ((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y)))) || false) || false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))).y), mix(float(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))).y)), float(_GLF_FUZZED(6.9)), bool(false)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))) || false), bool(bvec2(false, false)))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), false || (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(18.92) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec3(-729.623, 1381.5444, 6045.6322).b)), bool(false))))))))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || (_GLF_IDENTITY((false) && true, bool(bvec3((false) && true, false, false))))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((0 ^ 1) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y = subgroup_size;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
        return;
      }
     else
      {
      }
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2300.5763)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) + abs(0.0)) * 1.0)), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.7)), bool(false))))) > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec3(true, false, true))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))), true))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / (0 ^ 1))) << 0))
              {
               return;
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) - 0u), _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))))))), 1u)) | uvec2(0u, 0u)))))), (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) + _GLF_IDENTITY((0u | 0u), uint(_GLF_IDENTITY(uvec3((0u | 0u), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((0u | 0u), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))))) * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y) >> 0u)) << 0u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) << (0u ^ 0u)), min(subgroup_local_id, subgroup_local_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(ivec2(1 << _GLF_IDENTITY(int(2), int(2)), ((1 ^ 0) | 0))), clamp(_GLF_IDENTITY(int(ivec2(1 << _GLF_IDENTITY(int(2), int(2)), ((1 ^ 0) | 0))), (int(ivec2(1 << _GLF_IDENTITY(int(2), int(2)), ((1 ^ 0) | 0)))) >> 0), int(ivec2(1 << _GLF_IDENTITY(int(2), int(2)), ((1 ^ 0) | 0))), int(ivec2(1 << _GLF_IDENTITY(int(2), int(2)), ((1 ^ 0) | 0))))))) >> _GLF_IDENTITY(int(2), int(2))) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0 << _GLF_IDENTITY(int(7), int(7)))))) && true, bool(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true, _GLF_IDENTITY(((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true) || false, _GLF_IDENTITY(bool(bvec3(((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true) || false, false, false)), bool(bool(bool(bvec3(((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true) || false, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) * mat2(1.0)) * (injectionSwitch)).y)), true))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))) && true, false, false)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) : _GLF_FUZZED(91147))) > 0))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))
    {
     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid)), (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) + 0u)))), 0u | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid))) - 0u);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), min(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) + 0.0), clamp(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) + 0.0), _GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) + 0.0), _GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) + 0.0))), float(injectionSwitch.x))))))), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), min(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-73.46))), 0.0, 1.0, 1.0)))))), (float(injectionSwitch.x)) + 0.0), float(injectionSwitch.x)))))))) ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-35.38))), injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) && true))))));
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)) * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), clamp(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base))) : workgroup_base + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y + (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y))))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y))))))))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) ? injectionSwitch.y : _GLF_FUZZED(-8.4)), (false ? _GLF_FUZZED(8.4) : _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) ? injectionSwitch.y : _GLF_FUZZED(-8.4)), min((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) ? injectionSwitch.y : _GLF_FUZZED(-8.4)), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) ? injectionSwitch.y : _GLF_FUZZED(-8.4)))))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))))) || false)))) || false));
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x = next_virtual_gid;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))), 0), (false ? _GLF_FUZZED(ivec2(64282, 52752)) : ivec2(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0 << _GLF_IDENTITY(int(4), int(4))), ((0) | (0 << _GLF_IDENTITY(int(4), int(4)))) << 0))))))))))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    continue;
   do
    {
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z, (0u | 0u) | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z)) >> 0u), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z)) >> 0u), 0u, 0u))) | (uint(uvec3(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z)) >> 0u), 0u, 0u)))))) | ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z))))))], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) * 1)), 0 ^ ((_GLF_IDENTITY(~ (1), (~ (1)) * 1))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup))))))), _GLF_IDENTITY(int(ivec3((~ (1)), 0, 1)), max(int(ivec3((~ (1)), 0, 1)), int(ivec3((~ (1)), 0, 1))))), _GLF_IDENTITY(0, (0) | 0) ^ ((~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))))) | 0)) + 0))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))), 0u ^ (uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(37448) : _GLF_IDENTITY(1, (1) + 0))), ~ (~ (1))), _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) * 1)), 0 ^ ((_GLF_IDENTITY(~ (1), (~ (1)) * 1))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup))))))), _GLF_IDENTITY(int(ivec3((~ (1)), 0, 1)), max(int(ivec3((~ (1)), 0, 1)), int(ivec3((~ (1)), 0, 1))))), _GLF_IDENTITY(0, (0) | 0) ^ ((~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))))) | 0)) + 0))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))), 0u ^ (uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(37448) : _GLF_IDENTITY(1, (1) + 0))), ~ (~ (1))), _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) * 1)), 0 ^ ((_GLF_IDENTITY(~ (1), (~ (1)) * 1))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup))))))), _GLF_IDENTITY(int(ivec3((~ (1)), 0, 1)), max(int(ivec3((~ (1)), 0, 1)), int(ivec3((~ (1)), 0, 1))))), _GLF_IDENTITY(0, (0) | 0) ^ ((~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))))) | 0)) + 0))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))), 0u ^ (uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(37448) : _GLF_IDENTITY(1, (1) + 0))), ~ (~ (1))), _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) * 1)), 0 ^ ((_GLF_IDENTITY(~ (1), (~ (1)) * 1))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup))))))), _GLF_IDENTITY(int(ivec3((~ (1)), 0, 1)), max(int(ivec3((~ (1)), 0, 1)), int(ivec3((~ (1)), 0, 1))))), _GLF_IDENTITY(0, (0) | 0) ^ ((~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))))) | 0)) + 0))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))), 0u ^ (uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(37448) : _GLF_IDENTITY(1, (1) + 0))), ~ (~ (1))), _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) * 1)), 0 ^ ((_GLF_IDENTITY(~ (1), (~ (1)) * 1))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup))))))), _GLF_IDENTITY(int(ivec3((~ (1)), 0, 1)), max(int(ivec3((~ (1)), 0, 1)), int(ivec3((~ (1)), 0, 1))))), _GLF_IDENTITY(0, (0) | 0) ^ ((~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))))) | 0)) + 0))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))), 0u ^ (uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(37448) : _GLF_IDENTITY(1, (1) + 0))), ~ (~ (1))), _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) * 1)), 0 ^ ((_GLF_IDENTITY(~ (1), (~ (1)) * 1))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), (true ? (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))) : _GLF_FUZZED(findLSB(num_workgroup))))))), _GLF_IDENTITY(int(ivec3((~ (1)), 0, 1)), max(int(ivec3((~ (1)), 0, 1)), int(ivec3((~ (1)), 0, 1))))), _GLF_IDENTITY(0, (0) | 0) ^ ((~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))), (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))))) | 0)) + 0))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))), 0u ^ (uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(37448) : _GLF_IDENTITY(1, (1) + 0))), ~ (~ (1))), _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))))))))))))) / 1u), 4, 64, 4);
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(subgroup_local_id + 1 < GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, (subgroup_local_id + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, (true ? GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y : _GLF_FUZZED(subgroup_size)))) << 0u)), (uint(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y)) << 0u)), min(uint(_GLF_IDENTITY(uint(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y), (uint(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y)) << 0u)), uint(_GLF_IDENTITY(uint(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y), (uint(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y)) << 0u)))))) && _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x], uint(2), _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (ivec2(4, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 64, 4);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
         return;
        }
      }
     else
      {
       subgroupAll(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(float(vec3(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(vec3(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(vec3(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))) > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && true))));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bool(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) / 1) < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++))), 1 * (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)), ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x))], uint(2), 4, _GLF_IDENTITY(64, int(_GLF_IDENTITY(int(64), int(ivec2(_GLF_IDENTITY(int(64), (_GLF_IDENTITY(int(64), _GLF_IDENTITY((int(64)) + 0, clamp((int(64)) + 0, (int(64)) + 0, (int(64)) + 0)))) | (int(64))), 0))))), 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     subgroupAll(true);
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(18122u)), _GLF_FUZZED(8099.5429)), bvec2(false, false))), 1.0, 1.0, 1.0, log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0), (false ? _GLF_FUZZED(mat4(8.4, 7.4, 9707.7980, -7.5, 38.75, 1.3, -9.8, 80.16, 5.1, -97.44, 0.5, -6216.6040, 0.8, 4.6, 919.635, -28.56)) : mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(18122u)), _GLF_FUZZED(8099.5429)), bvec2(false, false))), 1.0, 1.0, 1.0, log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0))))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], _GLF_FUZZED(-1.6)), vec2(_GLF_FUZZED(-57.76), ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(false, true)))))).y) && true))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0)))), (int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0))))) >> 0))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(4, 0 | (4))), 1, 1, (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(94221) : _GLF_IDENTITY(1, (1) + 0) ^ _GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(7), int(7)))))))), max(ivec4(int(4), 1, 1, (1 ^ 1)), ivec4(int(4), 1, 1, (1 ^ 1)))))))) >> _GLF_IDENTITY(int(4), int(4))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) - 0), (_GLF_IDENTITY(4, (4) - 0)) ^ 0)), int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), _GLF_IDENTITY((4), ~ (_GLF_IDENTITY(~ ((4)), int(ivec3(~ ((4)), 1, (0 | 0)))))) - 0)))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(4, 0 | (4))), 1, 1, (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (1) ^ 0), (false ? _GLF_FUZZED(94221) : 1 ^ 1)))), max(ivec4(int(4), 1, 1, (1 ^ 1)), ivec4(int(4), 1, 1, (1 ^ 1)))))))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), clamp(~ (_GLF_IDENTITY(4, (4) - 0)), ~ (_GLF_IDENTITY(4, (4) - 0)), ~ (_GLF_IDENTITY(4, (4) - 0))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), (~ (_GLF_IDENTITY(4, (4) - 0))) / 1))), int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), _GLF_IDENTITY((4) - 0, clamp((4) - 0, _GLF_IDENTITY((4) - 0, ((4) - 0) ^ 0), (4) - 0)))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, _injected_loop_counter)) : 4))) ^ 0), 0 | (4)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, _injected_loop_counter)) : 4))) ^ 0), 0 | (4))))), _GLF_IDENTITY(1, (1) << 0), 1, (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (1) ^ 0), (false ? _GLF_FUZZED(94221) : 1 ^ 1)))), max(_GLF_IDENTITY(ivec4(int(4), 1, 1, (1 ^ 1)), (ivec4(int(4), 1, 1, (1 ^ 1))) | ivec4(0, 0, 0, 0)), ivec4(int(4), 1, 1, (1 ^ 1)))))))) >> _GLF_IDENTITY(int(4), int(4))) + 0)), min(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0)))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(4, 0 | (4))), 1, 1, (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY((false ? _GLF_FUZZED(94221) : 1 ^ 1), int(ivec3(_GLF_IDENTITY((false ? _GLF_FUZZED(94221) : 1 ^ 1), ((false ? _GLF_FUZZED(94221) : 1 ^ 1)) | 0), 1, (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))))))))))), max(ivec4(int(4), 1, 1, (1 ^ 1)), ivec4(int(4), 1, 1, (1 ^ 1)))))))) >> _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(4, 0, (0 << _GLF_IDENTITY(int(2), int(2))), 0), (ivec4(4, _GLF_IDENTITY(0, min(0, 0)), (0 << _GLF_IDENTITY(int(2), int(2))), 0)) - ivec4(0, 0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), (int(_GLF_IDENTITY(ivec4(4, 0, (0 << _GLF_IDENTITY(int(2), int(2))), 0), (ivec4(4, 0, (0 << _GLF_IDENTITY(int(2), int(2))), 0)) - ivec4(0, 0, 0, 0)))) << 0)), (4) - 0)), int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0)))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(4, 0 | (4))), 1, 1, (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (1) ^ 0), (1 ^ _GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (1) ^ 0), (1 ^ _GLF_IDENTITY(1, (1) ^ 0)) - 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(94221, max(94221, 94221))) : _GLF_IDENTITY(1, int(ivec2(1, 1))) ^ 1)))), max(ivec4(int(4), 1, 1, (1 ^ 1)), ivec4(int(4), 1, 1, (1 ^ 1)))))))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), ~ (~ ((4))))) | (_GLF_IDENTITY((4), ~ (~ ((4)))))), clamp(_GLF_IDENTITY((4), min((4), (4))), (4), (4))) - 0)), min((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), ~ (~ ((4))))) | (_GLF_IDENTITY((4), ~ (~ ((4)))))), clamp(_GLF_IDENTITY((4), min((4), (4))), (4), (4))) - 0)), (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), ~ (~ ((4))))) | (_GLF_IDENTITY((4), ~ (~ ((4)))))), clamp(_GLF_IDENTITY((4), min((4), (4))), (4), (4))) - 0)))), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0)))), (int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1 * ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), ~ (~ ((4))))) | (_GLF_IDENTITY((4), ~ (~ ((4)))))), clamp(_GLF_IDENTITY((4), min((4), (4))), (4), (4))) - 0)), min((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), ~ (~ ((4))))) | (_GLF_IDENTITY((4), ~ (~ ((4)))))), clamp(_GLF_IDENTITY((4), min((4), (4))), (4), (4))) - 0)), (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), ~ (~ ((4))))) | (_GLF_IDENTITY((4), ~ (~ ((4)))))), clamp(_GLF_IDENTITY((4), min((4), (4))), (4), (4))) - 0)))), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0)))), (int(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), (4) - 0))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(4, 0 | (4))), 1, 1, (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (0) + 0)), (false ? _GLF_FUZZED(94221) : 1 ^ 1)))), max(ivec4(int(4), 1, 1, (1 ^ 1)), ivec4(int(4), 1, 1, (1 ^ 1)))))))) >> _GLF_IDENTITY(int(4), int(4)))) ^ 0))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(-9.8, -8221.8322, -0.8, -7.9), (vec4(-9.8, -8221.8322, -0.8, -7.9)) - vec4(0.0, 0.0, 0.0, 0.0)).w)), float(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, 0.0, 0.0), (mat2(injectionSwitch.y, 0.0, 0.0, 0.0)) * mat2(1.0)))), bool(true)))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) + 0.0), 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(vec4(-9.8, _GLF_IDENTITY(-8221.8322, (false ? _GLF_FUZZED(-950.161) : -8221.8322)), -0.8, -7.9).w)), float(float(mat2(injectionSwitch.y, 0.0, 0.0, 0.0))), bool(true))))))) && true)));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-29.27)), float(injectionSwitch.y), bool(true)))) / 1.0)))))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0), min((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0))) : _GLF_FUZZED(vec2(-0.5, 5526.6917))))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) | 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))), (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8343.2717)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8343.2717)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8343.2717)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), false, false, false)))) || false)) || false)))) || false)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))), (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8343.2717)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8343.2717)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8343.2717)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(290.625) : injectionSwitch.y))) - 0.0)), false, false, false)))) || false)) || false)))) || false)), true, true, false)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))));
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      return;
    }
  }
}
