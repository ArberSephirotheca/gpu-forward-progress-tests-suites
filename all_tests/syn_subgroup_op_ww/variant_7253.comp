#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 vec3 _f0;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 bvec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_1 {
 uint workgroup_base;
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) ^ 0)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(5243))))) - 0), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(-95598), (_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))) | (_GLF_IDENTITY(_GLF_FUZZED(-95598), _GLF_IDENTITY((_GLF_FUZZED(-95598)), ((_GLF_FUZZED(-95598))) * 1) ^ 0))))))), (false ? _GLF_FUZZED(findLSB(bitCount(subgroup_size))) : _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(5243))))) - 0), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(-95598), (_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))) | (_GLF_IDENTITY(_GLF_FUZZED(-95598), _GLF_IDENTITY((_GLF_FUZZED(-95598)), ((_GLF_FUZZED(-95598))) * 1) ^ 0))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(5243))))) - 0), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(-95598), (_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))) | (_GLF_IDENTITY(_GLF_FUZZED(-95598), _GLF_IDENTITY((_GLF_FUZZED(-95598)), ((_GLF_FUZZED(-95598))) * 1) ^ 0))))))), (false ? _GLF_FUZZED(-97384) : (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(5243))))) - 0), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(-95598), (_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))) | (_GLF_IDENTITY(_GLF_FUZZED(-95598), _GLF_IDENTITY((_GLF_FUZZED(-95598)), ((_GLF_FUZZED(-95598))) * 1) ^ 0))))))))))))), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(int(2), 0, 1)), (_GLF_IDENTITY(int(ivec3(int(2), 0, 1)), (int(ivec3(int(2), 0, 1))) | 0)) | (_GLF_IDENTITY(int(ivec3(int(2), 0, 1)), _GLF_IDENTITY(int(ivec2(int(ivec3(int(2), 0, 1)), 1)), (int(ivec2(int(ivec3(int(2), 0, 1)), 1))) - 0))))), _GLF_IDENTITY((int(2)), int(int((int(2))))) + 0), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(-95598), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), 0, 0, 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), (true ? (_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))) : _GLF_FUZZED(1339))))))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), 0, 0, 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), (true ? (_GLF_IDENTITY(_GLF_FUZZED(-95598), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))) : _GLF_FUZZED(1339))))))), 0, 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-95598), (_GLF_FUZZED(-95598)) ^ 0), (_GLF_IDENTITY(_GLF_FUZZED(-95598), (_GLF_FUZZED(-95598)) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec3(int(2), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-59200) : 0))), max(0 ^ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-59200) : 0))), 0 ^ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-59200) : 0)))))), 0, 0)), 1))), (int(2)) + 0), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | 0)), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-95598, 0 + (-95598))), (_GLF_IDENTITY(_GLF_FUZZED(-95598), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)), max(_GLF_IDENTITY(clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)), (clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598))) + 0), clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598)))), (clamp(_GLF_FUZZED(-95598), _GLF_FUZZED(-95598), _GLF_FUZZED(-95598))) ^ 0))) | (_GLF_IDENTITY(_GLF_FUZZED(-95598), (_GLF_FUZZED(-95598)) ^ 0)))))))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 1), (false ? _GLF_FUZZED(-51300) : (0 ^ 1)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))), true, false)))) && true)))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true))), true, true, false)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(-4.6)), float(sin(0.0)), bool(true))))) * 1.0)))))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(33317u, 21029u, 121367u)))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(num_workgroup)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) + 0u), 0u + (uint(7u))), _GLF_IDENTITY(uint(7u), uint(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) << (_GLF_IDENTITY(1u, (1u) - 0u) ^ 1u))), (uint(_GLF_IDENTITY(7u, (7u) << (_GLF_IDENTITY(1u, (1u) - 0u) ^ 1u)))) >> 0u), 1u, 0u))))))), (false ? _GLF_FUZZED(uvec3(125269u, 147924u, 80269u)) : uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(33317u, 21029u, 121367u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), uint(uvec3(uint(7u), 1u, 0u)))))))))).x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(bvec3(true), _GLF_struct_1(workgroup_size * workgroup_id, _GLF_struct_0(mat4x3(1.0), mat3x4(1.0), mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))) / 1.0)), bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! (true)), ! (! (! (_GLF_IDENTITY(! (true), (! (true)) && true))))))))), vec3(1.0))), _GLF_struct_2(vec3(1.0)));
 uint virtual_gid = _GLF_struct_replacement_3._f1.workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> 0u), 0u, 1u, 0u))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_3._f1.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(7, _GLF_IDENTITY(7, 0 ^ (7))))), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7))), true && (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))))); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) || false)))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) != (11323 & 0)); _injected_loop_counter --)
        {
         atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) << 0), 4);
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(158.058)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))))); _injected_loop_counter ++)
                      {
                       do
                        {
                         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                            {
                                             do
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter ++)
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                            {
                                                             if(subgroup_local_id + 1 < subgroup_size)
                                                              {
                                                               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                                                {
                                                                 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, max(2, 2))))), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))), (true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (false ? _GLF_FUZZED(-46098) : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0), (_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))))) ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)) ^ 0)))), 1 * _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), _GLF_IDENTITY((_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), false || (false || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))), 0 | ((_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), false || (false || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))))) ^ 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0), (_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)) ^ 0))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), false || (false || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? _GLF_IDENTITY(4, (4) >> 0) : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))) ^ 0)))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), _GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))) + 0), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((_GLF_IDENTITY(true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029), (_GLF_IDENTITY(true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029), (false ? _GLF_FUZZED(_injected_loop_counter) : true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)))) - 0)), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true, ! (! ((! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))))))))))) ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)), (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), _GLF_IDENTITY((true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ _GLF_IDENTITY((~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))), ((~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) | 0)) : _GLF_FUZZED(56029)), (_GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (true ? true ? _GLF_IDENTITY(4, (4) ^ 0) : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0))) | 0)) >> (0 << _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_IDENTITY(4, (4) * 1) : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(bitCount(atomicAdd(num_workgroup, subgroup_id)), (bitCount(atomicAdd(num_workgroup, subgroup_id))) ^ 0)), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), 1 * (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))), (_GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))))) / 1)) / 1))) - (0 | 0))) ^ 0))), _GLF_IDENTITY((true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)), _GLF_IDENTITY(_GLF_IDENTITY((true ? (_GLF_IDENTITY(true, false || (true)) ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)), (true ? _GLF_IDENTITY((true ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)), _GLF_IDENTITY(((true ? (true ? _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter))) - 0, (_GLF_IDENTITY(((true ? (true ? _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter))) - 0, (true ? ((true ? (true ? _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter))) - 0 : _GLF_FUZZED(_injected_loop_counter)))) - 0)) : _GLF_FUZZED(_injected_loop_counter))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? (_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bool(false))) || (true)) ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter), (true ? (_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bool(false))) || (true)) ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)) / 1)), (true ? _GLF_IDENTITY((true ? (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter)), _GLF_IDENTITY(((true ? (true ? _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ _GLF_IDENTITY((true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))), ((true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))) >> (0 << _GLF_IDENTITY(int(5), int(5)))))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter))) - 0, (_GLF_IDENTITY(((true ? (true ? _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter))) - 0, (true ? ((true ? _GLF_IDENTITY((true ? _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true) ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)), (true ? (true ? _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (~ (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true) ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))))) : _GLF_FUZZED(56029)) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(_injected_loop_counter))) - 0 : _GLF_FUZZED(_injected_loop_counter)))) - 0)) : _GLF_FUZZED(_injected_loop_counter))))))))), ((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))) : _GLF_FUZZED(56029))))) >> 0)) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) : _GLF_FUZZED(-58965))), ((_GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(56029)))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id)))), (~ (_GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))))) >> 0))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029))))))), ((_GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029)))))), ((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029))))))) | (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) - 0))) / 1)))))) / 1), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029))))))), (((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029)))))))) / 1), (((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029)))))))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029))))), ~ (~ (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029)))))))))), (((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029)))))))) / 1), (true ? _GLF_IDENTITY(((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029))))))), (((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))), (true ? true ? 4 : _GLF_FUZZED(bitCount(atomicAdd(num_workgroup, subgroup_id))) : _GLF_FUZZED(_GLF_IDENTITY(56029, (0 | 0) | (56029)))))))) / 1) : _GLF_FUZZED(_injected_loop_counter)))) | 0))) >> 0)) / int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) | 0))), _GLF_IDENTITY(64, (false ? _GLF_FUZZED(16403) : 64)), 4);
                                                                }
                                                               do
                                                                {
                                                                 subgroupAll(false);
                                                                }
                                                               while(_GLF_WRAPPED_LOOP(false));
                                                              }
                                                             else
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), bool(bvec2(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), false)))))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                  {
                                                                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                                      {
                                                                      }
                                                                     else
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                                        {
                                                                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0), (true ? vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0), 0.0, 0.0) : _GLF_FUZZED(vec3(52.23, -9.8, 0.1)))))))), false || (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0), (true ? vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0), 0.0, 0.0) : _GLF_FUZZED(vec3(52.23, -9.8, 0.1)))))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0), (true ? vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0), 0.0, 0.0) : _GLF_FUZZED(vec3(52.23, -9.8, 0.1)))))))), true)), bool(bvec4(bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0), (true ? vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0), 0.0, 0.0) : _GLF_FUZZED(vec3(52.23, -9.8, 0.1)))))))), true)), false, false, false)))))) || false)))), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0) < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) || false))))) && true, _GLF_IDENTITY(bool(bvec4((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(clamp(-8378.8266, 2.2, -702.664)))), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / 1.0)) || false))))) && true, false, false, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(719.993)))))) / 1.0), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) || false)))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)) : _GLF_FUZZED(719.993)))))) / 1.0), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) || false))))) && true)) && true, _GLF_IDENTITY(false, (false) || false), false, true))))))))
                                                                          {
                                                                           do
                                                                            {
                                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                                              {
                                                                               do
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                  {
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                   if(_GLF_DEAD(false))
                                                                                    {
                                                                                     do
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                                                                                        {
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                          {
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                            {
                                                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                              {
                                                                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                                                                                {
                                                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                                                                                                  {
                                                                                                  }
                                                                                                 else
                                                                                                  {
                                                                                                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                                                    {
                                                                                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
                                                                                                      {
                                                                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))) * mat2(1.0)))).x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], injectionSwitch[1])), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))) * mat2(1.0)))).x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                                                                                                        {
                                                                                                        }
                                                                                                       else
                                                                                                        {
                                                                                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y))))))) && (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0)), ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), false || (_GLF_IDENTITY(! (_injected_loop_counter != 0), (! (_injected_loop_counter != 0)) && true)))))))); _injected_loop_counter --)
                                                                                                          {
                                                                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                            {
                                                                                                            }
                                                                                                           else
                                                                                                            {
                                                                                                             barrier();
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                     else
                                                                                                      {
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                             else
                                                                                              {
                                                                                              }
                                                                                            }
                                                                                           else
                                                                                            {
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))) || false) && (false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))) && true)))));
                                                                                    }
                                                                                  }
                                                                                }
                                                                               while(_GLF_WRAPPED_LOOP(false));
                                                                              }
                                                                             else
                                                                              {
                                                                              }
                                                                            }
                                                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), true && ((_GLF_WRAPPED_IF_TRUE(true)))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(395.677) : injectionSwitch.x)), 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), max(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0)))) - 0.0), clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.0)), float(0.0), bool(true)))))))), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, _GLF_IDENTITY(0.0, (0.0) - sqrt(0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(980.728) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-0.6)), float(0.0), bool(true))))), length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0 * (_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0 * (0.0), max(_GLF_IDENTITY(1.0 * (0.0), (false ? _GLF_FUZZED(-7615.2700) : 1.0 * (0.0))), 1.0 * (0.0)))))))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), max(float(mat4x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat4x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))), vec4(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.0)), float(1.0), bool(true))) : _GLF_FUZZED(-6.2)))), vec4(1.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), vec3(mat2x4(vec3(0.0, 0.0, 0.0), 1.0, 0.0, cos(0.0), 1.0, 1.0)))), 1.0), vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4.8) : _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3.1)), float(1.0), bool(true))), 1.0)))), 0.0)))) - 0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 0.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5810.3174)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), 0.0)))), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0)) * mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(189874u))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (false ? _GLF_FUZZED(-0.3) : float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-250.914) : 0.0)), 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), sqrt(0.0)))), 0.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0), (mat4x3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-9.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), (_GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), max(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))))) / exp(0.0)), dot(vec4(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-318.842) : 1.0)), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), vec3(mat2x3(vec3(0.0, 0.0, 0.0), 1.0, 0.0, 0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0)) * mat4(1.0)))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-14.31)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(395.677) : injectionSwitch.x)), 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.0)), float(0.0), bool(true)))))))), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0))), clamp(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, _GLF_IDENTITY(0.0, (0.0) - sqrt(0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.0)), float(1.0), bool(true))) : _GLF_FUZZED(-6.2)))), vec4(1.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(636.471) : _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(106.592))))), length(vec3(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(4.7)), bool(false))), _GLF_IDENTITY(0.0, 1.0 * (0.0)))))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(0.0, log(1.0) + (0.0)), length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))))) - 0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), mix(float(float(0.0)), float(_GLF_FUZZED(-66.95)), bool(false)))))) / 1.0), 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-19.32)), bool(false)))), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 0.0), (mat4x3(injectionSwitch.x, 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(_GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(-17233))), bool(false))), determinant(mat4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0)) * mat4(1.0))), (false ? _GLF_FUZZED(-0.3) : float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2408.3755) : 1.0)))), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(uintBitsToFloat(uint(_injected_loop_counter))) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-10.01) : 0.0)))))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0), (mat4x3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-9.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_FUZZED(-8.9)), float(_GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-9.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(true))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), (_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), max(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))))) / exp(0.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), injectionSwitch.x), exp(0.0), round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), 1.0)))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), vec3(mat2x3(vec3(0.0, 0.0, 0.0), 1.0, 0.0, 0.0)))), 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0)) * mat4(1.0)))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-14.31)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))))))))))))
                                                                            {
                                                                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                                                                              {
                                                                              }
                                                                             else
                                                                              {
                                                                               do
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                  {
                                                                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                    {
                                                                                    }
                                                                                   else
                                                                                    {
                                                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                      {
                                                                                      }
                                                                                     else
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                        {
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
                                                                                          {
                                                                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                                                            {
                                                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                              {
                                                                                              }
                                                                                             else
                                                                                              {
                                                                                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), false, false, false))), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true)))))), false, false, false))), false)), false, true, false)), (bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), false, false, false))), false)), false, true, false))) && true))))
                                                                                                {
                                                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                                  {
                                                                                                  }
                                                                                                 else
                                                                                                  {
                                                                                                   do
                                                                                                    {
                                                                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                      {
                                                                                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                                                        {
                                                                                                         do
                                                                                                          {
                                                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                            {
                                                                                                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec2(_injected_loop_counter != 1, _GLF_IDENTITY(false, ! (! (false))))))); _injected_loop_counter ++)
                                                                                                              {
                                                                                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                                {
                                                                                                                }
                                                                                                               else
                                                                                                                {
                                                                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                                  {
                                                                                                                   do
                                                                                                                    {
                                                                                                                     atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
                                                                                                                    }
                                                                                                                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                                                                                                                  }
                                                                                                                 else
                                                                                                                  {
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                           else
                                                                                                            {
                                                                                                            }
                                                                                                          }
                                                                                                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))), true && ((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)))))))))));
                                                                                                        }
                                                                                                      }
                                                                                                     else
                                                                                                      {
                                                                                                      }
                                                                                                    }
                                                                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                                                  }
                                                                                                }
                                                                                               else
                                                                                                {
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                  }
                                                                                }
                                                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))), false)))));
                                                                              }
                                                                            }
                                                                           else
                                                                            {
                                                                            }
                                                                          }
                                                                         else
                                                                          {
                                                                          }
                                                                        }
                                                                       else
                                                                        {
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                                {
                                                                 do
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     subgroupAll(true);
                                                                    }
                                                                  }
                                                                 while(_GLF_WRAPPED_LOOP(false));
                                                                }
                                                               else
                                                                {
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && true)), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (true) || false) && ((! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED((5.1 * 0.4))), float((injectionSwitch.y)), bool(true))), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(1.0)), bool(false))))) - 0.0)), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))) || false)))))));
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2462.8759)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) && true))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7.0) : 1.0)), 1.0, 1.0)), max(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7.0) : 1.0)), 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7.0) : 1.0)), 1.0, 1.0)))))).y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
}
