#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), true, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), false, false), bvec3(bvec3(bvec3(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), false, false))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))))))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.x))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))) && true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, max(5, 5))))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) >> 0, _GLF_IDENTITY(int(ivec2((5) >> 0, 1)), max(int(ivec2((5) >> 0, 1)), int(ivec2((5) >> 0, 1))))))), max(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, log(1.0), sqrt(1.0), tan(0.0)))).y, (injectionSwitch.y) / 1.0)), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, log(1.0), sqrt(1.0), tan(0.0)))).y, (injectionSwitch.y) / 1.0)), true))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(log(vec2(1.0, 1.0)))))), false || (_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))).y))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bool(bool(bool(_GLF_DEAD(false))))))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (true) && true)))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, true), true))))))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) / vec2(1.0, 1.0)).y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), (! (bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))) || false)))))), false || (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY(_GLF_IDENTITY((true), bool(bvec4((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (_GLF_IDENTITY((true), bool(bvec4((true), _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), true && (_GLF_IDENTITY(true, bool(bvec2(true, true))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-7719.2478, -58.87)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))))) && _GLF_IDENTITY(true, (true) || false)))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, 0 | (1))], gl_WorkGroupSize[2]))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, (1) | (1))], gl_WorkGroupSize[2]))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))) / uvec3(1u, 1u, 1u), uvec3(uvec3((uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))) / uvec3(1u, 1u, 1u))))), uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))))).x))) | (gl_WorkGroupSize.x)), 0u | (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize, gl_WorkGroupSize))), uvec3(uvec4(~ (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize, gl_WorkGroupSize))), 0u)))))[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x), 0u | ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x))) | (gl_WorkGroupSize.x))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), true && (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))) || false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec2(! (! (false)), false)), bool(bvec4(bool(bvec2(! (! (false)), false)), false, false, true))))), ! (! (! (! (! (false))))))))), true, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
            return;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))))))))))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
    {
     do
      {
       GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = _GLF_IDENTITY(workgroup_size, 0u ^ (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(_GLF_IDENTITY(18811u, clamp(18811u, _GLF_IDENTITY(18811u, uint(uint(18811u))), 18811u)), 141659u, 155119u)))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY((false), ((false)) || false)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), log(1.0)), mat3(1.0) * (vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), log(1.0)))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1501.5994)), float(injectionSwitch.y), bool(true)))))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bool(false)))))), true && (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y)) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, clamp(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, max(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)), 0u)), uvec2(uvec4(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, max(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)), 0u)), 1u, 0u)))), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)).y, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y) | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size) | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), uvec2(1u, 1u), uvec2(1u, 1u))))))))).y) + 0u))) * workgroup_id) / _GLF_IDENTITY(1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((0u) << 0u, (_GLF_IDENTITY((0u) << 0u, uint(uvec3((0u) << 0u, 0u, 0u)))) | ((0u) << _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, (0u) - 0u), 1u))))), ((0u) << 0u) | ((0u) << 0u))) ^ _GLF_IDENTITY((1u), 0u | (_GLF_IDENTITY((1u), ((1u)) | ((1u)))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), max(true ? subgroup_size : _GLF_FUZZED(subgroup_id), true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), max((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), clamp((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), min((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), max(true ? subgroup_size : _GLF_FUZZED(subgroup_id), true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), max((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), clamp((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), min((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))))))))), max(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), max(true ? subgroup_size : _GLF_FUZZED(subgroup_id), true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), max((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), clamp((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), min((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_id), max(true ? subgroup_size : _GLF_FUZZED(subgroup_id), true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), max((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), clamp((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), min((_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(subgroup_id)))), 0u | (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]) : subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))))))))))))) * 1u), workgroup_base + subgroup_id * subgroup_size)) + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size), _GLF_IDENTITY(clamp(workgroup_base + subgroup_id * subgroup_size + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (0u ^ 0u)) + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u))) + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, (160983u & 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, ~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1)))))) % subgroup_size), (((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, (160983u & 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, ~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1)))))) % subgroup_size)) / 1u), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size), ~ (~ (workgroup_base + subgroup_id * subgroup_size + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size))))) | 0u)), _GLF_IDENTITY(uint(uvec3(clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), subgroup_id, _GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)))) * subgroup_size + (_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1), uint(uvec2((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1), uint(_GLF_ONE(1.0, injectionSwitch.y))))) % subgroup_size), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (0u ^ 0u)) + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u))) + 1) % subgroup_size), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u), max(uvec4(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u), uvec4(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u))))) * subgroup_size) * 1u) + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size)), 0u, 0u)), (uint(uvec3(clamp(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY(~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)), (uvec2(0u, 0u) | uvec2(0u, 0u)) ^ (~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))))))).x + 1) % subgroup_size), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))) * subgroup_size) | (0u ^ 0u)) + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u))) + 1, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u)), (uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u))) | 0u)) + 1) | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, uint(_GLF_IDENTITY(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u), uvec2(uvec4(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) + 1))) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, uint(uvec3(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u, 0u))) + 1) % subgroup_size)), 0u, 0u))) * 1u)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         return;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), true, false, false))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), true))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false || (_GLF_DEAD(false))), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(((! (_GLF_DEAD(false)))), (((! (_GLF_DEAD(false))))) || false)), true, true, true))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   return;
  }
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(52959)))), 1), _GLF_IDENTITY((max(_GLF_IDENTITY(1, (1) << 0), 1)), ((max(_GLF_IDENTITY(1, (1) << 0), 1))) + (0 ^ 0)) | (max(_GLF_IDENTITY(1, (1) << 0), 1))))), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x))) / 1u) + 1 < subgroup_size)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             do
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) | 0), 1, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(13228) : int(7))))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) >> (-58863 & 0))) / 1))), (ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0)) >> 0), 1, _GLF_IDENTITY(1, min(1, 1)))))) | 0), 1, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), min((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))) >> ivec3(0, 0, 0))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, int(ivec3(1, (0 ^ 1), 0))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0, 1), (ivec4(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1)), 0), max(ivec3(1, (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1)), 0), _GLF_IDENTITY(ivec3(1, (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1)), 0), (ivec3(1, (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1)), 0)) | ivec3(0, 0, 0)))))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0, 1)) | (ivec4(_GLF_IDENTITY(1, int(ivec3(1, (0 ^ 1), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-69317)))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * 1)), 0, 1)))))), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(~ (int(1)), (true ? _GLF_IDENTITY(~ (int(1)), (~ (int(1))) | (~ (int(1)))) : _GLF_FUZZED((-64493)))), 1, 1), ivec3(ivec4(ivec3(~ (int(1)), _GLF_IDENTITY(1, min(1, 1)), 1), 1)))), ~ (~ (int(_GLF_IDENTITY(ivec3(~ (int(1)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-59301) : _GLF_IDENTITY(1, ~ (~ (1))))), 1)), 1), ivec3(ivec4(ivec3(~ (int(1)), 1, 1), 1)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) | 0), int(_GLF_IDENTITY(int(0), max(int(0), int(0)))))); _injected_loop_counter --)
                {
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) && true))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(1.0), max(((injectionSwitch)) * mat2(1.0), ((injectionSwitch)) * mat2(1.0))))[0], _GLF_FUZZED(45.24)), vec2(_GLF_FUZZED(-923.891), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1]), bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), ! (! (bool(bvec4(true, false, true, false))))))) || false)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(45.24)), vec2(_GLF_FUZZED(-923.891), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)))))))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             subgroupAll(false);
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), ~ (~ (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), next_virtual_gid)))))], uint(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) | (_GLF_IDENTITY((2), 0 | ((_GLF_IDENTITY(2, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(28502) : 2))))))) | 0)), 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) + 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), ! (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4))), 1)))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4))), 1))))) << 0)))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   subgroupAll(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), true && (true)))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))), (int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) << 0))), int(ivec2(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))), (int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) << 0))), 1))) != 0, true && (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))), (int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | _GLF_IDENTITY((_injected_loop_counter), 0 + ((_injected_loop_counter)))))) << 0))) != 0))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = (((1 | 1) ^ 0) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                     return;
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, true))))
                      break;
                    }
                   else
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, true))));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), sqrt(0.0) + (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
}
