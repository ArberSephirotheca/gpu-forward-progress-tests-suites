#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(int(int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(24314u, 120489u, 56610u)))), (gl_NumWorkGroups) + uvec3(0u, 0u, 0u))) | _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u)), (uvec3(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, max(0u, 0u)), 0u)), 0u)) / uvec3(1u, 1u, 1u))))), gl_NumWorkGroups)).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), max(~ (0), ~ (0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)))) * workgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), max(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id))) : workgroup_size * workgroup_id)), (_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), max(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id))) : workgroup_size * workgroup_id))) | 0u);
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) * (1u & ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), 0u + (~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) * (1u & ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))))))))) * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sin(length(vec3(0.0, 0.0, 0.0))), 0.0))).y, mix(float(_GLF_FUZZED(vec2(2.0, -3.4).r)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sin(length(vec3(0.0, 0.0, 0.0))), 0.0))).y), bool(true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, determinant(mat3(0.0, determinant(mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), min(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))))))))), 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0))), 0.0))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(450.809), _GLF_FUZZED(79.97)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))))))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, determinant(mat3(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0))), 0.0, 0.0, abs(0.0))), 0.0))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, 0.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))))))))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (vec2(mat2(injectionSwitch, 0.0, 0.0))) + vec2(0.0, 0.0))).y))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2416.2610), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(866.317)), bvec2(true, false))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2416.2610), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(866.317)), bvec2(_GLF_IDENTITY(true, (true) && true), false))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1)))]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(866.317), clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317)))), bvec2(true, false))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1)))]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(866.317), clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317)))), bvec2(true, false)), clamp(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1)))]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(866.317), clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317)))), bvec2(true, false)), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1)))]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(866.317), clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317)))), bvec2(true, false)), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1)))]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(866.317), clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317)))), bvec2(true, false))))).x, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch), min(clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))))[_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1))), clamp(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1))), clamp(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1))), (false ? _GLF_FUZZED(80527) : _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1))))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1))))), _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1)))))]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(866.317), clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317)))), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), min(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), clamp(_GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))), _GLF_FUZZED(_GLF_IDENTITY(-2416.2610, 1.0 * (-2416.2610))))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 1 * (1)), 0, 1, 1)))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_IDENTITY(_GLF_FUZZED(866.317), _GLF_IDENTITY(clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317)), mix(float(clamp(_GLF_FUZZED(866.317), _GLF_IDENTITY(_GLF_FUZZED(866.317), float(mat4x3(_GLF_FUZZED(866.317), 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_FUZZED(866.317))), float(_GLF_FUZZED(-3578.9813)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bvec2(true, false))).x))) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(false, (false) || false), false)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0))), vec2(mat2x4((injectionSwitch) * mat2(1.0), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0)))).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0))), vec2(mat2x4((injectionSwitch) * mat2(1.0), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0)))).y : _GLF_FUZZED(-58.72))))) && (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), true && ((! (! (false)))))))), false || (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), true && ((! (! (_GLF_IDENTITY(false, true && (false))))))))))))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bool((false))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bool((false))))), ! (! ((! _GLF_IDENTITY((false), bool(bool((false))))))))))))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, abs(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0), (mat4x2(injectionSwitch.y, log(1.0), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, abs(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, abs(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0), (mat4x2(injectionSwitch.y, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (0 << _GLF_IDENTITY(int(0), int(0)))))) != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), int(7)), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, clamp(7, 7, 7))))), int(7))) + 0, ((_GLF_IDENTITY(int(7), int(7))) + 0) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(7), int(7)), min(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 | (7)), 0 | (_GLF_IDENTITY(7, 0 | (7))))), ~ (~ (int(_GLF_IDENTITY(7, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | (0)), 1 * (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> (0 & 62682)))) | (7)))))), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (~ (7)) - _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 ^ (0)))))))) ^ ((0 << _GLF_IDENTITY(int(6), int(6))) ^ 0)), 7))), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (true ? _GLF_IDENTITY(int(7), int(7)) : _GLF_FUZZED(_injected_loop_counter)))))), (1 << _GLF_IDENTITY(int(7), int(7))) >> 0), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(-49539))), int(7)), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7)), 1 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(0 | (int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (int(7)), 0 | (0 | (int(7))))))), int(7)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (int(7))), int(7)), (((0 ^ 1) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) - 0)))) >> _GLF_IDENTITY(int(7), int(7)))))), clamp(1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec2(int(7), 0))), ~ (~ (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(ivec2(int(7), 0)), (_GLF_IDENTITY(int(ivec2(int(7), 0)), (int(ivec2(int(7), 0))) | (_GLF_IDENTITY(int(ivec2(int(7), 0)), 0 | (int(ivec2(int(7), 0))))))) | (int(ivec2(int(7), 0))))))))), 1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ((-29493 >> -21139) & 0) | (_GLF_IDENTITY(int(7), int(7)))), 0, 0, _GLF_IDENTITY(1, (1) - 0))), int(int(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ((-29493 >> -21139) & 0) | (_GLF_IDENTITY(int(7), int(7)))), 0, 0, _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), ~ (~ ((1)))))) - 0)))))), ~ (~ (_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), min(int(7), int(7)))) >> 0), int(7)), 0, 0, 1)), int(ivec2(int(ivec4(_GLF_IDENTITY(int(7), int(7)), 0, 0, 1)), 0))))))))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), 1 * (1 << _GLF_IDENTITY(int(7), int(7)))), 1 << _GLF_IDENTITY(int(7), int(7))))) - 0, ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) << 0), int(_GLF_IDENTITY(7, (7) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), 1 * (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), 0 | (1 << _GLF_IDENTITY(int(7), int(7))))))) - 0))))) >> _GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(3), int(3)))), clamp(0, 0, 0)), 0)))))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(359.602), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2261.5111)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, tan(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(cos(vec2(0.0, 0.0)))))))) > injectionSwitch.y), false, true, false)))) || false))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) >> 0)))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))))))))));
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(3.2)) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), float(mat4x2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(tan(0.0), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(tan(0.0), 0.0, 1.0), vec3(1.0, 1.0, 0.0)))))), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(2.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 1.0, 1.0), (true ? mat2(0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat2(85.27, -848.211, -5143.2748, -57.94)))))), 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) * mat3(1.0))), dot(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.8)), bool(false))), 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))))).x > injectionSwitch.y))), false)))))), bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6495.8746)), float(1.0), bool(true)))), float(_GLF_FUZZED(-4.5)), bool(_GLF_IDENTITY(false, ! (! (false))))))) * (injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6495.8746)), float(1.0), bool(true)))), float(_GLF_FUZZED(-4.5)), bool(_GLF_IDENTITY(false, ! (! (false))))))) * (injectionSwitch))), vec2(1.0, 1.0) * (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6495.8746)), float(1.0), bool(true)))), float(_GLF_FUZZED(-4.5)), bool(_GLF_IDENTITY(false, ! (! (false))))))) * (injectionSwitch)))))).y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y) / 1.0)) - 0.0))))), true, true))))), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(2.5, (true ? _GLF_IDENTITY(2.5, mix(float(2.5), float(_GLF_FUZZED(-4.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : _GLF_FUZZED(-4.3)))), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), clamp(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), bvec2(bvec2(bvec2(true, false)))))).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-92.43 - 7.3))), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-299.434))))), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9027.5612)), float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.2)), bool(false)))), bool(true))), 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))).x > injectionSwitch.y))), false)))))), bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6495.8746)), float(1.0), bool(true)))), float(_GLF_FUZZED(-4.5)), bool(_GLF_IDENTITY(false, ! (! (false))))))) * (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, _GLF_IDENTITY(vec2(mat4(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat4(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))).y) / 1.0)) - 0.0))))), true, true)))))), bool(bool(! (false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 0.0, 0.0, 1.0, 1.0, exp(0.0))))[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))[0], _GLF_FUZZED(4412.8375)), vec2(_GLF_FUZZED(-9.9), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(2.5), (_GLF_IDENTITY(_GLF_FUZZED(2.5), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))[1]), bvec2(false, true))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(2.5, min(2.5, 2.5))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(2.5), float(mat4(_GLF_IDENTITY(_GLF_FUZZED(2.5), clamp(_GLF_FUZZED(2.5), _GLF_FUZZED(2.5), _GLF_FUZZED(2.5))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, abs(1.0), tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, sqrt(0.0)))), mix(float(_GLF_FUZZED(2.5)), float(_GLF_FUZZED(-29.52)), bool(false)))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0) + (vec3(1.0, 1.0, 1.0)))), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))).x > injectionSwitch.y))), false)))))), bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6495.8746)), float(1.0), bool(true)))), float(_GLF_IDENTITY(_GLF_FUZZED(-4.5), 1.0 * (_GLF_FUZZED(-4.5)))), bool(_GLF_IDENTITY(false, ! (! (false))))))) * (injectionSwitch)).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) / 1.0)), ((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) / 1.0))) * 1.0) - 0.0))))), true, true))))))))))))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), false || (bool(true))))), false)))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))), true))))))) || false)))));
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, true))) && (false))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, false, true))))); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0, clamp(0, 0, 0)) + (int(4))))), 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), clamp(_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(4, ~ (~ (4)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), max((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), (1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), max((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), (1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))))))), ~ (~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), max((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), (1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))))))), (~ ((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), max((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), (1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))))) | 0))))))) * 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))), clamp(_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))), _GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))), _GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), (_GLF_IDENTITY(int(4), 0 + (int(4)))) | 0))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))))))))), clamp(_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))))))))), _GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))), _GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) + 0)), 0 + (int(4))))), 0 ^ (((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (_GLF_IDENTITY(int(4), 0 + (int(4)))))))))))))), (_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), clamp((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), _GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(4), 0 + (int(4)))), int(ivec2((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), 0))), (1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4)))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))), clamp(_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))))[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])))).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch.y))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(0 + (int(0)), 0 ^ (0 + (int(0))))))), ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(0 + (int(0)), 0 ^ (0 + (int(0)))))))) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)), (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0))) << 0))) < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
                    {
                     for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
                        }
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) || false), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) || false))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, exp(0.0), abs(0.0), 1.0)), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(exp(0.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), exp(0.0), exp(0.0)), (clamp(_GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), exp(0.0), exp(0.0))) - 0.0)), abs(0.0), 1.0)), float(vec4(injectionSwitch.y, exp(0.0), abs(0.0), 1.0)), float(_GLF_IDENTITY(vec4(injectionSwitch.y, exp(_GLF_IDENTITY(0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))) * (_GLF_IDENTITY(0.0, min(0.0, 0.0))))), abs(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-527.214)), float(1.0), bool(true)))), vec4(mat4x2(vec4(injectionSwitch.y, _GLF_IDENTITY(exp(0.0), clamp(exp(0.0), exp(0.0), exp(0.0))), abs(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-527.214)), float(1.0), bool(true)))), 1.0, 0.0, 1.0, 1.0)))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(56300))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(6), int(6))) | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0)), bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 1))), 0), (_GLF_IDENTITY(min(0, 0), ~ (~ (min(0, 0))))) - 0)), _GLF_IDENTITY(false, true && (false)), true, false)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))), (true ? ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))) : _GLF_FUZZED(94550))))) >> 0))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) << 0), 0, 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, min(3, 3))))), int(_GLF_IDENTITY(3, int(ivec4(3, 1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, 0), ivec3(1, 1, 1) * (ivec3(0, 1, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(0, (0) ^ (0 & (-28655 / 77196))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), max(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))))) >> 0)))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), (bool((false))) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, false || (false))))), (bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec4(! (_GLF_IDENTITY(false, true && (false))), false, true, false))))), false || (false))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec4(! (_GLF_IDENTITY(false, true && (false))), false, true, false))))), false || (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_IDENTITY(false, false || (false)))))))) || false))))))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))))))), 1.0, 0.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), 0.0, abs(1.0), 1.0, 0.0), _GLF_IDENTITY((mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 0.0))), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))), 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0)), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 0.0, 0.0, abs(1.0), 1.0, 0.0)) * mat4(1.0), ((mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))))), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 0.0))), determinant(mat3(1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 0.0, 1.0))))), 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((vec3(-8417.2340, 7.3, 612.754) + vec3(-5.9, 90.68, -2.4)).z)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0)), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 0.0, 0.0, abs(1.0), 1.0, 0.0)) * mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 0.0, 0.0, abs(1.0), 1.0, 0.0), (mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0), vec3(1.0, 0.0, 0.0)), float(_GLF_IDENTITY(mat4x2(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x)), mat4x2(mat4x3(mat4x2(dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(761.936) : 1.0))), vec3(1.0, 0.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x))))))), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 0.0, 0.0, abs(1.0), 1.0, 0.0)) * mat4(1.0))), (false ? _GLF_FUZZED(4.3) : float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))))), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), 0.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8745.7739)), bool(false))))), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 0.0, 0.0, abs(1.0), 1.0, 0.0), (mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, sin(0.0), 1.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-0.7))), injectionSwitch.x), cos(0.0), 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(_GLF_IDENTITY(0.0, 0.0 + (0.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 0.0, 0.0, abs(1.0), 1.0, 0.0)) * mat4(1.0)))))) * _GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y))))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED((_injected_loop_counter | _injected_loop_counter)) : _injected_loop_counter ++)), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) / 1))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                          {
                           for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), true, _GLF_IDENTITY(true, (true) && true)), bvec3(bvec3(_GLF_IDENTITY(bvec3((true), true, _GLF_IDENTITY(true, (true) && true)), bvec3(bvec4(bvec3((true), true, _GLF_IDENTITY(true, (true) && true)), true)))))))) || false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(1), int(1))) | 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.6)), bool(false))), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.6)), bool(false))), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.6)), bool(false))), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
        }
      }
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(1 | 1, int(ivec2(1 | 1, 0)))) >> 0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false)))) || false), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true)))) || false))));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))) && true))))))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (0)), true && (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(0, 0 + (0))) * 1)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true)))), (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)), true, true, true)))))), bool(_GLF_IDENTITY(bvec3(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(true, (true) || false), true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)), true, true, true)))))), true, true), bvec3(bvec3(bvec3(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, true && (false)), true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, (false) && true), true, true)), true, true, true)))))), true, true)))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) / 1u)) | 0u), ~ (~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) / 1u)) | 0u), ~ (~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))))), ((_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) / 1u)) | 0u), ~ (~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))))) - 0u)) << 0u)), (subgroup_local_id + 1) | 0u)) % subgroup_size), uint(_GLF_IDENTITY(uvec3(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, int(ivec2(1, _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) << 0), 0))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) << 0u), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))) | (1)), 0), (ivec2(1, 0)) - ivec2(0, 0))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))) | (1)), 0), (ivec2(1, 0)) - ivec2(0, 0)))) | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))) | (1)), 0), (ivec2(1, 0)) - ivec2(0, 0))))))), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), int(ivec2(1, 1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0)))))), (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), int(ivec2(1, 1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0))))))) | 0))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0)))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0))))) >> 0))))), ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0))))))))) - 0u)) + 0u), (_GLF_IDENTITY(true, ! (! (true))) ? ~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, _GLF_IDENTITY(1, max(1, 1))))), 0)))) : _GLF_FUZZED(workgroup_base))), ~ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0, (false ? _GLF_FUZZED(-11663) : (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0))), 1u * (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0, (false ? _GLF_FUZZED(-11663) : (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)))))), ~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) << 0))), max(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) << 0))), max((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) << 0))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) << 0))))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) << 0))))))), _GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) >> 0u)))), min((_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(ivec2(1, 0)))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), _GLF_IDENTITY((ivec2(1, 0)), ivec2(1, 1) * (_GLF_IDENTITY(_GLF_IDENTITY((ivec2(1, 0)), min(_GLF_IDENTITY((ivec2(1, 0)), max((ivec2(1, 0)), (ivec2(1, 0)))), (ivec2(1, 0)))), (true ? (ivec2(1, 0)) : _GLF_FUZZED(ivec2(-5958, -83782)))))) - ivec2(0, 0))))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 1))), 0)))), ~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 0), clamp(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) - ivec2(0, 0)), ivec2(1, 0), ivec2(1, 0))), ivec2(0, _GLF_IDENTITY(0, ~ (~ (0)))) ^ (_GLF_IDENTITY(ivec2(1, 0), (_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, 1)))) / ivec2(1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), ~ (~ (int(ivec2(1, 0))))))))) - 0)), min((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1))))) / ivec2(1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / ivec2(1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))).x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 0), clamp(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) - ivec2(0, 0)), ivec2(1, 0), ivec2(1, 0))), _GLF_IDENTITY(ivec2(0, _GLF_IDENTITY(0, ~ (~ (0)))) ^ (_GLF_IDENTITY(ivec2(1, 0), (_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, 1)))) / ivec2(1, 1))), (ivec2(0, _GLF_IDENTITY(0, ~ (~ (0)))) ^ (_GLF_IDENTITY(ivec2(1, 0), (_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, 1)))) / ivec2(1, 1)))) | (ivec2(0, _GLF_IDENTITY(0, ~ (~ (0)))) ^ (_GLF_IDENTITY(ivec2(1, 0), (_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, 1)))) / ivec2(1, 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(int(ivec2(1, 0)), ~ (~ (int(ivec2(1, 0))))))))) - 0)), _GLF_IDENTITY(min((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1))))) / ivec2(1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / ivec2(1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))).x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0))), (true ? _GLF_IDENTITY(min((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1))))) / ivec2(1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / ivec2(1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))).x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0))), (_GLF_IDENTITY(min((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1))))) / ivec2(1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / ivec2(1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))).x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0))), max(min((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1))))) / ivec2(1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / ivec2(1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))).x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0))), min((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1))))) / ivec2(1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) / ivec2(1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat2x4(injectionSwitch, round(length(normalize(cos(0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))).x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)))))) * 1u) : _GLF_FUZZED(workgroup_size))))) / 1u), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 0)))))), ~ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id)), uint(uvec3(subgroup_local_id, 1u, 1u))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) | (max(subgroup_local_id, subgroup_local_id)))) >> 0u)))) + _GLF_IDENTITY(1, int(ivec2(1, 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), max((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), int(int(int(ivec2(1, 0))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))) - 0u)), ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) | ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), (_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (ivec2(1, 0)))) - ivec2(0, 0))))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 1))), 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) - 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (_GLF_IDENTITY(1, int(ivec2(1, 0)))) >> 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (_GLF_IDENTITY(1, int(ivec2(1, 0)))) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), max((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) | ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) - ivec2(0, 0))))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 1))), 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) - 0), 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0))))))) * 1) - 0)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), _GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), min(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, int(ivec2(1, 0)))))), max((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))) | ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) - ivec2(0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) ^ 0)))))))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 1))), 0)))), _GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) - 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), (73904u & 0u) + (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) - 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), min(~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) - 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)), ~ (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) - 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))) - 0)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + _GLF_IDENTITY(1, int(ivec2(1, 0))))))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))))))))), (subgroup_local_id + 1) | 0u)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), (~ (3u)) ^ 0u)))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u), (uvec3(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), max(ivec2(1, 0), ivec2(1, 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), ~ (~ (_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) >> 0)))))), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(1, 0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, clamp(3, 3, 3))))), (int(3)) << _GLF_IDENTITY(0, (0) * 1)), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | (ivec3(1, 0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(3))))))) << ivec3(0, 0, 0)))), 0)))), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), max(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(57585))))))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(1, 0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | (ivec3(1, 0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (0 << _GLF_IDENTITY(int(3), int(3))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(3))))))) << ivec3(0, 0, 0)))), 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))))), ~ (~ (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, int(ivec2(1, 0))))) | 0u))), (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(1, 0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | (ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))))) << ivec3(0, 0, 0)))), 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (~ (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), clamp(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), (int(3)) << 0)))), (_GLF_IDENTITY(ivec3(1, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)))), (ivec3(1, _GLF_IDENTITY(0, (0) >> 0), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | (ivec3(1, 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), int(ivec4((1 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1))) >> _GLF_IDENTITY(int(3), int(3))))))) << ivec3(0, 0, 0)))), 0)))), _GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), min(~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))))))))), ~ (subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0)))))))))))))), (subgroup_local_id + 1) | 0u)) % subgroup_size), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u)) >> uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), uint(uvec3(uint(uint(0u)), 0u, 1u)))))))) ^ (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), clamp(uint(7u), _GLF_IDENTITY(uint(7u), max(uint(7u), _GLF_IDENTITY(uint(7u), (false ? _GLF_FUZZED(subgroup_id) : uint(7u))))), uint(7u))))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, true && (false))))), ! (! (bool(bool(! (false))))))))) || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), true && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & ivec2(-41528, 13901).y)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -80862)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(normalize(2.2))))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) || false))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), false), false, true))), true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), bool(bvec2(! (_GLF_IDENTITY(true, bool(bool(true)))), true))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), false), false, true))), true, true)))), false, false, false)))));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
            }
           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), int(3)), (true ? 0 >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-77170))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-190.931) : injectionSwitch.x)) > injectionSwitch.y))))) || false))), (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0), injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(acosh(injectionSwitch)) : injectionSwitch)).y))))), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))), (0 ^ _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))))) - 0))); _injected_loop_counter ++)
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                 do
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                                  barrier();
                                }
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))) && true), ! (! (! (false))))))));
                            }
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true)))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))
              {
              }
             else
              {
               buf[virtual_gid] = 1;
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), true && ((_GLF_WRAPPED_LOOP(false)))) || false));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_IDENTITY(_GLF_IDENTITY(buf[next_virtual_gid] = 2, 0u ^ (buf[next_virtual_gid] = _GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, (2) / 1))))), 0u | _GLF_IDENTITY((buf[next_virtual_gid] = 2), _GLF_IDENTITY((0u ^ 0u) ^ ((buf[next_virtual_gid] = 2)), 0u + (_GLF_IDENTITY((0u ^ 0u) ^ ((buf[next_virtual_gid] = 2)), (true ? (0u ^ 0u) ^ ((buf[next_virtual_gid] = 2)) : _GLF_FUZZED(subgroup_id)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-764.096)), bool(false))))))))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
}
