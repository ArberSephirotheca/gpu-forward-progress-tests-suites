#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(sqrt(1.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 0.0))).y)))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)), 0 ^ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch)), injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) + 0u)), (subgroup_local_id) / 1u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), (~ (_GLF_IDENTITY(0u, ~ (~ (0u))))) | 0u))), (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (~ (0u)) | 0u), (~ (0u)) | 0u)))) / ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), ~ (~ (uint(2u)))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (2u) | (_GLF_IDENTITY(2u, uint(uvec4(2u, 0u, 0u, 0u))))))))), 0u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), uint(uvec2(_GLF_IDENTITY((0u), 1u * ((0u))), 0u)))) * 1u), (~ (0u)) | _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(116240u) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, 0u | (0u)))), 0u)))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 0u)) << uvec2(0u, 0u))), (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), _GLF_IDENTITY((_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u | ((_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))), 0u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 0u)) << uvec2(0u, 0u)))) - 0u)), _GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), max(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), _GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))))))))) + (subgroup_local_id))))))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u)))), ((_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u))))) + 0u)) + (subgroup_local_id)))))))) ^ 0u, ((workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, (true ? (subgroup_id) / 1u : _GLF_FUZZED(floatBitsToUint(-443.562))))) / 1u)) * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), _GLF_IDENTITY((_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))), ((_GLF_IDENTITY(~ (0u), 1u * (~ (0u))))) | ((_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))))) | 0u))))) + (subgroup_local_id))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u))))) + (subgroup_local_id))), min(min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u))))) + (subgroup_local_id))), min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u))))) + (subgroup_local_id))))))))))), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)))) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u))))) + (subgroup_local_id))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u))))) + (subgroup_local_id))), min(min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(104248u) : _GLF_IDENTITY(~ (0u), 1u * (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u))))))), 1u * (~ (0u)))) | 0u))))) + _GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(uint(uvec4((subgroup_local_id), 1u, 0u, 1u)), (true ? uint(uvec4((subgroup_local_id), 1u, 0u, 1u)) : _GLF_FUZZED(num_workgroup)))))), min(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))) | 0u))))) + (subgroup_local_id)))))))))))) >> 0u)) ^ 0u) / 1u));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), _GLF_IDENTITY((~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))), max((~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))))) | (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))))))))))) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) || false))))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))), (injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9.0), _GLF_FUZZED(9849.6461)), bvec2(false, false))).y))));
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) + 0), 0u | (subgroup_local_id + 1)) < subgroup_size)
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), false, false)))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 0.0))))), true && (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, true, true)), ! (! (bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, true, true)))))), true)), bool(bool(bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), true))))))))))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false) && ((injectionSwitch.x < injectionSwitch.y))), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))), true, true, false)))))))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), ((injectionSwitch.x < injectionSwitch.y)) || false))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))))) || false)))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     switch(_GLF_SWITCH(0))
                      {
                       case 34:
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       bvec2 _GLF_SWITCH_0_0v;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         barrier();
                        }
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(vec2(_GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0))))), vec2(0.0, 0.0) + (vec2(_GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0))))))))))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false)))) && true));
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(-317.242)), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))).y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(-317.242)), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0)), min(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0))))), injectionSwitch)).x, tan(0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0)), min(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0))))), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0)), min(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0))))), injectionSwitch)).x) - 0.0))) < injectionSwitch.y)), true)))).y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(-317.242)), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), ((mat2(1.0) * (injectionSwitch))) * mat2(1.0))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))).y)))))) || false)) && true)))
                            {
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                         do
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-869.012)), bool(false))), injectionSwitch.y))))));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       case 88:
                       do
                        {
                         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, false, false))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 44806)); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(min(-5.1, 226.431)) : injectionSwitch.y))))))
                                  barrier();
                                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                              }
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         do
                                          {
                                           barrier();
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                     else
                                      {
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 barrier();
                                                }
                                               else
                                                {
                                                }
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                           barrier();
                                          }
                                         else
                                          {
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                            barrier();
                          }
                         else
                          {
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(44765)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.9)), bvec2(true, false))).y))))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))
                          {
                           for(int _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v; true; mat4x2((false ? mat4(-4.8, -2.1, 501.268, -6718.5038, -58.26, 283.634, 3.2, 134.980, -56.84, -5304.7248, -43.52, -775.479, 6407.8967, -13.27, -0.9, 1.6) : mat4(_GLF_IDENTITY(-1.1, max(-1.1, -1.1)), -45.23, -6314.0500, -3568.1648, _GLF_IDENTITY(-65.57, (_GLF_IDENTITY(-65.57, (-65.57) + 0.0)) - 0.0), 554.238, _GLF_IDENTITY(_GLF_IDENTITY(8845.0557, float(mat4(8845.0557, 0.0, sqrt(0.0), 1.0, 1.0, log(1.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), sin(0.0), 1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0))), min(_GLF_IDENTITY(8845.0557, float(mat4(8845.0557, 0.0, sqrt(0.0), 1.0, 1.0, log(1.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), sin(0.0), 1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(8845.0557, float(mat4(8845.0557, 0.0, sqrt(0.0), 1.0, 1.0, log(1.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), sin(0.0), 1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0))))), -0.9, 9907.1812, -3142.9139, 6.9, 970.590, 79.01, 6.1, -1.9, -73.71))))
                            {
                             uvec4(_GLF_IDENTITY(191243u, (191243u) | (0u | 0u)), 111214u, 165717u, 160147u);
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                          }
                                        }
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               barrier();
                                              }
                                            }
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               barrier();
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
                                            barrier();
                                          }
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (! (! (_GLF_DEAD(false))))))))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 barrier();
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             do
                                              {
                                               barrier();
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                            }
                                           do
                                            {
                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(_GLF_SWITCH_0_2v, _injected_loop_counter, false)) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) ^ 0), 4))), int(4)))))); _injected_loop_counter ++)
                                              {
                                               bitfieldInsert(uvec4(150223u, 171795u, 29020u, 179877u), uvec4(119210u, 150778u, 76869u, 75269u), _GLF_IDENTITY(atomicCompSwap(_GLF_SWITCH_0_2v, _GLF_SWITCH_0_1v, -75855), (atomicCompSwap(_GLF_SWITCH_0_2v, _GLF_SWITCH_0_1v, -75855)) << 0), int(subgroup_local_id));
                                               if(_GLF_DEAD(false))
                                                barrier();
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).y))));
                                           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(_GLF_DEAD(false)))))))
                                            barrier();
                                          }
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                             (mat2(mat4x2(47.45, -0.9, 7196.1542, _GLF_IDENTITY(_GLF_IDENTITY(-0.4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -0.4 : _GLF_FUZZED(0.5))), mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(36046, (true ? 36046 : _GLF_FUZZED((_GLF_SWITCH_0_1v ^ _injected_loop_counter))))))), float(-0.4), bool(true))), -9259.1927, -54.45, 1.1, 25.08)) / -6.5);
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-1803.2502))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-1803.2502))), (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-1803.2502)))) / 1.0)) && true)))))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                                {
                                 barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(2270.9085), _GLF_FUZZED(-9.1)), bvec2(false, false))))).x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))
                              barrier();
                             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               bvec2(true, false);
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), false, true, true))))) || false)))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6)))) >> 0), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0)))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0)))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))), _GLF_IDENTITY(int(ivec3(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))), 1, 0)), (int(ivec3(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))), 1, 0))) ^ 0)))), 1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))))))))), max(~ ((_GLF_IDENTITY(1, int(ivec2(1, 1))) << _GLF_IDENTITY(int(6), int(6)))), ~ ((1 << _GLF_IDENTITY(int(6), int(6)))))))), ((1 << _GLF_IDENTITY(int(6), int(6)))) >> 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY((6), min((6), _GLF_IDENTITY((6), (_GLF_IDENTITY((6), 0 | ((6)))) ^ 0))) << 0), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(6, (6) << 0), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(6, (6) << 0), 0, 0, 1))))))), int(6)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << 0), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(6, (6) << 0), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(6, (6) << 0), 0, 0, 1))))))), int(6)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(_GLF_IDENTITY(6, min(6, 6)))), clamp(int(int(_GLF_IDENTITY(6, min(6, 6)))), int(int(_GLF_IDENTITY(6, min(6, 6)))), int(int(_GLF_IDENTITY(6, min(6, 6))))))), (6) << 0)), int(6)) : _GLF_FUZZED(atomicXor(_GLF_SWITCH_0_1v, _GLF_SWITCH_0_1v))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5))))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))))))), ! (! ((_injected_loop_counter != (_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 + (5))))))))), bool(bvec3(_GLF_IDENTITY(! (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5)))), (! (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) + (0 >> _GLF_IDENTITY(int(0), int(0))))))) && true), true, true)))))); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     do
                                      {
                                       barrier();
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                   else
                                    {
                                     barrier();
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                                        barrier();
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                              }
                             ivec2(45524, -25049);
                             {
                              if(_GLF_DEAD(false))
                               barrier();
                              do
                               {
                                if(_GLF_DEAD(false))
                                 {
                                  for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
                                   {
                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                     {
                                      barrier();
                                     }
                                   }
                                 }
                                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                  if(_GLF_DEAD(false))
                                   barrier();
                                 }
                                else
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(false))
                                   {
                                   }
                                  else
                                   {
                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                     {
                                      vec3(0.5, -433.593, _GLF_IDENTITY(-3.3, max(-3.3, -3.3)));
                                     }
                                    if(_GLF_DEAD(false))
                                     barrier();
                                   }
                                 }
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_DEAD(false))
                                   barrier();
                                  barrier();
                                 }
                               }
                              while(_GLF_WRAPPED_LOOP(false));
                              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))))
                               barrier();
                              if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
                               {
                                if(_GLF_DEAD(false))
                                 barrier();
                                do
                                 {
                                  if(_GLF_DEAD(false))
                                   {
                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                     {
                                      if(_GLF_WRAPPED_IF_TRUE(true))
                                       {
                                        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                         {
                                         }
                                        else
                                         {
                                          if(_GLF_DEAD(false))
                                           barrier();
                                         }
                                       }
                                      else
                                       {
                                       }
                                     }
                                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                     {
                                      barrier();
                                      if(_GLF_DEAD(false))
                                       barrier();
                                     }
                                    else
                                     {
                                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                       barrier();
                                     }
                                   }
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                                if(_GLF_DEAD(false))
                                 {
                                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) * 1)); _injected_loop_counter ++)
                                   {
                                    if(_GLF_DEAD(false))
                                     barrier();
                                    do
                                     {
                                      barrier();
                                     }
                                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   }
                                 }
                                barrier();
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    barrier();
                                   }
                                  else
                                   {
                                   }
                                 }
                               }
                              if(_GLF_DEAD(false))
                               barrier();
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                if(_GLF_DEAD(false))
                                 {
                                  do
                                   {
                                    if(_GLF_WRAPPED_IF_TRUE(true))
                                     {
                                      barrier();
                                     }
                                    else
                                     {
                                      if(_GLF_DEAD(false))
                                       barrier();
                                     }
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                               }
                              else
                               {
                               }
                              mat2x4(-533.364, -3065.4511, 20.43, 6.8, -56.19, _GLF_IDENTITY(_GLF_IDENTITY(-8.1, mix(float(-8.1), float(_GLF_FUZZED(7.9)), bool(false))), (true ? _GLF_IDENTITY(-8.1, (-8.1) / 1.0) : _GLF_FUZZED(-230.235))), _GLF_IDENTITY(2.5, max(2.5, _GLF_IDENTITY(2.5, (2.5) - 0.0))), 6.3);
                              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                               {
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                  do
                                   {
                                    if(_GLF_DEAD(false))
                                     barrier();
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                                else
                                 {
                                  uvec2(21083u, 39082u);
                                 }
                               }
                              if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                               barrier();
                              mix(52.34, _GLF_IDENTITY(_GLF_IDENTITY(distance(vec2(-34.36, 6.2), _GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, _GLF_IDENTITY(7.2, max(7.2, _GLF_IDENTITY(7.2, mix(float(_GLF_FUZZED(-9.8)), float(7.2), bool(true))))), 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, _GLF_IDENTITY((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), mix(float(_GLF_FUZZED(1.0)), float((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)))), bool(true))))))), 1.0, sqrt(0.0)), min(vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, _GLF_IDENTITY(7.2, max(7.2, _GLF_IDENTITY(7.2, mix(float(_GLF_FUZZED(-9.8)), float(7.2), bool(true))))), 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, _GLF_IDENTITY((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), mix(float(_GLF_FUZZED(1.0)), float((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)))), bool(true))))))), 1.0, sqrt(0.0)), vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, _GLF_IDENTITY(7.2, max(7.2, _GLF_IDENTITY(7.2, mix(float(_GLF_FUZZED(-9.8)), float(7.2), bool(true))))), 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, _GLF_IDENTITY((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), mix(float(_GLF_FUZZED(1.0)), float((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)))), bool(true))))))), 1.0, sqrt(0.0)))), vec4(mat2x4(vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_IDENTITY(_GLF_FUZZED(0.6), (_GLF_FUZZED(0.6)) / 1.0) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(_GLF_IDENTITY(0.6, max(0.6, 0.6))) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))))), 1.0, sqrt(0.0)), 0.0, 0.0, 0.0, 0.0)))))), (distance(vec2(-34.36, 6.2), vec2(4.3, _GLF_IDENTITY(7.2, (_GLF_IDENTITY(false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), clamp(false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), float(_GLF_FUZZED(6044.0407)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) - _GLF_ZERO(0.0, injectionSwitch.x)), (true ? _GLF_IDENTITY(distance(vec2(-34.36, 6.2), _GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, _GLF_IDENTITY((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), 0.0, sqrt(0.0), abs(1.0)), mat2(0.0, 0.0, 0.0, 0.0) + (mat2((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), 0.0, sqrt(0.0), abs(1.0))))), (false ? _GLF_FUZZED(0.9) : float(_GLF_IDENTITY(mat2((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), 0.0, sqrt(0.0), abs(1.0)), mat2(0.0, 0.0, 0.0, 0.0) + (mat2((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), 0.0, sqrt(0.0), abs(1.0)))))))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, _GLF_IDENTITY(7.2, max(7.2, _GLF_IDENTITY(7.2, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-9.8, max(-9.8, _GLF_IDENTITY(-9.8, (-9.8) - 0.0))))), float(7.2), bool(true))))), 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, _GLF_IDENTITY((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(_GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), clamp(_GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), mix(float(_GLF_FUZZED(1.0)), float((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)))), bool(true))))))), 1.0, sqrt(0.0)), min(vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, _GLF_IDENTITY(7.2, max(7.2, _GLF_IDENTITY(7.2, mix(float(_GLF_FUZZED(-9.8)), float(7.2), bool(true))))), 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, _GLF_IDENTITY((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), mix(float(_GLF_FUZZED(1.0)), float((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)))), bool(true))))))), 1.0, sqrt(0.0)), vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, _GLF_IDENTITY(7.2, max(7.2, _GLF_IDENTITY(7.2, mix(float(_GLF_FUZZED(-9.8)), float(7.2), bool(true))))), 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, _GLF_IDENTITY((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))), mix(float(_GLF_FUZZED(1.0)), float((false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)))), bool(true))))))), 1.0, sqrt(0.0)))), vec4(mat2x4(vec4(_GLF_IDENTITY(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), max(vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_IDENTITY(_GLF_FUZZED(0.6), (_GLF_FUZZED(0.6)) / 1.0) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), vec2(4.3, _GLF_IDENTITY(7.2, (false ? _GLF_FUZZED(_GLF_IDENTITY(0.6, max(0.6, 0.6))) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))))), 1.0, sqrt(0.0)), 0.0, 0.0, 0.0, 0.0)))))), (distance(_GLF_IDENTITY(vec2(-34.36, 6.2), min(vec2(-34.36, 6.2), vec2(-34.36, 6.2))), vec2(4.3, _GLF_IDENTITY(7.2, (_GLF_IDENTITY(false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), clamp(false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2)), false ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(7.2, clamp(7.2, 7.2, 7.2))))), float(_GLF_FUZZED(6044.0407)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) - _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(atan(-872.040, 4.9)))), false);
                              vec2 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
                              mat3x2(mat4x3(2.3, _GLF_IDENTITY(2.1, (2.1) / 1.0), -4.8, 0.5, _GLF_IDENTITY(-4.8, clamp(-4.8, -4.8, -4.8)), -6.2, -1772.3627, _GLF_IDENTITY(5.6, mix(float(_GLF_IDENTITY(5.6, clamp(5.6, _GLF_IDENTITY(5.6, mix(float(_GLF_FUZZED(3.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(5.6, mix(float(_GLF_FUZZED(64.53)), float(5.6), _GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(true))))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(-3624.9041)), min(float(_GLF_FUZZED(-3624.9041)), float(_GLF_FUZZED(-3624.9041)))), float(_GLF_IDENTITY(5.6, float(_GLF_IDENTITY(mat3(5.6, tan(0.0), 0.0, sqrt(log(1.0)), 0.0, 0.0, 1.0, 1.0, log(exp(0.0))), transpose(transpose(mat3(5.6, tan(0.0), 0.0, sqrt(log(1.0)), 0.0, 0.0, 1.0, 1.0, log(exp(0.0))))))))), _GLF_IDENTITY(bool(true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY((bool(bool(true))) && true, bool(bool((bool(bool(true))) && true)))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY((bool(bool(true))) && true, bool(bool((bool(bool(true))) && true)))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY((bool(bool(true))) && true, bool(bool((bool(bool(true))) && true)))))))), bool(bool((! (_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY((bool(bool(true))) && true, bool(bool((bool(bool(true))) && true)))))))))))) || false)) || false))))), bool(true))), _GLF_IDENTITY(5.6, (_GLF_IDENTITY(5.6, sqrt(0.0) + (5.6))) * exp(0.0))))), float(_GLF_IDENTITY(_GLF_FUZZED((- _GLF_IDENTITY(-6.7, mix(float(_GLF_FUZZED(-4.9)), float(-6.7), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))))), mix(float(_GLF_FUZZED(-1.4)), float(_GLF_FUZZED((- _GLF_IDENTITY(-6.7, mix(float(_GLF_FUZZED(-4.9)), float(-6.7), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))))))), bool(true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) || false)))), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), 68.75, _GLF_IDENTITY(-8.3, _GLF_IDENTITY(min(-8.3, _GLF_IDENTITY(-8.3, float(mat3x4(-8.3, 0.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED((vec4(8.1, 49.31, 0.9, 0.9) / -47.13)) : vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0))))), 1.0)))), (min(-8.3, _GLF_IDENTITY(_GLF_IDENTITY(-8.3, (-8.3) / 1.0), float(mat3x4(-8.3, 0.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (1.0) + sqrt(0.0))), 1.0))))) - 0.0)), -6902.4021, _GLF_IDENTITY(756.368, clamp(_GLF_IDENTITY(756.368, (true ? _GLF_IDENTITY(756.368, 0.0 + (756.368)) : _GLF_FUZZED(7.8))), _GLF_IDENTITY(756.368, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))) ? _GLF_FUZZED(cos(-476.044)) : 756.368)), _GLF_IDENTITY(756.368, max(756.368, 756.368))))));
                              if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
                               barrier();
                              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                               {
                                if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), false, false))))))
                                 {
                                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                   {
                                    barrier();
                                   }
                                 }
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   barrier();
                                  do
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec4(bvec2((true), true), true, false)))), (bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec4(bvec2((true), true), true, false))))) || false)) && true))))))
                                     {
                                     }
                                    else
                                     {
                                      if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, ! (! (true))), false)))))))
                                       barrier();
                                     }
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                  do
                                   {
                                    barrier();
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                               }
                              int _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
                              if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
                               {
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 barrier();
                                barrier();
                               }
                              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               {
                               }
                              else
                               {
                                uint(_GLF_IDENTITY(-6.5, clamp(-6.5, _GLF_IDENTITY(-6.5, clamp(-6.5, _GLF_IDENTITY(-6.5, (false ? _GLF_FUZZED(-2.4) : _GLF_IDENTITY(-6.5, mix(float(-6.5), float(_GLF_FUZZED(-2.6)), bool(false))))), -6.5)), -6.5)));
                               }
                              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                               {
                                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                 }
                                else
                                 {
                                  if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) && true)))
                                   {
                                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                     {
                                      if(_GLF_DEAD(false))
                                       {
                                        if(_GLF_WRAPPED_IF_TRUE(true))
                                         {
                                          barrier();
                                         }
                                        else
                                         {
                                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                           barrier();
                                         }
                                       }
                                     }
                                    else
                                     {
                                     }
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                     }
                                    else
                                     {
                                      do
                                       {
                                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                         {
                                          for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                                           {
                                            barrier();
                                           }
                                         }
                                        if(_GLF_DEAD(false))
                                         {
                                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                           {
                                            do
                                             {
                                              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bool(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), ! (! (! (_GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bool(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))))))), (injectionSwitch.x < injectionSwitch.y))))
                                               {
                                                barrier();
                                               }
                                              else
                                               {
                                               }
                                             }
                                            while(_GLF_WRAPPED_LOOP(false));
                                           }
                                          if(_GLF_DEAD(false))
                                           barrier();
                                         }
                                       }
                                      while(_GLF_WRAPPED_LOOP(false));
                                     }
                                    barrier();
                                   }
                                 }
                               }
                              uvec4 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v;
                              if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                               {
                               }
                              else
                               {
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(false))
                                   {
                                   }
                                  else
                                   {
                                    if(_GLF_DEAD(false))
                                     barrier();
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                      if(_GLF_WRAPPED_IF_FALSE(false))
                                       {
                                       }
                                      else
                                       {
                                        do
                                         {
                                          if(_GLF_DEAD(false))
                                           barrier();
                                         }
                                        while(_GLF_WRAPPED_LOOP(false));
                                       }
                                     }
                                    else
                                     {
                                      if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                                       {
                                        barrier();
                                       }
                                      else
                                       {
                                       }
                                      if(_GLF_DEAD(false))
                                       barrier();
                                     }
                                   }
                                 }
                               }
                             }
                            }
                          }
                         else
                          {
                          }
                        }
                       case 0:
                       case 69:
                       case 86:
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                       else
                        {
                        }
                       case 31:
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                barrier();
                               for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), ~ (~ (~ (int(3)))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0)), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)), (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1))) | (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0)), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)), (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1))) | (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0)), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)), (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1))) | (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)))))), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0)), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)), (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1))) | (~ (ivec2(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) ^ 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1))))))))) >> ivec2(0, 0)) : _GLF_FUZZED(findMSB((ivec2(70915, -28233) & _injected_loop_counter))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       case 37:
                       case 89:
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(false))))), ((! (_GLF_IDENTITY(false, bool(bool(false)))))) || false))))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                }
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                    {
                                     barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       case 61:
                       int i = 0;
                       case 81:
                       if(_GLF_DEAD(false))
                        barrier();
                       case 17:
                       if(_GLF_DEAD(false))
                        barrier();
                       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4)))))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) | (int(1))), 1 * (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       break;
                       case 28:
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
                              {
                               for(int _injected_loop_counter = (0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 barrier();
                                }
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     (uvec3(21506u, 1150u, 184060u) , mat3x2(0.5, _GLF_IDENTITY(_GLF_IDENTITY(7201.1613, min(7201.1613, 7201.1613)), mix(float(_GLF_FUZZED(-23.99)), float(_GLF_IDENTITY(7201.1613, min(7201.1613, 7201.1613))), bool(true))), 0.8, 8.5, 3.5, 48.77));
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       case 67:
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             barrier();
                            }
                           do
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             mat2(3.5, 696.708, 4070.1867, 8.3);
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       default:
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))) || false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             do
                              {
                               for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 1;
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) - 0, ((64) - 0) | (_GLF_IDENTITY((64) - 0, 1 * (_GLF_IDENTITY((64) - 0, ((64) - 0) | 0)))))), 4);
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
