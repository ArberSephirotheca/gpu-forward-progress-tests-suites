#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 uint _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_12 {
 uvec2 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 vec4 _f3;
 float _f4;
 mat4 _f5;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
} ;

struct _GLF_struct_14 {
 int _f0;
 mat3x2 _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
} ;

struct _GLF_struct_9 {
 mat2x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
 mat2x4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 vec2 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 bvec2 _f1;
 ivec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_15 {
 uint subgroup_local_id;
 mat4x2 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_10 _f2;
 uvec3 _f3;
 _GLF_struct_14 _f4;
 float _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_2 {
 bool _f0;
 ivec2 _f1;
 int _f2;
 mat2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_1 {
 uint _f0;
 ivec3 _f1;
 uvec4 _f2;
 mat3x4 _f3;
 bvec3 _f4;
 uvec2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 uvec2 _f1;
 ivec2 _f2;
 vec4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 mat3x2 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 uint workgroup_id;
 _GLF_struct_3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - _GLF_IDENTITY(0, ~ (~ (0)))) != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 do
  {
   do
    {
     GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x = subgroup_id;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bool((false) || false))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  continue;
                }
               continue;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bvec3(! (_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(false, ! (! (false))), false)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), (float(float(injectionSwitch.x))) * 1.0)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), ~ (~ (int(_GLF_IDENTITY(1, (1) << 0))))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.y))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(gl_SubgroupInvocationID, mat4x2(1.0), _GLF_struct_6(mat2x4(1.0), _GLF_struct_5(mat2(1.0), bvec2(true), ivec4(1), mat4x2(1.0))), _GLF_struct_10(_GLF_struct_7(bvec2(true), mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(7.3)), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(7.3), min(_GLF_FUZZED(7.3), _GLF_FUZZED(7.3)))), float(_GLF_IDENTITY(mat3x4(float(_GLF_FUZZED(7.3)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x4(-3.0, -732.888, 5386.6134, -855.262, -0.8, -60.59, 7.8, -211.211, 0.8, 6084.4499, 5.4, 2253.2979)) : mat3x4(float(_GLF_FUZZED(7.3)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))))) + 0.0), bool(false)))) / 1.0))), vec2(1.0), _GLF_struct_8(ivec3(1), mat2x4(1.0), vec4(1.0)), _GLF_struct_9(mat2x3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3.1)), float(1.0), bool(true))), 1.0, cos(0.0)))), 1.0))), ivec3(1))), uvec3(1u), _GLF_struct_14(1, mat3x2(1.0), _GLF_struct_11(mat3x2(1.0)), _GLF_struct_12(uvec2(1u), uvec3(1u), mat4x3(1.0), vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-939.496)), bool(false)))), 1.0, mat4(1.0)), _GLF_struct_13(1u, bvec3(true))), 1.0, ivec3(1));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), bool(bvec2(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), true)))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(false, (false) || false)))))
          barrier();
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 & 1) * (_injected_loop_counter)) < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = _GLF_struct_replacement_15.subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u + (gl_WorkGroupSize.x));
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(vec2(1.0), gl_WorkGroupID.x, _GLF_struct_3(bvec4(true), _GLF_struct_0(mat4x2(1.0), uvec2(1u), ivec2(1), _GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 + (~ (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), (false ? _GLF_FUZZED(ivec2(37403, 85607)) : ivec2(0, 0))))), 0)), 0, _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), (false ? _GLF_FUZZED(-26722) : (0)))), 0), min(ivec4(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))) ? _GLF_FUZZED(ivec2(37403, 85607)) : ivec2(0, 0))))), 0)), 0, _GLF_IDENTITY(0, (0) | (0)), 0), ivec4(_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), int(_GLF_IDENTITY(ivec2(0, 0), (false ? _GLF_FUZZED(ivec2(37403, 85607)) : ivec2(0, 0))))), 0)), 0, _GLF_IDENTITY(0, (0) | (0)), 0))), (true ? ivec4(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 0), (false ? _GLF_FUZZED(ivec2(37403, 85607)) : ivec2(0, 0))))), 0)), 0, 0, 0) : _GLF_FUZZED(ivec4(-3193, 50466, 23045, 49235)))) ^ (ivec4(1)))), _GLF_struct_1(1u, _GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) | (ivec3(1))), uvec4(1u), mat3x4(1.0), bvec3(true), uvec2(1u), uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, _GLF_IDENTITY(1u, (1u) / 1u)), (max(1u, _GLF_IDENTITY(1u, (1u) / 1u))) | (max(1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) + 0u))), mat3x2(1.0), _GLF_struct_2(true, ivec2(1), 1, mat2(1.0), ivec3(1))));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(5), int(5))), (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), 0 ^ (1 << _GLF_IDENTITY(int(5), int(5)))))) ^ 0)))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))))) * 1))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(cos(-3.1))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))) && true))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0))), 0.0)), abs(0.0), 0.0)), dot(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1895.8603)), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(true))), 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), ! (! ((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6170.8175), _GLF_FUZZED(-7.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0))))))))), max(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0))))))))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) * _GLF_ONE(1.0, injectionSwitch.y)))))) && true)))))))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), abs(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), abs(0.0), 1.0)))))))), vec3(0.0, abs(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(72685))), float(0.0), bool(true)))), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), _GLF_IDENTITY(vec3(0.0, abs(0.0), 0.0), (vec3(0.0, abs(0.0), 0.0)) - vec3(0.0, 0.0, 0.0))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))), bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), abs(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), abs(0.0), 1.0)))))))), vec3(0.0, abs(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(72685))), float(0.0), bool(true)))), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), _GLF_IDENTITY(vec3(0.0, abs(0.0), 0.0), (vec3(0.0, abs(0.0), 0.0)) - vec3(0.0, 0.0, 0.0))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), (bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), abs(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), abs(0.0), 1.0)))))))), vec3(0.0, abs(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(72685))), float(0.0), bool(true)))), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), _GLF_IDENTITY(vec3(0.0, abs(0.0), 0.0), (vec3(0.0, abs(0.0), 0.0)) - vec3(0.0, 0.0, 0.0))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))))) && true)))), ! (! ((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, exp(0.0)), vec2(0.0, 1.0)), dot(vec2(0.0, exp(0.0)), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, abs(sqrt(1.0)), 0.0, 1.0))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-907.291) : 0.0))), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.0), _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-5.4) : (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(8.3)), bvec2(true, false))).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.0), _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-5.4) : (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(8.3)), bvec2(true, false))).y) / 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))))))))))), ! (! (! (! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-8.1) : _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))))))), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, _GLF_IDENTITY(abs(0.0), max(_GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(-84.35)), float(abs(0.0)), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), abs(0.0))), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), ! (! ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), sqrt(1.0), 1.0, log(1.0)))))))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0))))))))), mix(float(_GLF_FUZZED(210.159)), float(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))), transpose(transpose(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(1.0, 1.0, abs(1.0)), vec3(0.0, abs(0.0), 0.0)))))))))), bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)) && true))))))) && true)))))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(false, false, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w = _GLF_struct_replacement_4.workgroup_id;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, min(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id)).w, (_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w, uint(uvec4(workgroup_size * GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) << 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y) - 0u), uint(uint(workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y))) + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, _GLF_IDENTITY(min(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id))), (true ? _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id), ((uvec4(117790u, 44027u, 70462u, 140501u) & uvec4(0u, 0u, 0u, 0u)) & uvec4(140683u, 95630u, 190834u, 94656u)) | (_GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id))))) : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id)))) - uvec4(0u, 0u, 0u, 0u))), (min(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id))), (true ? _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id), ((uvec4(117790u, 44027u, 70462u, 140501u) & uvec4(0u, 0u, 0u, 0u)) & uvec4(140683u, 95630u, 190834u, 94656u)) | (_GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id))))) : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id)))) - uvec4(0u, 0u, 0u, 0u)))) | uvec4(0u, 0u, 0u, 0u))).y;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, min(workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y) | (workgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y)))) + ((GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1)) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), int(ivec4(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(int(3), int(3)), 0)))), ((0 << _GLF_IDENTITY(int(3), int(3)))) - 0), 1, 1, 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec3(_injected_loop_counter != 1, true, false)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(41.17)), bool(false))) > injectionSwitch.y))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-78.46, 0.9)))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), false)))))), false, false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-78.46, 0.9)))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), false)))))), false, false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2x3(mat2(1.0) * (injectionSwitch), 1.0, 1.0, 0.0, 0.0))))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, true)))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec2(_GLF_IDENTITY(! (false), ! (! (! (false)))), false))), true, true)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec2(_GLF_IDENTITY(! (false), ! (! (! (false)))), false))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec2(_GLF_IDENTITY(! (false), ! (! (! (false)))), false))), true, true))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), ! (! (bool(_GLF_IDENTITY(false, false || (false))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-2.6 / (false ? -19.15 : 3.9))), _GLF_FUZZED(5468.1396)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)) || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))).x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(! (! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true)))))))), (! (! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true)))))), ! (! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y, true))), true && (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true)))))))))))))) && true))))))))
    {
     atomicStore(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, abs(1.0))), (float(vec2(injectionSwitch.y, abs(1.0)))) - 0.0)))) && true))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, abs(1.0))), (float(vec2(injectionSwitch.y, abs(1.0)))) - 0.0)))) && true)))), bool(bvec4(! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, abs(1.0))), (float(vec2(injectionSwitch.y, abs(1.0)))) - 0.0)))) && true)))), true, true, true)))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false))))))))) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false))))))))) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false)))), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y) && true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, true && (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y)), (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1, (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1) | (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1)) < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + _GLF_IDENTITY(1, min(1, 1)) < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y, max(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y, min(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y, GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y)), GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y)) + 1) | (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1)) < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || _GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   int i = 0;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, false, false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, abs(1.0), 1.0), vec4(mat3x4(vec4(injectionSwitch.x, 1.0, abs(1.0), 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))) > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            break;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, int(ivec3(4, 1, 0))))), 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9358.4148)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))))))), _GLF_IDENTITY(bool(bvec3(((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9358.4148)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))))))), true, false)), bool(bvec4(bool(bvec3(((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9358.4148)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))))))), true, false)), true, true, true)))) && true) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0)))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false || ((_GLF_DEAD(false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 0.0), (mat3x2(injectionSwitch.x, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 0.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y))))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
