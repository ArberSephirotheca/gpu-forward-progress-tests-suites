#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(true, true && (true)))))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bool(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))) || false))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bool(! (! (true)))), ! (! (bool(bool(! (! (true))))))))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bool(! (! (true)))), ! (! (bool(bool(! (! (true)))))))))), _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bool(! (! (true)))), ! (! (bool(bool(! (! (true)))))))))), true)), ! (! (_GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bool(! (! (true)))), ! (! (bool(bool(! (! (true)))))))))), true)), false || (bool(bvec2((! (_GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bool(! (! (true)))), ! (! (bool(bool(! (! (true)))))))))), true)))))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, bool(bvec2(false, true)))))), ((! ((_GLF_IDENTITY(false, bool(bvec2(false, true))))))) && true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true)))))), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true)))))), false)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true)))))), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, true && (true)))))), false)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, bool(bvec2(false, true)))))), ((! ((_GLF_IDENTITY(false, bool(bvec2(false, true))))))) && true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) - vec3(0.0, 0.0, 0.0)))))), injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), 1.0, 0.0, 1.0, exp(0.0), determinant(mat4(0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), injectionSwitch[1])).y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(937.135))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             do
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))) || false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, true))), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch))[0], injectionSwitch[1])).y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
          return;
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), int(int(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         continue;
                        }
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true))))) && true)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, log(1.0))))))))))
          return;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) * 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-43.58)), bool(false))), _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(0.8))), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(round(radians(-2145.1311))) : _GLF_IDENTITY(determinant(mat2(1.0, 1.0, 0.0, 1.0)), (determinant(mat2(1.0, 1.0, 0.0, 1.0))) + 0.0)))))))), _GLF_IDENTITY(bool(bvec2(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-43.58)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, determinant(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0)))), (false ? _GLF_FUZZED(mat2(3952.3219, -36.64, 7.3, 744.839)) : _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0)))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0))))), transpose(transpose(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0)))))))))))))))))), false)), bool(bool(bool(bvec2(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-43.58)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, determinant(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0)))), (false ? _GLF_FUZZED(mat2(3952.3219, -36.64, 7.3, 744.839)) : _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0)))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0))))), transpose(transpose(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0)))))))))))))))))), false))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), (_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), clamp(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), clamp(uvec4(workgroup_size, 0u, 0u, 1u), uvec4(workgroup_size, 0u, 0u, 1u), uvec4(workgroup_size, 0u, 0u, 1u))), uvec4(workgroup_size, 0u, 0u, 1u), uvec4(workgroup_size, 0u, 0u, 1u)))) | (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(4u), uvec4(4u)))), clamp(uvec4(workgroup_size, 0u, 0u, 1u), _GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec4((true), false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4((true), false, false, false)), ! (! _GLF_IDENTITY((bool(bvec4((true), false, false, false))), bool(bvec3(_GLF_IDENTITY((bool(bvec4((true), false, false, false))), bool(bvec3((bool(bvec4((true), false, false, false))), true, false))), false, true)))))))))))))) ? uvec4(workgroup_size, 0u, 0u, 1u) : _GLF_FUZZED(uvec4(193611u, 55826u, 149349u, 158015u)))), uvec4(workgroup_size, _GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(1u, max(1u, 1u)))))), max(uint(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), clamp(uvec4(workgroup_size, 0u, 0u, 1u), _GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), (true ? uvec4(workgroup_size, 0u, 0u, 1u) : _GLF_FUZZED(uvec4(193611u, 55826u, 149349u, 158015u)))), uvec4(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u | 0u)), 0u, 0u, 1u)))), uint(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), clamp(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), clamp(uvec4(workgroup_size, 0u, 0u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), 1u))), uvec4(workgroup_size, 0u, 0u, 1u), uvec4(workgroup_size, 0u, 0u, 1u))), _GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), (_GLF_IDENTITY(true ? uvec4(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, max(0u, 0u))))) ^ (0u)), 0u | (_GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (0u)))), 0u, 1u) : _GLF_IDENTITY(_GLF_FUZZED(uvec4(193611u, 55826u, 149349u, 158015u)), (_GLF_IDENTITY(_GLF_FUZZED(uvec4(193611u, 55826u, 149349u, _GLF_IDENTITY(158015u, clamp(_GLF_IDENTITY(158015u, clamp(158015u, 158015u, 158015u)), _GLF_IDENTITY(158015u, min(158015u, 158015u)), _GLF_IDENTITY(158015u, max(_GLF_IDENTITY(158015u, uint(uvec2(158015u, 1u))), 158015u)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec4(94436u, 54442u, 14326u, 174997u), uvec4(0u, 0u, 0u, 0u) ^ _GLF_IDENTITY((uvec4(94436u, 54442u, 14326u, 174997u)), ((uvec4(94436u, 54442u, 14326u, 174997u))) | uvec4(0u, 0u, 0u, 0u)))) : _GLF_IDENTITY(_GLF_FUZZED(uvec4(193611u, 55826u, _GLF_IDENTITY(149349u, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) ? _GLF_IDENTITY(149349u, max(149349u, 149349u)) : _GLF_FUZZED(subgroup_size))), 158015u)), (_GLF_FUZZED(uvec4(193611u, 55826u, _GLF_IDENTITY(149349u, (true ? _GLF_IDENTITY(149349u, max(_GLF_IDENTITY(149349u, (149349u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 149349u)) : _GLF_FUZZED(subgroup_size))), 158015u))) | uvec4(0u, 0u, 0u, 0u))))) * uvec4(1u, 1u, 1u, 1u)), ~ (_GLF_IDENTITY(~ (true ? uvec4(workgroup_size, _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (0u)), 0u, 1u) : _GLF_FUZZED(uvec4(193611u, 55826u, 149349u, 158015u))), max(~ (true ? uvec4(workgroup_size, _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(subgroup_id, subgroup_local_id), (false ? _GLF_FUZZED(uvec4(53723u, 116875u, 49803u, 161267u).x) : atomicAdd(subgroup_id, subgroup_local_id)))) : 0u)))), 0u, 1u) : _GLF_FUZZED(uvec4(193611u, 55826u, 149349u, 158015u))), ~ (true ? uvec4(workgroup_size, _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u)) / 1u))) ^ (0u)), 0u, 1u) : _GLF_FUZZED(uvec4(193611u, 55826u, 149349u, 158015u))))))))), uvec4(workgroup_size, 0u, 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u | (1u))) | 0u)))))))) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))) ^ 0u)) | (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), clamp(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u + ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))) ^ 0u), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(uvec3(169101u, 139425u, 103092u)[2]) : subgroup_id * subgroup_size)) + subgroup_local_id), _GLF_IDENTITY(0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (0u ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_FUZZED(workgroup_base))))) + subgroup_local_id)), min(0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))) | 0u) : _GLF_FUZZED(workgroup_base))) + subgroup_local_id)), 0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))) + subgroup_local_id))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), clamp(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u + ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))) ^ 0u), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(uvec3(169101u, 139425u, 103092u)[2]) : subgroup_id * subgroup_size)) + subgroup_local_id), _GLF_IDENTITY(0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (0u ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_FUZZED(workgroup_base))))) + subgroup_local_id)), min(0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))) | 0u) : _GLF_FUZZED(workgroup_base))) + subgroup_local_id)), 0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))) + subgroup_local_id))))))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), clamp(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u + ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))) ^ 0u), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(uvec3(169101u, 139425u, 103092u)[2]) : subgroup_id * subgroup_size)) + subgroup_local_id), _GLF_IDENTITY(0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (0u ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_FUZZED(workgroup_base))))) + subgroup_local_id)), min(0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))) | 0u) : _GLF_FUZZED(workgroup_base))) + subgroup_local_id)), 0u + ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))) + subgroup_local_id)))))))))) ^ 0u) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) : _GLF_FUZZED((virtual_gid | 52639u)))) * subgroup_size, max(workgroup_base + _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED((virtual_gid | 52639u)))) * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED((virtual_gid | 52639u)))) * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)))))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, false, true))), (! (bool(bvec4(false, false, false, _GLF_IDENTITY(true, ! (! (true))))))) || false))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, false, true))), (! (bool(bvec4(false, false, false, true)))) || false)))) && true)))), bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), true, false)))))) && true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) + 0), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, 0)))))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 4);
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1), false || (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1), true && ((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1))))) && true)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1), false || (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1), true && ((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1))))) && true)), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1), false || (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1), true && ((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-79269) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != 1))))) && true)))))); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_injected_loop_counter ++)))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bool(subgroup_local_id + 1 < subgroup_size))))
            {
             if(_GLF_DEAD(false))
              break;
             int i = 0;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      break;
                     return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       break;
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (62407 & ((1 ^ 1) | 0)), ! (! (_injected_loop_counter != (62407 & ((1 ^ 1) | 0)))))); _injected_loop_counter --)
                        {
                         return;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-53.33)), float(injectionSwitch.y), bool(true)))))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true), false))), _GLF_IDENTITY((_GLF_DEAD(false)), false || _GLF_IDENTITY((_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)), false || ((_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true))))) && true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-371.912)), bool(false)))))) && true)))
                break;
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     do
                      {
                       do
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true)))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true)))))))), true))))))), (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, 1.0, cos(0.0))), float(mat4x3(float(vec3(injectionSwitch.y, 1.0, cos(0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) - 0.0)), float(_GLF_FUZZED(-1797.5442)), bool(false))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))))))
                continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), false || (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 1 * (0)), 0))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (1) + 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1)))) * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1)))) * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))) + 0), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1)))) * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), int(ivec3(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1)))) * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), 0, 1))))) > (0 | 0)); _injected_loop_counter --)
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
                    return;
                  }
                 continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), true, true)))) && true) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) / 1), 1 * (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), min(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), ~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))))))
                {
                 atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> (0 ^ 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) + 0)))) >> _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | 0), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) | ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 5))))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), clamp((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))))) * (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), clamp(_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))), clamp(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))), ~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))), ~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), ~ (~ (_GLF_IDENTITY(4, (4) >> 0)))), _GLF_IDENTITY(4, (4) >> 0))))), 64, 4);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))))
                break;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (false))))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (false))))) || false), (_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (false))))) || false)) && true), true, true))))))
            break;
           if(_GLF_DEAD(false))
            continue;
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))) | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3409.4696))) > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y))))), true), false)), false)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))))
        return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))))));
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x, (injectionSwitch.x) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(-5.9))), min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(-5.9))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(-5.9)))))) > injectionSwitch.y))))
  return;
}
