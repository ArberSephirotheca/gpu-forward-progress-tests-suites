#version 460
struct _GLF_struct_0 {
 mat4x2 _f0;
 mat2x4 _f1;
 int _f2;
 mat4 _f3;
 mat4x3 _f4;
 mat3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 ivec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_2 {
 uint read_2;
 _GLF_struct_1 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(atomicLoad(buf[virtual_gid], 4, 64, 0), _GLF_struct_1(_GLF_struct_0(mat4x2(1.0), mat2x4(1.0), 1, mat4(1.0), mat4x3(1.0), mat3(1.0), mat3(1.0)), ivec2(1), bvec3(true)));
 if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == _GLF_struct_replacement_2.read_2) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == _GLF_struct_replacement_2.read_2) + 1, 4, 64, 4);
  }
}
