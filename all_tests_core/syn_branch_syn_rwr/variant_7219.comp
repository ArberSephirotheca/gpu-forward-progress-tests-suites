#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(7636u, _GLF_IDENTITY(27411u, 0u | (27411u)), 66228u)))))), (true ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(7636u, _GLF_IDENTITY(27411u, 0u | (27411u)), 66228u)))))) : _GLF_FUZZED(uvec3(102530u, 25952u, 46959u)))), gl_NumWorkGroups))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(workgroup_base), max(_GLF_IDENTITY(bitfieldReverse(workgroup_base), (bitfieldReverse(workgroup_base)) >> 0u), _GLF_IDENTITY(bitfieldReverse(workgroup_base), ~ (~ (bitfieldReverse(workgroup_base))))))) : _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) / _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) >> 0u)))))), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))))))))) && true))) ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), 1u * ((_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), 1u * ((_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))))) / 1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec4(workgroup_size, 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (uvec4(workgroup_size, 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))))), max(((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), (~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + 0u), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, 1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u)))))) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, uint(uvec4(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) / 1u), 0u, 1u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0), mat2x3(mat2x3(mat2x3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))))), injectionSwitch.x)))))) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))))))))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), 1u * _GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) / 1u))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))))), ((_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false))) ? (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) : _GLF_FUZZED((atomicAdd(workgroup_size, num_workgroup) - subgroup_id))))))) | 0u)))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_id))), ~ (~ (workgroup_base)))))))) / 1u)) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : subgroup_local_id), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : subgroup_local_id), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : subgroup_local_id), 0u ^ (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : subgroup_local_id), 0u | ((false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : subgroup_local_id))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : subgroup_local_id))));
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) || false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), false || (! (false)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false)))) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false)))) || false))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false)))) || false)))))))) || (! (false)))))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4((_GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true, true))), ! (! (_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))))))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))) || (! (false)))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (96420 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
                        }
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
          }
        }
       else
        {
        }
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY((64), ~ (~ ((64)))), (_GLF_IDENTITY(_GLF_IDENTITY((64), ~ (~ ((64)))), (_GLF_IDENTITY((64), ~ (~ ((64))))) ^ 0)) | 0) | (64)), int(ivec3(_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY((64), ~ (~ ((64)))), (_GLF_IDENTITY(_GLF_IDENTITY((64), ~ (~ ((64)))), (_GLF_IDENTITY((64), ~ (~ ((64))))) ^ 0)) | 0) | (64)), 1, 1))), 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, (0) << 0) | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), (int(7)) * 1))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), 0 | (max(_injected_loop_counter, _injected_loop_counter)))) < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, (0) << 0) | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))), false, _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))), false)))), bvec3(bvec4(bvec3(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (0 << _GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(0, (0) << 0) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (7) << 0))))), min(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))), ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (1))))), 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)))))) / 1)) >> 0))) >> _GLF_IDENTITY(int(7), int(7))), false, false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 | (7))) - 0)), int(7))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) - 0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(int(0)), max(int(int(0)), _GLF_IDENTITY(int(int(0)), (int(int(0))) | (int(int(0)))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(int(0)), max(int(int(0)), _GLF_IDENTITY(int(int(0)), (int(int(0))) | (int(int(0)))))), 0 ^ (_GLF_IDENTITY(int(int(0)), max(int(int(0)), _GLF_IDENTITY(int(int(0)), (int(int(0))) | (int(int(0)))))))))))), (0) << 0) | ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))), false, false), bvec3(bvec4(bvec3(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), (0) << 0) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), 0 + (~ (1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, 0 | (7)))))))))))) >> _GLF_IDENTITY(int(7), int(7))), false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, _GLF_IDENTITY(4, (4) - 0));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))).x < injectionSwitch.y))))))))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0))))), (true ? int(0) : _GLF_FUZZED(-3470))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(_GLF_IDENTITY(~ (0), (~ (0)) - 0), ~ (0))))) ^ (5))), int(_GLF_IDENTITY(_GLF_IDENTITY(5, 0 ^ (5)), 0 ^ (5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY((_injected_loop_counter > 0) && true, ! (! ((_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (0)))))) && true))))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-699.904) : _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), max((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), max((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(4), int(4))), max((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(ivec4(-93447, 36177, -23653, 47561).y) : 1)))) << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, clamp(4, 4, 4))))))) >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), max(int(4), int(4))))), max((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), max((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), max((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), max((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(ivec4(-93447, 36177, -23653, 47561).y) : 1)))) << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), max((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), max((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) + 0)) >> 0)), int(4))), max((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), max((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(ivec4(-93447, 36177, -23653, 47561).y) : 1)))) << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), max((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))))))) || false), true))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))) >> _GLF_IDENTITY(int(5), int(5)), max((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))) >> _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)))), 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))).x, mix(float(_GLF_FUZZED(vec3(1.3, -7.5, 421.715).b)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)))), 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(24.71)), float(0.0), bool(true))), 0.0))))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))) : _GLF_FUZZED(uintBitsToFloat((_GLF_IDENTITY(uvec2(132231u, 96530u) % workgroup_base, (uvec2(132231u, 96530u) % workgroup_base) / uvec2(1u, 1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-8435.8258)))))), mix(vec2(_GLF_FUZZED(-1.7), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[0], _GLF_FUZZED(-5.0)), bvec2(true, false)))))) + log(vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) - vec2(0.0, 0.0))[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], float(mat2x3(injectionSwitch[1], 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))) + 0.0), clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])), injectionSwitch[1])), float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) / abs(1.0)), mix(float(_GLF_FUZZED(-7.6)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) / abs(1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), injectionSwitch.x), (false ? _GLF_FUZZED(frexp(-9196.5235, _injected_loop_counter)) : clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), injectionSwitch.x)))))) < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-2931.0370), max(_GLF_IDENTITY(_GLF_FUZZED(-2931.0370), 1.0 * (_GLF_FUZZED(-2931.0370))), _GLF_FUZZED(-2931.0370))) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), min(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(-2443.8452))) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-84.27) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.9)), bool(false))))), (false ? _GLF_FUZZED(-2931.0370) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) ? _GLF_FUZZED(-2931.0370) : 1.0))) - 0.0))), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), (_GLF_IDENTITY(1.0, 1.0 * (1.0))) / 1.0)) + 0.0), 1.0))), min(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))))))), 0.0, 1.0))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), mix(float(_GLF_FUZZED(5663.8963)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))) : _GLF_FUZZED(-389.399)))), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - length(vec3(0.0, 0.0, 0.0)))) * 1.0)))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0)))))))))), injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(24.71)), float(0.0), bool(true))), 0.0))))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-91.33, 548.745)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-5326.9870)), vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], clamp((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(true, true)))))) + log(vec2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)))), min(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-91.33, 548.745)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-5326.9870)), vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], clamp((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(true, true)))))) + log(vec2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)))), (false ? _GLF_FUZZED(radians(injectionSwitch)) : max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-91.33, 548.745)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-5326.9870)), vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], clamp((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(true, true)))))) + log(vec2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)))))), max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-91.33, 548.745)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-5326.9870)), vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], clamp((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(true, true)))))) + log(vec2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0))))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-91.33, 548.745)), vec2(mat3x4(_GLF_IDENTITY(_GLF_FUZZED(vec2(-91.33, 548.745)), min(_GLF_FUZZED(vec2(-91.33, 548.745)), _GLF_FUZZED(vec2(-91.33, 548.745)))), 1.0, 0.0, 1.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, exp(sqrt(0.0))))) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-5326.9870)), vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], clamp((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(true, true)))))) + log(vec2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x) - 0.0), float(mat4x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, abs(1.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), injectionSwitch.x), (false ? _GLF_FUZZED(-1.9) : clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(24.71)), float(0.0), bool(true))), 0.0))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-18.67)), bool(false))), 1.0, log(1.0), 0.0))), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4379.5875)), float(1.0), bool(true))), 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))), (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(24.71)), float(0.0), bool(true))), 0.0))))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))) : _GLF_FUZZED(injectionSwitch))).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / abs(vec2(1.0, 1.0)), vec2(mat3x2((injectionSwitch) / abs(vec2(1.0, 1.0)), 1.0, 1.0, sin(0.0), 1.0))))) + log(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6286.6233) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))), 0.0, sqrt(abs(1.0))))), injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0)), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), 1.0))), 0.0, 1.0))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(abs(1.0))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(_GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-2931.0370) : 1.0, (false ? _GLF_FUZZED(-2931.0370) : 1.0) * 1.0))), max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0), mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) + 0.0)), float(_GLF_FUZZED(-19.96)), bool(false))), 1.0))), 0.0, 1.0))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(776.180)), float(1.0), bool(true))), 1.0)), 0.0, exp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), 0.0, sqrt(abs(1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.21, 75.66)))))).x, float(mat4x2(injectionSwitch.x, abs(1.0), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(776.180)), float(1.0), bool(true))), 1.0)), 0.0, exp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), 0.0, sqrt(abs(1.0)))))) - 0.0), injectionSwitch.x)))) < injectionSwitch.y)))))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sin(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), dot(vec2(0.0, 1.0), vec2(sin(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 1.0, sin(0.0), 0.0, 1.0, 0.0))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                                  {
                                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) << 0)), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0), (0) << 0)), ~ (_GLF_IDENTITY(0, (0) << 0)), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) << 0)), min(~ (_GLF_IDENTITY(0, (0) << 0)), ~ (_GLF_IDENTITY(0, (0) << 0)))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5839.9459), _GLF_FUZZED(5.4)), bvec2(false, false))))), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0))[1]), vec2(_GLF_FUZZED(-5839.9459), _GLF_IDENTITY(_GLF_FUZZED(5.4), max(_GLF_FUZZED(5.4), _GLF_IDENTITY(_GLF_FUZZED(5.4), min(_GLF_FUZZED(5.4), _GLF_FUZZED(5.4)))))), bvec2(false, false))))), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                                            {
                                                             return;
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, 0 | (64)))), 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (! (_GLF_WRAPPED_IF_TRUE(true)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(subgroup_local_id + 1 < subgroup_size)
        {
         int i = 0;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0 & 50252) | (0))); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (1 ^ 1)) != 0); _injected_loop_counter --)
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(5), int(5))) ^ (_injected_loop_counter)) < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), mat2(mat3(mat2(1.0))))) / mat2(1.0, 1.0, 1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-3.5, -5340.7254)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, sin(0.0), 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, round(length(normalize(1.0)))), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, round(length(normalize(1.0)))), vec3(0.0, 1.0, 0.0)), float(mat2x4(dot(vec3(1.0, 0.0, round(length(normalize(1.0)))), vec3(0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + (0.0)), 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), abs(0.0))), (vec2(mat3(injectionSwitch, 1.0, sin(0.0), 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), clamp(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec2(159.869, 98.54).g)), float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), bool(true))))), (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) - 0.0), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), abs(0.0)))) * mat2(1.0))))))).y, min(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), true && (! (false))), true)), (bool(bvec2(_GLF_IDENTITY(! (false), true && (! (false))), true))) && true)))), (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(1, 0 | (1)))); _injected_loop_counter ++)
                                  {
                                   return;
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (-98477 & 0) | (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))))) != int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))) / 1) != int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))), false || ((_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))))))))))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(int((1)))) | (1))), ~ (~ ((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(int((1)))) | (1)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) - 0, max(_GLF_IDENTITY((_injected_loop_counter) - 0, int(ivec3(_GLF_IDENTITY((_injected_loop_counter) - 0, 0 + ((_injected_loop_counter) - 0)), 1, 0))), (_injected_loop_counter) - 0))), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1))), _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | (_GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))))) >> 0) != 0); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                            {
                                             atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) / 1), 1)) == read_2) + 1, _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), max((_GLF_IDENTITY(4, ~ (~ (4)))), (4))))), 4))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), max((_GLF_IDENTITY(4, ~ (~ (4)))), (4))))), 4))))), (~ (~ ((_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), max((_GLF_IDENTITY(4, ~ (~ (4)))), (4))))), 4)))))) >> (0 >> _GLF_IDENTITY(int(6), int(6))))) ^ 0), 64, 4);
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(85.38)), bool(false))))))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bvec4((_GLF_WRAPPED_LOOP(false)), false, false, false))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false))))) || false)) || false)), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false))))) || false)) || false)), false, true, false)), true && (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), ((! (_GLF_WRAPPED_LOOP(false)))) && true))) || false)) || false)), false, true, false)), (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), ((! (_GLF_WRAPPED_LOOP(false)))) && true))) || false)) || false)), false, true, false)), bool(bool(bool(bvec4((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), ((! (_GLF_WRAPPED_LOOP(false)))) && true))) || false)) || false)), false, true, false)))))) && true))))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
