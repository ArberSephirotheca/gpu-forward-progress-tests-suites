#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) * 1)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-808.264)), bool(false))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(max(-8570.8573, -528.456), (false ? _GLF_FUZZED(8.8) : max(-8570.8573, -528.456)))) : injectionSwitch.x)), cos(0.0), 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(max(-8570.8573, -528.456)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.8))) < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(max(-8570.8573, -528.456)), clamp(_GLF_FUZZED(max(-8570.8573, -528.456)), _GLF_IDENTITY(_GLF_FUZZED(max(-8570.8573, -528.456)), (true ? _GLF_FUZZED(max(-8570.8573, -528.456)) : _GLF_FUZZED(-78.77))), _GLF_IDENTITY(_GLF_FUZZED(max(-8570.8573, -528.456)), 1.0 * (_GLF_FUZZED(max(-8570.8573, -528.456)))))) : _GLF_FUZZED(roundEven(-94.32)))) : injectionSwitch.x)), cos(0.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0), mat2(mat4x2(mat2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(max(-8570.8573, -528.456)) : injectionSwitch.x)), cos(0.0), 1.0, 1.0))))))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), false, true)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4435.3385) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-53.71)))))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat3(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat3(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0)), (vec2(mat3(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0))) * mat2(1.0)) : _GLF_FUZZED(vec2(-9.8, -969.866))))))) - vec2(0.0, 0.0)).y), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat3(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat3(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0)), (vec2(mat3(vec2(mat4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0))) * mat2(1.0)) : _GLF_FUZZED(vec2(-9.8, -969.866))))))) - vec2(0.0, 0.0)).y), true)))))) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-443.210) : (injectionSwitch)[0])), _GLF_FUZZED(-834.342)), vec2(_GLF_FUZZED(-5934.0415), (injectionSwitch)[1]), bvec2(false, true))).y : _GLF_FUZZED(-2409.5998)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))))))) || false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), mat2(mat3x4(transpose(mat2(1.0))))))) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), _GLF_IDENTITY(int(6), (int(6)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))))).y), true))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3))), ! (! (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3))))))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, (false) && true))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || _GLF_IDENTITY(false, ! (! (false))))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, true && (false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, true && (false)))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, true && (false)))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, true && (false))))))))), false, false)))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, true && (false)))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, true && (false)))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, true && (false))))))))), false, false))))))))))))), (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))]), mix(vec2(_GLF_FUZZED(-376.331), (vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))]))[1]), vec2((vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))]))[0], _GLF_FUZZED(940.245)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))).y, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)), mat3(mat4x3(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0))))), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)), mat3(mat4x3(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)))))))))))))))) && true)), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))]), mix(vec2(_GLF_FUZZED(-376.331), (vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))]))[1]), vec2((vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))]))[0], _GLF_FUZZED(940.245)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))).y, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)), mat3(mat4x3(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0))))), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)), mat3(mat4x3(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).y, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)))))))))))))))) && true)), true, false, true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[2], ~ (~ (gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u))[2]) / 1u), gl_NumWorkGroups[2])))).x, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)) : _GLF_FUZZED(subgroup_id)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec4(int(1), 0, 0, 0)), (int(ivec4(int(1), 0, 0, 0))) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(float(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0)))), injectionSwitch[1])).y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), false))))))))))), false || (false)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.0) : injectionSwitch.x))) - abs(0.0)) > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) / (1 | 1))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) / 1)))), (_injected_loop_counter) ^ 0) < 1, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 0, int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 0, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec3(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ ivec3(0, 0, 0))) >> (ivec3(0, 0, 0) ^ ivec3(0, 0, 0))))), 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0 + (_injected_loop_counter), (0 + (_injected_loop_counter)) | (0 + (_injected_loop_counter))))) / 1)))), (_injected_loop_counter) ^ 0) < 1, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) / 1)))), max(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) / 1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) / 1)))))))), (_injected_loop_counter) ^ _GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ONE(1.0, injectionSwitch.y)))))) < 1, false, true, true)))))) && true)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))), false, false), bvec3(bvec4(bvec3(false, false, false), true))))), _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (false), ! (! (false || (false))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(false || (false), ! (! (false || (false)))))) && true, (_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), bool(bvec2(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), true))))), true && ((bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), bool(bvec2(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), true))))))) && true) && true)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), min(1.0, 1.0)))), 1.0)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8839.6770)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.5)), bool(false)))), bool(true)))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), int(ivec4((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), 0, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))), 0))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, false, true)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED((-455.563)) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-13.99)), float(injectionSwitch[1]), bool(true))))), injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(231.180)), bvec2(false, false))).x) + 0.0), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x)) > injectionSwitch.y)))))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(max(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), ~ (~ (int(7)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), clamp(max(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), ~ (~ (int(7)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), max(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), ~ (~ (int(7)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), max(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), ~ (~ (int(7)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || _GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))), true && ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))))));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))))) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), workgroup_id)), uint(uint(workgroup_id)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) - 0u), uint(6u)))) * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 1u, 0u))) % subgroup_size, _GLF_IDENTITY(0u, ~ (~ (0u))), 1u))), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 1u, 0u))) % subgroup_size, _GLF_IDENTITY(0u, ~ (~ (0u))), 1u))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) || false), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)))), vec2(vec4(injectionSwitch, 0.0, 0.0))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), (injectionSwitch.x > injectionSwitch.y) || false)))) || false), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, true))), true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (false ? _GLF_FUZZED((-30626 * 14477)) : 4))) ^ _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - 0), 0 | ((_GLF_IDENTITY(4, (false ? _GLF_FUZZED((-30626 * 14477)) : 4))) ^ (0 ^ 0)))), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(25037)))), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-48.29), _GLF_FUZZED(4040.9497)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), _GLF_IDENTITY(clamp(mix(vec2(_GLF_FUZZED(-48.29), _GLF_FUZZED(4040.9497)), _GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (true ? _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) / vec2(1.0, 1.0)) : _GLF_FUZZED(mod(injectionSwitch, injectionSwitch)))), max(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(72.12), _GLF_FUZZED(60.14)), vec2((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[0], _GLF_IDENTITY((vec2((injectionSwitch)[0], (injectionSwitch)[1])), _GLF_IDENTITY(mat2(1.0) * ((vec2((injectionSwitch)[0], (injectionSwitch)[1]))), mix(vec2(_GLF_FUZZED(-552.265), _GLF_FUZZED(-38.25)), vec2((mat2(1.0) * ((vec2((injectionSwitch)[0], (injectionSwitch)[1]))))[0], (mat2(1.0) * ((vec2((injectionSwitch)[0], (injectionSwitch)[1]))))[1]), bvec2(true, true))))[1]), bvec2(true, true))))), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-48.29), _GLF_FUZZED(4040.9497)), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0))))))[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-48.29), _GLF_FUZZED(4040.9497)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (clamp(mix(vec2(_GLF_FUZZED(-48.29), _GLF_FUZZED(4040.9497)), _GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (true ? _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) / vec2(1.0, 1.0)) : _GLF_FUZZED(mod(injectionSwitch, injectionSwitch)))), max(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(72.12), _GLF_FUZZED(60.14)), vec2((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[0], _GLF_IDENTITY((vec2((injectionSwitch)[0], (injectionSwitch)[1])), _GLF_IDENTITY(mat2(1.0) * ((vec2((injectionSwitch)[0], (injectionSwitch)[1]))), mix(vec2(_GLF_FUZZED(-552.265), _GLF_FUZZED(-38.25)), vec2((mat2(1.0) * ((vec2((injectionSwitch)[0], (injectionSwitch)[1]))))[0], (mat2(1.0) * ((vec2((injectionSwitch)[0], (injectionSwitch)[1]))))[1]), bvec2(true, true))))[1]), bvec2(true, true))))), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-48.29), _GLF_FUZZED(4040.9497)), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0))))))[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-48.29), _GLF_FUZZED(4040.9497)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), max(mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(1.0, 1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch))), clamp((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (true ? vec2(injectionSwitch[0], injectionSwitch[1]) : _GLF_FUZZED(injectionSwitch))), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) - sqrt(vec2(0.0, 0.0)))), injectionSwitch))))), mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + log(vec2(1.0, 1.0)), mix(vec2(((injectionSwitch) + log(vec2(1.0, 1.0)))[0], ((injectionSwitch) + log(vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(1093.3550), _GLF_FUZZED(-3058.0705)), bvec2(false, false)))), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(max(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-7.8), _GLF_FUZZED(1.5)), vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), bvec2(true, true)))), vec2(mat2x3(max(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-7.8), _GLF_FUZZED(1.5)), vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), bvec2(true, true)))), 1.0, abs(1.0), 0.0, 1.0))))))))))).y)) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), injectionSwitch))) * mat2(1.0)), (true ? clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7405.9005), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-90.00)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), injectionSwitch))) * mat2(1.0)) : _GLF_FUZZED(vec2(4.4, -79.63)))))).x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 41414); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, sqrt(0.0), sin(0.0), 0.0))).x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, sqrt(0.0), sin(0.0), 0.0))).x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, sqrt(0.0), sin(0.0), 0.0))).x > injectionSwitch.y)), false, false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))), false))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), (_GLF_WRAPPED_LOOP(false)) && true));
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1811.8995), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-19.06)), bvec2(true, false))).x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 & 1, min(1 & 1, 1 & 1))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, clamp(1 & 1, 1 & 1, 1 & 1))) - 0), min(1 & 1, 1 & 1))), (_GLF_IDENTITY(1 & 1, min(1 & 1, 1 & 1))), (_GLF_IDENTITY(1 & 1, min(1 & 1, 1 & 1))))), max((_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) << 0), min(1 & 1, 1 & 1))), _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, min(1 & 1, 1 & 1))), int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY(1 & 1, min(1 & 1, 1 & _GLF_IDENTITY(1, max(1, 1))))), 0), (ivec2((_GLF_IDENTITY(1 & 1, min(1 & _GLF_IDENTITY(1, int(ivec4(1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 0))), 1 & 1))), 0)) ^ ivec2(0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(10355 & _GLF_IDENTITY(0, min(0, 0)), max(10355 & _GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(10355 & _GLF_IDENTITY(0, min(0, 0)), (false ? _GLF_FUZZED((27372 * -88820)) : _GLF_IDENTITY(10355 & _GLF_IDENTITY(0, min(0, 0)), (10355 & _GLF_IDENTITY(0, min(0, 0))) / 1))))))); _GLF_IDENTITY(_injected_loop_counter --, (1 ^ 1) + (_injected_loop_counter --)))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 1, 1), max(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! _GLF_IDENTITY((false), ! (! ((false))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), _GLF_IDENTITY(log(1.0) + (_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), float(vec4(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), (float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0))) / 1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0)))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(66.30) : log(1.0) + (_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), float(vec4(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), _GLF_IDENTITY((float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0))), min((float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0))), (float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0))))) / 1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(6554.9902, (true ? 6554.9902 : _GLF_FUZZED(-0.0)))) : float(mat2(injectionSwitch.y, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0))))), mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), log(1.0) + (_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), float(vec4(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), (float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-18.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 1.0, 0.0, 1.0), _GLF_IDENTITY(mat2(mat2x4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-18.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 1.0, 0.0, 1.0), (mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-18.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 1.0, 0.0, 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))), transpose(transpose(_GLF_IDENTITY(mat2(mat2x4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-18.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 1.0, 0.0, 1.0), (mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-18.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 1.0, 0.0, 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))), mat2(mat2x3(mat2(mat2x4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-18.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 1.0, 0.0, 1.0), (mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-18.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 1.0, 0.0, 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))))))))))), (transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))) - mat2(0.0, 0.0, 0.0, 0.0)))))) / 1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(determinant(mat2(1.0, 1.0, 0.0, 1.0))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mix(float(_GLF_FUZZED(3.5)), float(_GLF_IDENTITY(float(mat4x2(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(determinant(mat2(1.0, 1.0, 0.0, 1.0))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), min(float(mat4x2(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(determinant(mat2(1.0, 1.0, 0.0, 1.0))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), float(mat4x2(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(determinant(mat2(1.0, 1.0, 0.0, 1.0))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), bool(true)))), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0))))), (false ? _GLF_FUZZED(6554.9902) : float(mat2(injectionSwitch.y, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0)))))), float(_GLF_FUZZED(3.4)), bool(false))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-34.90, mix(float(_GLF_FUZZED(6.0)), float(-34.90), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_FUZZED(float(true)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(float(true)), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(float(true)), sqrt(abs(0.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0)), 1.0)), clamp(float(vec4(_GLF_FUZZED(float(true)), sqrt(abs(0.0)), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0), mat3(1.0) * (mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0)))), 1.0)), float(vec4(_GLF_FUZZED(float(true)), sqrt(abs(0.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0)), 1.0)), float(vec4(_GLF_FUZZED(float(true)), sqrt(abs(0.0)), determinant(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(94.66) : 0.0)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sin(0.0), (sin(0.0)) / 1.0), 0.0)), 1.0))))), float(mat3x4(_GLF_FUZZED(float(_GLF_IDENTITY(true, true && (true)))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_FUZZED(float(true)), _GLF_IDENTITY(_GLF_FUZZED(float(true)), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(float(true), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(true), min(_GLF_IDENTITY(float(true), max(float(true), float(true))), float(true))) : _GLF_FUZZED(-777.113)))), _GLF_IDENTITY(float(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(true), min(_GLF_IDENTITY(float(true), max(float(true), float(true))), float(true))) : _GLF_FUZZED(-777.113)))))), min(float(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(true), min(_GLF_IDENTITY(float(true), max(float(true), float(true))), float(true))) : _GLF_FUZZED(-777.113)))))), float(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(true), min(_GLF_IDENTITY(float(true), max(float(true), float(true))), float(true))) : _GLF_FUZZED(-777.113)))))))))) / 1.0)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch, injectionSwitch)).y, 1.0, 0.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), max((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), (false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))), clamp(_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), max((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), (false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), max((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), (false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), max((false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), (false ? _GLF_IDENTITY(_GLF_FUZZED(6554.9902), (true ? _GLF_FUZZED(6554.9902) : _GLF_FUZZED(74.60))) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))))))), mix(float(_GLF_FUZZED(-7.5)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(6554.9902, 0.0 + (6554.9902))) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))) : _GLF_FUZZED(-77.25))), mix(float(_GLF_FUZZED(vec3(-956.787, 352.834, -92.69).y)), float(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.y, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-24.57))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-15.33)), bool(false))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))), 1.0 * (_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-24.57))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-15.33)), bool(false))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))), min(float(_GLF_IDENTITY(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-24.57))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-15.33)), bool(false))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))), float(_GLF_IDENTITY(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-24.57))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-15.33)), bool(false))), 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))))))))))), 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(-1867.2487))), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((false ? -9.3 : 8307.6983))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, determinant(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))))))))))), 0.0, 1.0)))), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))) : _GLF_FUZZED(-77.25))), max(_GLF_IDENTITY(false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), (_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), (true ? transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)) : _GLF_FUZZED(mat2(-63.72, -6.5, -4.1, -9087.7971))))))) * mat2(1.0)), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3398.1217))), 1.0, 0.0, 1.0)))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3398.1217))), 1.0, 0.0, 1.0)))))))), (true ? false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3398.1217))), 1.0, 0.0, 1.0)))))))) : _GLF_FUZZED(uintBitsToFloat(subgroup_id))))) - 0.0) : _GLF_FUZZED(-77.25))), _GLF_IDENTITY(false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.8) : injectionSwitch.y)))) ? false ? _GLF_FUZZED(6554.9902) : float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))) : _GLF_FUZZED(-77.25)))))), bool(true))))))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(true))), float(1.0), bool(true))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(6554.9902, (6554.9902) - 0.0)) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(6554.9902) : float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(_GLF_IDENTITY(-85.70, min(-85.70, -85.70)))))))) / 1.0)))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 | 0), _GLF_IDENTITY(((1 | 0)) ^ 0, int(ivec4(((1 | 0)) ^ 0, 0, 0, 1)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY((1 | 0), ((1 | 0)) ^ 0)), (! (_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 | 0), 1 * ((1 | 0))), ((1 | 0)) ^ 0))) && true), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY((1 | 0), ((1 | 0)) ^ 0)), (! (_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 | 0), 1 * ((1 | 0))), ((1 | 0)) ^ _GLF_IDENTITY(0, min(0, 0))))) && true)) && true)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1), _GLF_IDENTITY(0, ~ (~ (0))) ^ (_injected_loop_counter ++)))))
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))))), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) / 1u)), uint(5u)), 1u * (_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) / 1u)), uint(5u)))), _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((0u))), (_GLF_IDENTITY(_GLF_IDENTITY((0u), max(_GLF_IDENTITY((0u), 0u | ((0u))), _GLF_IDENTITY((0u), ((0u)) >> 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((0u)))) / 1u) * _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(next_virtual_gid)))) + (_GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) | (_GLF_IDENTITY(uint(5u), uint(uvec3(uint(5u), 1u, 1u)))))))))))))) + 1 < subgroup_size)
            {
             if(_GLF_DEAD(false))
              barrier();
             int i = 0;
             if(_GLF_DEAD(false))
              barrier();
             atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, uint(uint(read_1 + 1))) == read_2) + 1, 4, 64, _GLF_IDENTITY(4, int(ivec3(4, 0, 0))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), (_GLF_IDENTITY(~ (~ (_injected_loop_counter)), max(~ (~ (_injected_loop_counter)), _GLF_IDENTITY(~ (~ (_injected_loop_counter)), 0 + (~ (~ (_injected_loop_counter))))))) ^ (0 >> _GLF_IDENTITY(int(7), int(7))))), (0 & -63332) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))))))) ^ 0) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))))))) < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (uint(read_1 + 1 == read_2) + 1) | (uint(read_1 + 1 == read_2) + 1)), _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(int(-1.3)))), (4) / 1)) << _GLF_IDENTITY(0, (0) << 0)), 64, 4);
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED((- 2440.6974)))) > injectionSwitch.y)))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))).x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(mat3(0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0))))) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-8372.5963, 6.2, 1800.9392).r), _GLF_FUZZED(float((bvec4(true, false, true, false) != bvec4(true, false, false, true))))), bvec2(false, false))).x), mix(float(_GLF_FUZZED(-3716.9342)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-6861.0726 * float(124456u)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)), bool(true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))) && true))) && true); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[1]))[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), clamp(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))[1])))))).x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 ^ (int(1)))) ^ 0))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) >> 0)) << 0)) / (0 | 1))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8.6)), vec2(_GLF_FUZZED(-591.702), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true, true, false))))))) || (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))))), (false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || (injectionSwitch.x > injectionSwitch.y)))))), (false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))) || false), false))))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true, true, false))))))) || (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))))), (false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || (injectionSwitch.x > injectionSwitch.y)))))), (false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))) || false), false))))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x)) > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), (_GLF_IDENTITY(int(2), (int(2)) << 0)) | (_GLF_IDENTITY(int(2), (int(2)) << 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), 1 * (int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), 1 * (int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), 1 * (int(2))), int(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), 0, 1)))) - (0 << _GLF_IDENTITY(int(1), int(1))))) >> 0))), ! (! (_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(int(2), 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(int(ivec3(int(2), 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), 1))))) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), (true ? _GLF_IDENTITY((int(2)), 0 ^ ((int(2)))) : _GLF_IDENTITY(_GLF_FUZZED((vec3(3.8, 67.69, -62.13) , ivec3(-28902, -41304, 68226)[0])), min(_GLF_FUZZED((vec3(3.8, 67.69, -62.13) , ivec3(-28902, -41304, 68226)[0])), _GLF_FUZZED((vec3(3.8, 67.69, -62.13) , ivec3(-28902, -41304, 68226)[0])))))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)), max(~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)), ~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) | 0) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) << 0) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (0 << _GLF_IDENTITY(int(3), int(3))) | (int(2)))) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), (int(_GLF_IDENTITY(2, ~ (~ (2))))) << 0)))))))))) * _GLF_IDENTITY(1, 0 + (1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) | 0) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) << 0) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (0 << _GLF_IDENTITY(int(3), int(3))) | (int(2)))) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), (int(_GLF_IDENTITY(2, ~ (~ (2))))) << 0)))))))))) * _GLF_IDENTITY(1, 0 + (1))))) - 0)), (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(ivec2(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(_injected_loop_counter)))), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)))) + 0)))) << 0, min((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)), max(~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)), ~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) | 0) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) << 0) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (0 << _GLF_IDENTITY(int(3), int(3))) | (int(2)))) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), (int(_GLF_IDENTITY(2, ~ (~ (2))))) << 0)))))))))) * _GLF_IDENTITY(1, 0 + (1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) | 0) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) << 0) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (0 << _GLF_IDENTITY(int(3), int(3))) | (int(2)))) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), (int(_GLF_IDENTITY(2, ~ (~ (2))))) << 0)))))))))) * _GLF_IDENTITY(1, 0 + (1))))) - 0)), (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(ivec2(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(_injected_loop_counter)))), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)))) + 0)))) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)), max(~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)), ~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) | 0) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) << 0) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (0 << _GLF_IDENTITY(int(3), int(3))) | (int(2)))) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), (int(_GLF_IDENTITY(2, ~ (~ (2))))) << 0)))))))))) * _GLF_IDENTITY(1, 0 + (1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) | 0) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ((int(2))) << 0) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (0 << _GLF_IDENTITY(int(3), int(3))) | (int(2)))) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), (int(_GLF_IDENTITY(2, ~ (~ (2))))) << 0)))))))))) * _GLF_IDENTITY(1, 0 + (1))))) - 0)), (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(ivec2(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(_injected_loop_counter)))), (int(2)) << 0))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0)))))))))) * 1)))) + 0)))) << 0))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), 1 * (int(2))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(1 * (int(2)), (1 * (int(2))) >> 0)), (_GLF_IDENTITY(int(2), 1 * (int(2)))) | 0)))))))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1)) / 1))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1)) / 1)))))), 1 * (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1)) / 1)))))), 0 ^ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1)) / 1))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
          barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}
