#version 460
struct _GLF_struct_6 {
 mat3x2 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 bvec2 _f3;
 int _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 uvec3 _f1;
 bvec2 _f2;
 ivec3 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 mat3x4 _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_1 {
 uint _f0;
 mat3x2 _f1;
 ivec3 _f2;
 mat3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 vec2 _f1;
 bool _f2;
 uvec4 _f3;
 mat3x4 _f4;
 uvec2 _f5;
 float _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 ivec3 _f1;
 mat3x4 _f2;
 _GLF_struct_1 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 _GLF_struct_2 _f1;
 vec4 _f2;
 vec2 _f3;
 _GLF_struct_4 _f4;
 uint subgroup_local_id;
 _GLF_struct_7 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y = subgroup_size;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(bvec3(true), _GLF_struct_2(_GLF_struct_0(ivec2(1), vec2(1.0), true, uvec4(1u), mat3x4(1.0), uvec2(1u), 1.0), ivec3(1), mat3x4(1.0), _GLF_struct_1(1u, mat3x2(1.0), ivec3(1), mat3(1.0), uvec2(1u)), mat3x4(1.0)), vec4(1.0), vec2(1.0), _GLF_struct_4(mat3x4(1.0), mat3x4(1.0), _GLF_struct_3(mat4x2(1.0), uvec2(1u))), gl_SubgroupInvocationID, _GLF_struct_7(_GLF_struct_5(vec4(1.0), mat4x2(1.0)), uvec3(1u), bvec2(true), ivec3(1), _GLF_struct_6(mat3x2(1.0), mat3x2(1.0), mat3x2(1.0), bvec2(true), 1, mat3x2(1.0))));
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x = _GLF_struct_replacement_8.subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.w * workgroup_id;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z + subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y + GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x;
 uint next_virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z + subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y + ((GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x + 1 < GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
  }
}
