#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_IDENTITY(true, (true) && true), true, true))), bool(bvec4(! (bool(bvec4(false, true, true, true))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -9669)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -9669))) || false); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))) || false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), (float(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))) / 1.0))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))), true && (! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 1.0, 0.0))), injectionSwitch.y)))), true && (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(asinh(7774.7211)) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], 0u | (gl_WorkGroupID[1])), gl_WorkGroupID[2])))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), min(uvec3(uvec3(gl_WorkGroupID)), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), uvec3(0u, 0u, 0u) + (uvec3(uvec3(gl_WorkGroupID)))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), max(uvec3(uvec3(gl_WorkGroupID)), uvec3(uvec3(gl_WorkGroupID)))))))) | uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)))))))) | uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), max(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), uvec3(uvec3(uvec3(uvec3(gl_WorkGroupID))))), uvec3(uvec3(gl_WorkGroupID)))), ~ _GLF_IDENTITY((~ (uvec3(uvec3(gl_WorkGroupID)))), ((~ (uvec3(uvec3(gl_WorkGroupID))))) - uvec3(0u, 0u, 0u)))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), 0u ^ (_GLF_IDENTITY(uint(3u), uint(3u)))))), 0u, 0u)))))), _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) << 0u))), 0u)), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) / uvec3(1u, 1u, 1u))))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) * uvec3(1u, 1u, 1u)))))), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ _GLF_IDENTITY((~ (uvec3(uvec3(gl_WorkGroupID)))), ((~ (uvec3(uvec3(gl_WorkGroupID))))) | ((~ (uvec3(uvec3(gl_WorkGroupID)))))))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u))))))), clamp(((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID))), uvec3(uvec4(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID))), 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ _GLF_IDENTITY((uvec3(uvec3(gl_WorkGroupID))), ((uvec3(uvec3(gl_WorkGroupID)))) - uvec3(0u, 0u, 0u))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), _GLF_IDENTITY(~ (~ (uvec3(uvec3(gl_WorkGroupID)))), ~ (~ (~ (~ (uvec3(uvec3(gl_WorkGroupID))))))))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), min(uvec3(gl_WorkGroupID), _GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) | uvec3(0u, 0u, 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u), clamp((_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u))))))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), clamp(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))) ^ uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u))))))), max(((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)))))))) | uvec3(0u, 0u, 0u))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)))))))) | uvec3(0u, 0u, 0u))) : _GLF_FUZZED(uvec3(51180u, 10240u, 130735u)))) | uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) * uvec3(1u, 1u, 1u))), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) * uvec3(1u, 1u, 1u))), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) * uvec3(1u, 1u, 1u))), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))), (true ? (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) * uvec3(1u, 1u, 1u))), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) : _GLF_FUZZED(uvec3(33542u, 182064u, 70647u))))) - uvec3(0u, 0u, 0u))) | ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) * uvec3(1u, 1u, 1u))), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))))) | _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(packSnorm2x16(vec2(-5871.4458, 9.9))) : 0u))), uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(packSnorm2x16(vec2(-5871.4458, 9.9))) : 0u))))))), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u), uvec3(uvec4((_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u), 1u))))))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID))))), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u))))) | uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), ~ (~ (uvec3(uvec3(gl_WorkGroupID)))))) | uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u))), ((0u) >> (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(3u), uint(3u)), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (0u << _GLF_IDENTITY(uint(3u), uint(3u)))))) - 0u)), 0u, 0u)))))))))))) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1690.9139)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) / uvec3(1u, 1u, 1u)) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))) - uvec3(0u, 0u, 0u)), uvec3(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) >> uvec3(0u, 0u, 0u))), ~ (~ (uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) >> uvec3(0u, 0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), min(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), uvec3(0u, 0u, 0u) + (uvec3(uvec3(gl_WorkGroupID)))), uvec3(uvec3(gl_WorkGroupID)))), ~ (~ (uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) | uvec3(0u, 0u, 0u))))))) | uvec3(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))) << uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u))))).x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uint(_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size))))), max(_GLF_IDENTITY(workgroup_size, uint(uint(_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size))))), _GLF_IDENTITY(workgroup_size, uint(uint(_GLF_IDENTITY(workgroup_size, 0u ^ (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u)) - 0u)))))))) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) && true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.7))))) > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(84.65)), bool(false))), 1.0, 1.0, 0.0, 1.0, 1.0))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0))) / exp(vec2(0.0, 0.0))).x < injectionSwitch.y)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), false || (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)))) || false) || false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true)))))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true)))))))), false)))) || false))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true)))))))))))))))), ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true))))))))))))))))) || false) || false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))), true, false, false)))))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) && true)) || false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) && true)) || false))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-73.06), _GLF_FUZZED(-7.2)), bvec2(false, false))).y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))) && true))))), bool(bvec2(_GLF_IDENTITY((! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))) && true))))), bool(bvec2(_GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))) && true))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))) && true)))))))))), bool(bvec3((! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))))) && true))))), false, false))), true))), true)))))))));
        }
      }
     else
      {
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + _GLF_IDENTITY(1, ~ (~ (1)))), (min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + _GLF_IDENTITY(1, ~ (~ (1))))) >> 0u))) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - _GLF_IDENTITY(0u, (0u) - 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(false || (_GLF_DEAD(false)), (false || (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(false || (_GLF_DEAD(false)), (false || (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) && true))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
              return;
             barrier();
            }
           barrier();
          }
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))) && true))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true) && (false))))), false || (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true), (! ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true)) || false)))) && true))) || false)) || false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) || false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), (bool(bool(false))) && true))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, 0 | (0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) ^ 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), ~ (~ (int(8)))), int(8))), clamp(_GLF_IDENTITY(int(8), min(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), _GLF_IDENTITY(int(8), min(int(8), int(8))), _GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, clamp(8, 8, 8))))), min(int(8), int(8)))))) | 0))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), false))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) < _GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) << 0)) | 0) + (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) ^ _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) - 0)))))))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u))))) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))))], uint(read_1 + 1), 4, 64, 4);
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) / 1u))))), _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) / 1u))))), _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) / 1u))))), _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) / 1u))))), _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) / 1u))))), _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))), (uint(~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))) / 1u))))), _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))))))))) + 0u)))], (buf[virtual_gid]) >> 0u), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) * 1)) | (_GLF_IDENTITY(64, (64) << 0))), _GLF_IDENTITY(0, clamp(0, 0, 0)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(9864.0242, -576.837)))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(log(_GLF_IDENTITY(vec2(1.0, 1.0), (true ? _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(11.88, 8509.5796))))))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))))) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    return;
   if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.9))) < injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x))), float(_GLF_FUZZED(-4880.9314)), bool(false))), injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(vec2(injectionSwitch)))) * vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-763.518)), bool(false)))), _GLF_IDENTITY(mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) * vec2(1.0, 1.0)), clamp(mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) * vec2(1.0, 1.0)), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) * vec2(1.0, 1.0)), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) * vec2(1.0, 1.0)))))).y)), true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     int i = 0;
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u), (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)) * (1u & (1u & 1u)))), 0u ^ (~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((1) | int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1) | int(_GLF_ZERO(0.0, injectionSwitch.x))) | ((1) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0)))), (read_1 + 1) ^ 0u))))) >> 0u))), (read_1 + 1) ^ _GLF_IDENTITY(0u, (0u) / 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u))))) >> 0u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u))))) >> 0u))) >> 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec3(read_1, 1u, 0u)), ~ (~ (uint(uvec3(read_1, 1u, 0u)))))) + 1, (read_1 + 1) ^ 0u))))) >> 0u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u)), (~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u))) >> (1u ^ 1u)), 0u ^ (~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u))))) >> 0u))) >> 0u)) + 0u)), (read_1 + 1) ^ 0u), 1u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) << 0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), _GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED(subgroup_id))))), uint(3u))))))) << 0u) == _GLF_IDENTITY(_GLF_IDENTITY(read_2, 0u | (read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, clamp(read_2, read_2, _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(read_2, 0u | (read_2)))))), 0u | (read_2))) * 1u)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, _GLF_IDENTITY(((1) + 0), ~ (~ (((1) + 0)))) - (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(4, int(ivec3(4, 1, 1))), _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || _GLF_IDENTITY((! (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((! (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))) && true)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u)], uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(int(_GLF_IDENTITY((1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((1), 0), ivec2(0, 0) | (ivec2((1), 0)))), (false ? _GLF_FUZZED(-12086) : int(ivec2((_GLF_IDENTITY(1, (1) | (1))), 0)))))))) - 0) == read_2, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), 1, 0)))))) / 1) == _GLF_IDENTITY(read_2, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (read_2))), true && ((_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0), 1, 0)))))) / 1) == _GLF_IDENTITY(read_2, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (read_2))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))))) + _GLF_IDENTITY(1, (1) - 0) == _GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2)), read_2)), (0u | 0u), 0u)), (uint(uvec3(_GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2)), read_2)), (0u | 0u), 0u))) << 0u))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(7.8)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))))), 1u, 0u, 1u)))))) + _GLF_IDENTITY(1, (1) - 0) == read_2))))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ _GLF_IDENTITY((read_1), ((read_1)) | ((read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), max((_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 1u)))))) + _GLF_IDENTITY(1, (1) - 0) == read_2))))), bool(bvec3(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ _GLF_IDENTITY((read_1), 1u * ((read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ _GLF_IDENTITY((read_1), ~ (_GLF_IDENTITY(~ ((read_1)), clamp(~ ((read_1)), ~ ((read_1)), ~ ((read_1)))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))), 1u, 0u, 1u)))))) + _GLF_IDENTITY(1, (1) - 0) == read_2))))), false, false)))) && true), false, false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(read_1, 0u ^ (read_1))), 1u, 1u, (107871u & 0u)), (true ? uvec4((_GLF_IDENTITY(read_1, 0u ^ (read_1))), 1u, 1u, (107871u & 0u)) : _GLF_FUZZED(uvec4(114591u, 180309u, 175578u, 181457u))))), (uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(read_1, 0u ^ (read_1))), 1u, 1u, (107871u & 0u)), (true ? uvec4((_GLF_IDENTITY(read_1, 0u ^ (read_1))), 1u, 1u, (107871u & 0u)) : _GLF_FUZZED(uvec4(114591u, 180309u, 175578u, 181457u)))))) * 1u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(58385))), 1))))) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))), (true ? clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(695.309)), bool(false))), injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (read_1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1, 0u ^ (read_1))), uint(uvec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1, 0u ^ (read_1))), uint(uvec2(~ (_GLF_IDENTITY(read_1, 0u ^ (read_1))), 0u))), 0u)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))) : _GLF_FUZZED(subgroup_id))))) + _GLF_IDENTITY(1, (1) - 0) == read_2))))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (129791u & (0u << _GLF_IDENTITY(uint(0u), uint(0u)))) ^ (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) | (max(read_1, _GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), uint(uvec2((_GLF_IDENTITY(read_1, 0u ^ (read_1))), 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, (0u | 1u), 1u, 0u)), 0u | (uint(uvec4(0u, (0u | 1u), 1u, 0u))))) ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) - 0) == read_2))))), bool(bvec3(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))), uint(uvec3(clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (1) - 0) == read_2))))), false, false)))) && true), false, false, true)), true, false), bvec3(bvec4(bvec3(bool(bvec4(_GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, 0u | (read_1)), _GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(packHalf2x16(vec2(-63.44, -9.4))))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5925.9307)), float(0.0), bool(true))))), injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))))) + _GLF_IDENTITY(1, (1) - 0) == read_2))))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) - 0)), (true ? ~ (_GLF_IDENTITY(1, (1) - 0)) : _GLF_FUZZED(12149))))) == read_2), ! (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ~ (~ ((_GLF_IDENTITY(read_1, 0u ^ (read_1)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))))) + _GLF_IDENTITY(1, (1) - 0) == read_2))))), bool(bvec3(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(1, (1) - 0) == read_2), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u)))))), (_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)))), _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-0.1) : 0.0))) - 0.0), injectionSwitch.x)))), uint(uvec4(max(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u, 1u))))))) / 1u) + _GLF_IDENTITY(1, (1) - 0) == read_2))))), false, false)))) && true), false, false, true)), true, false), false)))))))))) + 1, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY((64) ^ _GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY((true ? (64) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(0, min(0, 0)) | (0)), 0, 0))) - 0), (0) / 1) : _GLF_FUZZED(-35844)), ((true ? (64) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(0, min(0, 0)) | (0)), 0, 0))) - 0), (0) / 1) : _GLF_FUZZED(-35844))) * 1)))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), clamp(4, 4, 4)));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), true, false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
}
