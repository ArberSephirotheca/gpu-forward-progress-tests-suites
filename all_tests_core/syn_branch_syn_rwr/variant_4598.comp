#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_32 {
 mat2x3 _f0;
 ivec2 _f1;
 ivec3 _f2;
 vec2 _f3;
 bool _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_31 {
 mat2 _f0;
} ;

struct _GLF_struct_33 {
 _GLF_struct_31 _f0;
 _GLF_struct_32 _f1;
 mat3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_29 {
 mat3x2 _f0;
 mat2 _f1;
 uvec4 _f2;
 mat2x4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_28 {
 mat4x2 _f0;
 mat2x4 _f1;
 mat3x4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_30 {
 _GLF_struct_28 _f0;
 _GLF_struct_29 _f1;
 ivec2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_26 {
 mat2x4 _f0;
} ;

struct _GLF_struct_25 {
 uvec2 _f0;
 mat3 _f1;
 bool _f2;
} ;

struct _GLF_struct_24 {
 ivec4 _f0;
 mat3x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_23 {
 uvec3 _f0;
 uvec2 _f1;
 int _f2;
 mat2x4 _f3;
 uint _f4;
 mat4 _f5;
} ;

struct _GLF_struct_27 {
 _GLF_struct_23 _f0;
 ivec2 _f1;
 _GLF_struct_24 _f2;
 _GLF_struct_25 _f3;
 int _f4;
 _GLF_struct_26 _f5;
 uint next_virtual_gid;
} ;

struct _GLF_struct_34 {
 _GLF_struct_27 _f0;
 _GLF_struct_30 _f1;
 uvec2 _f2;
 _GLF_struct_33 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_20 {
 uvec2 _f0;
} ;

struct _GLF_struct_21 {
 _GLF_struct_20 _f0;
 mat2 _f1;
 mat2x3 _f2;
 int i;
} ;

struct _GLF_struct_18 {
 mat3x2 _f0;
 vec3 _f1;
 uvec4 _f2;
 mat3 _f3;
 bool _f4;
} ;

struct _GLF_struct_17 {
 bvec2 _f0;
 int _f1;
 uvec4 _f2;
 vec2 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
 uint _f1;
 mat4 _f2;
 int _f3;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
 bvec3 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_13 {
 float _f0;
 mat4x3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_14 {
 mat4x3 _f0;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_22 {
 mat3x2 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_19 _f2;
 float _f3;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_10 {
 bvec2 _f0;
 ivec4 _f1;
 ivec2 _f2;
 bvec3 _f3;
 int _f4;
 vec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 uint _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 mat3x4 _f1;
 mat2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_11 {
 int _f0;
 vec4 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 uvec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 uint _f1;
 int _f2;
 mat3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 mat3x2 _f1;
 ivec3 _f2;
 mat3 _f3;
 float _f4;
 vec2 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 ivec3 _f1;
 uvec4 _f2;
 vec3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_2 {
 int _f0;
 vec4 _f1;
 int _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 mat4x2 _f1;
 int _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat2x4 _f4;
 _GLF_struct_3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_12 {
 uint read_2;
 ivec3 _f0;
 _GLF_struct_4 _f1;
 mat3 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_11 _f4;
 mat2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-52.36) : injectionSwitch.x)) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true)))), false, true, false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) << 0), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, mix(float(_GLF_FUZZED(77.21)), float(_GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y))), bool(true)))) / _GLF_ONE(1.0, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(83993) : _GLF_IDENTITY(int(1), (int(1)) ^ 0)))) | 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec3(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)), 0)))))), (false ? _GLF_FUZZED(62120) : ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((_GLF_IDENTITY(int(1), (int(1)) ^ 0)), min((_GLF_IDENTITY(int(1), (int(1)) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(1), (int(1)) ^ 0)), 0 | ((_GLF_IDENTITY(int(1), (int(1)) ^ 0)))))) | 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec3(_GLF_IDENTITY(int(1), int(1)), 0, 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))));
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         do
          {
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))))))) && true))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) << 0u))))))), uint(0u))))), _GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u)))))), uint(0u)))), uvec2(0u, 0u) ^ (uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u)))))), uint(0u))))))), 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8483.5751)), float(1.0), bool(true))), injectionSwitch.y)))), 0u ^ (uint(uvec3(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u)))))), uint(0u))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))), clamp(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))), _GLF_IDENTITY(uint(0u), uint(0u))))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) << (0u ^ 0u)), uint(0u))) << 0u) ^ 0u)))))))) * subgroup_size + subgroup_local_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (0u) / 1u)))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u))))))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (0u) ^ 0u)))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u), uint(0u))), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u), (uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (_GLF_IDENTITY(0u, (0u) | (0u)) >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ (0u))), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)) | (uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)))), clamp(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | _GLF_IDENTITY(0u, 0u ^ (0u))), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)), ((uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u))) - uvec2(0u, 0u)) | (uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), (_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u)))))) ^ 0u))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u), (uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)) | (uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u), (uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)) | (uvec2(_GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), min(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), _GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(0u)))) | 0u)) | 0u))))), uint(0u))), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u, ((_GLF_IDENTITY(uint(0u), uint(0u))) << 0u) << 0u))))))), 0u)))))))) * subgroup_size + subgroup_local_id) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) - 0u), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u))))))) * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) | 0u)))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u))))))) * subgroup_size)) + subgroup_local_id))), uint(uvec4((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) | (0u)))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u))))))) * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(_GLF_IDENTITY(uint(0u), 0u ^ (_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u))), _GLF_IDENTITY(uint(0u), 0u ^ (uint(0u))))), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u))))))) * subgroup_size + subgroup_local_id) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u))))))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) | 0u), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, max(0u, 0u))))))), uint(uvec2(subgroup_id, _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u)), uint(_GLF_IDENTITY(uvec3((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u)), 1u, 1u), ~ (~ (uvec3((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u)), 1u, 1u))))))))))) * subgroup_size) << (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), 0u ^ (uint(0u))))))), max(uint(uvec2(subgroup_id, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) << 0u))))))) * subgroup_size)) + subgroup_local_id))), 0u, 1u, 0u)))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), false))))))))))))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.0) : injectionSwitch.y))) - abs(0.0))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), true && (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(_GLF_struct_27(_GLF_struct_23(uvec3(1u), uvec2(1u), 1, mat2x4(1.0), _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (false ? _GLF_FUZZED(120954u) : (1u))) | 0u), mat4(1.0)), ivec2(1), _GLF_struct_24(ivec4(1), mat3x4(1.0), ivec4(1)), _GLF_struct_25(uvec2(_GLF_IDENTITY(1u, (1u) / 1u)), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), true), 1, _GLF_struct_26(mat2x4(1.0)), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), _GLF_struct_30(_GLF_struct_28(mat4x2(1.0), mat2x4(1.0), mat3x4(1.0), mat2(1.0)), _GLF_struct_29(mat3x2(1.0), mat2(1.0), uvec4(1u), mat2x4(1.0), mat4x3(1.0)), ivec2(1), mat3x4(1.0)), uvec2(1u), _GLF_struct_33(_GLF_struct_31(mat2(1.0)), _GLF_struct_32(mat2x3(1.0), ivec2(1), ivec3(1), vec2(1.0), true, bvec2(true)), mat3(1.0), mat3x4(1.0)), mat3x2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) - 0, int(ivec4((int(2)) - 0, 0, 1, 1))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) - 0, int(ivec4((int(2)) - 0, 0, 1, 1)))))) << 0)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))) * 1.0), injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_ONE(1.0, injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))))))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(4119.3065), _GLF_FUZZED(-5.4)), vec2((vec2(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), float(_GLF_IDENTITY(mat3x2(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), (false ? _GLF_FUZZED(mat3x2(9.3, -9.7, -6.1, -1.7, -2428.9637, -8.9)) : _GLF_IDENTITY(mat3x2(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)))), determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), (mat3x2(dot(vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0)), 1.0, 0.0, 1.0), vec4(1.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0)), determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(length(0.0), _GLF_IDENTITY(float(float(length(0.0))), clamp(float(float(length(0.0))), float(float(length(0.0))), float(float(length(0.0)))))), 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) * mat3(1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), mix(float(_GLF_FUZZED(2.3)), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), max(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 1.0), max(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 1.0), (vec4(0.0, 1.0, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 1.0), vec4(_GLF_IDENTITY(vec4(vec4(0.0, 1.0, 0.0, 1.0)), vec4(mat3x2(vec4(_GLF_IDENTITY(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-810.751))), 1.0), (vec4(0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-810.751))), 1.0)) - vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0))))))), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, tan(0.0), 1.0))), 0.0, 1.0, 0.0)))))), bool(true)))) / 1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 0.0)), 0.0, 0.0, 1.0, 1.0)))[0], (vec2(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(9.4)), bool(false))), 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.4)), bool(false))), 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.2)), bool(false)))), float(_GLF_FUZZED(vec4(1.1, 4156.2029, 9.1, 78.39).q)), bool(false))))))[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true)))).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), ! (! (! (_injected_loop_counter != 1)))))), false, false, true))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)), bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)), true, false))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41118u)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-9.3)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_FUZZED(839.115)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.x)) > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && true), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, false)), false))))))) && true))))
      barrier();
     barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), max((0 << _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), ((0 << _GLF_IDENTITY(int(3), int(3)))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), bool(bvec3(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(462.613)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), false, false, true)), false, true)))))))))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   atomicStore(buf[_GLF_struct_replacement_34._f0.next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))) > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(atomicLoad(buf[virtual_gid], 4, 64, 0), ivec3(_GLF_IDENTITY(1, min(1, 1))), _GLF_struct_4(_GLF_struct_0(mat2x4(1.0), mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(- -8242.0880, max(- -8242.0880, _GLF_IDENTITY(- -8242.0880, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6485.7477), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(7.9) : _GLF_IDENTITY(_GLF_FUZZED(-6485.7477), _GLF_IDENTITY(min(_GLF_FUZZED(-6485.7477), _GLF_FUZZED(-6485.7477)), (min(_GLF_FUZZED(-6485.7477), _GLF_FUZZED(-6485.7477))) * 1.0))))), float(- -8242.0880), bool(true)))))))), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true)))), 1, uvec2(1u)), mat2x4(1.0), _GLF_struct_1(mat4x3(1.0), bvec4(true)), _GLF_struct_2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY(1, (1) - 0)) * 1), vec4(1.0), 1, bvec4(true)), mat2x4(1.0), _GLF_struct_3(mat4(1.0), ivec3(1), uvec4(_GLF_IDENTITY(1u, (0u | 0u) + (1u))), vec3(1.0), mat3x4(1.0)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) + 0u), 1u))))), (uvec4(1u)) | uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), mat3(1.0), _GLF_struct_7(_GLF_struct_5(ivec4(_GLF_IDENTITY(1, (1) + 0)), mat3x2(1.0), _GLF_IDENTITY(ivec3(1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(1) : _GLF_FUZZED(ivec3(-67634, 69918, -62370)))), mat3(1.0), 1.0, vec2(1.0)), _GLF_struct_6(uvec2(1u), 1u, 1, mat3(1.0), vec3(1.0)), _GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))), _GLF_struct_11(1, vec4(1.0), _GLF_struct_8(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), mat3x4(1.0), mat2(1.0), bvec4(true)), _GLF_struct_9(vec2(1.0), 1u, mat3x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(trunc(302.438)) : 1.0)))), _GLF_struct_10(bvec2(true), ivec4(1), _GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(98707, 70075)) : ivec2(1))), bvec3(true), 1, vec2(1.0), mat4x3(_GLF_IDENTITY(1.0, (1.0) + length(vec2(0.0, 0.0))))), uvec2(1u), mat3x4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(mat3(vec2(1.0, 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), vec2(vec3(vec2(mat3(vec2(1.0, 1.0), _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), 0.0)))))))), mat2(1.0));
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(read_1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(true ? subgroup_local_id : _GLF_FUZZED(read_1), min(true ? subgroup_local_id : _GLF_FUZZED(read_1), true ? subgroup_local_id : _GLF_FUZZED(read_1))))), (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(read_1)))) | 0u), _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(read_1))), _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(read_1))))) + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(mat3x2(1.0), _GLF_struct_14(mat4x3(1.0), _GLF_struct_13(1.0, mat4x3(1.0), uvec4(1u))), _GLF_struct_19(vec4(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))))), _GLF_struct_15(bvec3(true), bvec3(true), _GLF_IDENTITY(uvec2(1u), (false ? _GLF_FUZZED(uvec2(186482u, 109263u)) : _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) * ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> _GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u))))))))))), _GLF_struct_16(ivec3(1), 1u, mat4(1.0), 1), _GLF_struct_17(bvec2(true), 1, uvec4(1u), vec2(1.0), mat4x3(1.0)), _GLF_struct_18(mat3x2(1.0), vec3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), min(1.0, 1.0))), max(min(1.0, 1.0), min(1.0, 1.0)))), 1.0))), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) << uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x), _GLF_ZERO(0.0, injectionSwitch.x))), mat3(1.0), true)), 1.0, _GLF_struct_21(_GLF_struct_20(uvec2(1u)), mat2(1.0), mat2x3(1.0), 0));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0), mat4x3(mat4(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0), mat4x3(mat4(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0), mat4x3(mat4(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0), mat4x3(mat4(mat4x3(injectionSwitch.x, abs(0.0), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0)))))))) < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   atomicStore(buf[_GLF_struct_replacement_34._f0.next_virtual_gid], uint(read_1 + 1 == _GLF_struct_replacement_12.read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_struct_replacement_34._f0.next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == _GLF_struct_replacement_12.read_2, true && (read_1 + 1 == _GLF_struct_replacement_12.read_2))) + 1, 0u | (uint(_GLF_IDENTITY(read_1 + 1 == _GLF_struct_replacement_12.read_2, true && (read_1 + 1 == _GLF_struct_replacement_12.read_2))) + 1)), _GLF_IDENTITY(4, min(4, 4)), 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 1.0)))) / 1.0)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((true ? vec3(411.966, 430.293, -81.87) : vec3(-283.139, -2641.9001, -1.3)).t)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true)))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec3(false, true, false))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
