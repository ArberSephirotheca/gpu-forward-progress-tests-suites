#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(963.989)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))))) && true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(112442u, 186832u, 189915u)) : gl_WorkGroupSize))), ((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(112442u, 186832u, 189915u)) : gl_WorkGroupSize)))) | ((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(112442u, 186832u, 189915u)) : gl_WorkGroupSize))))) + _GLF_IDENTITY((uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), min(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), ~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))))), uvec3(uvec3(_GLF_IDENTITY((uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), min(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), ~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))))), min((uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), min(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), ~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), min(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), ~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))))))))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(vec2(1.0, 1.0))))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-762.638)), vec2(_GLF_FUZZED(6681.1538), _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-1987.3141)))), bvec2(false, true))).x, mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-762.638)), vec2(_GLF_FUZZED(6681.1538), _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-1987.3141)))), bvec2(false, true))).x), float(_GLF_FUZZED(8.4)), bool(false))) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false, true))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false, true), false))))))))))))))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), true))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(inversesqrt(8821.7833)))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)))))))))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))) > injectionSwitch.y, false, true)))) || false))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.36)), bool(false))))))) > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(bvec3(bool(bool(! (_GLF_DEAD(false)))), true, false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(14168u) : subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))), min(_GLF_IDENTITY(0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, ~ (_GLF_IDENTITY(~ (6u), (true ? ~ (6u) : _GLF_FUZZED(subgroup_local_id)))))))) / 1u)))), (_GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))) | (_GLF_IDENTITY(0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))), (0u | (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), max(((subgroup_local_id + 1)), ((subgroup_local_id + 1)))) - (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), ~ (~ (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, ~ (~ (6u)))), uint(6u))))))))) | (0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))))), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))), ~ (~ (_GLF_IDENTITY(0u | (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u, 0u, 0u))))), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1)))) - (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(_GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, (6u) ^ 0u), 6u))), uint(6u))))))), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) | (uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)))) * (0u | (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u)), ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))), subgroup_local_id)), 0u + (subgroup_local_id)) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uvec4(110490u, 120421u, 114454u, 78601u).s) : subgroup_local_id)) + 1)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u))) << (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(subgroup_id) : 0u)) | (1u ^ 1u))) - _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, _GLF_IDENTITY(uint(uvec3(6u, 0u, 0u)), min(uint(uvec3(6u, 0u, 0u)), uint(uvec3(6u, 0u, 0u))))), 6u))), _GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u))), clamp(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, _GLF_IDENTITY(uint(uvec3(6u, 0u, 0u)), min(uint(uvec3(6u, 0u, 0u)), uint(uvec3(6u, 0u, 0u))))), 6u))), _GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u))), uint(uvec3((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, _GLF_IDENTITY(uint(uvec3(6u, 0u, 0u)), min(uint(uvec3(6u, 0u, 0u)), uint(uvec3(6u, 0u, 0u))))), 6u))), _GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u))), 1u, 1u))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, _GLF_IDENTITY(uint(uvec3(6u, 0u, 0u)), min(uint(uvec3(6u, 0u, 0u)), uint(uvec3(6u, 0u, 0u))))), 6u))), _GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u))), (false ? _GLF_FUZZED(subgroup_local_id) : (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, _GLF_IDENTITY(uint(uvec3(6u, 0u, 0u)), min(uint(uvec3(6u, 0u, 0u)), uint(uvec3(6u, 0u, 0u))))), 6u))), _GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u))))), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, _GLF_IDENTITY(uint(uvec3(6u, 0u, 0u)), min(uint(uvec3(6u, 0u, 0u)), uint(uvec3(6u, 0u, 0u))))), 6u))), _GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u))))))))))))) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1522.2738)), bool(false))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (! ((injectionSwitch.x > injectionSwitch.y)))), (! (! (! ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), true)))))) && true), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (! ((injectionSwitch.x > injectionSwitch.y)))), (! (! (! ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), bool(bvec2(bool(bvec4(true, false, true, true)), true)))))), (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))).x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y)))), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))))))))) && true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), max(4, 4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), max(4, 4))) << 0)) | (4)), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | (2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | (2))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 0) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 0)))) >> 0), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), false)), true && (bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), false)))))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true, true))))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 | 0), true && (_GLF_IDENTITY(_injected_loop_counter > (0 | 0), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter > (0 | 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec3(_injected_loop_counter > (0 | 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), true && (_injected_loop_counter > (0 | 0)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), true && (bool(bool(_GLF_IDENTITY(false, false || (false)))))), bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), true && (bool(bool(_GLF_IDENTITY(false, false || (false)))))), false))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))))))))
                  barrier();
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(355.131), _GLF_FUZZED(-525.451)), bvec2(_GLF_IDENTITY(false, (false) && true), false))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(-7.6)) : injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(355.131), _GLF_FUZZED(-525.451)), bvec2(_GLF_IDENTITY(false, (false) && true), false))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(-7.6)) : injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(355.131), _GLF_FUZZED(-525.451)), bvec2(_GLF_IDENTITY(false, (false) && true), false))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(-7.6)) : injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (false) || false))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! (true)), false || ((! (true)))))))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
        continue;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (false))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true)))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5177.3714)), vec2(_GLF_FUZZED(-9.7), (injectionSwitch)[1]), bvec2(false, true))).x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.3), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0))))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(1192.7900, -5.1, 52.21).p)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) + vec2(0.0, 0.0)))).y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true)))))))) && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec2((false), false)))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true) && _GLF_IDENTITY(true, bool(bvec2(true, false)))))))))) && true), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(uvec3(152212u, 92879u, 89118u)[2], ~ (~ (uvec3(152212u, 92879u, 89118u)[2])))), (true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(152212u, 92879u, 89118u), (uvec3(152212u, 92879u, 89118u)) << uvec3(0u, 0u, 0u))[2], ~ (~ (uvec3(152212u, 92879u, 89118u)[2]))))) ^ 0u))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
         return;
        }
       return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), true, true, true))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), true && (true && (! (_GLF_IDENTITY(false, false || (false))))))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     int i = 0;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-55.16) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9208.0046))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(read_2) : _GLF_IDENTITY(_GLF_IDENTITY(read_2, clamp(_GLF_IDENTITY(read_2, max(read_2, read_2)), read_2, _GLF_IDENTITY(read_2, min(read_2, read_2)))), 1u * _GLF_IDENTITY((read_2), (false ? _GLF_FUZZED(_GLF_IDENTITY(usubBorrow(subgroup_local_id, uvec2(47540u, 195620u).g, read_2), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : usubBorrow(subgroup_local_id, _GLF_IDENTITY(uvec2(47540u, 195620u), (uvec2(47540u, 195620u)) << uvec2(0u, 0u)).g, read_2)), 0u | ((false ? _GLF_FUZZED(num_workgroup) : usubBorrow(subgroup_local_id, _GLF_IDENTITY(uvec2(47540u, 195620u), (uvec2(47540u, 195620u)) << uvec2(0u, 0u)).g, read_2)))))) : _GLF_IDENTITY((read_2), min((read_2), (read_2))))))))) + _GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(21966) : 1), ((false ? _GLF_FUZZED(21966) : 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), 4, 64, _GLF_IDENTITY(4, int(ivec3(4, 0, 1))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))))))
            barrier();
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, tan(0.0)), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, tan(0.0))))), min(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, tan(0.0)), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, tan(0.0))))), float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, tan(0.0)), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, tan(0.0))))))))) / abs(1.0)) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(451.084)), vec2(_GLF_FUZZED(-282.911), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(451.084)), vec2(_GLF_FUZZED(-282.911), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(451.084)), vec2(_GLF_FUZZED(-282.911), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), 1.0, 0.0, 0.0, abs(0.0)))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(451.084)), vec2(_GLF_FUZZED(-282.911), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(451.084)), vec2(_GLF_FUZZED(-282.911), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))))).x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), 0.0)))), _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, sqrt(1.0), sqrt(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), mix(vec2((vec2(0.0, 1.0))[0], (vec2(0.0, 1.0))[1]), vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-0.5)), bvec2(false, false))), vec2(1.0, 0.0)))), 1.0, 1.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))).y, min(injectionSwitch.y, injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2((injectionSwitch), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), clamp(_GLF_IDENTITY(vec2(mat2((injectionSwitch), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), min(vec2(mat2((injectionSwitch), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), vec2(mat2((injectionSwitch), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)))), vec2(mat2((injectionSwitch), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), vec2(mat2((injectionSwitch), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-562.340), _GLF_FUZZED((8399.2213 + -3675.8277))), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3((injectionSwitch)[0], 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), vec2(mat4(injectionSwitch, 1.0, sqrt(1.0), _GLF_IDENTITY(sqrt(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), min(sqrt(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), _GLF_IDENTITY(sqrt(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), (true ? sqrt(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(-575.046))))), 1.0, 1.0, length(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))), determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (mat2(0.0, 0.0, 0.0, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 0.0))))).y, min(injectionSwitch.y, injectionSwitch.y))))) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 53660)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) && true)) || false))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), false), true))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), false), true))), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true)))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), true, _GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, tan(0.0), 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0))))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, tan(0.0), 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0))))).y), float(_GLF_FUZZED(-8.5)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), bool(bvec3(_GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), bool(bvec4((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true)))))), false), _GLF_IDENTITY(true, false || (true))))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), true)))), true, false, true)))))), false), true))), false, false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)), false)))))), ! (! ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), true, _GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, tan(0.0), 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0))))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, tan(0.0), 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0))))).y), float(_GLF_FUZZED(-8.5)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), bool(bvec3(_GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), bool(bvec4((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true)))))), false), _GLF_IDENTITY(true, false || (true))))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true), true)))), true, false, true)))))), false), true))), false, false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)), false))))))))))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true)))))))
              barrier();
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))) && true)))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(13493) : _GLF_IDENTITY(_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), 0 ^ (~ (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))), 0 + (~ (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(13493) : _GLF_IDENTITY(~ (1), 0 + (~ (1))))))) / 1, min(_GLF_IDENTITY(((_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(13493) : _GLF_IDENTITY(~ (1), 0 + (~ (1))))))) / 1, (((_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(13493) : _GLF_IDENTITY(~ (1), 0 + (~ (1))))))) / 1) >> 0), ((_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(13493) : _GLF_IDENTITY(~ (1), 0 + (~ (1))))))) / 1)))) == _GLF_IDENTITY(_GLF_IDENTITY(read_2, (1u ^ 1u) ^ (read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) << 0u), (1u ^ 1u) ^ (read_2))) / 1u)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0))), max(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0)))))))), exp(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), 0.0, 1.0, 1.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch, min(_GLF_IDENTITY(false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch, min(_GLF_IDENTITY(false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch, (false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch) / vec2(1.0, 1.0)), false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch)), false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch)))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0))), max(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x3((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0)))))))), exp(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), 0.0, 1.0, 1.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch, min(_GLF_IDENTITY(false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch, min(_GLF_IDENTITY(false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch, (false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch) / vec2(1.0, 1.0)), false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch)), false ? _GLF_FUZZED(sinh(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(398.208)), float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) + 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0)))) - vec2(0.0, 0.0)))))) : injectionSwitch)))).y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7)))))) ^ 0, ~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), int(7)))) ^ 0, 1, 1), ivec3(1, 1, 1) * (ivec3(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))) ^ 0, 1, 1)))), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1), ivec3(1, 1, 1) * (ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1))), min(_GLF_IDENTITY(ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1), ivec3(1, 1, 1) * (ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1), ivec3(1, 1, 1) * (ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1))), (_GLF_IDENTITY(ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1), ivec3(1, 1, 1) * (ivec3(((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0, 1, 1)))) << ivec3(0, 0, 0))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0)), clamp((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0)))) >> 0), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), clamp(((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))), 0 ^ (1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))))), ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))))) ^ _GLF_IDENTITY(0, (0) / 1))), ((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) >> 0), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), clamp(((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))))) ^ 0))) | ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(15334) : 1 << _GLF_IDENTITY(int(7), int(7))))) | (1 << _GLF_IDENTITY(int(7), int(7))))), ((1 << _GLF_IDENTITY(int(7), int(7)))) >> _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-45576)))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), clamp(((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))), ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, min(7, 7)))))))) ^ 0)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) ^ 0))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(ivec3(-2189, -39743, -20403)[0]))))), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(ivec3(-2189, -39743, -20403)[0])))))) << 0) > 0, false || (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0))))), (_injected_loop_counter > 0) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_injected_loop_counter)), (true ? _GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_injected_loop_counter)) : _GLF_FUZZED((++ _injected_loop_counter))))) * 1), _GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(ivec3(-2189, -39743, _GLF_IDENTITY(-20403, (-20403) | 0))[0]))))) > 0, false || (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_injected_loop_counter > 0))))), (_injected_loop_counter > 0) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec3(false, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))))), true && (! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))))), true && (! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))), true), true))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true))) && true)), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), ! (! (true && (false))))) && true)), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), ! (! (true && (false))))) && true)), true, true)))))))), true && (! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)))), false, false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))))), _GLF_IDENTITY(true && (! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), ! (! (true && (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) || false)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(bvec3(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) || false)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true))))))))))))), true), true)))))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
}
