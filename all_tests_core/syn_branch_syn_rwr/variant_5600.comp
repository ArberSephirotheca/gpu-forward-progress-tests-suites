#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 int _f0;
 vec3 _f1;
 bvec4 _f2;
 ivec4 _f3;
 uvec3 _f4;
 mat3x4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 _GLF_struct_6 _f1;
 vec4 _f2;
 mat3x2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 mat4 _f3;
 uvec4 _f4;
 bvec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 uint subgroup_local_id;
 float _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 ivec4 _f1;
 mat4x3 _f2;
 ivec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat3x2 _f1;
 uvec4 _f2;
 _GLF_struct_1 _f3;
 bool _f4;
 _GLF_struct_2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 ivec4 _f2;
 mat3x4 _f3;
 ivec4 _f4;
 _GLF_struct_7 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  barrier();
 uvec4 GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.x = subgroup_size;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_4(_GLF_struct_0(mat4x2(1.0)), mat3x2(1.0), uvec4(1u), _GLF_struct_1(mat4x3(1.0), ivec4(1), mat4x3(1.0), ivec3(1), vec2(1.0)), true, _GLF_struct_2(ivec4(1), gl_SubgroupInvocationID, 1.0, bvec4(true)), _GLF_struct_3(ivec4(1), uvec4(1u), mat3x2(1.0), mat4(1.0), uvec4(1u), bvec3(true), uvec4(1u))), _GLF_struct_5(uvec2(1u)), ivec4(1), mat3x4(1.0), ivec4(1), _GLF_struct_7(mat3x4(1.0), _GLF_struct_6(1, vec3(1.0), bvec4(true), ivec4(1), uvec3(1u), mat3x4(1.0), mat2x3(1.0)), vec4(1.0), mat3x2(1.0), mat2x4(1.0)));
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.w = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.z = workgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.z * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.x + _GLF_struct_replacement_8._f0._f5.subgroup_local_id;
 GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.y = virtual_gid;
 uint next_virtual_gid = workgroup_base + subgroup_id * GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.x + ((_GLF_struct_replacement_8._f0._f5.subgroup_local_id + 1) % GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.x);
 uint read_1 = atomicLoad(buf[GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.y], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.y], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   barrier();
  }
 if(_GLF_struct_replacement_8._f0._f5.subgroup_local_id + 1 < GLF_merged2_0_3_70_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizenum_workgroup.xyz.x)
  {
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
  }
}
