#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))))), 0 ^ ((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(4532.5878))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0) : _GLF_FUZZED(6.4))))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, ! (! (false)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u)).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec4(! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))), false, true, false))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (_GLF_IDENTITY(bool(bvec3(false, false, true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec4(bvec3(bvec3(false, false, true)), true))))))), ! (! (! (bool(bvec3(false, false, true))))))))) || false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-21195)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6550.2358)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), uvec2(0u, 0u) + (uvec2(workgroup_base, 1u))))) + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec2(workgroup_base, 1u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(uvec2(workgroup_base, 1u)), (uint(uvec2(workgroup_base, 1u))) - 0u) : _GLF_FUZZED((uvec2(65839u, 146358u) / num_workgroup)[1])))) + _GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), ~ (_GLF_IDENTITY(~ (subgroup_size), (103645u & 0u) ^ _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) | ((~ (subgroup_size))))))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), (min(subgroup_local_id, subgroup_local_id)) | 0u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(107222u) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size)))) + subgroup_local_id, 0u, 0u)), min(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(107222u) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size)))) + subgroup_local_id, 0u, 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(107222u) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size)))) + subgroup_local_id, 0u, 0u)))))) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, abs(0.0), sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | 0), ((0 | 0)) << (25980 & 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u)) | (subgroup_id * subgroup_size)), _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size))), max(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), 0u ^ (subgroup_id))) * 1u) * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), (true ? clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), max(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))) | (uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))), subgroup_id * subgroup_size) : _GLF_FUZZED(workgroup_base))), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_FUZZED(num_workgroup))) : subgroup_id * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || false)))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) + 0u)) / 1u) : _GLF_FUZZED(bitfieldExtract(subgroup_id, _GLF_IDENTITY(-86463, min(_GLF_IDENTITY(-86463, int(ivec4(_GLF_IDENTITY(-86463, 0 ^ (-86463)), 0, 1, 0))), -86463)), ivec2(79006, 24570)[0]))), _GLF_IDENTITY(max(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), ((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), _GLF_IDENTITY(bool(bvec4(! ((true)), false, false, false)), (bool(bvec4(! ((true)), false, false, false))) || false)))), false || (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), _GLF_IDENTITY(bool(bvec4(! ((true)), false, false, false)), (bool(bvec4(! ((true)), false, false, false))) || false)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))))) || false), true, true, false)), true && (bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))))) || false), true, true, false)))))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), ((! (true))) || false)) && true)) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(_GLF_IDENTITY(79006, clamp(79006, 79006, _GLF_IDENTITY(79006, _GLF_IDENTITY(int(ivec3(79006, (0 >> _GLF_IDENTITY(int(4), int(4))), 1)), (false ? _GLF_FUZZED(-72900) : int(ivec3(79006, (0 >> _GLF_IDENTITY(int(4), int(4))), 1))))))), (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0]))), min((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(_GLF_IDENTITY(79006, clamp(79006, 79006, 79006)), (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0]))), (_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(_GLF_IDENTITY(79006, clamp(79006, 79006, 79006)), (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0])))))))), _GLF_IDENTITY(uint(uint(max(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, _GLF_IDENTITY(-86463, (-86463) | 0), ivec2(79006, 24570)[0]))), _GLF_IDENTITY(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]), (bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])) >> 0u)))) - _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY((0u) >> 0u, ~ (~ ((0u) >> 0u)))), (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u)) | (_GLF_IDENTITY(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u)) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))), true, false, false)), true && (bool(bvec4((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))), true, false, false))))))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) ^ 0), 0, 0))]))), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(true, ! (! (true))) ? (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0]))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! _GLF_IDENTITY((! (! (! (true)))), ! (! ((! (! (! (true))))))))))))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, (_GLF_IDENTITY(true ? 79006 : _GLF_FUZZED(56912), max(true ? 79006 : _GLF_FUZZED(56912), true ? 79006 : _GLF_FUZZED(56912))))), 24570)[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(86739))), 0)), 0, 0))])))))) << (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))), 0u ^ (_GLF_IDENTITY(uint(uint(max(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), clamp(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), ((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), uint(uvec3(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), 1u, 0u))))), (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])), (_GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))) / 1u))) - _GLF_IDENTITY(0u, (0u) >> 0u)) | (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))), ((_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))) || false))))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))) && true)) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0]))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))), ! (! ((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))))))))))) ? _GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_id))) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(true, ! (! (true))) ? (_GLF_IDENTITY(subgroup_local_id + 1, 0u + (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0])))))) << (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))), ~ (_GLF_IDENTITY(~ (uint(uint(max(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), _GLF_IDENTITY(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u), 0u ^ (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (_GLF_IDENTITY(! (! (true)), (! (! (true))) || false))))))))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, _GLF_IDENTITY((true ? 79006 : _GLF_FUZZED(56912)), ((true ? 79006 : _GLF_FUZZED(56912))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), 24570)[0]))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))))))) ? (subgroup_local_id + 1) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])), (_GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))) ^ 0u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) : (_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, (true ? 79006 : _GLF_FUZZED(56912))), _GLF_IDENTITY(24570, ~ (_GLF_IDENTITY(~ (24570), (true ? ~ (24570) : _GLF_FUZZED(-70193))))))[0])))))) << (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) / 1u))))))), ~ (~ (~ (uint(uint(max(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))))) - _GLF_IDENTITY(0u, (0u) >> 0u), (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))])))) - _GLF_IDENTITY(0u, (0u) >> 0u)) | (((_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0])))) - _GLF_IDENTITY(0u, (0u) >> 0u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, ! (! (true))))))))))))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(true, ! (! (true))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(_GLF_IDENTITY(79006, (_GLF_IDENTITY(79006, (79006) << 0)) - 0), (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0]))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))), ! (_GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(! (! (! (! (true)))), false || (! (! (! (! (true)))))))))))))) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(79006, 24570)[0]))), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, ! (! (true)))))) && true) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0])), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, ! (! (true)))))) && true) ? (subgroup_local_id + 1) : _GLF_FUZZED(bitfieldExtract(subgroup_id, -86463, ivec2(_GLF_IDENTITY(79006, (true ? 79006 : _GLF_FUZZED(56912))), 24570)[0])))))))) << (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))))))))))))))))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), max(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), uvec4(subgroup_size, (1u ^ 0u), _GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), _GLF_FUZZED(890.364)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x))), 0u)))))) / 1u), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), max(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), uvec4(subgroup_size, (1u ^ 0u), 0u, 0u)))))) / 1u), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, (1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), 0u, 0u), max(uvec4(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((1u ^ 0u), clamp((1u ^ 0u), (1u ^ 0u), (1u ^ 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : (1u ^ _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0u, 0u), uvec4(subgroup_size, (_GLF_IDENTITY(1u, (1u) | (1u)) ^ 0u), 0u, 0u)))))) / 1u), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), max(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), uvec4(subgroup_size, (1u ^ 0u), 0u, 0u))))), 0u ^ (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), max(uvec4(subgroup_size, (1u ^ 0u), 0u, 0u), uvec4(subgroup_size, (1u ^ 0u), 0u, 0u)))))))) / 1u))));
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true), true && (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && (true), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(mat3x2(-682.798, 83.40, 4.3, 6.9, 48.42, -43.43)) : mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))) - mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))).x < injectionSwitch.y)))) && (true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false)) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(~ (~ (int(2))), (~ (~ (int(2)))) * 1))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bvec4(bool(false), false, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, _GLF_IDENTITY(true, (true) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, _GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), 0.0, 0.0, 0.0, 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-7.7 / float(187112u)))), vec2(_GLF_FUZZED(-7424.3103), (injectionSwitch)[1]), bvec2(false, true))).y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-59.54, 412.603)) : injectionSwitch)).y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.1)), float(1.0), bool(true))), injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, exp(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), tan(0.0), 0.0, 1.0, 1.0))) : _GLF_FUZZED(-3.1)))) - log(1.0)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), true, true, true))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1))) >> 0u)), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (mat2x4(injectionSwitch, 1.0, determinant(mat3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(410.043) : 0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)) * mat2(1.0)))).y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(14.03, (14.03) - 0.0), (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, true))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, true))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))))))), (injectionSwitch.x < injectionSwitch.y)) ? 14.03 : _GLF_FUZZED(length(vec3(-4.4, 1256.3628, -4191.0193))))))), vec2(_GLF_FUZZED(-235.955), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / _GLF_IDENTITY(sqrt(1.0), _GLF_IDENTITY((_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), (_GLF_IDENTITY((_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), max((_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), (_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0))))))), float(_GLF_FUZZED(-40.98)), bool(false)))) / 1.0) - 0.0))), bvec2(false, true))).x)) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))), false)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), (false || (false)) || false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), true)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))))))))), false)))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y)))))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true)), ! (! (bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true))))))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true)), ! (! (bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true))))))), true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true)), ! (! (bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true))))))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true)), ! (! (bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true))))))), true, true))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true)), ! (! (bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true)))))), (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), false, true)), ! (! _GLF_IDENTITY((bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0))))) ^ 0)))) >> _GLF_IDENTITY(int(0), int(0))), false, true))), ((bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0))))) ^ 0)))) >> _GLF_IDENTITY(int(0), int(0))), false, true)))) && true))))) || false)), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) >> _GLF_IDENTITY(int(0), int(0))) / 1)), false, true)), ! (! (bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) >> 0) >> _GLF_IDENTITY(int(0), int(0))), false, true))))))), true, true)))) || false)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) * 1.0), injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) * 1.0), injectionSwitch.y)), mix(float(_GLF_FUZZED(-984.838)), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) * 1.0), injectionSwitch.y))), bool(true))))), injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))) + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              barrier();
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 + (int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-484.536), _GLF_FUZZED(510.726)), bvec2(_GLF_IDENTITY(false, ! (! (false))), false))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-484.536), _GLF_FUZZED(510.726)), bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false))).y))) || false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ _GLF_IDENTITY(1, (1) / 1)), int(ivec3(_GLF_IDENTITY((1 ^ _GLF_IDENTITY(1, (1) / 1)), ((1 ^ _GLF_IDENTITY(1, (1) / 1))) >> 0), 1, 1)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(992.285)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))) && true)));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))));
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (read_1)) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 | (1)))) == read_2), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u)) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | 0u)) | 0u) + 1 == read_2, (read_1 + 1 == read_2) || false), false || (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uvec3(read_2, 1u, 0u)), (uint(uvec3(read_2, 1u, 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (read_2) | (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, (read_2) - 0u)) << 0u)) ^ 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) | (read_2)), (_GLF_IDENTITY(read_2, (read_2) | (read_2))) | 0u), _GLF_IDENTITY(read_2, (read_2) | (_GLF_IDENTITY(read_2, uint(uvec3(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(read_2, (read_2) | 0u), 0u)), (uint(uvec2(_GLF_IDENTITY(read_2, (read_2) | 0u), 0u))) | (uint(uvec2(_GLF_IDENTITY(read_2, (read_2) | 0u), 0u))))), 0u, 1u))))))), false || (read_1 + 1 == _GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) | (read_2)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) | (read_2)), (_GLF_IDENTITY(read_2, (read_2) | (read_2))) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) >> 0u), (read_2) | (read_2)), (_GLF_IDENTITY(read_2, (read_2) | (read_2))) | 0u)))), _GLF_IDENTITY(read_2, (read_2) | (read_2))))))) || false)))))) + _GLF_IDENTITY(1, max(1, 1)), 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) + 0)) << 0), 4)));
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0, 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0, 0))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0, 0))), ((0 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0, 0)))) | ((0 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))), 0, 0)))))) ^ 0) : _GLF_FUZZED(72695)))) | (_GLF_IDENTITY((0 ^ 0), 0 ^ ((0 ^ 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, min(1, 1)))), (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1)))), 1)))), ! (! (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, min(1, 1)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, min(1, 1)))) : _GLF_FUZZED(_injected_loop_counter))))))) || false)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))], uint(_GLF_IDENTITY(read_1 + 1 == read_2, false || (read_1 + 1 == read_2))) + 1, 4, 64, _GLF_IDENTITY(4, max(4, 4)));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
