#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_6_1_1_11read_1subgroup_id;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(_injected_loop_counter, (-22285 / _injected_loop_counter), -36998)) : _injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.z = subgroup_id;
  }
 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged2_0_1_6_1_1_11read_1subgroup_id.y = GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.z;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), true && (_GLF_DEAD(false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y = subgroup_size;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec3(-97.75, -5.8, -3765.1259).z)), bool(false))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(9.4))) / 1.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(9.4))) / 1.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(9.4))) / 1.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false)))))) || false)))))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(false, (false) || false))), bool(bvec3(bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(false, (false) || false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec4(bool(bvec3(false, false, false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
     for(int _injected_loop_counter = ((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(4, 4)), 4, 4)), 4, _GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) * 1), 0))), 0 ^ (4)))), max(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY((4), 0 | ((4)))), 4)))))), max((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(4, 4)), 4, 4)), 4, _GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) * 1), 0))), 0 ^ (4)))), max(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY((4), 0 | ((4)))), 4)))))), (1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(4, 4)), 4, 4)), 4, _GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) * 1), 0))), 0 ^ (4)))), max(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY((4), 0 | ((4)))), 4))))))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), false || (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), cos(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.7)), bool(false))))))), 1.0, 0.0, abs(1.0))), mix(vec2(_GLF_FUZZED(-495.337), (vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3390.8928, -8140.3465)) : injectionSwitch)))), cos(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 0.0, abs(1.0))))[1]), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), cos(0.0), 0.0, length(vec3(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(9.4))), 0.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 0.0, abs(1.0))))[0], _GLF_FUZZED(-7.7)), bvec2(true, false)))).x > injectionSwitch.y)), _GLF_IDENTITY((bool((injectionSwitch.x > injectionSwitch.y))) && true, ((bool((injectionSwitch.x > injectionSwitch.y))) && true) || false)))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-95976) : int(3)))), ~ (~ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-95976) : int(3))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))))))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, false))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.y = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.w = workgroup_size;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.w = GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.w;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.z = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-49.20))), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))), float(_GLF_FUZZED(vec2(-3.0, -465.616).r)), bool(false)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.z = GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.z;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9665.6236)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))), true))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.w, (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.w) * 1u) * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.z, (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.z) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED((uvec4(189361u, 2469u, 147705u, 159302u) , _GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec2((subgroup_size), 0u), uvec2(uvec4(uvec2((subgroup_size), 0u), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.w = workgroup_base;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) || false)))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y = GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.w;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), bool(bvec4(bool(bool((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), false, true, true)))) && true)))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.y = GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.y + _GLF_IDENTITY(GLF_merged2_0_1_6_1_1_11read_1subgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size)), GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size)).x, (0u & 48885u) ^ (_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_11read_1subgroup_id.y * GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (GLF_merged2_0_1_6_1_1_11read_1subgroup_id.y * GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x) | (GLF_merged2_0_1_6_1_1_11read_1subgroup_id.y * GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)))) + subgroup_local_id;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.y + GLF_merged2_0_1_6_1_1_11read_1subgroup_id.y * GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x) ^ 0u), GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)), uint(_GLF_IDENTITY(uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u | (1u)), 1u)), 1u), (uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u)) << uvec3(0u, 0u, 0u))))) << 0u), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x) ^ 0u), GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)), uint(_GLF_IDENTITY(uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u), (uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u)) << uvec3(0u, 0u, 0u))))) << 0u), max((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x) ^ 0u), GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)), uint(_GLF_IDENTITY(uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u), (uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u)) << uvec3(0u, 0u, 0u))))) << 0u), (subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x) ^ 0u), GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)), uint(_GLF_IDENTITY(uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u), (uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u)) << uvec3(0u, 0u, 0u))))) << 0u)))))), (false ? _GLF_FUZZED((_GLF_IDENTITY(true, true && (true)) ? virtual_gid : num_workgroup)) : ((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, uint(uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u)))), 1u * ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, uint(uvec3(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 1u, 1u)))))) << 0u))));
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.x = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x = GLF_merged4_0_1_16_1_1_14_2_1_12_3_1_14next_virtual_gidworkgroup_baseworkgroup_idworkgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))))) || false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z], _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 + (~ (4))))), 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x = read_1;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   GLF_merged2_0_1_6_1_1_11read_1subgroup_id.x = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base, ~ (~ (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base))).x, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) << 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) << 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, _GLF_IDENTITY((GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x), (true ? (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) : _GLF_FUZZED(workgroup_size))) << 0u)), 0u ^ ((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) << 0u)))), (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) << _GLF_IDENTITY(0u, max(0u, 0u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) << 0u)), ((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x) << 0u))) << (0u << _GLF_IDENTITY(uint(0u), uint(0u)))), (_GLF_IDENTITY(true, ! (! (true))) ? (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.x, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base, (true ? GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))).x) << 0u)) : _GLF_FUZZED(virtual_gid))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z = GLF_merged2_0_1_6_1_1_11read_1subgroup_id.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))) && true), true && (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))) && true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) + abs(0.0)), false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2))).z + 1), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.y = read_2;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w = _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.y, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_14read_1read_2subgroup_idworkgroup_base.y) | 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > 0, ! _GLF_IDENTITY((! (_injected_loop_counter > 0)), ((! (_injected_loop_counter > 0))) || false))), false || (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) * 1), ~ (~ (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(0, (0) * 1)))))) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false, bool(bool((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))), false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false, bool(bool((_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * 1)), ((_GLF_IDENTITY(0, (0) * 1))) >> 0))) || false)))))))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != _GLF_IDENTITY(0, _GLF_IDENTITY((0), 0 ^ (_GLF_IDENTITY((0), min((0), (0))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) ^ 0)), min(~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) ^ 0)), ~ (_GLF_IDENTITY(0, (0) ^ 0)))))), (0) * 1), ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) * (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), clamp((0), (0), (0))))) ^ 0)))), (0) * 1)))))) || false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * mat2(1.0)).x < injectionSwitch.y)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false), true, true, true))))))) || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))))) != _GLF_IDENTITY(0, ~ (~ (0))), false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1)))) || false)))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) << 0))), false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)))))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || _GLF_IDENTITY(false, ! (! (false)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) * 1)))) || false)))), ! (! ((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))))))))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))) * 1)))) || false))), true && (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))) * 1)))) || false))))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), false, false), bvec3(bvec4(bvec3(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), false, false), false)))))) || false)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0)), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, 0 ^ ((0) * 1))))), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, 0 ^ ((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) << 0), 0))) * 1)))))) || false)) || false))))))) && true)))))) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))) << (0 << _GLF_IDENTITY(int(1), int(1)))) != 0, false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-54804))), (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, 0 + (0)), 0))), (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))) || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), int(int(_GLF_IDENTITY(1, (1) - 0))))))) | (1)))), ((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 ^ (1)), 1)), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (true ? _GLF_IDENTITY(int(1), 0 | (int(1))) : _GLF_FUZZED(60981)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), int(int(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, max(0, 0))))))))) | (1))))) ^ 0), ~ (~ ((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1), ~ (~ ((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))))))))))) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || _GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)), (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (0) * 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) * 1)), ((0) | (_GLF_IDENTITY(0, (0) * 1))) ^ 0)), int(ivec4(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)))))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) ^ 0)))), (0) * 1))), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) ^ 0)))), (0) * 1)))) && true)) || false)))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, false || _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)), false), false, false)))))))))))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) * 1)), ((0) | (_GLF_IDENTITY(0, (0) * 1))) / 1))) || false)))) && true)))))) || false), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - (0 << _GLF_IDENTITY(int(7), int(7)))))) : _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(69878) : _injected_loop_counter)))) != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), int(int(_GLF_IDENTITY(0, (0) / 1)))), false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, max(0, 0))))) / 1), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true))))))))))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) - 0)))) || false)))) && true)))), ! (! ((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true))))))))))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) - 0)))) || false)))) && true))))))))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, max(0, 0))))) / 1), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true))))))))))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) - 0)))) || false)))) && true)))), ! (! ((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true))))))))))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) - 0)))) || false)))) && true))))))))) || false, true && ((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) - 0) | (_GLF_IDENTITY(0, (0) * 1)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && _GLF_IDENTITY((false), ((false)) && true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, max(0, 0))))) / 1), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (1) << (0 | 0)))))) || false)))) && true)), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true))))))))))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) - 0)))) || false)))) && true)))), ! (! ((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)))))), ! (! (! (_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true)), true && (bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))), false, true))))))))))) || false), _GLF_IDENTITY(true, bool(bool(true))), false, false)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) - 0)))) || false)))) && true))))))))) || false))) || false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1))), _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (-85642 & 0)))) != 0, false || _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-54804))), (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, 0 + (0)), 0))), (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)), ! (! ((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-54804))), (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, 0 + (0)), 0))), (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1))))))))) || false)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1))))))))) || false)))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (_GLF_IDENTITY(0, (0) * 1))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (_GLF_IDENTITY(0, (0) * 1)))) / 1)) || _GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) | ((0) ^ 0)))))), (0) * 1)))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-40.93)), _GLF_IDENTITY(float(injectionSwitch.x), float(mat4x3(float(injectionSwitch.x), 1.0, sqrt(0.0), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, round(length(normalize(1.0))), length(0.0), 1.0, 1.0, 1.0, sqrt(0.0)))), bool(true))) > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))), false, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))), false, true))))), (! ((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))), false, true)))))) && true))) || false)), (false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))), false, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))), false, true), false))))))), (! ((_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), ! (! (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec3(_injected_loop_counter, 1, 0)), max(int(ivec3(_injected_loop_counter, 1, 0)), int(ivec3(_injected_loop_counter, 1, 0))))))) != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))), false, true)))))) && true))) || false))) && true)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1), false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), min(_GLF_IDENTITY((0), ((0)) / 1), (0))) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && _GLF_IDENTITY(true, (true) && true))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))) && true), (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))) || false))), (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0), (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (_GLF_IDENTITY(0, (0) * 1))), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), (true ? _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))) : _GLF_FUZZED(5054))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))) || false)), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) / 1)) << 0) | (_GLF_IDENTITY(0, (0) * 1))), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))), (true ? _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))) : _GLF_FUZZED(5054))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1)))))) || false)), false || (false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) * 1)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) * 1)), 0 | (~ (_GLF_IDENTITY(0, (0) * 1)))), ~ (_GLF_IDENTITY(0, (0) * 1)), ~ (_GLF_IDENTITY(0, (0) * 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1))), (true ? _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))) : _GLF_FUZZED(5054))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))))))) || false))))))))) && true)))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(int(subgroup_size)) : int(1)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93901, (-93901) / 1)) : ~ (_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(int(subgroup_size)) : int(1))))))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(int(subgroup_size)) : int(1)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93901, (-93901) / 1)) : ~ (_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(int(subgroup_size)) : int(1)))))))) << (1 ^ (1 ^ 0))))))) != 0, false || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-54804))), (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, 0 + (0)), 0))), (0) | (_GLF_IDENTITY(0, (0) * 1))), (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, 0 + (0)), 0))), (0) | (_GLF_IDENTITY(0, (0) * 1)))) * 1)) || false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, 0.0, 0.0))))).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))))))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), 1)), (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1))))))))) || false)))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(52176) : 1))) | (1)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1))))), max(~ ((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (_GLF_IDENTITY(1, (1) - 0)))), _GLF_IDENTITY(1, (1) - 0)))))) | (1))))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, min(0, 0))), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1))))))))))) || false)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB(_injected_loop_counter)))), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1)))))))), clamp(_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB(_injected_loop_counter)))), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1)))))))), _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB(_injected_loop_counter)))), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB(_injected_loop_counter)))), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1)))))))), max(_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB(_injected_loop_counter)))), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB(_injected_loop_counter)))), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1)))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) | (1)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB(_injected_loop_counter)))), (0) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0), clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))))) | (1))))))))))))))) || false))))) || false), false, false)))))) && true)) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(subgroup_local_id + 1 < GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)
    {
     int i = 0;
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w) + 1, 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(int(1), (0 << _GLF_IDENTITY(int(6), int(6))), 0), (_GLF_IDENTITY(ivec3(int(1), (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) >> 0)))), 0), ivec3(0, 0, 0) + (ivec3(int(1), (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY((6), max((6), (6))) >> 0)))), 0)))) | (ivec3(int(1), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-55597) : _GLF_IDENTITY(6, min(6, 6))))), int(6))), 0))))))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}
