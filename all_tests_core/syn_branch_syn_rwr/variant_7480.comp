#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged2_0_2_46_2_1_14GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1workgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2;
 uvec4 GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id;
 uvec4 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec2 GLF_merged2_0_1_13_1_1_6num_workgroupread_2;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_6num_workgroupread_2, (GLF_merged2_0_1_13_1_1_6num_workgroupread_2) * ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) + uvec2(0u, 0u))))), (GLF_merged2_0_1_13_1_1_6num_workgroupread_2) | uvec2(0u, 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, (GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid) ^ uvec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * exp(0.0)), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x)));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, true, true)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, true, true))))))), true)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.8)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((mat3x4(7691.0935, -1.7, 7624.0736, 9.9, -7.8, 89.24, 1.8, 2733.7690, -879.459, -582.749, 70.88, -3.4) / mat3x4(-1165.4125, -809.158, 272.480, 2.7, 8108.1316, 3379.8591, 847.943, -740.380, -7.1, 0.7, -845.512, -3.2))) : _GLF_IDENTITY(mat3x4(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat3x4(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) * mat3(1.0))))))))))
    return;
   barrier();
  }
 GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw = GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true && (bool(_GLF_DEAD(false))))), false || (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false))))))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_6_1_1_12read_2workgroup_id;
 GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.xy = GLF_merged2_0_1_6_1_1_12read_2workgroup_id;
 uvec2 GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1;
 GLF_merged2_0_2_46_2_1_14GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1workgroup_size.xy = GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1;
 GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy = GLF_merged2_0_2_46_2_1_14GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1workgroup_size.xy;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2(_GLF_FUZZED(6520.4161), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_FUZZED(-4529.4879)), bvec2(true, false))))) * vec2(1.0, 1.0)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false, false), false)))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bool(bool(bvec2(false, true)))), false || (bool(bool(bool(bvec2(false, true)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch, injectionSwitch)).y))), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false))))), _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(0, (0) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (false)) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))), false, _GLF_IDENTITY(true, true && (true)))))))
      return;
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(cos(injectionSwitch))))[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0)), max(float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0)))))) / sqrt(1.0)))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[0], injectionSwitch[1])) / vec2(1.0, 1.0))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1])).x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.w = _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (! ((_GLF_DEAD(false)) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6))), true && (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
        continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x = GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.w, _GLF_IDENTITY(0u + (_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x = GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.w, (GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x = GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.w) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u + (_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x = GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.w, (GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x = GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.w) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8))), false || (_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (0 | 0) ^ (int(8)))))))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.w = num_workgroup;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), max(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0)), min(float(mat4x2(_GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), max(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0)), float(mat4x2(_GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), max(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0)))))) > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy.x = GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_2_46_2_1_14GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1workgroup_size.z = workgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false)))))))), true)))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true))) && true), (injectionSwitch.x < injectionSwitch.y)), true))), (! _GLF_IDENTITY((bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), ! (! ((bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))) || false)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.xy.y = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, bool(bool(true)))), bvec3(bvec4(bvec3(false, true, true), false))))))), (! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, bool(bool(true)))), bvec3(bvec4(bvec3(false, true, true), false)))))))) || false))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, bool(bool(true)))), bvec3(bvec4(bvec3(false, true, true), false)))))))))) || false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, (true) && true)))), (false) && _GLF_IDENTITY(true, bool(bvec2(true, true))))))))), ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))) || false) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, sin(0.0), 0.0, abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0), mat4(1.0) * (mat3x4(0.0, 0.0, sin(0.0), 0.0, abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))))), 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))) / abs(1.0)), 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), (_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))) * mat2(1.0)), _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))))).x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch.y : _GLF_FUZZED(faceforward(-9.5, -3.0, 699.943))))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), bvec3(bvec4(bvec3(false, true, true), false))))))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, (true) && true)))), (false) && true)))))), ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_IDENTITY(false, (false) && true))))))) || false) && _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(sinh(-274.613)) : 0.0)), 0.0)), 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0 * (1.0)), 0.0)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch)))[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-547.552), _GLF_FUZZED(2.3)), bvec2(false, false))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(5812.5805) : float(mat2x4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))))))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))))).x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(sinh(-274.613)) : 0.0)), 0.0)), 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0 * (1.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch)))[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-547.552), _GLF_FUZZED(2.3)), bvec2(false, false))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(mat2x4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)) : _GLF_FUZZED(4232.3558))), (false ? _GLF_FUZZED(5812.5805) : float(mat2x4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))))))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 1.0, 0.0)), max(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true))), 1.0, 0.0)), clamp(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true))), 1.0, 0.0)), (vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true))), 1.0, 0.0))) * mat2(1.0)), _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true))), 1.0, 0.0)), (true ? vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true))), 1.0, 0.0)) : _GLF_FUZZED(vec2(38.85, -761.352)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true))), 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))))).x < injectionSwitch.y)))))))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true)))))) && true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & ivec4(-119, 14136, 45301, 78170).q)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
  }
 uint workgroup_base = GLF_merged2_0_2_46_2_1_14GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1workgroup_size.z * GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.xy.y;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  return;
 uint virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z, min(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z, (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z) + 0u), GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z)), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id, ~ (~ (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id))).z, min(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z, (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id, uvec4(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id[0], GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id[1], GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id[2], GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id[3])).z)), _GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z, (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z) + 0u), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z, (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z) + 0u)) >> 0u, ((_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z, (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z) + 0u)) >> 0u) | 0u)), _GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id)).z)))) * subgroup_size + GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y = virtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z * subgroup_size + _GLF_IDENTITY(((GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x + 1) % subgroup_size), (false ? _GLF_FUZZED(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.z) : ((_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x + 1, max(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x + 1, GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.x + 1))) % subgroup_size)));
 GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.z = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), (int(1)) * 1), int(1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 ^ 1, min(0 ^ 1, 0 ^ 1)))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.z = GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.z;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.x = GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.z;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true && (false)), true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y, max(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y, _GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y, (GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw.y) / 1u)))], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(-71515))), (64) | (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(17917)))))) ^ 0), 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y = read_1;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy, clamp(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy, GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy, GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy)).x], uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y, clamp(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y, GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y, GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y)), uint(uvec2(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y, (_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y, (false ? _GLF_FUZZED(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x) : GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y))) * ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), (uint(_GLF_IDENTITY(0u, ~ (~ (0u))))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) + 0u))))))), uint(0u)))), 1u))) + 1), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-596.959 * 7.4))), bool(false)))))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, max(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid))) * uvec4(1u, 1u, 1u, 1u)).zw.y], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.w = read_2;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0)))) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0)))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0)), (mat4(injectionSwitch.x, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy.y = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2, (GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2) << uvec4(0u, 0u, 0u, 0u)).w, (_GLF_IDENTITY(GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2, (GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2) << uvec4(0u, 0u, 0u, 0u)).w) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.xy.x = GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy.y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 0))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))), false)))) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(10475) : int(3))), _GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, 1))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, uvec4(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[0], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[1], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[2], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[3]))) >> uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, uvec4(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[0], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[1], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[2], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[3]))) >> uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, uvec4(GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[0], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[1], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[2], GLF_merged2_0_2_43_2_2_53GLF_merged2_0_1_13_1_1_6num_workgroupread_2GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid[3]))) >> uvec4(0u, 0u, 0u, 0u)))).zw) << uvec2(0u, 0u)).x + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, true))))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     return;
    }
   atomicStore(buf[GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.x], uint(_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy, (_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id, (_GLF_IDENTITY(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id, (GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id) | uvec4(0u, 0u, 0u, 0u))) - uvec4(0u, 0u, 0u, 0u))))).xy) - uvec2(0u, 0u)).y + 1 == GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.xy.x) + 1, 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_IDENTITY(true, bool(bool(true))), true)), false || (bool(bvec4(false, true, _GLF_IDENTITY(true, bool(bool(true))), true))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), bool(bvec3(! (false), false, false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   atomicStore(buf[GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.x], uint(GLF_merged3_0_2_46_2_1_11_3_1_17GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1subgroup_idsubgroup_local_id.xy.y + 1 == GLF_merged3_0_2_42_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_12read_2workgroup_idnext_virtual_gidread_2.xy.x) + 1, 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
