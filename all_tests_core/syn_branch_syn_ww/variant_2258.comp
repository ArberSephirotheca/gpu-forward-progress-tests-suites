#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid;
 uvec4 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup;
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec4 GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(186.552)), bvec2(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))).y, float(mat3(injectionSwitch.y, _GLF_IDENTITY(0.0, max(0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, exp(0.0), determinant(mat2(1.0, 0.0, 0.0, round(length(normalize(1.0))))), 1.0, 1.0, 1.0)))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))
    {
    }
   else
    {
     barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup.xy = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size));
 GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup.xy;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), injectionSwitch.y)))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | (73318 & 0), (_GLF_IDENTITY(0 | (73318 & 0), 0 | (0 | (73318 & 0)))) ^ (1 ^ 1)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) >> 0)) >> 0)), max(max((1 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) >> 0)) >> 0)), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) >> 0)) >> 0)), ~ (~ (max((1 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) >> 0)) >> 0)))))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(26.14, -5.6)) : injectionSwitch)).y, false), false), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false), false))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_IDENTITY(false, (false) && true))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z = subgroup_id;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true))))) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true))))) && true)), false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.y = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z = subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (true ? (0 | _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) : _GLF_FUZZED(44007))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), min(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))))))))); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z : _GLF_IDENTITY(_GLF_FUZZED(atomicCompSwap(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z)), (_GLF_IDENTITY(_GLF_FUZZED(atomicCompSwap(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z)), (_GLF_FUZZED(atomicCompSwap(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z))) | 0u)) >> 0u)));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y = subgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y;
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (0 | (1 ^ 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.x = num_workgroup;
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup.w = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.x;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.y = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup.w, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.y = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup.w), (false ? _GLF_FUZZED(106243u) : ~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.y = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup.w)))));
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.x = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.y;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((bool(injectionSwitch.x > injectionSwitch.y)) || false, ((bool(injectionSwitch.x > injectionSwitch.y)) || false) || false))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), 0 + (~ (_GLF_IDENTITY(int(7), int(7))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0 + (~ (_GLF_IDENTITY(int(7), int(7)))), ~ (~ (_GLF_IDENTITY(0 + (~ (_GLF_IDENTITY(int(7), int(7)))), (0 + (~ (_GLF_IDENTITY(int(7), int(7))))) | 0))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), 0 + (~ (_GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0 + _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(-65044)))), ~ (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(-65044))))))), (0 + (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), int(7))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))))))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), (true ? _GLF_IDENTITY(int(2), (int(2)) | (int(2))) : _GLF_FUZZED(-38063)))) - 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), 0 ^ ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-16308))))))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), 0 ^ ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-16308)))))))) >> 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> (-82793 & 0))], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1547.3255), _GLF_FUZZED(-83.58)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1547.3255), _GLF_FUZZED(-83.58)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1547.3255), _GLF_FUZZED(-83.58)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1547.3255), _GLF_FUZZED(-83.58)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, 0 ^ (2))))), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x) - _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0)), min(float(mat4x2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0)), float(mat4x2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0)))))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(0.0)), mat4(1.0) * (mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY((injectionSwitch.x), min(_GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(atanh(-4.9)) : (injectionSwitch.x))))) - 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), min(_GLF_IDENTITY(float(mat3((injectionSwitch.x) - 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), (float(mat3((injectionSwitch.x) - 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))) * 1.0), float(mat3((injectionSwitch.x) - 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(470.813)), min(float(_GLF_FUZZED(470.813)), float(_GLF_FUZZED(470.813)))), bool(false))))))))) > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))));
 GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.y = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.w = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.y, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base) / (uvec4(1u, 1u, 1u, 1u) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(0u, 0u, 0u, 0u)))).xy.y : _GLF_FUZZED(atomicMax(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.3) : injectionSwitch.y))) && true)))))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(527.510)), bool(false))))), abs(0.0), 0.0, sqrt(1.0), 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0), (mat4(1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(527.510)), bool(false))))), abs(0.0), 0.0, sqrt(1.0), 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) < injectionSwitch.y)))) && true), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) < injectionSwitch.y)))) && true), false, false, false))))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), true)), ! (! (bool(bvec2(! (false), true)))))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0))) > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id;
 do
  {
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w) / 1u), (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w) / 1u)) * 1u), ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w) / 1u)), (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w) / 1u)), (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w) / 1u)), (~ (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w) / 1u))) ^ 0u)) ^ 0u)) | 0u)));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size) << uvec4(0u, 0u, 0u, 0u)).w, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.6, -6.9)) : injectionSwitch)))).x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(atomicMax(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z)), 0u ^ (_GLF_FUZZED(atomicMax(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.z)))) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true))) ? _GLF_FUZZED(max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid, clamp(_GLF_IDENTITY(uvec4(64765u, 163826u, 156364u, 173968u), (uvec4(64765u, 163826u, 156364u, 173968u)) | (uvec4(64765u, 163826u, 156364u, 173968u))), GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup, GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base))) : GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size)), (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size) << uvec4(0u, 0u, 0u, 0u)).w)) * GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
 GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.y * GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.y = subgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), _GLF_IDENTITY(false, bool(bool(false))))), false || (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.y;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id))), GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id)).z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id))), GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id)).z) | 0u), max(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id) - uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 0u, 0u, 0u), ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id) - _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) + (uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u)))) | (uvec4(0u, 0u, 0u, 0u))))))).z, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))) | (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z)))) | 0u)), (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z)))) | 0u))) - 0u))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, (0u ^ 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z))) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w, clamp(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w, uint(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w), (true ? uint(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w) / 1u), _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w, min(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w, GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w)))) + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, 0u | (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z)))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id) / uvec4(1u, 1u, 1u, 1u)).w;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.w = virtual_gid;
 uint next_virtual_gid = GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.w + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z + (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w + 1) % _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base) | uvec4(0u, 0u, 0u, 0u)).xy.x, min((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w + 1) % GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u), clamp(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u), clamp(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u), _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u), (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u)) / 1u))), _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x, (GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x) << 0u))))), (true ? (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w + _GLF_IDENTITY(1, (1) / 1)) % GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.xy.x : _GLF_FUZZED(atomicMax(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z, (0u | 0u) ^ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z))) ^ 0u))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.x = next_virtual_gid;
  }
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup.z = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.z = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidnum_workgroup) >> uvec4(0u, 0u, 0u, 0u)).z;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.x = GLF_merged3_0_2_52_2_1_16_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidworkgroup_base.z;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidsubgroup_basesubgroup_idvirtual_gid.w], uint(1), 4, 64, 4);
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, 1.0))) : _GLF_FUZZED(4.3)))))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) * 1.0), _GLF_FUZZED(1.5)), vec2(_GLF_FUZZED(21.04), (injectionSwitch)[1]), bvec2(false, true))))).x > injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), (ivec3(1, 0, 0)) + ivec3(0, 0, 0)))), ! _GLF_IDENTITY((! (_injected_loop_counter != 1)), true && (_GLF_IDENTITY((! (_injected_loop_counter != 1)), true && ((! (_injected_loop_counter != 1)))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w % 2), min(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w % 2), max((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w % 2), (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w % 2))), (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w % 2))) == 0)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.x, 0u ^ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.x))) << 0u)], uint(_GLF_IDENTITY(2, max(2, 2))), 4, 64, 4);
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(ivec2(-26815, -40518), clamp(ivec2(-26815, -40518), ivec2(-26815, -40518), ivec2(-26815, -40518)))[0]) : 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(ivec2(-26815, -40518), clamp(ivec2(-26815, -40518), ivec2(-26815, -40518), ivec2(-26815, _GLF_IDENTITY(-40518, clamp(_GLF_IDENTITY(-40518, clamp(-40518, -40518, -40518)), -40518, _GLF_IDENTITY(-40518, int(ivec3(-40518, 1, 1))))))))[0]) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(-26815, -40518), clamp(ivec2(-26815, -40518), ivec2(-26815, -40518), ivec2(-26815, -40518)))[0], (_GLF_IDENTITY(ivec2(-26815, -40518), clamp(ivec2(-26815, -40518), ivec2(-26815, -40518), ivec2(-26815, -40518)))[0]) | (_GLF_IDENTITY(ivec2(-26815, -40518), clamp(ivec2(-26815, -40518), ivec2(-26815, -40518), ivec2(-26815, -40518)))[0]))) : 1))) ^ (_GLF_IDENTITY(-85967 & 0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), (int(ivec4(_GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))) | (_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0)), clamp(_GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0)), _GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0)), _GLF_IDENTITY(-85967 & 0, max(-85967 & 0, -85967 & 0))))))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x2(1.0, log(1.0), log(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), 1.0, 1.0, exp(0.0)))), injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))) - 0))))))) | 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), true && (bool(_GLF_IDENTITY(false, true && (false)))))))))
                barrier();
               for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.x], uint(2), 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((64), ((64)) | 0)), clamp(_GLF_IDENTITY((~ _GLF_IDENTITY((64), ((64)) | 0)), clamp((~ _GLF_IDENTITY((64), ((64)) | 0)), (~ _GLF_IDENTITY((64), ((64)) | 0)), _GLF_IDENTITY((~ _GLF_IDENTITY((64), ((64)) | 0)), int(ivec3((~ _GLF_IDENTITY((64), ((64)) | 0)), 1, 1))))), (~ _GLF_IDENTITY((64), ((64)) | 0)), (~ _GLF_IDENTITY((64), ((64)) | 0)))))))), 4);
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY((6599 * -55838), ((6599 * -55838)) ^ 0) & (0 & -61396)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
}
