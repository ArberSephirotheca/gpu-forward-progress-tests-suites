#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -93983)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))));
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(float(false))), bvec2(true, false)))) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(float(false))), bvec2(true, false)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(float(false))), bvec2(true, false)))) - vec2(0.0, 0.0)))).y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y = subgroup_id;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y = _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) * (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z = _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y, ~ (~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y) || false)))) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x = subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x = subgroup_local_id, (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x = subgroup_local_id) ^ ((0u ^ 0u) | (1u ^ 1u))), (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x = _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (subgroup_local_id)), 0u + (~ (~ (subgroup_local_id)))))) << 0u))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), (_GLF_DEAD(false)) && true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.5, 1.3)) : injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), bool(bvec2((_GLF_IDENTITY(! (false), (! (false)) || false)), true))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.x = num_workgroup;
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)), mix(float(_GLF_FUZZED(2.7)), float(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0))), bool(true)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize))) | (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)))).x))), 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y)), 0u)), min(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)), 0u + (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))), ((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))) | ((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))), uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))));
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.w = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(num_workgroup)))) / 1u);
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(9.4, 253.853, -52.14, -613.504).y)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w))), min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w)))))))) - 0u), (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w))), min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w)))))))) - 0u)) >> 0u);
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (workgroup_base)), clamp((~ (workgroup_base)), _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) / (0u | 1u)), (~ (workgroup_base)))), ~ (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((~ (workgroup_base)), clamp((~ (workgroup_base)), _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) / (0u | 1u)), (~ (workgroup_base))))), (~ (~ _GLF_IDENTITY((~ (workgroup_base)), clamp((~ (workgroup_base)), _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) / (0u | 1u)), (~ (workgroup_base)))))) << 0u)))))) + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z) - 0u)) - 0u) + GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z = virtual_gid;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.7)), float(injectionSwitch.x), bool(true))), (injectionSwitch.x) * cos(0.0)) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(tanh(length(vec3(-55.17, -98.68, -1.1)))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), transpose(transpose(mat3x2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, false || (true)) ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))))), bool(true))), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)), mix(vec2((vec2(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 0.0, 0.0) + (vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), transpose(transpose(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) * 1.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), (false ? _GLF_FUZZED(roundEven(-851.421)) : float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), transpose(transpose(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) * 1.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))))))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))[0], (vec2(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), transpose(transpose(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.5))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0), vec2(1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-79.79))), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0))))))))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))[1]), vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(9987.2978)), bvec2(false, false)))))).x > injectionSwitch.y)), true))))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)).y)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)).y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)).y)), true)))), false, true)))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), ((1.0)) - 0.0)))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))).y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))) || false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0))), injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.3)), bool(false))), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z + _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size), clamp((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size), _GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size), ~ (~ ((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size)))), (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size))))).x + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z), (((_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size), clamp((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size), _GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size), ~ (~ ((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size)))), (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size))))).x + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z)) + 0u);
 atomicStore(buf[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z], uint(_GLF_IDENTITY(1, (1) * 1)), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false)), false)))))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), false || (_GLF_IDENTITY((false), true && ((false)))))))), bool(bvec4(! (false), false, true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), false || (_GLF_IDENTITY((false), true && ((false)))))))), bool(bvec4(! (false), false, true, false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) || false)), (! (_GLF_IDENTITY(! (true), (! (true)) || false))) || false))))) && _GLF_IDENTITY(((false)), ! (! (((false))))))))), bool(bvec4(! (false), false, true, false)))))), true && (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), false || (_GLF_IDENTITY((false), true && ((false)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, false)), (bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, false))) || false)))))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size) + uvec4(0u, 0u, 0u, 0u)).x + 1 < GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false, true, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, false))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, false))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, false)))))))) && true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       int i = 0;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), clamp(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), (_GLF_IDENTITY(0.0, (0.0) + 0.0)) / 1.0), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, (0.0) + 0.0))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), ((0.0)) + 0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))))) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))), 1.0))).y)), 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, log(1.0))), (float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9265.3362)), float(1.0), bool(true))), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))), clamp(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))), float(mat3x4(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))))), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch))))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(78.82) : 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) + 0.0, 1.0 * ((0.0) + _GLF_IDENTITY(0.0, min(0.0, 0.0))))))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.84))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.84))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.84))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.84))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y) * 1.0), _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.84))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, log(1.0)))) / 1.0))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 1.0)), (true ? float(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 1.0)) : _GLF_FUZZED(5.0))))) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(_GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), (0.0) + 0.0))), (false ? _GLF_FUZZED(42.50) : float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), (0.0) + 0.0))))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))))).y, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), mix(float(_GLF_FUZZED(float(95520u))), float(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))), bool(true))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) + 0.0, max((0.0) + 0.0, _GLF_IDENTITY((0.0) + 0.0, ((0.0) + 0.0) / abs(1.0))))))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (float(_GLF_IDENTITY(0.0, (0.0) + 0.0))) + 0.0))))), 1.0))).y)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, log(1.0))), (float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), _GLF_IDENTITY(float(vec4(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), length(0.0), abs(0.0), 0.0)), mix(float(_GLF_FUZZED((true ? -21.12 : 5.4))), float(float(vec4(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), length(0.0), abs(0.0), 0.0))), bool(true)))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0)), (vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))) - vec2(0.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), clamp(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))), min(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0))), min(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(-970.692) : 0.0))))), min(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(-970.692) : 0.0))))), (float(float(_GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(-970.692) : 0.0)))))) * 1.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(-970.692) : 0.0))))), (float(float(_GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(-970.692) : 0.0)))))) - length(vec4(0.0, 0.0, 0.0, 0.0))))), float(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)))))), 1.0))).y)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, log(1.0)))) / 1.0))))), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (injectionSwitch.x > injectionSwitch.y)), false, true))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bvec3(! (bool(false)), false, true)))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bvec3(! (bool(false)), false, true)))))))), false, true, false))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) << 0), max(_GLF_IDENTITY(2, 0 + (2)), 2))), _GLF_IDENTITY(clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)), clamp(clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)), clamp(_GLF_IDENTITY(uint(2), (uint(2)) + 0u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), clamp(uint(_GLF_IDENTITY(2, 1 * (2))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), min(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), 0u ^ (uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2))))))))), clamp(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), min(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), 0u ^ (uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2))))))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), min(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), 0u ^ (uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), min(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), 0u ^ (uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2))))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), min(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))), 0u ^ (uint(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), uint(2)))))))))) << 0u))))), 1u, 0u)))) << 0u) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) ^ 0)), clamp(uint(_GLF_IDENTITY(2, 0 + (2))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, clamp(2, 2, 2))), (uint(2)) / 1u), uint(2))))), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((next_virtual_gid), ~ (_GLF_IDENTITY(~ ((next_virtual_gid)), _GLF_IDENTITY(0u, (0u) / ((1u & 1u) | 1u)) | (~ ((next_virtual_gid))))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (next_virtual_gid)), ((~ (next_virtual_gid))) + 0u), min((~ (next_virtual_gid)), (~ _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : next_virtual_gid))) | (next_virtual_gid))), 0u | ((next_virtual_gid))))))) | _GLF_IDENTITY((_GLF_IDENTITY((~ (next_virtual_gid)), ((~ (next_virtual_gid))) / 1u)), uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((~ (next_virtual_gid)), ((~ (next_virtual_gid))) / 1u))), (uint((_GLF_IDENTITY((~ (next_virtual_gid)), ((~ (next_virtual_gid))) / 1u)))) ^ 0u)))))], uint(2), 4, 64, 4);
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 0 ^ (0)), 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
}
