#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6)))))))))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6)))))))))))) ^ 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) << 0)))), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), _GLF_IDENTITY(int(6), (int(6)) + 0), _GLF_IDENTITY(int(6), (int(6)) | 0))))), 0 ^ ((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), _GLF_IDENTITY(int(6), (int(6)) + 0), _GLF_IDENTITY(int(6), (int(6)) | 0))))))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) + 0))) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 | (6))) + 0))), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY(max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6)))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6)))))))), (max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))))) << 0))))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (_GLF_IDENTITY(true, ! (! (true))) ? (1) | (1) : _GLF_FUZZED(_injected_loop_counter)))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 | (6))) | (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, int(ivec3(6, 1, 1)))))))), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1)))), (int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))) ^ 0)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(0, ~ (~ (0))) ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(6), int(6))))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))))), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))) ^ (0 | 0))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, 0 ^ (_GLF_IDENTITY((int(6)) | 0, min((int(6)) | 0, (int(6)) | 0)))))))), int(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (82450 & 0) ^ (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ivec2(ivec3(ivec2(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (0 << _GLF_IDENTITY(int(4), int(4)))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY(0, ~ (~ (0))) ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(int(_GLF_IDENTITY(int(6), int(6)))))), 0 | ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(int(_GLF_IDENTITY(int(6), int(6)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) / 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(6), int(6))), (0 ^ (_GLF_IDENTITY(int(6), int(6)))) >> 0))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ 0), int(6))) - 0, _GLF_IDENTITY(0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0), max(_GLF_IDENTITY(0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0), 0 + (0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))), 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec4(int(6), (0 << _GLF_IDENTITY(int(1), int(1))), 0, 0))))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 0 + (int(6)))) - 0))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(_GLF_IDENTITY(6, (6) / 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(_GLF_IDENTITY(6, (6) / 1), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(6, (6) / 1), int(ivec3(_GLF_IDENTITY(6, (6) / 1), 1, 0))))))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), ~ (~ (int(6))))) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, (true ? (_GLF_IDENTITY(int(6), int(6))) - 0 : _GLF_FUZZED(-43734))), (_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) - 0, 0 ^ ((_GLF_IDENTITY(int(6), int(6))) - 0))) - 0)), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), int(6)))) + _GLF_IDENTITY(0, (0) * 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), int(6)))) + _GLF_IDENTITY(0, (0) * 1)))), ((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), int(6)))) + _GLF_IDENTITY(0, (0) * 1))))) | 0)) | 0) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), int(int((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, max(6, 6)))), 6, 6))), int(_GLF_IDENTITY(6, max(6, 6)))), clamp(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) * 1))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) - 0), _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) / 1))), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(6), int(6)))))))))))) ^ 0))) || false); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(1, 1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-2306.1560))), injectionSwitch.x)) & -93292); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4))), ! (! (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (-48286 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 + (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false)), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false))) || false))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   barrier();
                  }
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))) : _GLF_FUZZED(-9.9)))))), length(0.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.9)), bool(false)))))), 0.0, abs(0.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))) : _GLF_FUZZED(-9.9)))))), length(0.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.9)), bool(false)))))), 0.0, abs(0.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))) : _GLF_FUZZED(-9.9)))))), length(0.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.9)), bool(false)))))), 0.0, abs(0.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))) : _GLF_FUZZED(-9.9)))))), length(0.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.9)), bool(false)))))), 0.0, abs(0.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))) : _GLF_FUZZED(-9.9)))))), length(0.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.9)), bool(false)))))), 0.0, abs(0.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0)))) : _GLF_FUZZED(-9.9)))))), length(0.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.9)), bool(false)))))), 0.0, abs(0.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), false), false, true))))))))))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 & 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))))), true, false, false))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                   barrier();
                                  }
                                }
                               do
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                        }
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))) && true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec4(bool(bvec4(false, false, true, false)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec4(bool(bvec4(false, false, true, false)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != 0))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      barrier();
                     do
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))));
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(0, 0, 1, 0)))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-7.2)), bvec2(false, false)))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) + vec2(0.0, 0.0)))), injectionSwitch.y))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1]))))), clamp(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1]))))), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1]))))), max(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1]))))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1]))))))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))))))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupSize)), _GLF_IDENTITY((uvec3(uvec3(gl_WorkGroupSize))) ^ uvec3(0u, 0u, 0u), uvec3(1u, 1u, 1u) * ((uvec3(uvec3(gl_WorkGroupSize))) ^ uvec3(0u, 0u, 0u))))))), (uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupSize)), (uvec3(uvec3(gl_WorkGroupSize))) ^ uvec3(0u, 0u, 0u)))))) | (uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), uvec3(uvec3(uvec3(gl_WorkGroupSize))))), (uvec3(uvec3(gl_WorkGroupSize))) ^ uvec3(0u, 0u, 0u)))))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) << 0u, ((subgroup_id) << 0u) * (1u ^ 0u)), (true ? (subgroup_id) << 0u : _GLF_FUZZED(subgroup_size)))) ^ 0u)) * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base + subgroup_base)), 0u + (~ ((workgroup_base + subgroup_base)))))), ((workgroup_base + subgroup_base)) / 1u) / 1u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base + subgroup_base)), 0u + (~ ((workgroup_base + subgroup_base)))))), ((workgroup_base + subgroup_base)) / 1u) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base + subgroup_base)), 0u + (~ _GLF_IDENTITY(((workgroup_base + subgroup_base)), 0u ^ (((workgroup_base + subgroup_base)))))))), ((workgroup_base + subgroup_base)) / 1u) / 1u)) * 1u) + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)), max((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) ^ 0u), (subgroup_local_id + 1) - 0u)))) % subgroup_size), clamp(((_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) << 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)))))))) + 1) % subgroup_size), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-3083.8890) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-93.77)), bool(false))))))), true))) ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), subgroup_local_id), ~ (~ (clamp(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) | 0u))) - 0u)) : _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), subgroup_local_id))))) + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) + 0u), _GLF_IDENTITY(1u * (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) << 0)), max(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))))) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + 1) % subgroup_size)), (~ (((subgroup_local_id + 1) % subgroup_size))) * 1u)))) | (_GLF_IDENTITY(0u, (0u) + 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(8u, 0u ^ (8u))), _GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u)))), (_GLF_IDENTITY(uint(8u), uint(8u))) - 0u))), ((subgroup_local_id + 1) % subgroup_size)))), (true ? 1u * (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) << 0)), max(~ (1), _GLF_IDENTITY(~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(findLSB(73550))))) - (0 >> _GLF_IDENTITY(int(5), int(5)))), (~ (1)) | (~ (1)))))))) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + 1) % subgroup_size)), (~ (((subgroup_local_id + 1) % subgroup_size))) * 1u)))) | (_GLF_IDENTITY(0u, (0u) + 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(8u, 0u ^ (8u))), _GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u)))), (_GLF_IDENTITY(uint(8u), uint(8u))) - 0u))), ((subgroup_local_id + 1) % subgroup_size)))) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)))), clamp(max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96073) : 1))) - 0), ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)), max(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (true ? (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, 0)))) - 0))) : _GLF_FUZZED(4160)))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))))))) - 0)), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) << 0)), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))))))))) - 0)))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)))), clamp(max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96073) : 1))) - 0), ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)), max(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (true ? (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, 0)))) - 0))) : _GLF_FUZZED(4160)))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))))))) - 0)), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) << 0)), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))))))))) - 0)))))) % subgroup_size)) >> 0u), max(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), clamp(_GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))), (~ (1)), _GLF_IDENTITY((~ (1)), _GLF_IDENTITY(((~ (1))), min(_GLF_IDENTITY(((~ (1))), (((~ (1)))) - (0 << _GLF_IDENTITY(int(1), int(1)))), ((~ (1))))) * 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) + (1 ^ 1)) - 0)), clamp(max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)) >> 0)))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), min(int(1), int(1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), min(int(1), int(1))))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), min(int(1), int(1)))))) * 1)) ^ 0)))))))) - _GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ ((0)))) >> 0))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)))))) % subgroup_size), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(1, ~ (~ (1))))), 0, 0, 1), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(1, ~ (~ (1))))), 0, 0, 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)), clamp(max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), min(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) << 0), ~ (~ (1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(-18907) : ~ _GLF_IDENTITY((1), ((1)) | ((1)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), 0 + ((1))))))))) - 0)), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) - 0)))))) % subgroup_size))), clamp(((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, int(ivec3(1, 0, 1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1), 1u, 1u), (uvec3((subgroup_local_id + 1), 1u, 1u)) << uvec3(0u, 0u, 0u)))) % subgroup_size)) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), (_GLF_IDENTITY(uint(8u), uint(8u))) ^ 0u), (_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (true ? 8u : _GLF_FUZZED((111381u >> subgroup_id))))))) - 0u), 0u | (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), (_GLF_IDENTITY(uint(8u), uint(8u))) ^ 0u), (_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (true ? _GLF_IDENTITY(8u, min(_GLF_IDENTITY(8u, (8u) | (8u)), 8u)) : _GLF_FUZZED((111381u >> subgroup_id))))))) - 0u))))), ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)) % _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))))) ^ 0u)));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, true, false)))))
        barrier();
       for(int _injected_loop_counter = ((49944 - -77543) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.5)), bool(false))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (true ? vec4(injectionSwitch, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)) : _GLF_FUZZED(vec4(6.0, _GLF_IDENTITY(0.6, min(_GLF_IDENTITY(0.6, (false ? _GLF_FUZZED(-6.6) : _GLF_IDENTITY(0.6, min(0.6, 0.6)))), 0.6)), -9.1, 934.799)))))).y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + abs(vec2(0.0, 0.0))).y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if((subgroup_local_id % 2) == 0)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * 1.0), 0.0, 1.0))))), (1.0) + _GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * 1.0), 0.0, 1.0))))), (1.0) + _GLF_IDENTITY(0.0, max(0.0, 0.0))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * 1.0), 0.0, 1.0))))), (1.0) + _GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0), (true ? mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * 1.0), 0.0, 1.0))))), (1.0) + _GLF_IDENTITY(0.0, max(0.0, 0.0))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * 1.0), 0.0, 1.0))))), (1.0) + _GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3x2(mat2x4(7.5, -8.9, -73.08, 1.1, -0.8, -4.0, -9468.0228, -24.80))))))), 1.0))).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(float(_injected_loop_counter)))) > injectionSwitch.y), false))), true, true, _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-0.8), _GLF_FUZZED(-644.675)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-0.8), _GLF_FUZZED(-644.675)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y), false))))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true)))))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), false))), true, true, _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0), true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(smoothstep(9.8, -3.0, 4.6)) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_FUZZED(-9.3)), float((injectionSwitch.x)), bool(true)))) - sqrt(length(vec2(0.0, 0.0)))) - 0.0))) > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))))), bool(bool((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))), bool(bool((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))))))))))) && true)))))), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8.3))) > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, true, _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true)))))))), _GLF_IDENTITY(bool(bool(! (! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8.3))) > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true)))))))))), ! (! (bool(bool(_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8.3))) > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, true, _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true)))))))), true && (! (! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x) - 0.0) : _GLF_FUZZED(5918.5277))), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(-8.3))) > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec3(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))), true, _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), ! (! (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), injectionSwitch)).y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true))))))))))))))))), true, false, true)))))))) || false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))))) && true)))))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), (int(4)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), clamp(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (64) - (0 >> _GLF_IDENTITY(int(3), int(3)))), 4);
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (false)) || false)))))));
                       barrier();
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     do
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           else
                            {
                            }
                           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-32.34)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(9.8)))), bool(true)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                barrier();
                              }
                            }
                          }
                        }
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, 4);
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = ((_GLF_IDENTITY(0, (0) << 0) & 42712) & (+ -81508)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.2))), injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
}
