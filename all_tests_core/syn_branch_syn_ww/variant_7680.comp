#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 bvec2 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 vec3 _f1;
 uint _f2;
 mat4x2 _f3;
 bvec2 _f4;
 mat4 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_10 {
 vec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
 _GLF_struct_10 _f1;
 mat3x2 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
} ;

struct _GLF_struct_13 {
 uint next_virtual_gid;
 _GLF_struct_9 _f0;
 _GLF_struct_12 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 bvec2 _f1;
 ivec2 _f2;
 int _f3;
 int _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_5 {
 uint _f0;
 float _f1;
 ivec2 _f2;
 mat3x2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 mat3x2 _f1;
 mat4 _f2;
 ivec4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 uint _f1;
 bool _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 bvec3 _f1;
 ivec3 _f2;
 ivec2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 bvec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_4 {
 float _f0;
 _GLF_struct_0 _f1;
 uvec2 _f2;
 _GLF_struct_1 _f3;
 float _f4;
 _GLF_struct_2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 uint workgroup_size;
 _GLF_struct_7 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(bvec2(true), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_4(1.0, _GLF_struct_0(ivec2(1), bvec4(true), bvec2(true)), uvec2(1u), _GLF_struct_1(mat2x4(1.0), bvec3(true), ivec3(1), ivec2(1), mat3x2(1.0)), 1.0, _GLF_struct_2(uvec4(1u), mat3(1.0)), _GLF_struct_3(mat4x3(1.0), 1u, true, mat4x3(1.0))), gl_WorkGroupSize.x, _GLF_struct_7(mat2x3(1.0), mat3x2(1.0), mat4(1.0), ivec4(1), _GLF_struct_5(1u, 1.0, ivec2(1), mat3x2(1.0), vec4(1.0)), _GLF_struct_6(vec2(1.0), bvec2(true), ivec2(1), 1, 1, ivec3(1))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_8.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_14.subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_14.subgroup_local_id + 1) % subgroup_size), _GLF_struct_9(ivec4(1)), _GLF_struct_12(ivec4(1), _GLF_struct_10(vec4(1.0), true), mat3x2(1.0), _GLF_struct_11(mat4(1.0), vec3(1.0), 1u, mat4x2(1.0), bvec2(true), mat4(1.0), vec2(1.0))), mat3x4(1.0));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_struct_replacement_14.subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     atomicStore(buf[_GLF_struct_replacement_13.next_virtual_gid], uint(2), 4, 64, 4);
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 atomicStore(buf[_GLF_struct_replacement_13.next_virtual_gid], uint(2), 4, 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
