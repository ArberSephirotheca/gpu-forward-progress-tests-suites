#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 mat2x3 _f0;
 mat2x4 _f1;
 vec4 _f2;
 ivec4 _f3;
 uint workgroup_id;
 bvec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_12 {
 ivec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 int _f1;
 mat2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_14 {
 mat2x4 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_13 _f3;
 uvec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 _GLF_struct_14 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 ivec2 _f1;
 vec4 _f2;
 bvec4 _f3;
 ivec4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 float _f1;
 uvec4 _f2;
 mat4 _f3;
 ivec4 _f4;
 mat4x2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 mat4x3 _f1;
 uint subgroup_size;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 uvec4 _f1;
 ivec3 _f2;
 mat2x4 _f3;
 bvec2 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_3 {
 uint _f0;
 mat2x4 _f1;
 vec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_5 {
 uint _f0;
 mat4x2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_1 {
 uint subgroup_local_id;
 mat4 _f0;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 bvec2 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_5(1u, mat4x2(1.0), _GLF_struct_3(1u, mat2x4(1.0), vec2(1.0), ivec2(1)), _GLF_struct_4(uvec4(1u), uvec4(1u), ivec3(1), mat2x4(1.0), bvec2(true), mat4(1.0), bvec4(true))), gl_SubgroupID);
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_9(_GLF_struct_7(mat2x4(1.0), 1.0, uvec4(1u), mat4(1.0), ivec4(1), mat4x2(1.0), bvec3(true)), mat4x3(1.0), gl_SubgroupSize, _GLF_struct_8(mat2x4(1.0), ivec2(1), vec4(1.0), bvec4(true), ivec4(1), ivec4(1))));
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec2(1u), bvec2(true), _GLF_struct_0(vec2(1.0), bvec3(true)), _GLF_struct_1(gl_SubgroupInvocationID, mat4(1.0)));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(mat3x4(1.0), _GLF_struct_14(mat2x4(1.0), _GLF_struct_11(vec4(1.0), 1, mat2(1.0), mat2x3(1.0)), _GLF_struct_12(ivec2(1), 1u), _GLF_struct_13(mat2x3(1.0), mat2x4(1.0), vec4(1.0), ivec4(1), gl_WorkGroupID.x, bvec2(true), uvec3(1u)), uvec3(1u), vec2(1.0)), ivec4(1));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_15._f1._f3.workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_6.subgroup_id * _GLF_struct_replacement_10._f0.subgroup_size + _GLF_struct_replacement_2._f3.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_6.subgroup_id * _GLF_struct_replacement_10._f0.subgroup_size + ((_GLF_struct_replacement_2._f3.subgroup_local_id + 1) % _GLF_struct_replacement_10._f0.subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_struct_replacement_2._f3.subgroup_local_id + 1 < _GLF_struct_replacement_10._f0.subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}
