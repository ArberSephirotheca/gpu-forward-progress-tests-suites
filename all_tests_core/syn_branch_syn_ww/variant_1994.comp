#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_34 {
 ivec4 _f0;
 int _f1;
 vec2 _f2;
} ;

struct _GLF_struct_33 {
 mat2 _f0;
 int _f1;
} ;

struct _GLF_struct_32 {
 float _f0;
 mat4 _f1;
} ;

struct _GLF_struct_31 {
 uint _f0;
 mat3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_35 {
 _GLF_struct_31 _f0;
 _GLF_struct_32 _f1;
 uvec2 _f2;
 _GLF_struct_33 _f3;
 mat4 _f4;
 _GLF_struct_34 _f5;
} ;

struct _GLF_struct_29 {
 uvec3 _f0;
 mat3x2 _f1;
 vec4 _f2;
 mat4x3 _f3;
 ivec4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_28 {
 ivec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_27 {
 mat2 _f0;
} ;

struct _GLF_struct_26 {
 mat2x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_30 {
 _GLF_struct_26 _f0;
 mat4x3 _f1;
 _GLF_struct_27 _f2;
 _GLF_struct_28 _f3;
 ivec2 _f4;
 _GLF_struct_29 _f5;
} ;

struct _GLF_struct_36 {
 _GLF_struct_30 _f0;
 uint next_virtual_gid;
 _GLF_struct_35 _f1;
} ;

struct _GLF_struct_23 {
 bool _f0;
 int _f1;
} ;

struct _GLF_struct_22 {
 mat3x2 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_21 {
 mat4x2 _f0;
} ;

struct _GLF_struct_20 {
 float _f0;
 uvec4 _f1;
 int _f2;
 uvec3 _f3;
 ivec3 _f4;
 uvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 bvec2 _f1;
 uvec3 _f2;
 _GLF_struct_21 _f3;
 _GLF_struct_22 _f4;
 mat3x2 _f5;
 _GLF_struct_23 _f6;
} ;

struct _GLF_struct_18 {
 uvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_17 {
 uvec3 _f0;
 vec2 _f1;
 mat3x2 _f2;
 mat4x3 _f3;
 bool _f4;
 mat4 _f5;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 vec2 _f1;
 mat4x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 bvec3 _f1;
 bvec4 _f2;
 mat4x3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_19 {
 _GLF_struct_15 _f0;
 uvec3 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_25 {
 _GLF_struct_19 _f0;
 vec4 _f1;
 int _injected_loop_counter;
 mat2 _f2;
 bvec4 _f3;
 _GLF_struct_24 _f4;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 mat2 _f1;
 mat4x3 _f2;
 ivec4 _f3;
 uint workgroup_size;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 _GLF_struct_9 _f1;
 int _f2;
 vec3 _f3;
 mat4x3 _f4;
 uvec4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_7 {
 bool _f0;
 int _f1;
 uvec3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 int _f1;
 bvec2 _f2;
 uvec3 _f3;
 mat4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 bool _f1;
 vec2 _f2;
 mat4 _f3;
 ivec3 _f4;
 mat3x4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 ivec2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 bool _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
 uvec3 _f1;
 vec3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_2 {
 float _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 ivec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 mat3x4 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 uint num_workgroup;
 ivec2 _f1;
} ;

struct _GLF_struct_0 {
 uint virtual_gid;
 vec2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), (int(6)) ^ 0)) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6))), 0 + (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), (int(6)) ^ 0)) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, true, false)), true && (bool(bvec4(bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, true, false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.9)), bvec2(true, false))) : _GLF_FUZZED(vec2(6.3, -629.766)))).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.9)), bvec2(true, false))) : _GLF_FUZZED(vec2(6.3, -629.766)))).y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.9)), bvec2(true, false))) : _GLF_FUZZED(vec2(6.3, -629.766)))).y)))))), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.9)), bvec2(true, false))) : _GLF_FUZZED(vec2(6.3, -629.766)))).y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.9)), bvec2(true, false))) : _GLF_FUZZED(vec2(6.3, -629.766)))).y))))))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), max(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0)))))), abs(1.0), 1.0, 1.0, 1.0)), max(float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), max(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0)))))), abs(1.0), 1.0, 1.0, 1.0)), float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), max(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0)))))), abs(1.0), 1.0, 1.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), max(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0)))))), abs(1.0), 1.0, 1.0, 1.0)), max(float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), max(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0)))))), abs(1.0), 1.0, 1.0, 1.0)), float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), max(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0))), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, abs(0.0)))))), abs(1.0), 1.0, 1.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))))))))))
        return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-42031)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(mat4(1.0), _GLF_struct_13(_GLF_struct_12(_GLF_IDENTITY(ivec3(1), max(ivec3(1), _GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0)))), _GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(bvec2(bvec2(true)), true, true)))))), gl_SubgroupInvocationID));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = ((((1 ^ 0) & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), max(int(7), int(7)))) ^ 0), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (9722 ^ -64734))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(bvec2(true), _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)), min(uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)), uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))), ivec2(1));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(mat3x2(1.0), mat3x4(1.0), _GLF_struct_3(_GLF_struct_2(1.0), ivec4(1), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(exp(0.0)), 0.0, _GLF_IDENTITY(sin(0.0), clamp(sin(0.0), _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-387.200)), bool(false)))), _GLF_IDENTITY(min(sin(0.0), sin(0.0)), (false ? _GLF_FUZZED(injectionSwitch.x) : min(sin(0.0), sin(0.0))))), sin(0.0))), 0.0, 1.0, 0.0)), mix(float(float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(exp(0.0)), 0.0, _GLF_IDENTITY(sin(0.0), float(mat4(_GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) / 1.0))), tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0))), 0.0, 1.0, 0.0))), float(_GLF_FUZZED(-6030.5021)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(exp(0.0)), 0.0, _GLF_IDENTITY(sin(0.0), _GLF_IDENTITY(clamp(sin(0.0), _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), sin(_GLF_IDENTITY(0.0, 1.0 * (0.0)))), float(mat3x4(clamp(sin(0.0), _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), sin(_GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)))), 0.0, 1.0, 0.0)), mix(float(float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(exp(0.0), sqrt(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))) * _GLF_IDENTITY((exp(0.0)), mix(float(_GLF_FUZZED(210.515)), float((exp(0.0))), bool(true))))), 0.0, _GLF_IDENTITY(sin(0.0), float(mat4(_GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) / 1.0))), tan(0.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-89.67) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 1.0))), 0.0, 1.0, 0.0))), float(_GLF_FUZZED(-6030.5021)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))), 1.0 * (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(sqrt(exp(0.0)), (false ? _GLF_FUZZED(-97.77) : _GLF_IDENTITY(sqrt(exp(0.0)), float(vec3(sqrt(exp(0.0)), 0.0, 1.0))))), 0.0, _GLF_IDENTITY(sin(0.0), clamp(sin(0.0), _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), sin(0.0))), 0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(exp(0.0)), 0.0, _GLF_IDENTITY(sin(0.0), float(mat4(_GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2579.3798)), float(0.0), bool(true)))), (sin(0.0)) / 1.0))), tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0)), min(float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(exp(0.0)), 0.0, _GLF_IDENTITY(sin(0.0), float(mat4(_GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2579.3798)), float(0.0), bool(true)))), (sin(0.0)) / 1.0))), tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0)), float(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(exp(0.0)), 0.0, _GLF_IDENTITY(sin(0.0), float(mat4(_GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2579.3798)), float(0.0), bool(true)))), (sin(0.0)) / 1.0))), tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0))))), float(_GLF_FUZZED(-6030.5021)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.4, 9.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(reflect(vec2(-1341.4991, 138.598), vec2(-443.251, -3149.1119))))))).y))))))))), float(_GLF_FUZZED(-15.31)), bool(false))))), _GLF_struct_4(mat2x3(1.0), uvec3(1u), vec3(1.0), vec3(1.0)), _GLF_struct_8(vec2(1.0), ivec2(1), _GLF_struct_5(uvec2(_GLF_IDENTITY(1u, ~ (~ (1u)))), true, vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, sqrt(0.0), 1.0, 1.0, sqrt(1.0), length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, log(1.0))), (false ? _GLF_FUZZED(-255.136) : float(mat3(1.0, sqrt(0.0), 1.0, 1.0, sqrt(1.0), length(sin(vec4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(min(481.748, -5397.3132)))), 0.0, 0.0))), 0.0, 0.0, log(1.0))))))), mat4(1.0), ivec3(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), mat3x4(1.0), mat3(_GLF_IDENTITY(1.0, 1.0 * (1.0)))), _GLF_struct_6(vec2(1.0), 1, bvec2(true), uvec3(1u), mat4(1.0), ivec4(1)), true, _GLF_struct_7(true, 1, uvec3(1u), uvec2(1u))), _GLF_struct_10(uvec4(1u), _GLF_struct_9(uvec2(1u), mat2(1.0), mat4x3(1.0), ivec4(1), gl_WorkGroupSize.x), 1, vec3(1.0), mat4x3(1.0), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (1u) - 0u)), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(1u, (1u) - 0u)))), uvec3(1u)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = _GLF_struct_replacement_11._f5._f1.workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), ~ (~ (int(8)))))) + (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) && true)), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id, clamp(_GLF_struct_replacement_14._f1.subgroup_local_id, _GLF_struct_replacement_14._f1.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id, (_GLF_struct_replacement_14._f1.subgroup_local_id) * 1u))), (_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id, clamp(_GLF_struct_replacement_14._f1.subgroup_local_id, _GLF_struct_replacement_14._f1.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id, (_GLF_struct_replacement_14._f1.subgroup_local_id) * 1u)))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), uint(uint(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_14._f1.subgroup_local_id), ~ (~ (~ (_GLF_struct_replacement_14._f1.subgroup_local_id))))), 0u ^ (~ (~ (_GLF_struct_replacement_14._f1.subgroup_local_id)))))))), vec2(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, tan(0.0), 0.0, 1.0)), clamp(float(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, tan(0.0), 0.0, 1.0)), float(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, tan(0.0), 0.0, 1.0)), float(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, tan(0.0), 0.0, 1.0))))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_36 _GLF_struct_replacement_36 = _GLF_struct_36(_GLF_struct_30(_GLF_struct_26(mat2x3(1.0), mat2x4(1.0)), mat4x3(1.0), _GLF_struct_27(mat2(1.0)), _GLF_struct_28(ivec3(1), true), ivec2(1), _GLF_struct_29(uvec3(1u), mat3x2(1.0), vec4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.7)), float(1.0), bool(true)))), ivec4(1), uvec3(1u))), workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_14._f1.subgroup_local_id + 1) % subgroup_size), _GLF_struct_35(_GLF_struct_31(1u, mat3(1.0), ivec3(1)), _GLF_struct_32(1.0, mat4(1.0)), uvec2(1u), _GLF_struct_33(mat2(1.0), 1), mat4(1.0), _GLF_struct_34(ivec4(1), 1, _GLF_IDENTITY(vec2(1.0), vec2(0.0, 0.0) + (vec2(1.0))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-280.195, 8836.5011)))), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-699.644), max(_GLF_FUZZED(-699.644), _GLF_FUZZED(-699.644))), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(5367.5717)), bvec2(true, false))) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * cos(0.0), (_GLF_IDENTITY((injectionSwitch.y) * cos(0.0), ((injectionSwitch.y) * cos(0.0)) / 1.0)) + _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))))), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-699.644), max(_GLF_FUZZED(-699.644), _GLF_FUZZED(-699.644))), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(5367.5717)), bvec2(true, false))) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0))))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-280.195, 8836.5011)))), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-699.644), max(_GLF_FUZZED(-699.644), _GLF_FUZZED(-699.644))), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(5367.5717)), bvec2(true, false))) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * cos(0.0), (_GLF_IDENTITY((injectionSwitch.y) * cos(0.0), ((injectionSwitch.y) * cos(0.0)) / 1.0)) + _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-280.195, 8836.5011)))), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-699.644), max(_GLF_FUZZED(-699.644), _GLF_FUZZED(-699.644))), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(5367.5717)), bvec2(true, false))) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * cos(0.0), (_GLF_IDENTITY((injectionSwitch.y) * cos(0.0), ((injectionSwitch.y) * cos(0.0)) / 1.0)) + _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))), true)))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(dot(vec2(4021.8598, 5.4), vec2(4.8, -6397.6846)))))), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))))), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-699.644), max(_GLF_FUZZED(-699.644), _GLF_FUZZED(-699.644))), (vec2(1.0, 1.0))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) >> 0)]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(5367.5717)), bvec2(true, false))) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -9267)); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true)))), false))))))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) || false)))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.6) : injectionSwitch.y)), injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && _GLF_IDENTITY((bool(bvec4((false) && true, true, _GLF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)), (float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 0.0, length(vec2(0.0, 0.0)), sqrt(1.0)))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(_GLF_IDENTITY(1.0, (1.0) / cos(0.0))), 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, log(1.0), 0.0))))), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))) + 0.0)) < injectionSwitch.y))))), ((bool(bvec4((false) && true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1)), bool(bvec2(_injected_loop_counter != 1, true)))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(17596) : _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true, true))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (1 & (1 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), float(_GLF_FUZZED(-394.653)), bool(false))), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[1])))).y, true, false)))) && true)))))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(_injected_loop_counter)))), (true ? ~ (_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(_injected_loop_counter)))) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          barrier();
                         break;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                            return;
                           barrier();
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 atomicStore(buf[_GLF_struct_replacement_0.virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) ^ 0)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        {
        }
       else
        {
         if(_GLF_struct_replacement_14._f1.subgroup_local_id + 1 < subgroup_size)
          {
           int i = 0;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4)), 0 + (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       for(_GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_19(_GLF_struct_15(uvec2(1u), bvec3(true), bvec4(true), mat4x3(1.0), mat4(1.0)), uvec3(1u), _GLF_struct_16(ivec4(1), vec2(1.0), mat4x3(_GLF_IDENTITY(1.0, (1.0) * 1.0)), mat2x3(1.0)), _GLF_struct_17(uvec3(1u), vec2(1.0), mat3x2(1.0), mat4x3(1.0), true, mat4(1.0)), _GLF_struct_18(uvec3(1u), vec2(1.0))), vec4(1.0), 0, mat2(1.0), bvec4(true), _GLF_struct_24(_GLF_struct_20(1.0, uvec4(1u), 1, uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), (ivec3(1)) | ivec3(0, 0, 0)), (true ? _GLF_IDENTITY(ivec3(1), (ivec3(1)) | ivec3(0, 0, 0)) : _GLF_FUZZED(ivec3(-46872, 34656, -29041)))), _GLF_IDENTITY(uvec3(1u), (true ? _GLF_IDENTITY(uvec3(1u), ~ (~ (uvec3(1u)))) : _GLF_FUZZED(uvec3(40109u, 151489u, 132445u)))), ivec2(1)), _GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), uvec3(1u), _GLF_struct_21(mat4x2(1.0)), _GLF_struct_22(mat3x2(1.0), mat3(1.0)), mat3x2(1.0), _GLF_struct_23(true, 1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_25._injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-427.048)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-427.048)), float(injectionSwitch.y), bool(true)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-427.048)), float(injectionSwitch.y), bool(true)), min(mix(float(_GLF_FUZZED(-427.048)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / 1.0)) - 0.0), bool(true)), mix(float(_GLF_FUZZED(-427.048)), float(injectionSwitch.y), bool(true)))))) - 0.0)))))); _GLF_struct_replacement_25._injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, (false) || false)))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             atomicStore(buf[_GLF_struct_replacement_36.next_virtual_gid], uint(2), 4, 64, 4);
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               atomicStore(buf[_GLF_struct_replacement_36.next_virtual_gid], uint(2), 4, 64, 4);
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
}
