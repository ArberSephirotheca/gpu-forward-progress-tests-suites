#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), false, false, false))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      break;
    }
  }
 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID), clamp(clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID), _GLF_IDENTITY(clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), max(_GLF_IDENTITY(_GLF_IDENTITY(clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID), ~ (~ (clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID), ~ (~ (clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)))))), _GLF_IDENTITY(clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID), uvec3(1u, 1u, 1u) * (clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))), gl_WorkGroupID))))))), clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))).x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u), workgroup_size, workgroup_size)))) * workgroup_id, min(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (~ (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))))))) * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY((0u ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, max(0u, 0u))))), _GLF_IDENTITY(uint(uvec3((0u ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) - 0u))), max(0u, 0u)), _GLF_IDENTITY(0u, max(0u, 0u))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) ^ 0u), 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec3((0u ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))))), 0u, 0u))) - 0u, ((uint(uvec3((0u ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))))), 0u, 0u))) - 0u) | 0u), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((0u ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))), (false ? _GLF_FUZZED(subgroup_size) : max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))))))), 0u, 0u), (_GLF_IDENTITY(uvec3((0u ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))), (false ? _GLF_FUZZED(subgroup_size) : max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))))))), 0u, 0u), (uvec3((0u ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))), (false ? _GLF_FUZZED(subgroup_size) : max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u))))))), 0u, 0u)) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)))) - 0u, ((uint(uvec3((0u ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED((99621u * workgroup_size)) : _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), max(0u, 0u))))), 0u, 0u))) - 0u) | 0u)) / 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> (0u ^ 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, min(_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uint(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))))), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (67945u & 0u) | (0u))))) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id, min(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | _GLF_IDENTITY((workgroup_id), ((workgroup_id)) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * _GLF_IDENTITY(1u, min(1u, 1u))), (workgroup_size * workgroup_id) >> (0u ^ 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * _GLF_IDENTITY(1u, min(1u, 1u))), (workgroup_size * workgroup_id) >> (0u ^ 0u))))))) | 0u)) >> 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, min(_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uint(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))))), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (67945u & 0u) | (0u))))) ^ 0u)))), (_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * 1u), (workgroup_size * workgroup_id) >> (0u ^ 0u))))) | 0u), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, min(_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uint(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))))), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (67945u & 0u) | (0u))))) ^ 0u)))), (_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * 1u), (workgroup_size * workgroup_id) >> (0u ^ 0u))))) | 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))))) >> 0u) | 0u))) << 0u);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), max(int(8), int(8)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 + (int(8)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(8), clamp(int(8), int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(1 * (int(8)), 0 + (1 * (int(8))))))), _GLF_IDENTITY(int(8), 0 + (int(8)))), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 + (int(8)))))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))) >> 0)) << 0))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> _GLF_IDENTITY(0u, (0u) / 1u))) | (subgroup_size)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> _GLF_IDENTITY(0u, (0u) / 1u))) | (subgroup_size)))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, _GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(floatBitsToUint(-923.997)) : (subgroup_local_id + 1))) >> _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) << 0u)))))))) % subgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size)), ((~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) | 0u, ((_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(virtual_gid))) + subgroup_id * subgroup_size) | 0u) - 0u))))))))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size)), ((~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) | 0u, ((_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(virtual_gid))) + subgroup_id * subgroup_size) | 0u) - 0u))))))))) - 0u), (_GLF_IDENTITY((~ (workgroup_base + subgroup_id * subgroup_size)), ((~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) | 0u, ((_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(virtual_gid))) + subgroup_id * subgroup_size) | 0u) - 0u))))))))) - 0u)) << 0u)) / 1u)) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))), (subgroup_local_id + 1) >> 0u)) % subgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 0u, 1u))), subgroup_id)) * subgroup_size), ((workgroup_base + _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 0u, 1u))), subgroup_id)) * subgroup_size)) << 0u)), (~ (~ (workgroup_base + subgroup_id * subgroup_size))) ^ 0u)) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), workgroup_base)) + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)), 1u), (uvec2(_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)), 1u)) | (uvec2(_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)), 1u))))))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), uint(uvec2((workgroup_base), 1u)))), workgroup_base)) + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base))))), workgroup_base)) + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), workgroup_base)) + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), workgroup_base)) + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec3(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (uint(uvec3(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) + 1) >> 0u)) % subgroup_size), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), workgroup_base)) + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)), max(_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)), _GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size), (~ (workgroup_base + subgroup_id * subgroup_size)) | (1u ^ 1u)))))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), 0u, 0u, 1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size : _GLF_FUZZED(num_workgroup)))), ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size : _GLF_FUZZED(num_workgroup))))) / 1u)))) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 6483)), (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 1 * (1)))))) >> 0u)) % subgroup_size))))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, clamp((subgroup_id) - 0u, _GLF_IDENTITY((subgroup_id) - 0u, clamp((subgroup_id) - 0u, (subgroup_id) - 0u, (subgroup_id) - 0u)), _GLF_IDENTITY((subgroup_id) - 0u, ((subgroup_id) - 0u) | 0u)))) : _GLF_FUZZED(virtual_gid)))), (~ (_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) : _GLF_FUZZED(virtual_gid))))) ^ (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))) * subgroup_size))) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1) >> 0u, ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u) - 0u))) % subgroup_size)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, true), true)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) >> ((-13729 & 0) | 0)) & ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), bool(bool(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))), (_GLF_IDENTITY(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-581))), 1, 1))) & (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) + (0 << _GLF_IDENTITY(int(0), int(0)))), int(0)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) + (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 << _GLF_IDENTITY(int(0), int(0)))))), int(0))) << 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x)) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) + (0 << _GLF_IDENTITY(int(0), int(0)))), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) + (0 << _GLF_IDENTITY(int(0), int(0)))), int(0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) + (0 << _GLF_IDENTITY(int(0), int(0)))), int(0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) + (0 << _GLF_IDENTITY(int(0), int(0)))), int(0))) | _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(0), int(0))) | (0)))))) >> _GLF_IDENTITY(int(0), int(0)))))))) || false)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (! ((false))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   int i = 0;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))), true && (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) | (0)))) | (_GLF_IDENTITY(int(3), int(3)))), max(0 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), (0 << _GLF_IDENTITY(int(3), int(3))) + 0))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), true && (! (false))))), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))), (injectionSwitch.x > injectionSwitch.y))), false, false)))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), injectionSwitch)).x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(_GLF_IDENTITY(true && (false), bool(bvec4(true && (false), true, false, true))), true, false))))))
                continue;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)), 0u | (_GLF_IDENTITY(max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)), (max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u))) >> 0u))))], uint(2), 4, 64, 4);
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, true))));
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))))))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), 0.0)), _GLF_IDENTITY((true ? vec2(vec4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 0.0, length(0.0), 0.0))))), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1806.1556)), bool(false))))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), mix(float(_GLF_FUZZED((-8.2 * 67.55))), float(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0))), bool(true))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))), (true ? determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), float(mat2(abs(1.0), sqrt(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))), sqrt(0.0), 0.0, 1.0)) : _GLF_FUZZED(-9.6))), _GLF_IDENTITY(0.0, min(0.0, 0.0)))) : _GLF_FUZZED(injectionSwitch)), ((_GLF_IDENTITY(true ? vec2(vec4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))))), (true ? determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), float(mat2(abs(1.0), sqrt(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))), sqrt(0.0), 0.0, 1.0)) : _GLF_FUZZED(-9.6))), 0.0)) : _GLF_FUZZED(injectionSwitch), min(_GLF_IDENTITY(true ? vec2(vec4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))))), (true ? determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), float(mat2(abs(1.0), sqrt(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))), sqrt(0.0), 0.0, 1.0)) : _GLF_FUZZED(-9.6))), 0.0)) : _GLF_FUZZED(injectionSwitch), min(true ? vec2(vec4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))))), (true ? determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), float(mat2(abs(1.0), sqrt(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))), sqrt(0.0), 0.0, 1.0)) : _GLF_FUZZED(-9.6))), 0.0)) : _GLF_FUZZED(injectionSwitch), true ? vec2(vec4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))))), (true ? determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), float(mat2(abs(1.0), sqrt(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))), sqrt(0.0), 0.0, 1.0)) : _GLF_FUZZED(-9.6))), 0.0)) : _GLF_FUZZED(injectionSwitch))), true ? vec2(vec4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)))))), (true ? determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), float(mat2(abs(1.0), sqrt(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))), sqrt(0.0), 0.0, 1.0)) : _GLF_FUZZED(-9.6))), 0.0)) : _GLF_FUZZED(injectionSwitch))))) - vec2(0.0, 0.0)))).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), abs(1.0), _GLF_IDENTITY(sqrt(0.0), clamp(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) / 1.0), sqrt(0.0), sqrt(0.0))), 0.0, 1.0)), (determinant(mat3(1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), abs(1.0), sqrt(0.0), 0.0, 1.0))) / 1.0), 0.0)), (true ? vec2(vec4(injectionSwitch, determinant(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(vec4(-8.6, 4.9, -8045.8265, -389.523), _GLF_IDENTITY((vec4(-8.6, 4.9, -8045.8265, -389.523)), (true ? (vec4(-8.6, 4.9, -8045.8265, -389.523)) : _GLF_FUZZED(vec4(-2.8, 55.42, -58.30, 8.7)))) + vec4(0.0, 0.0, 0.0, 0.0)).t)), bool(false))), 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0)), 0.0)) : _GLF_FUZZED(injectionSwitch)))).y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-78.25), clamp(_GLF_FUZZED(-78.25), _GLF_FUZZED(-78.25), _GLF_FUZZED(-78.25))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(8.2)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), vec2(mat4x3(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-78.25), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(8.2)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))), vec2(mat2x4(mix(vec2(_GLF_FUZZED(-78.25), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (true ? _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch)))[0], min((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0])) : _GLF_FUZZED(distance(5.9, 8.1)))), _GLF_FUZZED(8.2)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))).x > injectionSwitch.y)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-47.62)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true)))), 0.0, 1.0)), 0.0)), (true ? vec2(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))) + (injectionSwitch)))))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), sqrt(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1024.1371))))), 0.0)) : _GLF_FUZZED(injectionSwitch)))).y))))) && true)))))))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 << _GLF_IDENTITY(int(3), int(3))) ^ 1)); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                       return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), (bool(bool(! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, true, true)), (bool(bvec4((false), true, true, true))) || false))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))), (_GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), (bool(bool(! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, true, true)), (bool(bvec4((false), true, true, true))) || false))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))), ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), (bool(bool(! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, true, true)), (bool(bvec4((false), true, true, true))) || false))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)))) && true)) && true))) && true)))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             return;
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    continue;
                   return;
                  }
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), true, true)))))));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
