#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uint workgroup_base;
 vec4 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-29.27, 708.943)) : injectionSwitch)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), ! (! (! (_GLF_DEAD(false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) && true))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, cos(0.0), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, cos(0.0)))), ! (! (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, cos(0.0), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, cos(0.0)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(atanh(injectionSwitch))) : injectionSwitch)).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(float(false)) : injectionSwitch.y))))))
        return;
       return;
      }
    }
   barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(workgroup_size * workgroup_id, vec4(1.0));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, log(1.0), cos(0.0), 0.0, 0.0, 1.0, 0.0))).y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, log(1.0), cos(0.0), 0.0, 0.0, 1.0, 0.0))).y))))))), true && ((! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y)))) || false)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))))))))))))))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((3.1 - 4.8)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4x3(_GLF_IDENTITY(((injectionSwitch)[1]), min(((injectionSwitch)[1]), _GLF_IDENTITY(((injectionSwitch)[1]), mix(float(((injectionSwitch)[1])), float(_GLF_FUZZED(-5.0)), bool(false))))) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), (true ? _GLF_IDENTITY(min(1.0, 1.0), max(_GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), min(1.0, 1.0))), min(1.0, 1.0))) : _GLF_FUZZED(-7.6)))), clamp(1.0, 1.0, 1.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0)), 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4x3(_GLF_IDENTITY(((injectionSwitch)[1]), (((injectionSwitch)[1])) - 0.0) / 1.0, 0.0, exp(0.0), 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0, _GLF_IDENTITY(float(mat2x3((_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0, 1.0, length(0.0), 1.0, 0.0, 1.0)), (true ? float(mat2x3((_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0, 1.0, length(0.0), 1.0, 0.0, 1.0)) : _GLF_FUZZED((-4.9 + -900.314)))))), 1.0)), 0.0)))), clamp(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(2.8 - -9.4, max(_GLF_IDENTITY(2.8 - -9.4, (2.8 - -9.4) * 1.0), 2.8 - -9.4))), float(mat4((_GLF_IDENTITY(2.8 - -9.4, max(_GLF_IDENTITY(2.8 - -9.4, (2.8 - -9.4) * 1.0), 2.8 - -9.4))), 0.0, 0.0, tan(0.0), cos(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 0.0, cos(0.0), log(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))[1], _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.8), _GLF_FUZZED(3.2)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) + 0)], (injectionSwitch)[1]), bvec2(true, true))))[1], _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1]))) / 1.0, float(mat4x3(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), clamp((1.0), (1.0), (1.0))) / 1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(float(mat3x4(((injectionSwitch)[1]) / 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)), (_GLF_IDENTITY(float(mat3x4(((injectionSwitch)[1]) / 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)), (float(mat3x4(((injectionSwitch)[1]) / 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, sin(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))) / 1.0)) / _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)), float(_GLF_IDENTITY(mat3(float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)), sin(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 1.0), transpose(transpose(mat3(float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)), sin(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 1.0)))))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (1) / 1)], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false ? _GLF_FUZZED(5.2) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))) : _GLF_FUZZED(determinant(mat3(-5.6, 763.076, -11.16, 7235.6683, 28.86, -8.7, -0.8, -3.8, -795.428))), max(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-65.47), max(_GLF_FUZZED(-65.47), _GLF_FUZZED(-65.47)))), float(0.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))) : _GLF_FUZZED(determinant(mat3(-5.6, 763.076, -11.16, 7235.6683, 28.86, -8.7, -0.8, -3.8, -795.428))), clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), mix(float(_GLF_FUZZED(-69.23)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(true))), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.4) : 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))) : _GLF_FUZZED(determinant(mat3(-5.6, 763.076, -11.16, 7235.6683, 28.86, -8.7, -0.8, -3.8, -795.428))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), float(mat4x3(_GLF_IDENTITY(((injectionSwitch)[1]), mix(float(((injectionSwitch)[1])), float(_GLF_FUZZED(4.7)), bool(false))) / 1.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) + log(1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))) : _GLF_FUZZED(determinant(mat3(-5.6, 763.076, -11.16, 7235.6683, 28.86, -8.7, -0.8, -3.8, -795.428))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))) : _GLF_FUZZED(determinant(mat3(-5.6, 763.076, -11.16, 7235.6683, 28.86, -8.7, -0.8, -3.8, -795.428))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), float(mat4x3(((injectionSwitch)[1]) / 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, sqrt(sqrt(1.0)), 1.0, 1.0, 1.0, 1.0, 1.0)), float(_GLF_IDENTITY(mat3x2(float(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, sqrt(sqrt(1.0)), 1.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0), mat2(1.0) * (mat3x2(float(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, sqrt(sqrt(1.0)), 1.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0)))))), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0)), max(float(mat2x3(0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0)), float(mat2x3(0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0))))), 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-65.47)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))) : _GLF_FUZZED(determinant(mat3(-5.6, 763.076, -11.16, 7235.6683, 28.86, -8.7, -0.8, -3.8, -795.428))))))), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]), max(_GLF_IDENTITY(((injectionSwitch)[1]), clamp(((injectionSwitch)[1]), ((injectionSwitch)[1]), ((injectionSwitch)[1]))), ((injectionSwitch)[1]))) / 1.0, _GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0))), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / _GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) - 0.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(6357.3133) : _GLF_IDENTITY(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))[1]) / 1.0), clamp(clamp((_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[1]) / 1.0, ((injectionSwitch)[1]) / _GLF_IDENTITY(1.0, 0.0 + (1.0)), ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], float(mat2x4(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0))), (injectionSwitch)[1]))) / 1.0), clamp(clamp(((injectionSwitch)[1]) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), (_GLF_IDENTITY((injectionSwitch), vec2(vec4((injectionSwitch), 1.0, 0.0)))[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]) / _GLF_IDENTITY(1.0, (1.0) - 0.0)))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) - 0.0)), (true ? _GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, mix(float(((injectionSwitch)[1]) / 1.0), float(_GLF_FUZZED(-3760.2780)), bool(false)))))), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(((false ? -0.2 : -28.27) / -94.71), (((false ? -0.2 : -28.27) / -94.71)) / 1.0)), _GLF_IDENTITY(((injectionSwitch))[1], max(((injectionSwitch))[1], ((injectionSwitch))[1]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(9514.9562)), bvec2(true, false)))[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]), max(((injectionSwitch)[1]), ((injectionSwitch)[1]))) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-4.2, -5.4))))) / cos(vec2(0.0, 0.0)))[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(float(mat3x2(((injectionSwitch)[1]) / 1.0, 0.0, 1.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3(8.3, -86.52, -9362.3292, -76.35, 4258.8372, 55.83, -7.4, -9.4, -1.2)) : mat3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0))))))), 1.0)))), 0.0, 1.0)), float(float(float(mat3x2(((injectionSwitch)[1]) / 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0))))))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (float(mat3x4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, (false ? _GLF_FUZZED(-71.98) : ((injectionSwitch)[1]) / 1.0)), ((injectionSwitch)[1]) / 1.0, ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) + vec2(0.0, 0.0)))[1]) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]), 1.0 * (((injectionSwitch)[1]))) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, max(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), _GLF_IDENTITY(((injectionSwitch)[1]), clamp(((injectionSwitch)[1]), ((injectionSwitch)[1]), ((injectionSwitch)[1]))) / 1.0), _GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, (((injectionSwitch)[1]) / 1.0) + 0.0), ((injectionSwitch)[1]) / 1.0), mix(float(clamp(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, (((injectionSwitch)[1]) / 1.0) + 0.0), ((injectionSwitch)[1]) / 1.0)), float(_GLF_FUZZED(-9.8)), bool(false))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) - 0.0)) : _GLF_FUZZED(-330.713))), (false ? _GLF_FUZZED(6357.3133) : _GLF_IDENTITY(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / _GLF_IDENTITY(1.0, 0.0 + (1.0)), ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, sqrt(1.0), 0.0, 1.0), (mat3x2(1.0, 1.0, 0.0, sqrt(1.0), 0.0, 1.0)) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), (float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[1]) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch), vec2(vec4((injectionSwitch), 1.0, 0.0)))[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / _GLF_IDENTITY(1.0, (1.0) - 0.0)))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) - 0.0)), (true ? _GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, min(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, mix(float(((injectionSwitch)[1]) / 1.0), float(_GLF_FUZZED(-3760.2780)), bool(false))), float(vec2(_GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, mix(float(((injectionSwitch)[1]) / 1.0), float(_GLF_FUZZED(-3760.2780)), bool(false))), 0.0)))))), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(((false ? -0.2 : -28.27) / -94.71)), _GLF_IDENTITY(((injectionSwitch))[1], max(((injectionSwitch))[1], ((injectionSwitch))[1]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(9514.9562)), bvec2(true, false)))[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-4.2, -5.4))))) / cos(vec2(0.0, 0.0)))[1]) / 1.0, clamp((_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-4.2, -5.4))))) / cos(vec2(0.0, 0.0)))[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-4.2, -5.4))))) / cos(vec2(0.0, 0.0)))[1]) / 1.0, _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-4.2, -5.4))))) / cos(vec2(0.0, 0.0)))[1]) / 1.0, max((_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-4.2, -5.4))))) / cos(vec2(0.0, 0.0)))[1]) / 1.0, (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-4.2, -5.4))))) / cos(vec2(0.0, 0.0)))[1]) / 1.0)))), _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(float(mat3x2(((injectionSwitch)[1]) / 1.0, 0.0, 1.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat3(8.3, -86.52, -9362.3292, -76.35, 4258.8372, 55.83, -7.4, -9.4, -1.2)), (_GLF_IDENTITY(_GLF_FUZZED(mat3(8.3, -86.52, -9362.3292, -76.35, 4258.8372, 55.83, -7.4, -9.4, -1.2)), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_FUZZED(mat3(8.3, -86.52, -9362.3292, -76.35, 4258.8372, 55.83, -7.4, -9.4, -1.2))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) : mat3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))))), 1.0)))), 0.0, 1.0)), float(float(float(mat3x2(((injectionSwitch)[1]) / 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0))))))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (float(mat3x4(_GLF_IDENTITY(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0), clamp(clamp(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]), 1.0 * (((injectionSwitch)[1]))) / 1.0), clamp(_GLF_IDENTITY(((injectionSwitch)[1]), max(_GLF_IDENTITY(((injectionSwitch)[1]), clamp(((injectionSwitch)[1]), ((injectionSwitch)[1]), ((injectionSwitch)[1]))), ((injectionSwitch)[1]))) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, max(((injectionSwitch)[1]) / 1.0, ((injectionSwitch)[1]) / 1.0)), ((injectionSwitch)[1]) / 1.0), clamp(((injectionSwitch)[1]) / 1.0, _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, (((injectionSwitch)[1]) / 1.0) + 0.0), ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) - 0.0)) : _GLF_FUZZED(-330.713)))) + determinant(mat3(0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0)))))) + 0.0)), 0.0, exp(0.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-90.52) : _GLF_IDENTITY(0.0, (0.0) / 1.0))), 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), min(float(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), float(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), max(float(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), float(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(2.1))))))))) * cos(0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) * 1.0, ((0.0) * 1.0) / 1.0)), (true ? _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) * 1.0, ((0.0) * 1.0) / 1.0)) : _GLF_FUZZED(-8400.8813))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0))))))), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-4.8, _GLF_IDENTITY(7293.1357, min(7293.1357, 7293.1357)), 49.41).g)), bvec2(true, false))).y))));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -3923)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = _GLF_struct_replacement_0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_id)) * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) || false))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4886.3946) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(vec3(-2.4, -8130.7108, 6.8).z)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(vec3(-2.4, -8130.7108, 6.8).z)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(vec3(-2.4, -8130.7108, 6.8).z)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(vec3(-2.4, -8130.7108, 6.8).z)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), bool(bvec4(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), false, true, true)))))), true && (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), bool(bvec4(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), false, true, true))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) && true)), bool(bool(! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) && true))))))), (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) && true), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), true && ((false)))) && true)))) && true)), ! (! ((_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), bool(bvec4(true && ((false)), true, false, false)))), false, true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), true && ((false))), false, true)), bool(bvec4(bool(bvec3(_GLF_IDENTITY((false), true && ((false))), false, true)), false, true, true))), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), true && ((false))), false, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))), false, true, true))))), bool(bvec4(bool(bvec3(_GLF_IDENTITY((false), true && ((false))), false, true)), false, true, true)))) || false)))))) && true))))))), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (injectionSwitch.x)))) < injectionSwitch.y)), false), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))), true && (! (false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_0.workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))))), (subgroup_local_id + 1), (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
      }
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))) && true)) || false)))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(7), (int(7)) * 1))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(trunc(2.1)))), injectionSwitch[1])).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(trunc(2.1)))), injectionSwitch[1])).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(- 3.5, mix(float(- 3.5), float(_GLF_FUZZED(475.172)), bool(false)))))), bool(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1960.1788))) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1960.1788))) > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), abs(vec2(1.0, 1.0)) * ((injectionSwitch) * mat2(1.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1960.1788))) > injectionSwitch.y)))) || false))))))))), true && (true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(392.652) : injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1960.1788))) > injectionSwitch.y)))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(392.652) : injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED(1960.1788))) > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(mat2(0.0, log(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), determinant(mat2(0.0, 0.0, 0.0, 0.0)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3284.6584) : 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1) : _GLF_FUZZED(findLSB(subgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1) : _GLF_FUZZED(findLSB(subgroup_id)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1) : _GLF_FUZZED(findLSB(subgroup_id))) + 0)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(uvec3(78913u, 62948u, 4363u).p) : virtual_gid))))], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(subgroup_local_id + _GLF_IDENTITY(1, 0 | (1)) < subgroup_size)
    {
     int i = 0;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), (_GLF_IDENTITY(4, (4) | _GLF_IDENTITY(0, (0) >> (1 ^ 1)))) >> 0), 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))), false)))), false)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))), (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false))))) || false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           barrier();
          }
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.1, -4.3)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, 1.0, 1.0))))).y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
            }
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false), ! (! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))), (bool(bool(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))) || false))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) << 0)))), (int(3)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec3(! (_injected_loop_counter > 0), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_injected_loop_counter > 0), bool(bvec3((_injected_loop_counter > 0), false, _GLF_IDENTITY(true, true && (true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(17.44)), bool(false))), 0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)), (_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)), (_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(81.38, -62.48)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], injectionSwitch[1])), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-84.30)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), 0.0, 1.0, 1.0)), (_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))), 0.0, 1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0))).y))))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec3(2, 1, 0), ivec3(ivec4(ivec3(2, 1, 0), 0)))))), uint(uvec4(uint(2), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - _GLF_IDENTITY(dot(vec4(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat2x3(mat3(mat2x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat2x3(mat3(mat2x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), float(mat3x2(float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat2x3(mat3(mat2x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat2x3(mat3(mat2x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), 0.0, 1.0, 1.0, 1.0, tan(0.0))))), 1.0, 1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0)), dot(vec4(length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 1.0, 1.0, 1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0))))), 0u, 1u))), 4, 64, 4);
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             return;
            }
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true))))) && true))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     break;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
