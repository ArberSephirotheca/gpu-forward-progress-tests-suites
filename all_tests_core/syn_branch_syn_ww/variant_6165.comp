#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(pow(3.7, -68.03))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))), _GLF_IDENTITY(! (! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))), true && (! (! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))))) || false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) ^ 1)); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(138816u, 62533u, 174915u)) : gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), 1.0 * (float(injectionSwitch.x)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((_GLF_IDENTITY(-728.530 + 6.8, float(mat2x4(-728.530 + 6.8, cos(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))), bool(false))))), injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-672.890)), bool(false)))))) * _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, cos(0.0)), vec2(log(1.0), 1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-87.95) : dot(vec2(0.0, cos(0.0)), vec2(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), (log(1.0)) * 1.0), log(1.0))), 1.0)))), dot(vec2(0.0, cos(0.0)), vec2(log(1.0), 1.0)))))), _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)))), uvec3(uvec4(gl_WorkGroupID, 0u))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-39895 & 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            continue;
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0)), float(vec3(dot(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), clamp(vec3(0.0, 1.0, 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0)), sqrt(1.0), 1.0, 1.0, log(abs(1.0))), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, (0.0) - 0.0), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0)), sqrt(1.0), 1.0, 1.0, log(abs(1.0))), (true ? mat3x2(0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0)), sqrt(1.0), 1.0, 1.0, log(abs(1.0))) : _GLF_FUZZED(mat3x2(-9.5, 0.0, -916.854, -2.8, -172.154, -8.4))))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, 1.0), min(vec3(0.0, 1.0, 1.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(mat4x2(vec3(0.0, 1.0, 1.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), vec3(0.0, 1.0, 1.0))), vec3(1.0, 0.0, 0.0)), 0.0, 1.0)))), 1.0, 0.0, 0.0, length(vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) / 1.0), 0.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0, 0.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0)))), min(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0)))), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), 1.0)))))), 0.0 + (dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))))), sqrt(0.0)))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 1 * (1)), 1)) & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) >> 0)); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)))) << 0u, (subgroup_size) << 0u, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) << 0u)))) | (subgroup_size)), subgroup_size, subgroup_size), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 1u), ~ (~ (uvec4(subgroup_size, 1u, 1u, 1u))))))) << 0u, (subgroup_size) << 0u, (subgroup_size) << 0u)))) | _GLF_IDENTITY((subgroup_size), uint(uvec3((subgroup_size), 1u, 1u)))), subgroup_size, subgroup_size), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((subgroup_size) << 0u, (subgroup_size) << 0u, (subgroup_size) << _GLF_IDENTITY(0u, ~ (~ (0u))))))) | (subgroup_size)), subgroup_size, subgroup_size)) / 1u), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) | (subgroup_size))) << 0u, (subgroup_size) << 0u, _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))) << 0u)))) | (subgroup_size)), subgroup_size, subgroup_size), _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((subgroup_size) << 0u, (subgroup_size) << 0u, (subgroup_size) << 0u)))) | (subgroup_size)), subgroup_size, subgroup_size), uint(uint(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, clamp((subgroup_size) << 0u, (subgroup_size) << 0u, (subgroup_size) << 0u)))) | (subgroup_size)), subgroup_size, subgroup_size))))))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, sin(0.0) + (injectionSwitch.x))))); _injected_loop_counter --)
          {
           return;
          }
        }
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) && true), true, true)))) || false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)))))));
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, abs(1.0), abs(1.0)), (mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false))))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, abs(1.0), abs(1.0))) * mat4(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9.0)))))))), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED((acos(vec2(-6945.8737, 46.64)) - injectionSwitch)) : injectionSwitch)).y, exp(0.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY((acos(vec2(-6945.8737, 46.64)) - injectionSwitch), mat2(1.0) * ((acos(vec2(-6945.8737, _GLF_IDENTITY(46.64, min(_GLF_IDENTITY(46.64, min(46.64, 46.64)), _GLF_IDENTITY(46.64, (_GLF_IDENTITY(46.64, clamp(46.64, 46.64, 46.64))) / 1.0))))) - _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)))))))) : injectionSwitch)).y))))));
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) * vec2(1.0, 1.0)))) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0))).x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(574.609), clamp(_GLF_FUZZED(574.609), _GLF_FUZZED(574.609), _GLF_IDENTITY(_GLF_FUZZED(574.609), max(_GLF_FUZZED(574.609), _GLF_IDENTITY(_GLF_FUZZED(574.609), (false ? _GLF_FUZZED(-0.0) : _GLF_FUZZED(574.609))))))))), 1.0)), sin(0.0), sqrt(0.0), exp(0.0), 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false)))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.3)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))), false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.4)), bool(false))) < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, true)))) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, true)))) && true))), bool(bvec3(! ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, true)))) && true))), false, false)))))))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), false)), (bool(bvec3(false, true, false))) && true)), false, false)))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec4(_GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0)))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), (_GLF_IDENTITY((bool(false)), ((bool(false))) && true)) && true)), (_GLF_IDENTITY(bool(false), true && (bool(false)))) && true)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), (_GLF_IDENTITY((bool(false)), ((bool(false))) && true)) && true)), (_GLF_IDENTITY(bool(false), true && (bool(false)))) && true)))), false, false)))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))))))))
          return;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) << 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) << 0u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) << 0u), 0u), ~ (~ (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) << 0u), 0u)))))) : _GLF_FUZZED(subgroup_size))) + 1 < subgroup_size)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 + (0)))))), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) / 1))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327))), clamp(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327))), _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327))), ~ (~ (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327)))))), true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327)))))) | (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327))), (_GLF_FUZZED(_GLF_IDENTITY(69327, min(69327, 69327)))) << 0))))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          break;
        }
       int i = _GLF_IDENTITY(0, ~ (~ (0)));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bool(! (! (_GLF_DEAD(false)))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              break;
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED((-4.0 * -7005.7390)) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7900.7656)), bool(false)))))) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))))));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               return;
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, (true) || false)), bvec3(bvec4(bvec3(false, false, true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.9)), vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))), false)))), true && (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true), true)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))), true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) || false)), true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false, true), bvec3(bvec4(bvec3(false, false, true), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), true)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), true)))), true)))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, bool(bvec3(false, false, true))), true), bvec3(bvec4(bvec3(false, false, true), true))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))) > injectionSwitch.y)), bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, bool(bvec3(false, false, true))), true), bvec3(bvec4(bvec3(false, false, true), true))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))) > injectionSwitch.y)), true, true, false))))), true && (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(false, false, true), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(false, false, true), true))), false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false))))))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))) || false))))))
        return;
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec3(40.66, -959.386, 4.3), vec3(2012.1857, 73.47, -7.3))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(int(int(7)))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, _GLF_IDENTITY(~ (~ ((int(7)) - 0)), 0 | (_GLF_IDENTITY(~ (~ ((int(7)) - 0)), int(ivec3(~ (~ ((int(7)) - 0)), 1, 0))))))))), _GLF_IDENTITY(min(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, ((int(7)) - 0) | ((int(7)) - 0))))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0)))), (_GLF_IDENTITY(min(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - _GLF_IDENTITY(0, (0) | (0)), ((int(7)) - _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) * 1)))) | ((int(7)) - 0))))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0)))), min(min(((int(_GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))).y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, ((int(7)) - 0) | ((int(7)) - 0))))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0)))), min(((int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.0) : 1.0)), injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, ((int(7)) - 0) | ((int(7)) - 0))))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))))))) | (min(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, ((int(7)) - 0) | (_GLF_IDENTITY((int(7)), ((int(7))) ^ 0) - 0))))), ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(82568) : int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0)))))))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), 0 | (~ (_injected_loop_counter ++))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               continue;
              }
             continue;
             if(_GLF_DEAD(false))
              continue;
            }
           do
            {
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u)], uint(2), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9394.0660) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(40.25))), injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))) && true))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)), true && (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2791.0408)), vec2(_GLF_FUZZED(-605.118), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0), 1.0)), (_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0), 1.0)), vec2(mat4(vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0), 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec2(-8.0, -48.25).r), _GLF_FUZZED(6.1)), bvec2(false, false))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec2(-8.0, -48.25).r), _GLF_FUZZED(6.1)), bvec2(false, false))))).y))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec2(-8.0, -48.25).r), _GLF_FUZZED(6.1)), bvec2(false, false))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec2(-8.0, -48.25).r), _GLF_FUZZED(6.1)), bvec2(false, false))))).y)))))) && true))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))), ! (! (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))))), true && (_GLF_IDENTITY((! (false)), ((! (false))) && true)))))))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
}
