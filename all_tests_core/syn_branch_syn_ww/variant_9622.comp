#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 bvec3 _f0;
 uint subgroup_base;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 mat4x3 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 _GLF_struct_1 _f0;
 mat2x3 _f1;
 _GLF_struct_3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(500.942) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(500.942) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(500.942) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(500.942) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))) || false), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))) || false), (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), true && (bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), (bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-686.910)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), (false) && true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), (bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y = subgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(gl_SubgroupSize, _GLF_struct_1(_GLF_struct_0(mat3x2(1.0))), mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(455.230) : 1.0))), _GLF_struct_3(mat3x4(1.0), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(53.45) : 1.0)), 1.0)), (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), min(1.0, 1.0)), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), min(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))), mix(float(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), float(_GLF_FUZZED(-9.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(1.0, 1.0))) - 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), min(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))), mix(float(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), float(_GLF_FUZZED(-9.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(1.0, 1.0))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), min(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))), mix(float(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), float(_GLF_FUZZED(-9.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(1.0, 1.0))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), min(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))), mix(float(clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(777.169)), bool(false))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), float(_GLF_FUZZED(-9.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(1.0, 1.0))) - 0.0)))))), _GLF_struct_2(mat2x4(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ((_GLF_DEAD(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)) && true)))))) || false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (length(normalize(vec3(_GLF_IDENTITY(1.0, (1.0) / sqrt(1.0)), 1.0, 1.0)))) - log(1.0))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0)) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x < injectionSwitch.y)), false, true, false))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), false, true)))) && true, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), false, true)))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-79.01))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, length(vec2(0.0, 0.0))), (true ? mat4x2(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-79.01))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat4x2(685.305, -95.79, 3.5, 4680.4603, 70.82, 2.8, -95.26, -4451.0115))))), mix(float(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-79.01))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, length(vec2(0.0, 0.0))), (true ? mat4x2(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-79.01))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat4x2(685.305, -95.79, 3.5, 4680.4603, 70.82, 2.8, -95.26, -4451.0115)))))), float(_GLF_FUZZED(7.6)), bool(false))))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false, true)))) && true) || false))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, sqrt(0.0))), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, sqrt(0.0)))), 0.0, 1.0, log(1.0), 1.0, 0.0, 1.0, 0.0))), 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * 1.0), 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) * vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) * vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), true, false, true))), ! (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.4)), bool(false))), 0.0))), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), false, true)))) && true, ! (! ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 0.0)))), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), max(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), clamp(length(normalize(vec3(1.0, 1.0, 1.0))), length(normalize(vec3(1.0, 1.0, 1.0))), length(normalize(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (length(normalize(vec3(1.0, 1.0, 1.0)))) - 0.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, sqrt(1.0), sqrt(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(length(0.0), max(length(0.0), length(0.0))), determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat2(0.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(-1054.0264, 2452.3593, -2060.4718, -258.902)) : mat2(0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat2(-9.7, 66.28, 7.1, -1.5))))), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / _GLF_IDENTITY(1.0, float(vec4(1.0, sqrt(1.0), sqrt(0.0), 1.0)))), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7504.7415), _GLF_FUZZED(1699.1570)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y), ! _GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), true && ((! ((injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)))), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)))), 1.0)), max(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0), float(mat4x2(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))))) < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), false, true)))) && true))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(bool(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))) / abs(vec2(1.0, 1.0))).y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bool((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && _GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), true && ((bool(bool(_GLF_DEAD(false)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && _GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), true && ((bool(bool(_GLF_DEAD(false)))))))), false || ((_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && _GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), true && ((bool(bool(_GLF_DEAD(false))))))))))) || false), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false)))))), true && (bool(bool(_GLF_DEAD(false)))))), false, false, false))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))
  {
   GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.x = num_workgroup;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (true ? workgroup_size * workgroup_id : _GLF_FUZZED(subgroup_id)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, length(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0))))), min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch)))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((_GLF_IDENTITY(28.85 * float(77743), (28.85 * float(77743)) / 1.0))), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-145.898)), vec2(_GLF_FUZZED(-705.854), ((injectionSwitch))[1]), bvec2(false, true)))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), _GLF_IDENTITY(vec2(_GLF_FUZZED((28.85 * float(77743))), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], (false ? _GLF_FUZZED(682.515) : _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], float(mat4x3((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), min(vec2(_GLF_FUZZED((28.85 * float(77743))), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], (false ? _GLF_FUZZED(682.515) : _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], float(mat4x3((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), vec2(_GLF_FUZZED((28.85 * float(77743))), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], (false ? _GLF_FUZZED(682.515) : _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], float(mat4x3((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)))))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(vec2(_GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch)))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))) : _GLF_FUZZED(vec2(5.8, -9.9)))))), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))) : _GLF_FUZZED(vec2(5.8, -9.9))))))) * vec2(1.0, 1.0))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((_GLF_IDENTITY(28.85, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), clamp(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false))))))), (float(_GLF_IDENTITY(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), clamp(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))))))) / 1.0)) * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), min(vec2(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(vec2(_GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch)))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))) : _GLF_FUZZED(vec2(5.8, -9.9)))))), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))) : _GLF_FUZZED(vec2(5.8, -9.9))))))) * vec2(1.0, 1.0))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((_GLF_IDENTITY(28.85, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), clamp(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false))))))), (float(_GLF_IDENTITY(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), clamp(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))))))) / 1.0)) * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), vec2(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(vec2(_GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch)))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))) : _GLF_FUZZED(vec2(5.8, -9.9)))))), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)), (true ? mat3x2(injectionSwitch, 1.0, 1.0, 1.0, log(1.0)) : _GLF_FUZZED(mat3x2(74.90, 0.5, 39.69, 7383.2923, 9.7, -5.0))))) : _GLF_FUZZED(vec2(5.8, -9.9))))))) * vec2(1.0, 1.0))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((_GLF_IDENTITY(28.85, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), clamp(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false))))))), (float(_GLF_IDENTITY(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), clamp(float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))), float(_GLF_IDENTITY(28.85, mix(float(28.85), float(_GLF_FUZZED(-6991.9789)), bool(false)))))))) / 1.0)) * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(_GLF_IDENTITY(-87.28, clamp(-87.28, -87.28, -87.28)), 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true)), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(_GLF_IDENTITY(-87.28, float(mat3(_GLF_IDENTITY(-87.28, (false ? _GLF_FUZZED(-5042.9921) : -87.28)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, tan(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))), 5645.9271, 41.95, 7919.4072).a)), _GLF_IDENTITY(vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), vec2(mat4x2(vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), (_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), (vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a))) * mat2(1.0))) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * _GLF_IDENTITY(float(77743), mix(float(float(77743)), float(_GLF_FUZZED(4685.6460)), bool(false))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((_GLF_IDENTITY(28.85, min(_GLF_IDENTITY(28.85, (28.85) - 0.0), 28.85)) * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true)), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y)), true)), clamp(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), max(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(mat3x2(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), 0.0, 1.0, 1.0, 1.0))))), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))), true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((_GLF_IDENTITY(28.85 * float(77743), max(28.85 * float(77743), _GLF_IDENTITY(28.85 * float(77743), (true ? 28.85 * float(77743) : _GLF_FUZZED(-4.5))))))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), vec2(_GLF_IDENTITY(_GLF_FUZZED((28.85 * float(77743))), float(mat3x2(_GLF_FUZZED((28.85 * float(77743))), 0.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0))), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), min(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)), (vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))[0], _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a))) * vec2(1.0, 1.0)))), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a), min(_GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a), _GLF_FUZZED(vec4(-87.28, 5645.9271, 41.95, 7919.4072).a)))), vec2(_GLF_FUZZED((28.85 * float(77743))), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(bvec3(true), GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_struct_replacement_4.subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_5.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_5.subgroup_base, _GLF_IDENTITY((workgroup_base + _GLF_struct_replacement_5.subgroup_base) << (0u | 0u), ((workgroup_base + _GLF_struct_replacement_5.subgroup_base) << (0u | 0u)) ^ 0u)), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_5.subgroup_base, (_GLF_struct_replacement_5.subgroup_base) << 0u)), _GLF_IDENTITY(((workgroup_base + _GLF_struct_replacement_5.subgroup_base)) - 0u, (((workgroup_base + _GLF_struct_replacement_5.subgroup_base)) - 0u) | (_GLF_IDENTITY(((workgroup_base + _GLF_struct_replacement_5.subgroup_base)) - 0u, (false ? _GLF_FUZZED(workgroup_size) : ((workgroup_base + _GLF_struct_replacement_5.subgroup_base)) - 0u))))) | 0u) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), min((1), (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (int(8)))))), _GLF_IDENTITY((1) - 0, ((1) - 0) >> 0)) : _GLF_FUZZED(92283))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 + ((~ (1)))))))), (_GLF_IDENTITY((1), min((1), (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (int(8)))))), _GLF_IDENTITY((1) - 0, ((1) - 0) >> 0)) : _GLF_FUZZED(92283))), 1 * (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 + ((~ (1))))))))) << (0 ^ 0)))) % _GLF_struct_replacement_4.subgroup_size, 0u + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), min((1), (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) >> 0)), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) >> 0))) | 0) - 0) : _GLF_FUZZED(92283))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), int(int(_GLF_IDENTITY(1, ~ (~ (1))))))))), max(_GLF_IDENTITY((1), min((1), (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) >> 0)) - 0) : _GLF_FUZZED(92283))), 1 * (_GLF_IDENTITY(1, ~ (~ (1)))))), _GLF_IDENTITY((1), min((1), (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) >> 0)) - 0) : _GLF_FUZZED(92283))), 1 * (_GLF_IDENTITY(1, ~ (~ (1)))))))))) % _GLF_struct_replacement_4.subgroup_size)));
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))))), _GLF_IDENTITY((1) | (1), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((1) | (1), 0 ^ ((1) | (1))))))), _GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4)), 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), max(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), (_GLF_IDENTITY(4, (4) * 1)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), (_GLF_IDENTITY(4, (4) * 1)) | (_GLF_IDENTITY(4, (4) * 1))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2))) : _GLF_FUZZED(packHalf2x16(vec2(-76.15, -50.27)))))) == 0)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(acos(-3.9)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) ^ 0)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x4(min(injectionSwitch, injectionSwitch), 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4.8)), float(1.0), bool(true))), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec2(1.0, 1.0) * (vec2(mat2x4(min(injectionSwitch, injectionSwitch), 1.0, 1.0, 1.0, abs(1.0), 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, 0.0 + (0.0)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x))))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x4(min(injectionSwitch, injectionSwitch), 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4.8)), float(1.0), bool(true))), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(-6.7, -5655.9028)))) * (vec2(mat2x4(min(injectionSwitch, injectionSwitch), 1.0, 1.0, 1.0, abs(1.0), 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, 0.0 + (0.0)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x))))))).y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8554.3072)), float(0.0), bool(true))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6.5)), bool(false))), injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0))))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false))))) || (_GLF_IDENTITY(false, true && (false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), (true && (false)) && true))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))) - 0.0)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-34.55), _GLF_FUZZED(-3.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(injectionSwitch.y, log(abs(1.0)) + (injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        barrier();
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) && true)))), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false))))) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && true));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(log(1.0))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(log(1.0)))) || false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
