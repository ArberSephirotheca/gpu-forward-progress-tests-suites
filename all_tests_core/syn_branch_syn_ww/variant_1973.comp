#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 + (_GLF_IDENTITY(int(0), (int(0)) / 1))), int(0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))) - 0)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))) - 0))), (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))) - 0)))) + (0 >> _GLF_IDENTITY(int(3), int(3)))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) / 1), (1 << _GLF_IDENTITY(int(0), int(0))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) ^ 0))))), 1 << _GLF_IDENTITY(int(0), int(0))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) - 0))), clamp(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), 1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)))), _GLF_IDENTITY(1, max(1, 1)))) << _GLF_IDENTITY(int(0), int(0)))), 1 << _GLF_IDENTITY(int(0), int(0)))))) * 1), clamp((1 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) / 1), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 ^ (int(0))), int(0)))))) / 1))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 + (_GLF_IDENTITY(int(0), (int(0)) / 1))), int(0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))) - 0)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))) - 0))), (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))) - 0)))) + (0 >> _GLF_IDENTITY(int(3), int(3)))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) / 1), (1 << _GLF_IDENTITY(int(0), int(0))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) ^ 0))))), 1 << _GLF_IDENTITY(int(0), int(0))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) - 0))), clamp(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), 1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)))), _GLF_IDENTITY(1, max(1, 1)))) << _GLF_IDENTITY(int(0), int(0)))), 1 << _GLF_IDENTITY(int(0), int(0)))))) * 1), clamp((1 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) / 1), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 ^ (int(0))), int(0)))))) / 1))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (-78134 & 0) | (_GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(7), int(7))) | (_injected_loop_counter)))), (_injected_loop_counter) - 0))), _GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) ? _GLF_FUZZED(_GLF_IDENTITY(-34194, (-34194) | 0)) : _GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(_GLF_IDENTITY(-94947, (-94947) | (_GLF_IDENTITY(-94947, (-94947) | (-94947)))), -94947, -94947)), 0, 1)))))), 0 ^ (_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1))))))))))), min(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-34194) : _GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), 0 ^ (_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1))))))))))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-34194) : _GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, _GLF_IDENTITY(1, (1) - 0))))))), 0 ^ (_GLF_IDENTITY(-94947, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))), ~ (~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))))))))))), clamp(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-34194) : _GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), 0 ^ (_GLF_IDENTITY(-94947, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))), (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1))))) - 0)))))))), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))), 1)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)) ? _GLF_FUZZED(-34194) : _GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), 0 ^ (_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1))))))))))), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-34194) : _GLF_IDENTITY(_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 1 * (_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)))), 0, 1)))))), 0 ^ (_GLF_IDENTITY(-94947, ~ (~ (_GLF_IDENTITY(-94947, int(ivec3(_GLF_IDENTITY(-94947, clamp(-94947, -94947, -94947)), 0, 1))))))))))))))))))) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1))), (true ? (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), min(int(4), int(4)))) * 1))) : _GLF_FUZZED(-25917))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6698.9901, 924.582)) : injectionSwitch)).y), mix(float(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6698.9901, 924.582)) : injectionSwitch)).y)), float(_GLF_FUZZED(vec3(7.6, -4.0, 6.5).t)), bool(false)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))), ((_GLF_IDENTITY(false, bool(bvec2(false, true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), false))), false || (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, (false) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))) && ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(false || (bool(false)), true && (false || (bool(false))))))), false)))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(false || (bool(false)), true && (false || (bool(false))))))), false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(false || (bool(false)), true && (false || (bool(false))))))), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))) || false), false)))))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true), bvec3(bvec3(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(511.542, 1553.2299)) : injectionSwitch)).y))))), bool(bvec4(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, true))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))), ! (! (bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))))))))))), bool(bvec4(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, true))), true))))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))) && true))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false)))))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)))))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) || false)))))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? injectionSwitch.x : _GLF_FUZZED(1.2), min(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.2), clamp(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.2), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.2)) - 0.0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))) ? injectionSwitch.x : _GLF_FUZZED(1.2), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.2))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.2))))), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))), (~ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec2(max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))), 0)))))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 | 0))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
      }
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), min(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0))))).y)), ! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), min(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0))))).y))), (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), min(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0))))).y))), bool(bvec4(! (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), min(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0))))).y))), false, false, false)))) || false)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), (_GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, true, true)))))) && true))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), true, false))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false, ! (! ((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))), false, true)), true)), ! (! (bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false), false, true)), true)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-398.572)))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) ^ 0)))) / 1), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) ^ 0)) - _GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(6087)))) - 0))), 1, 0, 0)), (_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) ^ 0)))) / 1), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) ^ 0)) - _GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(6087)))) - 0))), 1, 0, 0)), 0 + (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) ^ 0)) - 0) ^ 0)))) / 1), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) ^ 0)) - _GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(6087)))) - 0))), 1, 0, 0))))) ^ 0)), 1, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))) >> 0, ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) * 1)), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(int(ivec2(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) >> 0) ^ 0)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))) >> 0, ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) * 1)), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(int(ivec2(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) >> 0) ^ 0))))) << 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
             barrier();
            }
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), _GLF_IDENTITY(0u, min(0u, 0u)) ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))), workgroup_base + subgroup_base)))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[_GLF_IDENTITY(0, int(int(0)))], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) * 1u), min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], float(vec3(injectionSwitch[0], 0.0, 1.0))), injectionSwitch[0])), (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x))), ~ (~ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)))), 0u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x)) + 0.0)))))))))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x))), ~ (~ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x))))))), (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x))), ~ (~ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x)))))))) >> uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u))))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(80477), (false ? _GLF_FUZZED(min(1785, -17651)) : _GLF_FUZZED(80477))) : 1))) >> _GLF_IDENTITY(0, (0) / 1))), (_GLF_IDENTITY((1) | (1), int(_GLF_IDENTITY(ivec3((1) | (1), 1, 0), (ivec3((1) | _GLF_IDENTITY((1), max((1), (1))), 1, 0)) | (_GLF_IDENTITY(ivec3((1) | (1), 1, 0), ~ (_GLF_IDENTITY(~ (ivec3((1) | (1), 1, 0)), (~ (ivec3((1) | (1), 1, 0))) << ivec3(0, 0, 0))))))))) | 0)), clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0))), max(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0))), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1), uint(uint((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1)))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) | (1))), uint(uint((subgroup_local_id + 1)))), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))) - _GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)) - 0u, ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1))) >> 0), int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1))) >> 0), (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1))) >> 0) : _GLF_FUZZED(88388)))))), (true ? _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | 0) + 0) : _GLF_FUZZED((67754 + ivec2(-85055, -57897)[0])))))) - 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) ^ 0u) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) >> (0u & 72160u)), _GLF_IDENTITY(0u, min(0u, 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, (((subgroup_local_id + 1)) - 0u) - (0u | 0u)))), (~ (~ (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))) - 0u, (((subgroup_local_id + 1)) - 0u) - (0u | 0u))))) / 1u))), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)), ~ (~ (uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)), ~ (~ (uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)))))), 0u | (~ (_GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)), ~ (~ (uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u))))))))) | (~ (_GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)), ~ (~ (uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)))))))))))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) >> (0u & 72160u)), _GLF_IDENTITY(0u, min(0u, 0u)))), ~ (~ (((subgroup_local_id + 1)) - _GLF_IDENTITY(0u, ~ (~ (0u))))))), 1u, 0u, (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / cos(0.0))) | 1u))), (uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1)))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) >> (0u & 72160u)), _GLF_IDENTITY(0u, min(0u, 0u)))), _GLF_IDENTITY(~ (~ (((subgroup_local_id + 1)) - 0u)), uint(uvec4(~ (~ (((subgroup_local_id + 1)) - 0u)), 1u, 1u, 1u))))), 1u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 0u), min(uvec3(0u, 1u, 0u), uvec3(0u, 1u, 0u))))), _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 1u), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0), injectionSwitch.x)))) | 1u), ((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) * (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 1u)) + 0u)) | (_GLF_IDENTITY((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.1) : injectionSwitch.x)))) | 1u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), (~ (_GLF_IDENTITY(uint(0u), uint(0u)))) << 0u)))) + (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 1u), ((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) | 1u)) * 1u)))))), (true ? uvec4((_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1)))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) >> (0u & 72160u)), _GLF_IDENTITY(0u, min(0u, 0u)))), _GLF_IDENTITY(~ (~ (((subgroup_local_id + 1)) - 0u)), uint(uvec4(~ (~ (((subgroup_local_id + 1)) - 0u)), 1u, 1u, 1u))))), 1u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 0u), min(uvec3(0u, 1u, 0u), uvec3(0u, 1u, 0u))))), _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 1u), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0), injectionSwitch.x)))) | 1u), ((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) * (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 1u)) + 0u)) | (_GLF_IDENTITY((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.1) : injectionSwitch.x)))) | 1u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(0u), uint(0u))), (~ (_GLF_IDENTITY(uint(0u), uint(0u)))) << 0u)))) + (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 1u), ((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) | 1u)) * 1u)))))) : _GLF_FUZZED(uvec4(virtual_gid, subgroup_base, uvec2(87668u, 94242u))))))) / 1u)))))) % subgroup_size);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))), false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(false, false || (false))))))), true))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(false, false || (false))))))), true))), false))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(false, false || (false))))))), true))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(false, false || (false))))))), true))), false))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(30.24)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(30.24)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), log(1.0), cos(0.0), 0.0, 1.0), (mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(30.24)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), log(1.0), cos(0.0), 0.0, 1.0)) * mat3(1.0)))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), mix(float(_GLF_FUZZED(4259.3527)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), bool(true))), injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)], uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
 if(_GLF_DEAD(false))
  barrier();
 if((_GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2))) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(51.43, -7.5)) : injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) && true))) && true))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           barrier();
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-80189)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)) ? 4 : _GLF_FUZZED(-49618)))), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), mix(float(_GLF_FUZZED(-6.0)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))))), injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), true && (bool(bool(_GLF_IDENTITY(false, (false) || false))))), ! _GLF_IDENTITY((! (bool(bool(_GLF_IDENTITY(false, (false) || false))))), false || ((! (bool(bool(_GLF_IDENTITY(false, (false) || false)))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), true))))))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               return;
              }
            }
          }
         return;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(676.697) : _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, log(1.0), 1.0, 0.0, 0.0, 0.0)))))))) && true)))
        return;
      }
     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(7), int(7))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), (false ? _GLF_FUZZED(-91298) : _GLF_IDENTITY((1 & 1), _GLF_IDENTITY(int(int((1 & 1))), (int(int((1 & 1)))) - 0))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-4.2, 0.0))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(-4.2, 0.0)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))) || false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))) && true), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false, false))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch)).y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 + (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), ! (! (! ((! (false)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), _GLF_IDENTITY(! (! (! ((! (false))))), (_GLF_IDENTITY(! (! (! ((! (false))))), ! (! (! (! (! ((! (false))))))))) || false)))), true, false, _GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), ! (! (! ((! (false)))))))), true, false, _GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), ! (! (! ((! (false)))))))), true, false, _GLF_IDENTITY(false, false || (false))))), (! (bool(bvec4(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), ! (! (! ((! (false)))))))), true, false, _GLF_IDENTITY(false, false || (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0)) >> 0)) >> 0), ! (! (_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(injectionSwitch) : (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))))).y))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_IDENTITY(true && (false || (! (false))), bool(_GLF_IDENTITY(bvec2(true && (false || (! (false))), true), bvec2(bvec4(bvec2(true && (false || (! (false))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))), bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ! (! ((false))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))))), bool(bvec3(false || (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false, false))), false || (false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))))))), false, true, false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_IDENTITY(true && (false || (! (false))), bool(_GLF_IDENTITY(bvec2(true && (false || (! (false))), true), bvec2(bvec4(bvec2(true && (false || (! (false))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))), bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ! (! ((false))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))))), bool(bvec3(false || (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false, false))), false || (false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))))))), false, true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_IDENTITY(true && (false || (! (false))), bool(_GLF_IDENTITY(bvec2(true && (false || (! (false))), true), bvec2(bvec4(bvec2(true && (false || (! (false))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))), bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ! (! ((false))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))))), bool(bvec3(false || (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false, false))), false || (false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))))))), false, true, false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))))[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (injectionSwitch.y) * 1.0)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), true)), false || (bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), true)))))))), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), true)), false || (bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), true))))))))), ! (! (! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), true)), false || (bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), true))))))))))))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false))
          barrier();
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), true && (! (false)))))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) >> 0)), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), true && (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false, true)))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), false, false), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), false, false), false)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), false, false), false)), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), false, false), false)), true)))))))))), true)))))))), false, true, false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), (! (false)) || false))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, (false) && true))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(38484) : _GLF_IDENTITY(int(3), (int(3)) * 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / (1 | 1))) | (0))); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}
