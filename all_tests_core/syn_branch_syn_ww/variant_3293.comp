#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               return;
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))));
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, determinant(mat3(round(length(normalize(1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)), (true ? mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, determinant(mat3(round(length(normalize(1.0))), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7.2) : 0.0)), 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)) : _GLF_FUZZED(mat3x2(2295.6554, 7.4, 87.86, 8.4, 395.482, 284.268))))), (false ? _GLF_FUZZED(-3.3) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, determinant(mat3(round(length(normalize(1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)), (true ? mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, determinant(mat3(round(length(normalize(1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)) : _GLF_FUZZED(mat3x2(2295.6554, 7.4, _GLF_IDENTITY(87.86, float(_GLF_IDENTITY(mat4x3(87.86, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), abs(exp(0.0))), transpose(transpose(mat4x3(87.86, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), min(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(abs(_GLF_IDENTITY(exp(0.0), 0.0 + (_GLF_IDENTITY(exp(0.0), mix(float(_GLF_IDENTITY(exp(0.0), float(mat2x3(exp(0.0), 1.0, 0.0, 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(-6.5)), bool(false)))))), min(abs(exp(0.0)), abs(exp(0.0)))))))))), 8.4, 395.482, 284.268))))), max(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), determinant(mat3(round(length(normalize(1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)), (true ? mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(vec4(5732.7009, -5.0, -8.3, 16.72).p)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), 1.0, 1.0, determinant(mat3(round(length(normalize(1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)) : _GLF_FUZZED(mat3x2(2295.6554, 7.4, 87.86, 8.4, 395.482, 284.268))))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, determinant(mat3(round(length(_GLF_IDENTITY(normalize(1.0), (normalize(1.0)) - 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)), (true ? mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, determinant(mat3(round(_GLF_IDENTITY(length(normalize(1.0)), (false ? _GLF_FUZZED(9.8) : length(normalize(1.0))))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, (true ? _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0)) : _GLF_FUZZED((139950u , -12.12))))), 0.0, sqrt(0.0), 0.0, 1.0)), sin(0.0), tan(0.0)) : _GLF_FUZZED(mat3x2(2295.6554, 7.4, 87.86, 8.4, 395.482, _GLF_IDENTITY(284.268, max(284.268, 284.268))))))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     do
                      {
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))), (true && (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8367.4561), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.6)), bvec2(true, false))).y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)) || false))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5)), clamp(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(613.936)), bvec2(false, false))).y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))));
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), clamp(_GLF_IDENTITY((workgroup_size), clamp((workgroup_size), (workgroup_size), (workgroup_size))), (workgroup_size), (workgroup_size))) ^ 0u) * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ 0)), min(_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-66298))), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(90678 & 0, _GLF_IDENTITY(int(ivec2(90678 & 0, 1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(ivec2(90678 & 0, 1)), max(int(ivec2(90678 & 0, 1)), _GLF_IDENTITY(int(ivec2(90678 & 0, 1)), 0 + (int(ivec2(90678 & 0, 1)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), 0 ^ (_GLF_FUZZED(_injected_loop_counter))))))), (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(90678 & 0, int(_GLF_IDENTITY(ivec3(90678 & 0, 0, _GLF_IDENTITY((1 & 1), clamp((1 & 1), (1 & 1), (1 & 1)))), (ivec3(90678 & 0, 0, (1 & 1))) | (ivec3(90678 & 0, 0, (1 & 1))))))), true && (_injected_loop_counter != (90678 & 0)))) || false)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                           do
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false))));
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      break;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) / 1u), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) / 1u), _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) / 1u)))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, 0u ^ (0u)) | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, 0u ^ (0u)) | (subgroup_local_id)) + 1)) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, 0u ^ (0u)) | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, 0u ^ (0u)) | (subgroup_local_id)) + 1)) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, 0u ^ (0u)) | (subgroup_local_id)), 0u | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, 0u ^ (0u)) | (subgroup_local_id)))) + 1), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, 0u ^ (0u)) | (subgroup_local_id)) + 1)) >> 0u)) | 0u)) << 0u) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) | 0u);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))) || false)), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))) || false))), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))) || false))), ! (! (! (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), false, false, false))), (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))) || false)))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)), (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid))], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if((subgroup_local_id % 2) == 0)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          return;
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))), min((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1))))), (false ? _GLF_FUZZED(-55309) : _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))), ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1))))))))) | ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (1 ^ (0 | _GLF_IDENTITY(1, 0 + (1)))) + (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))))), int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & 1) | 1)), clamp(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & 1) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & 1) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 & 1) | 1, clamp((1 & 1) | 1, _GLF_IDENTITY((1 & 1) | 1, (true ? (1 & 1) | 1 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1 & 1) | 1, int(int((1 & 1) | 1))))))))))))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(6, 0, 1)))), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (1 ^ (0 | _GLF_IDENTITY(1, 0 + (1)))) + (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (0 | 1) * (_GLF_IDENTITY(int(7), int(7))))))))), ((1 & 1) | 1)), clamp(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & _GLF_IDENTITY(1, (1) | 0)) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 & 1), int(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (ivec3((1 & 1), 1, 0)) + ivec3(0, 0, 0)))), ~ (~ (ivec3(ivec3(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (ivec3((1 & 1), 1, 0)) + ivec3(0, 0, 0)))))))))) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), max(int(7), int(7))), int(7))))), ((1 & 1) | 1)))))))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))))), ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (1 ^ (0 | _GLF_IDENTITY(1, 0 + (1)))) + (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (0 | 1) * (_GLF_IDENTITY(int(7), int(7))))))))), ((1 & 1) | 1)), clamp(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & _GLF_IDENTITY(1, (1) | 0)) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 & 1), int(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (ivec3((1 & 1), 1, 0)) + ivec3(0, 0, 0)))), ~ (~ (ivec3(ivec3(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (ivec3((1 & 1), 1, 0)) + ivec3(0, 0, 0)))))))))) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), max(int(7), int(7))), int(7))))), ((1 & 1) | 1)))))))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))))) | ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (1 ^ (0 | _GLF_IDENTITY(1, 0 + (1)))) + (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (0 | 1) * (_GLF_IDENTITY(int(7), int(7))))))))), ((1 & 1) | 1)), clamp(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & _GLF_IDENTITY(1, (1) | 0)) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 & 1), int(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (ivec3((1 & 1), 1, 0)) + ivec3(0, 0, 0)))), ~ (~ (ivec3(ivec3(_GLF_IDENTITY(ivec3((1 & 1), 1, 0), (ivec3((1 & 1), 1, 0)) + ivec3(0, 0, 0)))))))))) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), max(int(7), int(7))), int(7))))), ((1 & 1) | 1)))))))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))))))) * 1)), ! (! (_injected_loop_counter < ((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY((6) | _GLF_IDENTITY((_GLF_IDENTITY(6, int(ivec2(6, 1)))), ((_GLF_IDENTITY(6, int(ivec2(6, 1))))) | ((_GLF_IDENTITY(6, int(ivec2(6, 1)))))), 0 ^ ((6) | (_GLF_IDENTITY(6, int(ivec2(6, 1)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(-67304) : int(6))), clamp(int(6), int(6), int(6)))), (1 ^ (0 | _GLF_IDENTITY(1, 0 + (1)))) + (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) << 0)), clamp(int(6), int(6), int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & 1) | 1)), clamp(ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & 1) | 1)), ivec3(6, ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) / 1))), (_GLF_IDENTITY(1, clamp(1, 1, 1))) / int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 & 1) | 1)), ivec3(6, ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) >> 0)))), ((1 & 1) | 1)))))))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, (6) << _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) ^ ivec2(0, 0))), (int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) ^ ivec2(0, 0)))) | 0)) + (_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (0))), clamp(int(0), int(0), int(0)))))), (int(_GLF_IDENTITY(int(0), 0 + (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(6), int(6))))))))))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ _GLF_IDENTITY((~ (int(8))), 0 ^ ((~ (int(8)))))), min(int(8), int(8))), 1, 0, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, 76424)) : _GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), _GLF_IDENTITY(int(8), max(int(8), _GLF_IDENTITY(int(8), ~ (~ (int(8)))))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), min(vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0))))))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(mat2(1.0) * (injectionSwitch), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), mat3x2(mat4x2(mat3x2(mat2(1.0) * (injectionSwitch), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))))))), injectionSwitch)).y))) ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter), (false ? _GLF_FUZZED(-66738) : true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter)))))) >> _GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))), min(~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))), ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))))))))))), 1, 0, _GLF_IDENTITY(1, (1) + 0))) + ivec4(0, 0, 0, 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ _GLF_IDENTITY((~ (int(8))), 0 ^ (_GLF_IDENTITY((~ (int(8))), (false ? _GLF_FUZZED((_injected_loop_counter --)) : (~ (int(8)))))))), min(int(8), int(8))), 1, 0, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, 76424)) : _GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(int(8), min(int(_GLF_IDENTITY(8, (8) | (8))), int(8))) : _GLF_FUZZED(_injected_loop_counter), (false ? _GLF_FUZZED(-66738) : true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter)))))) >> _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))))))))), 1, 0, _GLF_IDENTITY(1, (1) + 0))) + ivec4(0, 0, 0, 0)), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ _GLF_IDENTITY((~ (int(8))), 0 ^ ((~ (int(8)))))), min(int(8), int(8))), 1, 0, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, 76424)) : _GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter), (false ? _GLF_FUZZED(-66738) : true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter)))))) >> _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))))))))), 1, 0, _GLF_IDENTITY(1, (1) + 0))) + ivec4(0, 0, 0, 0))))))), (false ? _GLF_FUZZED(-38204) : _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ _GLF_IDENTITY((~ (int(8))), 0 ^ ((~ (int(8)))))), min(int(8), int(8))), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) << 0), 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, 76424)) : _GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter), (false ? _GLF_FUZZED(-66738) : true ? _GLF_IDENTITY(int(8), min(int(8), int(8))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter)))))) >> _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))))))))), 1, 0, _GLF_IDENTITY(1, (1) + 0))) + ivec4(0, 0, 0, 0)))))))) ^ 0), (_GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | (int(8))), (_GLF_IDENTITY(int(8), (int(8)) | (int(8)))) | 0), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(8), min(int(8), int(8))), 1, 0, 1), (ivec4(_GLF_IDENTITY(int(8), min(int(8), int(8))), 1, 0, 1)) + _GLF_IDENTITY(ivec4(0, 0, 0, 0), max(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0)))))))) + 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
                            {
                             do
                              {
                               atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id))) ^ 1u) | (next_virtual_gid)), next_virtual_gid), (min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id))) ^ 1u) | (next_virtual_gid)), next_virtual_gid)) >> 0u))], uint(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) ^ 0))))), 4, 64, 4);
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                              break;
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) * int(_GLF_ONE(1.0, injectionSwitch.y))) != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), ((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 0), (_GLF_IDENTITY(ivec2(_injected_loop_counter, 0), max(ivec2(_injected_loop_counter, 0), ivec2(_injected_loop_counter, 0)))) - (ivec2(0, 0) << _GLF_IDENTITY(ivec2(4), ivec2(4)))))))), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))) / 1), (_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), _GLF_IDENTITY(~ (_injected_loop_counter), (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))))) / 1) > (_GLF_IDENTITY(0, 1 * (0)) << _GLF_IDENTITY(int(3), int(3)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ _GLF_IDENTITY((_injected_loop_counter), int(ivec2((_injected_loop_counter), 0))), ~ (_injected_loop_counter)), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), ((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))) / _GLF_IDENTITY(1, (1) ^ 0)), (_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(ivec3(clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))))) / 1) > (_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (0), (_GLF_IDENTITY(1 * (0), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 + (_GLF_IDENTITY(1, (1) * 1)), (0 + (_GLF_IDENTITY(1, (1) * 1))) * 1)) * (0)) | (1 * (0)))) | (1 * (0)))) << _GLF_IDENTITY(int(3), int(3))))) || false); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y))))))
                                  {
                                   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), (int(_GLF_IDENTITY(1, (1) << 0))) << 0), 1, 1))), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))))); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                                      {
                                       return;
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              continue;
                            }
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             do
                              {
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true))), ((! (_GLF_IDENTITY(false, (false) && true)))) && true), true && (_GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)))), ((! (_GLF_IDENTITY(false, (false) && true)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ((! (_GLF_IDENTITY(false, (false) && true)))) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(_GLF_IDENTITY(vec2(6026.8993, -2.1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.2, -405.400)) : _GLF_IDENTITY(vec2(6026.8993, -2.1), vec2(1.0, 1.0) * (vec2(6026.8993, -2.1)))))))).y))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                    }
                                   else
                                    {
                                    }
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0)) << 0))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           do
                                            {
                                             return;
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                         do
                                          {
                                           return;
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                        }
                                      }
                                     if(_GLF_DEAD(false))
                                      continue;
                                    }
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))))))))
                            return;
                          }
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                                {
                                 do
                                  {
                                   do
                                    {
                                     return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), true, true, true))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), true, true, true))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), true, true, true)))))) && true)))))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (false) && true)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (false) && true))))))))));
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                        }
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         do
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, (true) && true), false), true)))))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                {
                                }
                               else
                                {
                                 return;
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 | 0), ! (! (_injected_loop_counter != (0 | 0))))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 | 0), (0 | 0) | ((0 | 0))) | (0 | 0))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))), 0)), (0 | 0) | (0 | 0))), ((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0)))) * 1)) >> (0 << _GLF_IDENTITY(int(5), int(5)))) ^ (0 >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(652.559) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-59.38))))) > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   return;
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                              return;
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.7), _GLF_FUZZED(39.08)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0, 1.0, 0.0))))).y))))
                    break;
                   break;
                  }
                 do
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, min(_GLF_IDENTITY(_GLF_IDENTITY(2, 1 * (2)), ~ (~ (2))), _GLF_IDENTITY(2, (2) ^ 0)))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(63442))), 4, _GLF_IDENTITY(4, (4) + 0))), 64, 4);
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
          return;
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, max(7, 7)), 7, 7))), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0 ^ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), int(ivec2(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0 + (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(1, (1) << (0 << _GLF_IDENTITY(int(8), int(8))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) - 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6))) ^ 0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (0 >> _GLF_IDENTITY(int(6), int(6))) + _GLF_IDENTITY(0, int(ivec2(0, 0))))) ^ 0, clamp((0 >> _GLF_IDENTITY(int(6), int(6))) ^ 0, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), clamp((0 >> _GLF_IDENTITY(int(6), int(6))), (0 >> _GLF_IDENTITY(int(6), int(6))), (0 >> _GLF_IDENTITY(int(6), int(6))))) ^ 0, (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED((-62897 ^ -6365)))))) ^ 0)), (0 << _GLF_IDENTITY(int(5), int(5))), 0), ~ (~ (ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) * (_GLF_IDENTITY(0, clamp(0, 0, 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 0 ^ (int(6)))) | (int(6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)) ^ 0, clamp((0 >> _GLF_IDENTITY(int(6), int(6))) ^ 0, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec4(6, 0, 0, 1), min(ivec4(6, 0, 0, 1), ivec4(6, 0, 0, 1)))))), _GLF_IDENTITY(int(6), int(ivec4(int(6), 0, 0, 0))))) ^ 0, (0 >> _GLF_IDENTITY(int(6), int(6))) ^ 0)), (0 << _GLF_IDENTITY(int(5), int(5))), 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            break;
           break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true, true))))))
            continue;
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
}
