#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, false, true)))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, false))))), (false) && true), true, true, false)))), (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), true))))), false)))))), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))))))))), ! (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))), true, true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), false))))))))))))))))))), false || (bool(bool(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))))))))), ! (! _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))), bool(bvec4((! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))))))))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = (-83065 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << (0 | 0)) != (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))) / 1))) << _GLF_IDENTITY(int(3), int(3))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))) / 1))) << _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))) / 1))) << _GLF_IDENTITY(int(3), int(3)))) + 0))) >> _GLF_IDENTITY(int(3), int(3)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))) | (_injected_loop_counter)) != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), ivec2(0, 0) | (ivec2(0, 1)))))) ^ 0), int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))), 0 ^ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), ivec2(0, 0) | (ivec2(0, 1)))))) ^ 0), int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), ivec2(0, 0) | (ivec2(0, 1)))))) ^ 0), int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), ivec2(0, 0) | (ivec2(0, 1)))))) ^ 0), int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), ivec2(0, 0) | (ivec2(0, 1)))))) ^ 0), int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), ivec2(0, 0) | (ivec2(0, 1)))))) ^ 0), int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3)))))) / 1)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(0, int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(0, int(int(0)))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))))) && true), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)) * (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(int(5), int(5))))) - _GLF_IDENTITY(0, int(int(0)))), 1 * (_GLF_IDENTITY((1 ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((1 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | 0)))) - _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 0))))))))) * (_GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
             GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id.y = num_workgroup;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-769.551), clamp(_GLF_IDENTITY(_GLF_FUZZED(-769.551), (false ? _GLF_FUZZED(4.7) : _GLF_FUZZED(-769.551))), _GLF_IDENTITY(_GLF_FUZZED(-769.551), (_GLF_FUZZED(-769.551)) + 0.0), _GLF_FUZZED(-769.551))), _GLF_FUZZED(_GLF_IDENTITY(-1.1, max(-1.1, -1.1)))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))[1]), bvec2(_GLF_IDENTITY(true, bool(bool(true))), true))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.8)), vec2(_GLF_FUZZED(-2.2), (injectionSwitch)[1]), bvec2(false, true))).y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 0) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.3)), float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1.0)), bool(false)))))), bool(true)))), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))))).x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id.z = workgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), (false ? _GLF_IDENTITY(_GLF_FUZZED(44457), _GLF_IDENTITY((_GLF_FUZZED(44457)), ((_GLF_FUZZED(44457))) - 0) << 0) : _GLF_IDENTITY(1, int(int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), _GLF_IDENTITY(max(int(6), int(6)), ~ (~ (_GLF_IDENTITY(max(int(6), int(6)), (true ? max(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), clamp((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 | (_GLF_IDENTITY(int(8), int(8)))), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8))))), max(_GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), clamp((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 | (_GLF_IDENTITY(int(8), int(8)))), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8))))), ((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), clamp((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 | (_GLF_IDENTITY(int(8), int(8)))), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)))))) | 0), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), clamp((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 | (_GLF_IDENTITY(int(8), int(8)))), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(8), int(8)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(atomicAnd(_injected_loop_counter, 61578)) : 3)))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(atomicAnd(_injected_loop_counter, 61578)) : 3)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(3, 3, 3)), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(atomicAnd(_injected_loop_counter, 61578)) : 3)))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 94.92))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))) && true, bool(bool((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))) && true)))), true)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), max((0 << _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 break;
                }
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false, true)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false, true)))) && true), bool(bvec2(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false, true)))) && true), false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false, true)))) && true), bool(bvec2(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false, true)))) && true), false)))))))))))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
               break;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, log(_GLF_IDENTITY(1.0, float(mat3(1.0, sin(0.0), 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, sqrt(1.0), sqrt(0.0), 1.0)))), 0.0)), (true ? _GLF_IDENTITY(float(vec3(injectionSwitch.y, log(1.0), 0.0)), max(float(vec3(injectionSwitch.y, log(1.0), 0.0)), float(vec3(injectionSwitch.y, log(1.0), 0.0)))) : _GLF_FUZZED(8.4))))))))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), false))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false)))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && (! (_GLF_IDENTITY(true, ! (! (true))))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true)))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true))))))) && true))))))), (false) && true), false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false)))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && (! (_GLF_IDENTITY(true, ! (! (true))))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true)))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true))))))) && true))))))), (false) && true), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false)))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && (! (_GLF_IDENTITY(true, ! (! (true))))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true)))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), true && (_GLF_IDENTITY((bool(bvec2(false, false))), ! (! (_GLF_IDENTITY((bool(bvec2(false, false))), ((bool(bvec2(false, false)))) && true)))))) && true))))))) && true))))))), (false) && true), false))))), false))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.6, 108.984)))).y)) || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), (bool(bvec2(false, false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (! (_GLF_IDENTITY(true, ! (! (true))))))))) && true), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))) && (! (_GLF_IDENTITY(true, ! (! (true))))))))))), false || (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! ((bool(bvec2(false, false))) && true)))))))))), (false) && true), false)))), bool(bvec3((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), (bool(bvec2(false, false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && (! (_GLF_IDENTITY(true, ! (! (true))))))))))), false || (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY((bool(bvec2(false, false))) && true, ! (! ((bool(bvec2(false, false))) && true)))))))))), (false) && true), false)))), true, true)))))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(atan(vec2(9994.8179, 5267.7621))[1]))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (true ? injectionSwitch.x : _GLF_FUZZED(atan(vec2(9994.8179, 5267.7621))[1]))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), vec2(mat3x2(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 0.0, 1.0)))))).y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(atan(vec2(9994.8179, 5267.7621))[1]))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), min((injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))).y))))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (true ? injectionSwitch.x : _GLF_FUZZED(atan(vec2(9994.8179, 5267.7621))[1]))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), vec2(mat3x2(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 0.0, 1.0)))))).y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(atan(vec2(9994.8179, 5267.7621))[1]))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), min((injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))).y)))))))) && true)))));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, exp(0.0))), 0.0, 1.0, 1.0))) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id.z;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (1u ^ ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 0u)))) >> (0u ^ 0u))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), min(1, 1))) % _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) * 1u))) | ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) >> 0)) % subgroup_size)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1 ^ 1)), (_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1 ^ 1))) && true)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id.x = next_virtual_gid;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0))), (uint(1)) / uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (true ? (1) | (1) : _GLF_FUZZED(76929)))))))) | (uint(1))), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), 0u + ((uint(1)))) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) * 1u, (_GLF_IDENTITY((uint(1)) * 1u, max((uint(1)) * 1u, _GLF_IDENTITY((uint(1)) * 1u, clamp((uint(1)) * 1u, _GLF_IDENTITY((uint(1)) * 1u, clamp((uint(1)) * 1u, _GLF_IDENTITY((uint(1)) * 1u, min((uint(1)) * 1u, (uint(1)) * 1u)), _GLF_IDENTITY((uint(1)) * 1u, max((uint(1)) * 1u, _GLF_IDENTITY((uint(1)) * 1u, max((uint(1)) * 1u, (uint(1)) * 1u)))))), (uint(1)) * 1u))))) >> 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1)), ((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1))) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))))))) | (uint(1)), ~ (~ ((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1)))))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY(_GLF_IDENTITY((uint(1)), uint(uvec2(_GLF_IDENTITY((uint(1)), (_GLF_IDENTITY((uint(1)), 0u | ((uint(1))))) - 0u), 0u))), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u)))))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))))))), _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), min((_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, (1) | (1)))))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) * 1u), (uint(1)) * 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(1210))) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))))) >> 0u) - 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1)), ((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1))) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))))))) | (uint(1)), ~ (~ ((uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1)))))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY(_GLF_IDENTITY((uint(1)), uint(uvec2(_GLF_IDENTITY((uint(1)), (_GLF_IDENTITY((uint(1)), 0u | ((uint(1))))) - 0u), 0u))), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u)))))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))))))), _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), min((_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, (1) | (1)))))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) * 1u), (uint(1)) * 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(1210))) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))), _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1))))), _GLF_IDENTITY(uint(1), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), (uint(1)) * 1u))))))) >> 0u) - 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(uint(1), 1u * (_GLF_IDENTITY(uint(1), uint(uvec4(uint(1), 0u, 0u, 0u))))))), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), min(uint(uvec4(uint(1), 0u, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec4(uint(1), 0u, 1u, 1u))))))), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), 0u | (_GLF_IDENTITY((uint(1)), 0u | ((uint(1)))))) * 1u))), (_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(_GLF_IDENTITY(1, max(1, 1)))), (uint(1))))), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1)))) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), (uint(1)))) * 1u)))) - 0u), (0u ^ 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(uint(1), 1u * (_GLF_IDENTITY(uint(1), uint(uvec4(uint(1), 0u, 0u, 0u))))))), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), min(uint(uvec4(uint(1), 0u, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec4(uint(1), 0u, 1u, 1u))))))), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), 0u | (_GLF_IDENTITY((uint(1)), 0u | ((uint(1)))))) * 1u))), (_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(_GLF_IDENTITY(1, max(1, 1)))), (uint(1))))), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1)))) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), (uint(1)))) * 1u)))) - 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(uint(1), 1u * (_GLF_IDENTITY(uint(1), uint(uvec4(uint(1), 0u, 0u, 0u))))))), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), min(uint(uvec4(uint(1), 0u, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec4(uint(1), 0u, 1u, 1u))))))), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), 0u | (_GLF_IDENTITY((uint(1)), 0u | ((uint(1)))))) * 1u))), (_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(_GLF_IDENTITY(1, max(1, 1)))), (uint(1))))), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1)))) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), (uint(1)))) * 1u)))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(uint(1), 1u * (_GLF_IDENTITY(uint(1), uint(uvec4(uint(1), 0u, 0u, 0u))))))), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | (uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), min(uint(uvec4(uint(1), 0u, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(uint(1), 0u, 1u, 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec4(uint(1), 0u, 1u, 1u))))))), (uint(1)) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), 0u | (_GLF_IDENTITY((uint(1)), 0u | ((uint(1)))))) * 1u))), (_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (1) | (1)))))) | _GLF_IDENTITY((uint(1)), max((uint(_GLF_IDENTITY(1, max(1, 1)))), (uint(1))))), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1)))) << 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), (uint(1)))) * 1u)))) - 0u)))))) ^ 0u)) ^ 0u), _GLF_IDENTITY(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) >> 0)), 0u, _GLF_IDENTITY(0u, min(0u, 0u)), 1u)), ~ (~ (uint(uvec4(uint(1), 0u, 0u, 1u))))), (true ? uint(uvec4(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(~ (~ (1)), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(83625, -92433, 83057, 54408)[1])))) * (1 ^ (0 ^ 0))))), (~ (~ (1))) - 0)) ^ 0))), 0u, 0u, 1u)) : _GLF_FUZZED(subgroup_local_id)))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-84906 & 0)); _injected_loop_counter --)
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id.x], uint(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, int(int(2)))))), ~ (~ ((2)))) / 1)))), 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(33359))), 4);
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0) > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(0.0)) > injectionSwitch.y)), false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id, uvec3(uvec4(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id, 0u))).x], _GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(89807u))), 4, 64, 4);
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4(7060.6710, 5786.8398, 93.18, -7.8, 8.7, 3.0, 5238.8320, -743.124, -6996.0897, 68.34, -5281.7811, 4.8, 938.181, 6.2, -5761.9623, -291.094)) : mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) * (injectionSwitch.x)) > injectionSwitch.y))))))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
  }
}
