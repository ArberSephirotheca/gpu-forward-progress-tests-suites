#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))))
              return;
            }
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), false)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(8.3))), injectionSwitch.x, injectionSwitch.x))) / 1.0) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-9.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (false ? _GLF_FUZZED(vec2(2.9, -2670.4477)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-9.2)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(ivec2(1, 1))), 1))]), bvec2(true, true))))))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0, ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) + 0.0)) / 1.0)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x))) / 1.0) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))) && true)) && true)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4643.7368))), injectionSwitch.x, injectionSwitch.x))))) / 1.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / 1.0, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))) && true)) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec2(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false))))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))))))), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), false)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.9)), vec2(_GLF_FUZZED(vec4(7.3, 3.3, 2.0, -1.2).b), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec4(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)))))))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)))).x : _GLF_FUZZED(8.3))), injectionSwitch.x, injectionSwitch.x))) / 1.0) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch), vec2(mat3x2((injectionSwitch), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), mix(float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), (dot(vec2(1.0, 0.0), vec2(0.0, 1.0))) + log(1.0))), float(_GLF_FUZZED(5364.7351)), bool(_GLF_IDENTITY(false, ! (! (false))))))))))[0], (injectionSwitch)[1]), bvec2(true, true))))).y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-755.755) : injectionSwitch.x)), mix(float(_GLF_FUZZED(77.99)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-5331.8200, -1.8)) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), (false ? _GLF_FUZZED(35.62) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (true ? _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) : _GLF_FUZZED(1260.5150))) - 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))), injectionSwitch.x))) / 1.0) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.0)), bool(false)))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-21.60, _GLF_IDENTITY(-209.707, (false ? _GLF_FUZZED(pow(9094.0695, -6.4)) : -209.707)))) : injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? _GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, -26.63, 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, 68.86, 20.17)), (_GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, _GLF_IDENTITY(-26.63, mix(float(_GLF_FUZZED(2.5)), float(-26.63), bool(true))), 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, 68.86, 20.17))) * mat4(1.0)))) : _GLF_FUZZED(mat4(-8.6, 5464.9196, -16.06, -3757.2384, 46.96, 9.3, 6011.2380, 14.39, -191.219, 2.0, 127.374, -30.81, -8405.8957, 88.13, 746.846, -9597.5011)))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) + determinant(mat4(0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) / 1.0, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, (true ? (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / 1.0 : _GLF_FUZZED(degrees(2.8)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, injectionSwitch.x))))) / 1.0))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-21.60, -209.707)) : injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(_GLF_IDENTITY(length(normalize(1.0)), (false ? _GLF_FUZZED(5384.9361) : length(normalize(1.0))))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? _GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? mat4(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-7.6))), 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)) : _GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, -26.63, 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, 68.86, 20.17)))) : _GLF_FUZZED(mat4(-8.6, 5464.9196, -16.06, -3757.2384, 46.96, 9.3, 6011.2380, 14.39, -191.219, 2.0, 127.374, -30.81, -8405.8957, 88.13, 746.846, -9597.5011)))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) + determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(25.87)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true))), sqrt(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) / _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) + 0.0))))), float(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) + 0.0))))), 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0), transpose(transpose(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) + 0.0))))), 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0), (false ? _GLF_FUZZED(mat3x2(-44.64, -1.3, 1220.9840, -946.262, -13.62, 2.3)) : mat3x2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) + 0.0))))), 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))))))) / 1.0 : _GLF_FUZZED(degrees(2.8)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-21.60, -209.707)) : injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? _GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)) : _GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, -26.63, 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, 68.86, 20.17)))) : _GLF_FUZZED(mat4(-8.6, 5464.9196, -16.06, -3757.2384, 46.96, 9.3, 6011.2380, 14.39, -191.219, 2.0, 127.374, -30.81, -8405.8957, 88.13, 746.846, -9597.5011)))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) + determinant(mat4(0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? _GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)) : _GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, -26.63, 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, 68.86, 20.17)))) : _GLF_FUZZED(mat4(-8.6, 5464.9196, -16.06, -3757.2384, 46.96, 9.3, 6011.2380, 14.39, -191.219, 2.0, 127.374, -30.81, -8405.8957, 88.13, 746.846, -9597.5011)))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) + determinant(mat4(0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), min((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? _GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)) : _GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, -26.63, 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, 68.86, 20.17)))) : _GLF_FUZZED(mat4(-8.6, 5464.9196, -16.06, -3757.2384, 46.96, 9.3, 6011.2380, 14.39, -191.219, 2.0, 127.374, -30.81, -8405.8957, 88.13, 746.846, -9597.5011)))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) + determinant(mat4(0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? _GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)) : _GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, -26.63, 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, 68.86, 20.17)))) : _GLF_FUZZED(mat4(-8.6, 5464.9196, -16.06, -3757.2384, 46.96, 9.3, 6011.2380, 14.39, -191.219, 2.0, 127.374, -30.81, -8405.8957, 88.13, 746.846, -9597.5011)))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) + determinant(mat4(0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))) - 0.0))) / 1.0, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x))))) / 1.0, (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / 1.0, min((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / 1.0, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / 1.0)) : _GLF_FUZZED(degrees(2.8)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-21.60, -209.707)), max(_GLF_IDENTITY(_GLF_FUZZED(vec2(-21.60, -209.707)), mix(vec2(_GLF_FUZZED(-9308.4986), (_GLF_FUZZED(vec2(-21.60, -209.707)))[1]), vec2((_GLF_FUZZED(vec2(-21.60, -209.707)))[0], _GLF_FUZZED(2798.7948)), bvec2(true, false))), _GLF_FUZZED(vec2(-21.60, -209.707)))) : injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)), (true ? _GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), _GLF_IDENTITY(cos(0.0), (cos(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.5) : 0.0)))) / 1.0)), (true ? mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 1.0, 1.0, sqrt(1.0), cos(0.0)) : _GLF_FUZZED(mat4(531.501, 3.9, 8.0, 13.11, 915.810, -26.63, 4.3, -2.5, -5.4, -0.6, 769.925, 46.41, -2.8, -59.12, _GLF_IDENTITY(68.86, 0.0 + (_GLF_IDENTITY(68.86, max(68.86, 68.86)))), 20.17)))) : _GLF_FUZZED(mat4(-8.6, 5464.9196, -16.06, -3757.2384, 46.96, 9.3, 6011.2380, 14.39, -191.219, 2.0, 127.374, -30.81, -8405.8957, 88.13, 746.846, -9597.5011)))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) + determinant(mat4(0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.7)))) - 0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) / 1.0, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0, _GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) / 1.0 : _GLF_FUZZED(_GLF_IDENTITY(degrees(2.8), float(_GLF_IDENTITY(mat4(degrees(2.8), 1.0, 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, sqrt(1.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat4(degrees(2.8), 1.0, 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, sqrt(1.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), float(mat3((true ? (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) - log(1.0)))))) / 1.0 : _GLF_FUZZED(_GLF_IDENTITY(degrees(2.8), float(_GLF_IDENTITY(mat4(degrees(2.8), 1.0, 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, sqrt(1.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat4(degrees(2.8), 1.0, 1.0, 0.0, 0.0, cos(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 1.0, 1.0, sqrt(1.0), length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(37.61))))), 0.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), 1.0, 0.0, 0.0, exp(0.0), length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / _GLF_IDENTITY(1.0, (1.0) - 0.0)))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))))) && true)) && true)) && true))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      break;
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))
    {
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0)))), clamp(float(_GLF_IDENTITY(mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0)))), float(_GLF_IDENTITY(mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0)))), min(float(_GLF_IDENTITY(mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0)))), float(_GLF_IDENTITY(mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 0.0, abs(tan(0.0)), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(-56373))) != (_GLF_IDENTITY(1 | 0, (1 | 0) >> 0))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
              continue;
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, 1.0 * (-7494.0544))), (false ? _GLF_FUZZED(vec4(6.9, 1100.0892, 186.937, -31.37)) : vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, 1.0 * (-7494.0544))))).t)), max(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), _GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, _GLF_IDENTITY(-1.2, max(-1.2, _GLF_IDENTITY(_GLF_IDENTITY(-1.2, min(-1.2, -1.2)), min(_GLF_IDENTITY(-1.2, min(-1.2, -1.2)), _GLF_IDENTITY(_GLF_IDENTITY(-1.2, min(-1.2, -1.2)), 1.0 * (_GLF_IDENTITY(-1.2, min(-1.2, -1.2)))))))), -7494.0544).t)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), mix(float(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t))), float(_GLF_FUZZED(-602.096)), bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))))), abs(0.0) + (_GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), mix(float(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t))), float(_GLF_FUZZED(-602.096)), bool(false))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(vec3(float(mat3x4(_GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, mix(float(_GLF_FUZZED((5.3 / -0.5))), float(-7494.0544), bool(true)))).t), (true ? _GLF_IDENTITY(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, mix(float(_GLF_FUZZED((5.3 / -0.5))), float(-7494.0544), bool(true)))).t), (_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, mix(float(_GLF_FUZZED((5.3 / -0.5))), float(-7494.0544), bool(true)))).t)) - 0.0) : _GLF_FUZZED(554.558))))), float(_GLF_FUZZED(-602.096)), bool(false))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(51.52))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0)))), float(float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, 1.0 * (-7494.0544))), (false ? _GLF_FUZZED(vec4(6.9, 1100.0892, 186.937, -31.37)) : vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, 1.0 * (-7494.0544))))).t)), max(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), _GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, _GLF_IDENTITY(-1.2, max(-1.2, _GLF_IDENTITY(_GLF_IDENTITY(-1.2, min(-1.2, -1.2)), min(_GLF_IDENTITY(-1.2, min(-1.2, -1.2)), _GLF_IDENTITY(_GLF_IDENTITY(-1.2, min(-1.2, -1.2)), 1.0 * (_GLF_IDENTITY(-1.2, min(-1.2, -1.2)))))))), -7494.0544).t)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), mix(float(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t))), float(_GLF_FUZZED(-602.096)), bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))))), abs(0.0) + (_GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), mix(float(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t))), float(_GLF_FUZZED(-602.096)), bool(false))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(vec3(float(mat3x4(_GLF_IDENTITY(float(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, -7494.0544).t)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, mix(float(_GLF_FUZZED((5.3 / -0.5))), float(-7494.0544), bool(true)))).t), (true ? _GLF_IDENTITY(_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, mix(float(_GLF_FUZZED((5.3 / -0.5))), float(-7494.0544), bool(true)))).t), (_GLF_FUZZED(vec4(8654.3252, -326.010, -1.2, _GLF_IDENTITY(-7494.0544, mix(float(_GLF_FUZZED((5.3 / -0.5))), float(-7494.0544), bool(true)))).t)) - 0.0) : _GLF_FUZZED(554.558))))), float(_GLF_FUZZED(-602.096)), bool(false))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(51.52))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0)))))))))))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))) || false), true, true), true)))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))), (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))) && true)))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, (0) | (0)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) | (0)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(19904, (19904) | 0)) : ~ (~ (_GLF_IDENTITY(0, (0) | (0))))))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), false, true)), bool(bool(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), false, true))))))))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(_GLF_IDENTITY(0, (0) * ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (4) + 0))) / 1), (_GLF_IDENTITY(int(4), (int(4)) / 1)) << 0)) | (int(4))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), false || (! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), false || (! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(sign(_injected_loop_counter)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3)))), 0 << _GLF_IDENTITY(int(3), int(3)), 0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))))))) | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) | (0))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-411.802)), float(injectionSwitch.y), bool(true)))))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((bool(bvec2(false, _GLF_IDENTITY(false, true && (false))))) && true, bool(bvec3((bool(bvec2(false, _GLF_IDENTITY(false, true && (false))))) && true, true, false)))))))
            continue;
           return;
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), max(_GLF_IDENTITY((0.0), max(_GLF_IDENTITY((0.0), ((0.0)) * 1.0), (0.0))), (0.0))) / 1.0), injectionSwitch.x)) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, (1) | (1)))), _GLF_IDENTITY((int(0)), ((int(0))) | ((int(0)))) << 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0), vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(cosh(sqrt(7660.2633))))))), dot(vec3(0.0, _GLF_IDENTITY(determinant(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(length(vec4(8.1, 3.8, 903.283, -2.1))) : determinant(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), 1.0), vec3(0.0, 0.0, 1.0)))))).y))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) && true))))) && true)) && true)), ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) && true))))) && true)) && true))))))))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(cos(0.0), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(cos(0.0), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), float(mat4x2(dot(vec3(cos(0.0), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))) + (injectionSwitch.y))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 5.9))), bool(false))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY((+ 5.9), mix(float((+ 5.9)), float(_GLF_FUZZED(-3.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(false))) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) && true), true && ((_GLF_WRAPPED_LOOP(false)))), true && (! (_GLF_WRAPPED_LOOP(false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), true))), false, false))))), (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), true))), false, false))))), bool(_GLF_IDENTITY(bvec3(true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), true))), false, false))))), true, false), bvec3(bvec3(bvec3(true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), true))), false, false))))), true, false))))))) && true))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(true, true && (true)))), (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(true, true && (true))))) || false)), false, false)))))))))) || false))));
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), (_GLF_IDENTITY((mat2(1.0)) * mat2(1.0), _GLF_IDENTITY(((mat2(1.0)) * mat2(1.0)), (true ? _GLF_IDENTITY(((mat2(1.0)) * mat2(1.0)), transpose(transpose(((mat2(1.0)) * mat2(1.0))))) : _GLF_FUZZED(mat2(27.75, -7684.5031, -3072.9998, 7.1)))) + mat2(0.0, 0.0, 0.0, 0.0))) / mat2(1.0, 1.0, 1.0, 1.0)))))) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 1.0, sqrt(0.0))))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), true, true, true))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u)) | (subgroup_base)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY((subgroup_base), 0u + (_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((subgroup_base), 0u ^ ((subgroup_base))), 1u, 1u, 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec4(_GLF_IDENTITY((subgroup_base), 0u ^ ((subgroup_base))), 1u, 1u, 1u)))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(max(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))), 0u + (_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base)))))) | (subgroup_base))), (_GLF_IDENTITY(max(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))), min(max(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))), max(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)))))) - 0u)), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) | (subgroup_base), min((subgroup_base) | (subgroup_base), _GLF_IDENTITY((subgroup_base) | (subgroup_base), max((subgroup_base) | (subgroup_base), (subgroup_base) | (subgroup_base))))))))) | (_GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)))))), _GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u)) | (subgroup_base)))))) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), (workgroup_base) | (workgroup_base))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))) | 0u));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            return;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))), (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0)))))) * mat2(1.0))).x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-28287))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true)))))
  return;
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id % 2) == 0), ! (! ((_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2) == 0))))), true && (! (! ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), max(subgroup_local_id, subgroup_local_id)))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))))) % 2), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), max(subgroup_local_id, subgroup_local_id)))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))))) % 2), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), max(subgroup_local_id, subgroup_local_id)))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))))) % 2))) == 0, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.7)))) * round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 0.0))), 1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(9.7)), float(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0))))], ((injectionSwitch)[0]) / 1.0)), bool(true))), _GLF_FUZZED(-5.5)), vec2(_GLF_FUZZED(-827.891), (injectionSwitch)[1]), bvec2(false, true))).y)))))) < injectionSwitch.y)) && ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2) == 0)))))))) || false))
  {
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(63835) : _GLF_IDENTITY(4, 0 + (4)))), 64, 4);
   for(int _injected_loop_counter = (-59141 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0), (mat3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false)))))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], _GLF_IDENTITY(uint(2), (false ? _GLF_FUZZED((false ? subgroup_id : workgroup_base)) : uint(2))), 4, 64, 4);
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0)))) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true))))))) || false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false, false, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false, false, false)), false, false, true))))) || false)))
              break;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(false), true), true))))))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, (1 | 1) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.24)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.5))), injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y)))), false)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y))), false, false)), (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y))), false, false))) && true))), (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y))), false, false)), (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(log(1.0), 1.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y))), false, false))) && true)))) && true)))))) && true))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false), bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) || false)), bool(bvec2(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)), false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)), bool(bvec2(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), (! (_GLF_DEAD(false))) || false)), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) || false)), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), false, true)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), clamp(~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), ~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), ~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), clamp((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), int(ivec4((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), 1, 1, 0))))) << 0), _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) / ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) / ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))))))))) * 1)))))) != 1), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), clamp(~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), ~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), ~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), clamp((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), int(ivec4((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), 1, 1, 0))))) << 0), _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) / ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) / ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))))))))) * 1)))))) != 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), clamp(~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), ~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) * 1)), ~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), clamp((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), int(ivec4((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), 1, 1, 0))))) << 0), _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) / ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) / ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))))))))) * 1)))))) != 1)) && true), true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (false), false, false), bvec3(bvec4(bvec3(! (false), false, false), false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(! (false), false, false), true)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(! (false), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (false), false, false), true)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(! (false), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (false), false, false), true)), false))))))))))))))))
            return;
           return;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, false || ((_GLF_WRAPPED_IF_FALSE(false)) && true)))) && true))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && _GLF_IDENTITY((false), ((false)) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((mat2(1.5, 30.09, 69.96, -703.383) * injectionSwitch))))), (injectionSwitch)))).x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(max(9.8, 1.1)) : injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) || _GLF_IDENTITY(false, (false) && true)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, true)))))
          break;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-878.149), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))).x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), max(_injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(59500) : 1))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(59500) : 1))), 1, 1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), (ivec4((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(59500) : 1))), 1, 1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) / ivec4(1, 1, 1, 1))))), 1)) * (_injected_loop_counter)) != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  continue;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-12.71)))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), false, false), false)))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))) || false), false)), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))), false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))), false), false)))))))) && true)))), false), bvec3(bvec4(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), true)))))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))))))
        break;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))) || false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
}
