#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))).x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, length(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0))) < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(3261.8829)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.1)), bool(false))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false))))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(67.85), clamp(_GLF_FUZZED(67.85), _GLF_IDENTITY(_GLF_FUZZED(67.85), (true ? _GLF_FUZZED(67.85) : _GLF_FUZZED(-22.88))), _GLF_FUZZED(67.85))), _GLF_FUZZED(7.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(0), int(0)), 1 * ((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0))))), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 | (0)), 0))), int(0))))))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY((1 & int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(5.3)))) / _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(78658) : _GLF_IDENTITY((1 & int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(5.3)))) / _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874))))), ((1 & int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(5.3)))) / _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874)))))) ^ 0))), int(_GLF_IDENTITY(int(_GLF_IDENTITY((1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * _GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)), float(vec4(_GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)), max((_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 1.0, cos(sin(0.0)))))) : _GLF_FUZZED(-4420.8874))))), min((1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874))))), (1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, length(vec2(0.0, 0.0)), 1.0))).y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874)))))))), (int(_GLF_IDENTITY((1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0)), dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0)))), injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874))))), min((1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) / 1.0), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874))))), (1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec3(-81.69, 1.6, 841.324).t)), float(1.0), bool(true))) * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(-4420.8874))))))))) | _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) >> 0)))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | (ivec2(0, 1)))))))), min(int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | (ivec2(0, 1)))))))), int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | (ivec2(0, 1)))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) / 1)), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | (ivec2(0, 1)))))))), min(int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | (ivec2(0, 1)))))))), int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | (ivec2(0, 1))))))))))) * 1), int(_GLF_IDENTITY(0, ~ (~ (0)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) / uvec3(1u, 1u, 1u), ((gl_WorkGroupID) / uvec3(1u, 1u, 1u)) >> (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))).x, 0u + (gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), mix(float(_GLF_FUZZED(-328.107)), float(float(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(_GLF_FUZZED(61.41)), bool(false))), injectionSwitch.x)) | (gl_WorkGroupID.x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec2(gl_WorkGroupID.x, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (gl_WorkGroupID.x)) * 1u), 1u * (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec2(gl_WorkGroupID.x, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ _GLF_IDENTITY((gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((gl_WorkGroupID.x), 1u), max(uvec2((gl_WorkGroupID.x), 1u), uvec2((gl_WorkGroupID.x), 1u)))), max(uint(_GLF_IDENTITY(uvec2((gl_WorkGroupID.x), 1u), max(uvec2((gl_WorkGroupID.x), 1u), uvec2((gl_WorkGroupID.x), 1u)))), uint(_GLF_IDENTITY(uvec2((gl_WorkGroupID.x), 1u), max(uvec2((gl_WorkGroupID.x), 1u), uvec2((gl_WorkGroupID.x), 1u)))))))) * 1u))))), uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec2(gl_WorkGroupID.x, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (gl_WorkGroupID.x)) * 1u))), 1u)))));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))) && true)));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))) || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(num_workgroup))), clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, uint(uint(_GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(subgroup_size))), workgroup_size)))) * workgroup_id))), workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY(false || (bool(bool(_GLF_IDENTITY(false, true && (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (bool(bool(_GLF_IDENTITY(false, true && (false))))), ! (! (false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))))))) || false)))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - (1u ^ 1u));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)), ~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((~ (~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) << 0u, max((subgroup_base) << 0u, _GLF_IDENTITY((subgroup_base) << 0u, (false ? _GLF_FUZZED(subgroup_id) : (subgroup_base) << 0u)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) | (~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))) | (~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))), ((~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))))) * _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | 0u)))), (~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))), (~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))), 1u, 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY((~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))), clamp(_GLF_IDENTITY((~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))), ((~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))))) * 1u), (~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))), (~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), clamp((~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) >> 0u), 0u))))))))) + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size)))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) >> 0u), ((subgroup_local_id + 1) % subgroup_size)))) | 0u), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | (((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_base)))) % subgroup_size))))), max((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u | (((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), true, false, false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(((_GLF_IDENTITY(true, _GLF_IDENTITY(false || _GLF_IDENTITY((true), true && ((true))), ! (! (false || _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ((true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), (((_GLF_IDENTITY(true, _GLF_IDENTITY(false || _GLF_IDENTITY((true), true && ((true))), ! (! (false || _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ((true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) && true) && true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_FUZZED((- 92891)) : _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-1569))), (4) >> (0 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(false ? _GLF_FUZZED((- 92891)) : _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-1569))), (4) >> (0 << _GLF_IDENTITY(int(7), int(7))))), (int(false ? _GLF_FUZZED((- 92891)) : _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-1569))), (4) >> (0 << _GLF_IDENTITY(int(7), int(7)))))) | 0)), max(int(_GLF_IDENTITY(int(false ? _GLF_IDENTITY(_GLF_FUZZED((- 92891)), 0 | (_GLF_FUZZED((- 92891)))) : _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-1569))), (4) >> (0 << _GLF_IDENTITY(int(7), int(7))))), (int(false ? _GLF_FUZZED((- 92891)) : _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-1569))), (4) >> (0 << _GLF_IDENTITY(int(7), int(7)))))) | 0)), int(_GLF_IDENTITY(int(false ? _GLF_FUZZED((- 92891)) : _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-1569))), (4) >> (0 << _GLF_IDENTITY(int(7), int(7))))), (int(false ? _GLF_FUZZED((- 92891)) : _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-1569))), (4) >> (0 << _GLF_IDENTITY(int(7), int(7)))))) | 0))))))), 64, 4);
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, true && ((subgroup_local_id % 2) == 0)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), max(_GLF_IDENTITY(~ (2), (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), int(_GLF_IDENTITY(ivec2(~ (2), 1), (ivec2(~ (2), 1)) >> ((ivec2(1, 1) ^ ivec2(1, 1)) >> _GLF_IDENTITY(ivec2(5), ivec2(5)))))), 0 | (_GLF_IDENTITY(~ (2), int(ivec2(~ (2), 1)))))), min(0 ^ (_GLF_IDENTITY(~ _GLF_IDENTITY((2), ~ (~ ((2)))), int(_GLF_IDENTITY(ivec2(~ (2), 1), clamp(_GLF_IDENTITY(ivec2(~ (2), 1), ~ (~ (ivec2(~ (2), 1)))), ivec2(~ (2), 1), ivec2(~ (2), 1)))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))), max((_GLF_IDENTITY(~ (2), int(ivec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), min(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), clamp(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), ~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), ~ (_GLF_IDENTITY(2, clamp(2, 2, 2))))))), 1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))), min((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))), (_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1))))))))))), (_GLF_IDENTITY(~ (2), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), int(ivec2(~ (2), 1))), 0 | (_GLF_IDENTITY(~ (2), int(ivec2(~ (2), 1)))))), min(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), 0 + (~ (2))), int(ivec2(~ (2), 1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))), min((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))), ((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1))))) | ((_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1))), min(_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1))), _GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 1)))))), min((_GLF_IDENTITY(~ (2), int(ivec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), min(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), int(ivec2(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), 0))))), 1)))), (_GLF_IDENTITY(~ (2), int(ivec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ (0 ^ 0)), clamp(2, 2, 2))), 1)))))))))))) ^ 0)) ^ 0), ~ (2))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))), _GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ _GLF_IDENTITY((2), _GLF_IDENTITY((_GLF_IDENTITY((2), ~ (_GLF_IDENTITY(~ ((2)), (~ ((2))) / 1)))) / 1, 1 * ((_GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(-93480) : (2))), ~ (_GLF_IDENTITY(~ ((2)), (_GLF_IDENTITY(~ ((2)), 0 ^ (~ ((2))))) / 1)))) / 1)))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), ((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))) << 0), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))))) | 0) - 0)), max(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))), _GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ _GLF_IDENTITY((2), _GLF_IDENTITY((_GLF_IDENTITY((2), ~ (_GLF_IDENTITY(~ ((2)), (~ ((2))) / 1)))) / 1, 1 * ((_GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(-93480) : (2))), ~ (_GLF_IDENTITY(~ ((2)), (_GLF_IDENTITY(~ ((2)), 0 ^ (~ ((2))))) / 1)))) / 1)))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), ((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))) << 0), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))))) | 0) - 0)), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))), _GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ _GLF_IDENTITY((2), _GLF_IDENTITY((_GLF_IDENTITY((2), ~ (_GLF_IDENTITY(~ ((2)), (~ ((2))) / 1)))) / 1, 1 * ((_GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(-93480) : (2))), ~ (_GLF_IDENTITY(~ ((2)), (_GLF_IDENTITY(~ ((2)), 0 ^ (~ ((2))))) / 1)))) / 1)))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), ((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))) << 0), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))))) | 0) - 0))) >> 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))), _GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ _GLF_IDENTITY((2), _GLF_IDENTITY((_GLF_IDENTITY((2), ~ (_GLF_IDENTITY(~ ((2)), (~ ((2))) / 1)))) / 1, 1 * ((_GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(-93480) : (2))), ~ (_GLF_IDENTITY(~ ((2)), (_GLF_IDENTITY(~ ((2)), 0 ^ (~ ((2))))) / 1)))) / 1)))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), ((_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))) << 0), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))), (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2))))))) | 0) - 0)))))))), 4, 64, 4);
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))) / vec2(1.0, 1.0)))).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(1289.6100), _GLF_FUZZED(-998.174)), (vec2(_GLF_FUZZED(1289.6100), _GLF_FUZZED(-998.174))) + vec2(0.0, 0.0)), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (1 ^ (1 & ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), min(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))))), true))))))))))
          barrier();
         barrier();
        }
      }
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : 0u)))], _GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), uint(uvec2(uint(2), 1u))), 1u * (_GLF_IDENTITY(uint(2), (uint(2)) | 0u))))), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(4, (4) | (4)))) - 0)) >> 0))), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(70.21)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), clamp(int(8), int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0))), 0.0, 0.0)), 0.0))) / vec2(1.0, 1.0)).y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(int(int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.4, 19.39)))).x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (true))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && true), false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((33579 & 0), max((33579 & 0), (33579 & 0))) & -8365); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
}
