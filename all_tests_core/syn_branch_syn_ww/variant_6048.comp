#version 460
struct _GLF_struct_2 {
 vec4 _f0;
 bool _f1;
 mat3 _f2;
 vec4 _f3;
 vec4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 uvec3 _f1;
 mat2 _f2;
 mat2 _f3;
 vec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 _GLF_struct_0 _f1;
 bvec3 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 _GLF_struct_3 _f1;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.y = workgroup_size;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(uvec2(1u), _GLF_struct_3(mat4x3(1.0), _GLF_struct_0(uvec2(1u), uvec3(1u), mat2(1.0), mat2(1.0), vec2(1.0), 1u), bvec3(true), _GLF_struct_1(ivec4(1), ivec3(1)), _GLF_struct_2(vec4(1.0), true, mat3(1.0), vec4(1.0), vec4(1.0), mat4x3(1.0))), gl_WorkGroupID.x);
 uint workgroup_base = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.y * _GLF_struct_replacement_4.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}
