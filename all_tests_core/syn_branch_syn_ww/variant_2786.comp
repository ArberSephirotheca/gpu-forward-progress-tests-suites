#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((1) >> 0, 0 ^ (_GLF_IDENTITY((1) >> 0, max((1) >> 0, (1) >> 0)))), 0, 1, 1)), clamp(int(ivec4(_GLF_IDENTITY((1) >> 0, 0 ^ (_GLF_IDENTITY((1) >> 0, max((1) >> 0, (1) >> 0)))), 0, 1, 1)), int(ivec4(_GLF_IDENTITY((1) >> 0, 0 ^ (_GLF_IDENTITY((1) >> 0, max((1) >> 0, (1) >> 0)))), 0, 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((1) >> 0, 0 ^ (_GLF_IDENTITY((1) >> 0, max((1) >> 0, (1) >> 0)))), 0, 1, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY((1) >> 0, 0 ^ (_GLF_IDENTITY((1) >> 0, max((1) >> 0, (1) >> 0)))), 0, 1, 1))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(517.100)), _GLF_IDENTITY(float(0.0), clamp(float(0.0), float(0.0), _GLF_IDENTITY(float(0.0), (true ? float(0.0) : _GLF_FUZZED(-545.880))))), bool(true))), injectionSwitch.x))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)) || (_injected_loop_counter < (_GLF_IDENTITY(1, max(1, 1)) ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(517.100, clamp(_GLF_IDENTITY(517.100, float(mat3x4(517.100, 1.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0))), 517.100, 517.100)))), _GLF_IDENTITY(float(0.0), clamp(float(0.0), float(0.0), _GLF_IDENTITY(float(0.0), (_GLF_IDENTITY(true, true && (true)) ? float(0.0) : _GLF_FUZZED(-545.880))))), bool(true))), injectionSwitch.x)))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(false, true), true, false)))))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) | (1 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec4(_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 0u))), 0u, 0u, 1u))), 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), uint(uint(1u))))) + (110163u & 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u)), 1u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ((_GLF_IDENTITY(1u, uint(uint(1u))))) - 0u), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), uint(uint(1u))))) + _GLF_IDENTITY((110163u & 0u), uint(uint((110163u & 0u)))))))) + 0u)) * (gl_NumWorkGroups)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), max(_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(7509u, 140205u, 8902u))))), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), clamp(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))), uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)))) | (uvec3(1u, 1u, 1u) * _GLF_IDENTITY((gl_NumWorkGroups), max((gl_NumWorkGroups), (gl_NumWorkGroups))))), uvec3(1u, _GLF_IDENTITY(1u, 0u | (1u)), 1u) * (gl_NumWorkGroups)))).x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u))) + uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u), ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u))) + uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u))) + uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u))) + uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u)), (~ ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u))) + uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u))) - uvec3(0u, 0u, 0u)))))))))).x, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), min(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)))).x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) + uvec3(0u, 0u, 0u))))).x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x))), ~ (~ (clamp(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u) * (gl_NumWorkGroups), _GLF_IDENTITY((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), ((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))) | ((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)))))).x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x)))), clamp(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u))))) * (gl_NumWorkGroups)) + uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), _GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u))))) * (gl_NumWorkGroups)), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (true ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(39649u, 26888u, 163909u)))) + (_GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u))))) * (gl_NumWorkGroups)), min((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u))))) * (gl_NumWorkGroups)), (uvec3(1u, 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u))))) * (gl_NumWorkGroups)))))) + uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))).x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(176517u, 56593u, 190033u))))) | (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))), (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(176517u, 56593u, 190033u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(176517u, 56593u, 190033u)), min(_GLF_IDENTITY(true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(176517u, 56593u, 190033u)), (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(176517u, 56593u, 190033u))) / uvec3(1u, 1u, 1u)), true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(176517u, 56593u, 190033u))))))))) | (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)))))))))) - uvec3(0u, 0u, 0u)))), uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x), clamp(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3(1u, 1u, 1u)), uvec3(uvec4(_GLF_IDENTITY(~ (uvec3(1u, 1u, 1u)), (~ (uvec3(1u, 1u, 1u))) + uvec3(0u, 0u, 0u)), 1u))))) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) + uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))), _GLF_IDENTITY((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) + uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u), ((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) + uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)))))))).x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, 1u)))) * (gl_NumWorkGroups)).x)))) : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED((subgroup_local_id)) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))) * (gl_NumWorkGroups)).x, min(_GLF_IDENTITY(false ? _GLF_FUZZED((subgroup_local_id)) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))) * (gl_NumWorkGroups)).x, (false ? _GLF_FUZZED(subgroup_local_id) : false ? _GLF_FUZZED(_GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id)))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))) * (gl_NumWorkGroups)).x)), false ? _GLF_FUZZED((subgroup_local_id)) : _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | (1u))) * (gl_NumWorkGroups), uvec3(0u, 0u, 0u) | (uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | (1u))) * (gl_NumWorkGroups)))).x))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) | 0), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) * 1), 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_size * workgroup_id)), (uint(uint(workgroup_size * workgroup_id))) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u) * workgroup_id) - 0u)), _GLF_IDENTITY((0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))), (_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), (_GLF_FUZZED(packSnorm2x16(injectionSwitch))) ^ 0u), _GLF_FUZZED(packSnorm2x16(injectionSwitch)), _GLF_FUZZED(packSnorm2x16(injectionSwitch)))), _GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), uint(uvec2(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), 1u))), _GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), (_GLF_FUZZED(packSnorm2x16(injectionSwitch))) | (_GLF_FUZZED(packSnorm2x16(injectionSwitch)))), _GLF_FUZZED(packSnorm2x16(injectionSwitch)))), _GLF_FUZZED(packSnorm2x16(injectionSwitch)))) : _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u)), (0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) / 1.0), injectionSwitch.x)))))) | (_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(injectionSwitch)), uint(uint(_GLF_FUZZED(packSnorm2x16(injectionSwitch))))) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u)), (0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), max(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u)), (0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u)), (0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u)), (0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(uvec2(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u)), (0u ^ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u))) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u)))) ^ 0u)))))))), _GLF_IDENTITY(uint(uvec3(uint(workgroup_size * workgroup_id), 0u, _GLF_IDENTITY((0u | 0u), ((0u | 0u)) >> (_GLF_IDENTITY(0u, (0u) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) ^ 0u)))), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, _GLF_IDENTITY((0u | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((0u | 0u), 1u, (1u & 1u)), (true ? uvec3((0u | 0u), 1u, (1u & 1u)) : _GLF_FUZZED((mat2(74.95, -3109.2937, -14.87, -5.7) , uvec3(102u, 151129u, 122241u)))))), (uint(_GLF_IDENTITY(uvec3((0u | 0u), 1u, (1u & 1u)), (true ? uvec3((0u | 0u), 1u, (1u & 1u)) : _GLF_FUZZED((mat2(74.95, -3109.2937, -14.87, -5.7) , uvec3(102u, 151129u, 122241u))))))) | (uint(_GLF_IDENTITY(uvec3((0u | 0u), 1u, (1u & 1u)), (true ? uvec3((0u | 0u), 1u, (1u & 1u)) : _GLF_FUZZED((mat2(74.95, -3109.2937, -14.87, -5.7) , uvec3(102u, 151129u, 122241u))))))))))))), 0u + (_GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), clamp(~ (workgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size))) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) >> 0u))), uint(uvec4(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size))) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) >> 0u))), 0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), 0u)))), ~ (workgroup_size))))) * workgroup_id), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY((0u), ((0u)) * (1u & 1u)) | _GLF_IDENTITY((0u), clamp((0u), (0u), (0u)))) | 0u))), max(uint(uvec3(uint(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), clamp(~ (workgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size))) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) >> 0u))), uint(uvec4(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size))) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) >> 0u))), 0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), 0u)))), ~ (workgroup_size))))) * workgroup_id), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY((0u), ((0u)) * (1u & 1u)) | _GLF_IDENTITY((0u), clamp((0u), (0u), (0u)))) | 0u))), uint(uvec3(uint(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), clamp(~ (workgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size))) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) >> 0u))), uint(uvec4(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size))) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) >> 0u))), 0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), 0u)))), ~ (workgroup_size))))) * workgroup_id), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY((0u), ((0u)) * (1u & 1u)) | _GLF_IDENTITY((0u), clamp((0u), (0u), (0u)))) | 0u))))))), ((~ (_GLF_IDENTITY(uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u), (_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u)) >> 0u)))), (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u), (_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u)) >> 0u), (_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u)) >> 0u))))) | (uint(uvec3(uint(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)) * workgroup_id), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u), (_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u)) >> 0u))))))))) | 0u))), 1u * (~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))), uvec3(0u, 0u, 0u) + ((uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ _GLF_IDENTITY((~ (uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u))), (_GLF_IDENTITY((~ (uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u))), uvec3(_GLF_IDENTITY(uvec3((~ (uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))), uvec3(1u, 1u, 1u) * (uvec3((~ (uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u))))))))) ^ uvec3(0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(workgroup_size * workgroup_id, 0u ^ (workgroup_size * workgroup_id))), 0u, _GLF_IDENTITY((0u | 0u), min(_GLF_IDENTITY((0u | 0u), ((0u | 0u)) - 0u), _GLF_IDENTITY((0u | 0u), (true ? (0u | 0u) : _GLF_FUZZED(49322u)))))), uvec3(0u, 0u, 0u) ^ (uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))))))), 0u + (_GLF_IDENTITY((~ (uint(uvec3(uint(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) >> 0u), clamp(~ (workgroup_size), ~ (workgroup_size), ~ (workgroup_size))))) * workgroup_id), 0u, (_GLF_IDENTITY(0u, (0u) | (0u)) | 0u))))), _GLF_IDENTITY(((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (_GLF_IDENTITY(0u | 0u, ~ (~ (_GLF_IDENTITY(0u | 0u, (0u | 0u) << 0u)))))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))), 0u, (0u | 0u))))), (false ? _GLF_FUZZED(workgroup_id) : (~ (uint(uvec3(uint(workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))), 0u, (0u | 0u))))))))), _GLF_IDENTITY((~ (((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))))) | (~ ((_GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), clamp((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), _GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), ((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))) * 1u), (~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))))))), (_GLF_IDENTITY((~ (((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))))) | (~ ((_GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), clamp((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), _GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), ((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))) * 1u), (~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))))))), 1u * ((~ (((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))))) | (~ ((_GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), clamp((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), _GLF_IDENTITY((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))), ((~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u)))))) * 1u), (~ (uint(uvec3(uint(workgroup_size * workgroup_id), 0u, (0u | 0u))))))))))))) << 0u)))) | 0u)))))))));
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), max(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) * subgroup_size) >> 0u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY((_GLF_FUZZED(num_workgroup)), ~ (~ ((_GLF_FUZZED(num_workgroup))))) << 0u), (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(workgroup_base))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY((_GLF_FUZZED(num_workgroup)), ~ (~ ((_GLF_FUZZED(num_workgroup))))) << 0u), (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(workgroup_base))), 0u))), _GLF_FUZZED(num_workgroup))) : workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) / 1u), uint(uvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)))), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), (_GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), bool(bvec4(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), ! (! ((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), false)))))))))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u)), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u))) >> 0u)))), _GLF_FUZZED(num_workgroup)), max(_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)), (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), bool(bvec3((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), true, false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.1)), bool(false))))))), 1.0)).y), false)))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true))))))))))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) >> (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))))))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u))))), _GLF_FUZZED(num_workgroup)), (max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))))))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))))))), (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ((_GLF_IDENTITY(true, (true) && true))) && true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u))), uint(uvec4(_GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u)))))))), _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) / 1u)))) | (max(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))))))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))))))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (false ? _GLF_FUZZED(workgroup_size) : uint(1u))))), ((0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (false ? _GLF_FUZZED(workgroup_size) : uint(1u)))))) | ((0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (false ? _GLF_FUZZED(workgroup_size) : uint(1u)))))))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id))))), 0u), min(uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id))))), 0u), uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id))))), 0u))))), 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))), 0u ^ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u))), min(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u))), _GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))), (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))) - 0u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), max(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), uint(uvec2(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u)))) << 0u), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (0u ^ 0u) ^ (1u))), max((1u) | (_GLF_IDENTITY(1u, (0u ^ 0u) ^ (1u))), (1u) | (_GLF_IDENTITY(1u, (0u ^ 0u) ^ (1u)))))))))), 0u)))), uint(uvec3(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), max(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), uint(uvec2(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u)))) << 0u), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (0u ^ 0u) ^ (1u))), max((1u) | (_GLF_IDENTITY(1u, (0u ^ 0u) ^ (1u))), (1u) | (_GLF_IDENTITY(1u, (0u ^ 0u) ^ (1u)))))))))), 0u)))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), (uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))))))) | 0u))))), _GLF_FUZZED(num_workgroup)))), max(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-28.82)), vec2(_GLF_FUZZED(-7274.4089), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x < injectionSwitch.y), false)))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))) && true))))))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), 0u | (_GLF_IDENTITY(uint(1u), uint(1u)))))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, _GLF_IDENTITY(0u, (0u) / 1u), 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), (uint(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), clamp(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u))))) | (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u))))))))) | (uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) / 1u)), uint(1u)))), 0u)))))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY(0u, (0u) << 0u)), uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-28.82)), vec2(_GLF_FUZZED(-7274.4089), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x < injectionSwitch.y), false)))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))) && true))))))), true && (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-28.82)), vec2(_GLF_FUZZED(-7274.4089), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(3.2, -46.32)) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) < injectionSwitch.y))))))).x < injectionSwitch.y), false)))), ! (! ((_GLF_IDENTITY(true, (true) && true)) && _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((float(23784u) * 1.3)), _GLF_FUZZED(2035.8258)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)), false)))), (_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))) && true))))))))) ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), 0u | (_GLF_IDENTITY(uint(1u), uint(1u)))))), (true ? _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), 0u | (_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(_GLF_IDENTITY(uint(1u), uint(uvec4(uint(1u), 1u, 0u, 1u))), uint(1u)))))))) : _GLF_FUZZED(workgroup_base))), 0u)))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, _GLF_IDENTITY(0u, (0u) / 1u), 1u, 0u)))), uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), (uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u))))) | (uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))))), max(uint(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))), uint(uvec4(workgroup_base, 0u, 1u, 0u)))))))) | 0u))))) / 1u)), _GLF_FUZZED(num_workgroup))))) : workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : (subgroup_size)))), max(~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (subgroup_size)))))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size)))), _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((~ (subgroup_size)), max((~ (subgroup_size)), (~ (subgroup_size)))), _GLF_IDENTITY(max(~ (~ (subgroup_size)), ~ (~ (subgroup_size))), (max(~ (_GLF_IDENTITY(~ (subgroup_size), 1u * (~ (subgroup_size)))), ~ (~ (subgroup_size)))) | (max(~ (~ (subgroup_size)), ~ (~ (subgroup_size))))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((~ (subgroup_size)), max((~ (subgroup_size)), (~ (subgroup_size)))), _GLF_IDENTITY(max(~ (~ (subgroup_size)), ~ (~ (subgroup_size))), (max(~ (~ (subgroup_size)), ~ (~ (subgroup_size)))) | (max(~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size))))), ~ (~ (subgroup_size)))))))) / 1u) | (_GLF_IDENTITY(~ (~ (subgroup_size)), ~ (~ (_GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) / 1u))))))))), max(subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), ~ (_GLF_IDENTITY(~ (max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)))), ~ (~ (subgroup_size))), subgroup_size)), clamp(~ (max(subgroup_size, subgroup_size)), ~ (max(subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(max(subgroup_size, subgroup_size), (max(subgroup_size, subgroup_size)) ^ 0u))))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), ~ (_GLF_IDENTITY(~ (max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)))), ~ (~ (subgroup_size))), subgroup_size)), clamp(~ (max(subgroup_size, subgroup_size)), ~ (max(subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(max(subgroup_size, subgroup_size), (max(subgroup_size, subgroup_size)) ^ 0u)))))))) / 1u)) / 1u), 1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(98.95))), injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(98.95))), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, (0) ^ 0)]) + 0.0), injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-47708)))])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(98.95), mix(float(_GLF_FUZZED(vec3(6.6, 3455.2986, -60.03).g)), float(true ? injectionSwitch.x : _GLF_FUZZED(98.95)), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-89.00))), max(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-89.00))), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-89.00))))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(98.95), mix(float(_GLF_FUZZED(53.51)), float(true ? injectionSwitch.x : _GLF_FUZZED(98.95)), bool(true))))), injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(98.95))), injectionSwitch.x)))))), 1u))))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) * 1)), (true ? uint(1) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), subgroup_id)), uint(uvec3(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), subgroup_id)), 1u, 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))), ~ (~ (~ (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u))))))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_FUZZED(workgroup_id), _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), min(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))))) : _GLF_IDENTITY(uint(1), max(uint(1), _GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u))))))))), 4, 64, 4);
             for(int _injected_loop_counter = (0 & -78422); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, true, true, true))), bool(bvec2(! (bool(bvec4(false, true, true, true))), false)))))) || (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))), (_GLF_IDENTITY(false, ! (! (false)))) || false)));
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) - _GLF_IDENTITY(0u, 0u + (0u)))), _GLF_IDENTITY((! (subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((! (subgroup_local_id + 1 < subgroup_size))), (! ((! (subgroup_local_id + 1 < subgroup_size)))) && true), false || (! ((! (subgroup_local_id + 1 < subgroup_size))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, false, false)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), false))), false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), false))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false), false))), false)))))))))))), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false))), _GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec2(false, false)))), bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(true, ! (! (true))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), false || (! (true)))), bool(bvec4(! (_GLF_IDENTITY(! (true), false || (! (true)))), true, false, false)))), false), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), false || (! (true)))), bool(bvec4(! (_GLF_IDENTITY(! (true), false || (! (true)))), true, false, false)))), false), false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(false, true, false), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec2(! (_GLF_IDENTITY(false, false || (false))), true)))))), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec3(false || (false), false, true))))))))), true, false), false))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))), false))), false)))))), true)))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, bool(_GLF_IDENTITY(bool(_injected_loop_counter != 1), false || (bool(_injected_loop_counter != 1))))), true, false, false)))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(vec4(-87.06, 31.75, 2007.4109, 5.3).x)), float(injectionSwitch[1]), bool(true))))).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))) || false))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), injectionSwitch)))).x) / _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(vec4(-87.06, 31.75, 2007.4109, 5.3).x)), float(injectionSwitch[1]), bool(true))))).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))) || false))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), injectionSwitch)))).x) / _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(vec4(-87.06, 31.75, 2007.4109, 5.3).x)), float(injectionSwitch[1]), bool(true))))).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))) || false))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), injectionSwitch)))).x) / _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))))))))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), false))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                            {
                             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 0, 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), min(~ (_GLF_IDENTITY(int(0), int(0))), ~ (_GLF_IDENTITY(int(0), int(0))))))))); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                              }
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8.6)))))))));
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || false), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, true && (true)))), bool(bool(true)))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ((_GLF_IDENTITY(true, true && (true)))) && true)), bool(bool(true)))) || _GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), bool(bool(true)))) || _GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), bool(bool(true)))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (false)))))) && true))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), bool(bvec2(_GLF_IDENTITY((true), ((true)) && true), false)))))), bool(bool(true)))) || _GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), bool(bool(_GLF_IDENTITY(true, false || (true)))))) || _GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), bool(bool(true)))) || _GLF_IDENTITY(false, (false) && true), true && ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), bool(bool(true)))) || _GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))))))))))))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), true && (bool(false)))) && true)), false || (bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), true && (bool(false)))) && true)))))))) || false))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-46.78)), vec2(_GLF_FUZZED(-372.996), (injectionSwitch)[1]), bvec2(false, true))).x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))))))))))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, true))));
              }
            }
           else
            {
             for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(ivec2(int(7), 1)), (int(ivec2(int(7), 1))) | 0))))))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0))), _GLF_IDENTITY(int(ivec3((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (~ (1 << _GLF_IDENTITY(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), int(7)), 0, (1 | 0))), 0 | (int(ivec3((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (~ (1 << _GLF_IDENTITY(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), int(7)), 0, (1 | 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false))))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (true))), ! (! (bool(_GLF_IDENTITY(true, true && (true))))))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(9646.0641))), (false ? _GLF_FUZZED(-2.4) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(9646.0641))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-160.814)), bool(false)))))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(-54.81)), bool(false))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - _GLF_IDENTITY(0, (0) | (0)))) * 1) < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 1), int(int((1 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_TRUE(true)), false || (true && (_GLF_WRAPPED_IF_TRUE(true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))), (bool(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) || false)))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-57716) : int(1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec3(_GLF_WRAPPED_LOOP(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y)))))))), bool(bool(bool(bvec3(_GLF_WRAPPED_LOOP(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (injectionSwitch.y) / _GLF_ONE(1.0, injectionSwitch.y))))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ (0 << _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = ((0 ^ 1) ^ (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
}
