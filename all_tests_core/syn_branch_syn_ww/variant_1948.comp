#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.0)), float(injectionSwitch.x), bool(true))), sqrt(1.0), sqrt(sqrt(1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED((-5380.4460 / 125.505))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), 1.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(_GLF_IDENTITY(-9.9, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(-9.9, clamp(_GLF_IDENTITY(-9.9, min(-9.9, -9.9)), -9.9, -9.9)), 1.0, 1.0, determinant(mat4(sin(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY((determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), float(_GLF_FUZZED(((+ 9.0) * 6.0))), bool(false)))))) - _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))), vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), max(_GLF_IDENTITY((determinant(mat2(0.0, 0.0, 0.0, 0.0))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) - _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec2(9918.9808, -2.3).t)), bool(false))))), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0), vec3(0.0, 0.0, 0.0))), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-1.2) : (determinant(mat2(0.0, 0.0, 0.0, 0.0))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 1.0))), 0.0, 0.0))))), (determinant(mat2(0.0, 0.0, 0.0, 0.0))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))))))) * 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec3(-4.3, -1.0, -6.8).r)), float(1.0), _GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false)))))) - _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, round(length(normalize(1.0))), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, round(length(normalize(1.0))), 0.0)))), 1.0)), (float(mat4x3(_GLF_IDENTITY(-9.9, clamp(_GLF_IDENTITY(-9.9, min(-9.9, -9.9)), -9.9, -9.9)), 1.0, 1.0, _GLF_IDENTITY(determinant(mat4(sin(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat4(sin(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED((7293.5233 + -7.2))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, exp(0.0)))), 0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) - 0.0)))), bool(false))))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), (false ? _GLF_FUZZED(ivec2(7488, -21718)[0]) : _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), ~ (~ (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))))))))))), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), (false ? _GLF_FUZZED(ivec2(7488, -21718)[0]) : _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), ~ (~ (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584)))))))))))) | (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), (false ? _GLF_FUZZED(ivec2(7488, -21718)[0]) : _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584))), ~ (~ (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-23584)))))))))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(trunc(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))))).x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + (_GLF_IDENTITY(0 | 0, (0 | 0) >> 0))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
        continue;
       barrier();
      }
     continue;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ _GLF_IDENTITY((~ (0)), 0 + ((~ (0)))))))), (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ _GLF_IDENTITY((~ (0)), 0 + ((~ (0))))))))) | (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ _GLF_IDENTITY((~ (0)), 0 + ((~ (0))))))))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0))), injectionSwitch))) + vec2(0.0, 0.0)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(-3.9), _GLF_FUZZED(-7.0)), vec2((vec2(mat2(injectionSwitch, 1.0, 0.0)))[0], (vec2(mat2(injectionSwitch, 1.0, 0.0)))[1]), bvec2(true, true)))).x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       continue;
       if(_GLF_DEAD(false))
        continue;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      break;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec3(gl_NumWorkGroups.x, 0u, 0u), min(uvec3(gl_NumWorkGroups.x, 0u, 0u), uvec3(gl_NumWorkGroups.x, 0u, 0u))))), min(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x))), gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-83.94) : injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-83.94) : injectionSwitch.y))) / 1.0)))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      barrier();
     barrier();
    }
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 1u, 0u)));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(sin(0.0), sqrt(1.0), 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(sin(0.0), sqrt(1.0), 0.0, 0.0))) * (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) / 1.0)) + 0.0), true, false, false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) / 1.0)) + 0.0), true, false, false)), (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) / 1.0)) + 0.0), true, false, false))) && true)) || false)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0) : _GLF_FUZZED(atan(trunc(871.442), 9.4))))), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), max(injectionSwitch, injectionSwitch)).y) + 0.0) : _GLF_FUZZED(atan(trunc(871.442), 9.4))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-28.79)))), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-28.79)))), true, true))), true), false, true)))), bool(bvec2(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0) : _GLF_FUZZED(atan(trunc(871.442), 9.4))))), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), true)))), false)))) && true)))), bool(bvec3((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), true), false, true))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0))))) ^ (uint(8u))))) + (_GLF_IDENTITY(min(subgroup_id, subgroup_id), 0u ^ (min(subgroup_id, subgroup_id)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0))))) ^ (uint(8u))))) + (_GLF_IDENTITY(min(subgroup_id, subgroup_id), 0u ^ (min(subgroup_id, subgroup_id))))))) >> 0u), 1u, uint(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)), clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)), float(mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)), 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, mix(float(_GLF_FUZZED(589.194)), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(3.1), (false ? _GLF_FUZZED(-9.7) : _GLF_FUZZED(3.1)))), min((true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(3.1, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(3.1, (3.1) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0)), max(float(mat3x2(_GLF_IDENTITY(3.1, (3.1) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat3x2(_GLF_IDENTITY(3.1, (3.1) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), float(vec3((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), 0.0, 1.0))), (false ? _GLF_FUZZED(1.6) : _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), float(vec3(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), max((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), (true ? injectionSwitch.y : _GLF_FUZZED(3.1)))), 0.0, 1.0))))))))), bool(true)))))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0))))) ^ (uint(8u))))) + (_GLF_IDENTITY(min(subgroup_id, subgroup_id), 0u ^ (min(subgroup_id, subgroup_id)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0))))) ^ (uint(8u))))) + (_GLF_IDENTITY(min(subgroup_id, subgroup_id), 0u ^ (min(subgroup_id, subgroup_id))))))) >> 0u), 1u, uint(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)), clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)), float(mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0))))))), 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cosh(-1.7)) : 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, mix(float(_GLF_FUZZED(589.194)), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(3.1), (false ? _GLF_FUZZED(-9.7) : _GLF_FUZZED(3.1)))), min((true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(3.1, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(3.1, (3.1) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0)), max(float(mat3x2(_GLF_IDENTITY(3.1, (3.1) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat3x2(_GLF_IDENTITY(3.1, (3.1) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), float(vec3((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), 0.0, 1.0))), (false ? _GLF_FUZZED(1.6) : _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch.y : _GLF_FUZZED(3.1)), float(vec3(_GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(3.1), (true ? _GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(3.1), (true ? injectionSwitch.y : _GLF_FUZZED(3.1)) - 0.0) : _GLF_FUZZED(-0.4)))), max((true ? injectionSwitch.y : _GLF_FUZZED(3.1)), (true ? injectionSwitch.y : _GLF_FUZZED(3.1)))), 0.0, 1.0))))))))), bool(true)))))))) * subgroup_size) / 1u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, _GLF_IDENTITY(1 * ((0) - 0), 1 * (1 * (_GLF_IDENTITY((0), min(_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), ((0)) ^ 0), (0))), (0))) - 0))))), 1, 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(int(0), int(0))))) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | 0))))))))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(29097) : _injected_loop_counter))) + 0) < (1 | _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) << 0)), clamp((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) << 0)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) << 0)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) << 0))))))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-34.09)), float(injectionSwitch.y), bool(true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), true)))))))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, false || (false)) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 + (1), ~ (_GLF_IDENTITY(~ (0 + (1)), clamp(~ (0 + (1)), ~ (0 + (1)), ~ (0 + (1))))))), clamp(1, _GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, min(_GLF_IDENTITY((1) - 0, max((1) - _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-80189), (_GLF_FUZZED(-80189)) ^ 0) : 0)), 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (_GLF_IDENTITY(~ ((ivec3(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-80189), (_GLF_FUZZED(-80189)) ^ 0) : 0)), 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), (~ ((ivec3(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-80189), (_GLF_FUZZED(-80189)) ^ 0) : 0)), 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (~ ((ivec3(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-80189), (_GLF_FUZZED(-80189)) ^ 0) : 0)), 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), _GLF_IDENTITY(0 ^ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), 0 ^ (0 ^ (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(_GLF_IDENTITY(0, min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), min(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), (1) - 0)), (1) - 0)))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.3)), bvec2(true, false))))).x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.3)), bvec2(true, false))))), (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.3)), bvec2(true, false))))) : _GLF_FUZZED(vec2(-9.6, 43.17)))).x < injectionSwitch.y)))))))))) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec2(true && (_GLF_WRAPPED_IF_FALSE(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, max(4, 4)), 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, log(1.0), 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0)), clamp(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, log(1.0), 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1.4)), bool(false))), log(1.0), 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), clamp(determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), (true ? determinant(mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(3.5))), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0))))).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(863.810)), bool(false)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))) > injectionSwitch.y)) || (false), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), ! (_GLF_IDENTITY(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))), (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))) || false))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), true && (_GLF_IDENTITY(! (bool(true)), ! (! (! (bool(true))))))))))), (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, exp(0.0), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, abs(1.0)), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, abs(1.0)), vec4(1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 1.0, log(1.0), 1.0)), vec2(mat4x2(vec2(mat4(injectionSwitch, exp(0.0), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), exp(0.0), 1.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, abs(1.0)), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, abs(1.0)), vec4(1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 1.0, log(1.0), 1.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))).x < injectionSwitch.y)), false, false, false))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false))), true))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, false)))), true && (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, false)))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0))))), vec2(mat2x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(683.463)))), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0))))), mix(vec2((vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0))))))[0], _GLF_FUZZED(-2.9)), vec2(_GLF_FUZZED(8.3), (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.8)), float(0.0), bool(true))), 1.0, 0.0, 0.0))) : _GLF_FUZZED(7.4))), (0.0) * abs(1.0)), 0.0))))))[1]), bvec2(false, true))), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 0.0))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), min((1.0), (1.0))) / 1.0), 1.0, 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(4644.5316))), 1.0))), (_GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0)))) - _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, clamp((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, min(_GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, ((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0) - 0.0), (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0)), (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0))), 0.0), vec4(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0, 1.0)))), 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0)))), 0.0, 0.0)))))))).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 0.0))))), vec2(mat2x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(4540.4307), _GLF_FUZZED(-5.1)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true))), (injectionSwitch) * mat2(1.0)))), 1.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(683.463)))), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0))))), mix(vec2((vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0))))))[0], _GLF_FUZZED(-2.9)), vec2(_GLF_FUZZED(8.3), (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.8)), float(0.0), bool(true))), 1.0, 0.0, 0.0))) : _GLF_FUZZED(7.4))), (0.0) * abs(1.0)), 0.0))))))[1]), bvec2(false, true))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), sqrt(0.0), 0.0, 1.0, 1.0, 0.0))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), min((1.0), (1.0))) / 1.0), 1.0, 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(4644.5316))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9236.7941)), bool(false))), 1.0, 1.0))))), (_GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0)))) - _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(5631.6219)), bool(false))))))))) - 0.0, clamp((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-51.81) : _GLF_IDENTITY(1.0, (1.0) * 1.0))))))) - 0.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, min(_GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, (_GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), float(mat2x4((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(sqrt(1.0), 0.0)), dot(vec2(1.0, 0.0), vec2(sqrt(1.0), 0.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) - 0.0) - 0.0), (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0)), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)), (true ? max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)) : _GLF_FUZZED(64.00))))) - 0.0))), 0.0), vec4(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0, 1.0)))), 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0)))), 0.0, 0.0)))))))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(_GLF_IDENTITY(1.0, 1.0 * (1.0)))), 0.0))))), vec2(mat2x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(4540.4307), _GLF_FUZZED(-5.1)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true))), (injectionSwitch) * mat2(1.0)))), 1.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(683.463)))), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0))))), mix(vec2((vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0))))))[0], _GLF_FUZZED(-2.9)), vec2(_GLF_FUZZED(8.3), (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.8)), float(0.0), bool(true))), 1.0, 0.0, 0.0))) : _GLF_FUZZED(7.4))), (0.0) * abs(1.0)), 0.0))))))[1]), bvec2(false, true))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), sqrt(0.0), 0.0, 1.0, 1.0, 0.0))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), min((1.0), (1.0))) / 1.0), 1.0, 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(4644.5316))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9236.7941)), bool(false))), 1.0, 1.0))))), (_GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0)))) - _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(5631.6219)), bool(false))))))))) - 0.0, clamp((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-51.81) : _GLF_IDENTITY(1.0, (1.0) * 1.0))))))) - 0.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, min(_GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0, (_GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), float(mat2x4((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(sqrt(1.0), 0.0)), dot(vec2(1.0, 0.0), vec2(sqrt(1.0), 0.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) - 0.0) - 0.0), (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))) - 0.0)), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)), (true ? max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)) : _GLF_FUZZED(64.00))))) - 0.0))), 0.0), vec4(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0, 1.0)))), 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0)))), 0.0, 0.0)))))))).x > injectionSwitch.y)))))))))
  {
   for(int _injected_loop_counter = (((int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(1.0, 1.0, tan(_GLF_ZERO(0.0, injectionSwitch.x)), cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((- 7790.4443))), float(1.0), bool(true))), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2652.5466)), float(0.0), bool(true))))))), (false ? _GLF_FUZZED(-8.6) : float(mat3(1.0, 1.0, tan(_GLF_ZERO(0.0, injectionSwitch.x)), cos(0.0), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((- 7790.4443))), float(1.0), bool(true))), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), mix(float(_GLF_FUZZED(-7.6)), float(float(mat3(1.0, 1.0, tan(_GLF_ZERO(0.0, injectionSwitch.x)), cos(0.0), 1.0, 1.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (transpose(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(true)))), injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(int(int(1)))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0))))))
  return;
 if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) || false))
  {
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.6, 4.2)))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))))))))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(51.25, -515.710)))) : _GLF_FUZZED(vec2(-2118.3515, -0.0)))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(next_virtual_gid), max(uint(next_virtual_gid), uint(next_virtual_gid)))), (uint(_GLF_IDENTITY(uint(next_virtual_gid), max(uint(next_virtual_gid), uint(next_virtual_gid))))) | (uint(_GLF_IDENTITY(uint(next_virtual_gid), max(uint(next_virtual_gid), uint(next_virtual_gid))))))), (next_virtual_gid) >> 0u) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(next_virtual_gid, 1u, 1u, 0u)))), (uint(uvec4(next_virtual_gid, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 0u))) | 0u))], uint(2), 4, 64, 4);
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, false || (true))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))), true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(i) : int(4)))) + 0)) | (int(4))))))), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (! ((injectionSwitch.x > injectionSwitch.y))), true))))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))) && true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))) && true)))), (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), true && ((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))) && true))))) || false))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), false)))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), false)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(54.69), _GLF_FUZZED(-1.4)), bvec2(false, false))), 0.0, 0.0))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bool((_GLF_WRAPPED_IF_FALSE(false))))), true))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))).y))))
              return;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y, injectionSwitch.y))))))))
                  barrier();
                }
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), _GLF_IDENTITY(uint(uint((next_virtual_gid))), (uint(uint((next_virtual_gid)))) | (uint(uint(_GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) >> 0u)))))) >> 0u)], _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), 4, 64, 4);
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), false || (! (false))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), false || (! (false))))))), ((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), false || (! (false)))))))) || false)))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), false || (! _GLF_IDENTITY((false), ((false)) && true))))))), false)), bool(bvec2(bool(bvec2((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), false || (! (false))))))), false)), false)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), false || ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), false || ((false))))))), true && (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), false || ((false))))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))) || ((false))), (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), true && (! _GLF_IDENTITY((false), false || ((false)))))) || false), ! (! (! _GLF_IDENTITY((false), false || ((false))))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! _GLF_IDENTITY((! (! _GLF_IDENTITY((false), false || ((false))))), true && ((! (! _GLF_IDENTITY((false), false || ((false))))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false))))))))), (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true)))) || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false)))))))))) && true))))))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))) || ((_GLF_IDENTITY(false, false || (false))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, ! (! (false)))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))))))), ! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false))))))))))))), ! (_GLF_IDENTITY(! (bool(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))) || ((_GLF_IDENTITY(false, false || (false))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, ! (! (false)))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))))))), ! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false)))))))))))))), (_GLF_IDENTITY(! (bool(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))) || ((_GLF_IDENTITY(false, false || (false))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, ! (! (false)))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))))))), ! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false)))))))))))))), (! (bool(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))) || ((_GLF_IDENTITY(false, false || (false))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, ! (! (false)))))), ! (! (! _GLF_IDENTITY((false), false || ((false))))))))))), ! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false))))))))))))))) && true)) && true))))))))))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), mat2(mat2x3(mat2(1.0))))) - mat2(0.0, 0.0, 0.0, 0.0)) * (vec2(vec4(injectionSwitch, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 0.0, 0.0, 1.0, 0.0, 0.0, cos(0.0), 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.0)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))), 0.0, 0.0)), 0.0, sin(0.0)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, sqrt(0.0), round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), max(normalize(vec3(1.0, 1.0, 1.0)), normalize(vec3(1.0, 1.0, 1.0)))))))), mat2(1.0) * (vec2(vec4(injectionSwitch, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), cos(0.0), 1.0, 0.0, 0.0, sin(0.0)))).y))) && true)))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(max(float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4199.9566)), bool(false))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-61.77)), bool(false))))), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0)), (float(mat2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-61.77)), bool(false))))), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0))) / 1.0)), 0.0, 0.0, 0.0))), (_GLF_IDENTITY(max(float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), (max(float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))) + 0.0)) - 0.0))))) > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                continue;
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED((- -6204.5158)) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true, true, true))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(true, false || (true)) && (! (false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))), true && (! (false)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! _GLF_IDENTITY((! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (! (false)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY((! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (! (false)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && ((! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (! (false)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-96.46)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(825.656) : 0.0)), 0.0))), 1.0, 1.0, 1.0, 1.0)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))), ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false))))))) || false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 1.0, 0.0, abs(sqrt(0.0)), exp(0.0), exp(0.0), 1.0, 0.0), mat4x2(_GLF_IDENTITY(mat4x3(mat4x2(injectionSwitch.y, 1.0, 0.0, abs(sqrt(0.0)), exp(0.0), exp(0.0), 1.0, 0.0)), (mat4x3(mat4x2(injectionSwitch.y, 1.0, 0.0, abs(sqrt(0.0)), exp(0.0), exp(0.0), 1.0, 0.0))) * mat4(1.0)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 1.0, 0.0, abs(sqrt(0.0)), exp(0.0), exp(0.0), 1.0, 0.0), mat4x2(_GLF_IDENTITY(mat4x3(mat4x2(injectionSwitch.y, 1.0, 0.0, abs(sqrt(0.0)), exp(0.0), exp(0.0), 1.0, 0.0)), (mat4x3(mat4x2(injectionSwitch.y, 1.0, 0.0, abs(sqrt(0.0)), exp(0.0), exp(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 0.0))) * mat4(1.0))))))))))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
