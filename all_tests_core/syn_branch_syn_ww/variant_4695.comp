#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(67010u, 97360u, 24964u)), (_GLF_IDENTITY(_GLF_FUZZED(uvec3(67010u, 97360u, 24964u)), ~ (~ (_GLF_FUZZED(uvec3(67010u, 97360u, 24964u)))))) >> uvec3(0u, 0u, 0u)) : gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u)), gl_NumWorkGroups)).x)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x))))), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | _GLF_IDENTITY((gl_NumWorkGroups.x), (_GLF_IDENTITY((gl_NumWorkGroups.x), min((gl_NumWorkGroups.x), (gl_NumWorkGroups.x)))) << 0u)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x), max(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u), (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u) : _GLF_FUZZED(56504u)) >> 0u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(uvec4(14414u, 3835u, 195987u, 51803u)[3]))), (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)), 0u)))), clamp(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u), min(_GLF_IDENTITY(true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u), (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)) - 0u), true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u), (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x))) + (1u ^ 1u))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)))), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u), (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)) | (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u))), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x), 0u | (max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | 0u))), 0u))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED((++ subgroup_size)) : _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))))))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u), (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(136536u, 76178u, 111831u)))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - _GLF_IDENTITY(0u, (0u) - 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), uvec4(gl_NumWorkGroups, 0u))))).x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u))), _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) + 0u)))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) ^ 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)), 1u * ((true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), ~ (~ (~ (gl_NumWorkGroups.x))))))))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u) : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups.x) - 0u, clamp((gl_NumWorkGroups.x) - 0u, (gl_NumWorkGroups.x) - 0u, _GLF_IDENTITY((gl_NumWorkGroups.x) - 0u, ((gl_NumWorkGroups.x) - 0u) >> 0u))), uint(_GLF_IDENTITY(uint((gl_NumWorkGroups.x) - 0u), uint(uint(uint((gl_NumWorkGroups.x) - 0u))))))), gl_NumWorkGroups.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x), min(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(56504u)))) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) - 0u), gl_NumWorkGroups.x)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          break;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), (bool(bool(_GLF_IDENTITY(false, false || (false))))) && true))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                        {
                         return;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), true)))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * _GLF_IDENTITY(1.0, max(1.0, 1.0))), injectionSwitch[1])).x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       else
                        {
                         return;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           break;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), false || (bool(true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(true), false || (bool(true))))), bool(bvec3(! (bool(_GLF_IDENTITY(bool(true), false || (bool(true))))), true, false)))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), false || (bool(true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(true), false || (bool(true))))), bool(bvec3(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(true), false || (bool(true))))), ! (! (! (bool(_GLF_IDENTITY(bool(true), false || (bool(true)))))))), true, false))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)))) || false)))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   return;
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), (~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u))) ^ 0u), ~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)))), 0u, 0u))))) : subgroup_id)), subgroup_id), min(_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << _GLF_IDENTITY(0u, 0u ^ (0u)))), uint(uvec3(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), 0u, 0u))))) : subgroup_id)), subgroup_id), uint(_GLF_IDENTITY(uvec4(min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), uint(uvec3(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), 0u, 0u))))) : subgroup_id)), subgroup_id), 1u, 1u, 0u), (_GLF_IDENTITY(uvec4(min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), uint(uvec3(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), 0u, 0u))))) : subgroup_id)), subgroup_id), 1u, 1u, 0u), (uvec4(min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), uint(uvec3(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), 0u, 0u))))) : subgroup_id)), subgroup_id), 1u, 1u, 0u)) | (uvec4(min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)))), 0u, 0u))))) : subgroup_id)), subgroup_id), 1u, 1u, 0u)))) ^ uvec4(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(185785u) : 0u)), 0u, 0u)))), (min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), _GLF_IDENTITY((_GLF_FUZZED(workgroup_base)), ~ (~ ((_GLF_FUZZED(workgroup_base))))) << 0u)), uint(uvec3(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) | (_GLF_FUZZED(workgroup_base))), (_GLF_FUZZED(workgroup_base)) << 0u)), 0u, 0u))))) : subgroup_id)), subgroup_id)) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), uint(uvec4(_GLF_IDENTITY((subgroup_id), 0u | ((subgroup_id))), 1u, (1u & 1u), 1u)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u), (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << 0u)) | 0u)), uint(uvec3(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) / 1u)) << 0u)), 0u, 0u))))) : _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), subgroup_id)))))) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))) && true))
      return;
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec2(int(7), 0))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(154007u))), (true ? workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(154007u))) : _GLF_FUZZED(subgroup_id))) + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  return;
                }
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0))).y))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true))))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))));
                            }
                          }
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))))))))
                            {
                            }
                           else
                            {
                             do
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                  }
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)))));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))))
                      continue;
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))), max(((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) - 0u))) >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) | (1u))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) * (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))), min(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))), uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))))))), 4, 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (! (_GLF_IDENTITY(false || (true), ! (! (false || (true)))))))), true && (true))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / _GLF_IDENTITY(1, min(1, 1))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-30295)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-659.181)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)), _GLF_IDENTITY(true, ! (! (true))), true)))))
            return;
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(-1432.4747)), bvec2(false, false))).x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, ! (! (((injectionSwitch.x > injectionSwitch.y)) || false))))) || false))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     for(int _injected_loop_counter = (1 ^ (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (6) | (6))), (~ (_GLF_IDENTITY(6, (6) | (6)))) << 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 1 * (int(6)))) ^ 0), _GLF_IDENTITY((int(6)), ((int(6))) + 0) - 0))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) - 0) : _GLF_FUZZED((i)))))) / 1), max(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)), clamp(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)), 1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)), 1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))), 0 | ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)))) / 1))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))), false || (_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))), ! (! (_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))))))))))); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))) && true)))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((true ? next_virtual_gid : _GLF_FUZZED(num_workgroup)), ~ (~ (_GLF_IDENTITY((true ? next_virtual_gid : _GLF_FUZZED(num_workgroup)), ((_GLF_IDENTITY(true, ! (! (true))) ? next_virtual_gid : _GLF_FUZZED(num_workgroup))) | _GLF_IDENTITY(((true ? next_virtual_gid : _GLF_FUZZED(num_workgroup))), (((true ? next_virtual_gid : _GLF_FUZZED(num_workgroup)))) + 0u))))))], uint(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, (2) + (0 ^ 0))), min((_GLF_IDENTITY(2, (2) + (0 ^ 0))), (_GLF_IDENTITY(2, (2) + (0 ^ 0))))) | 0))) : _GLF_FUZZED(i)))), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
          return;
        }
      }
    }
   else
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63493) : 0))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(3356.4787)), ((true ? injectionSwitch.y : _GLF_FUZZED(3356.4787))) + sin(0.0))), injectionSwitch.y))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, 1, 1))), max(_GLF_IDENTITY(2, int(ivec3(2, 1, 1))), _GLF_IDENTITY(2, int(ivec3(2, 1, 1)))))), 4, 64, 4);
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))), ! (! (true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), ! (! (bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))))))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-98998))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true)), (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))))), true, true))) && true)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(bvec4(_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec4((true), false, true, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-372.985), mix(float(_GLF_FUZZED((8.3 / vec2(-789.108, 2.1).x))), float(_GLF_FUZZED(-372.985)), bool(true))), mix(float(_GLF_FUZZED(-897.007)), float(_GLF_FUZZED(-372.985)), bool(true)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_injected_loop_counter --), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0) | (_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) - 0)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(19.68)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(-37380))), bool(false))), (true ? injectionSwitch.x : _GLF_FUZZED(round(-7.7)))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))).x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(round(-7.7)), (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(round(-7.7)), max(true ? injectionSwitch.x : _GLF_FUZZED(round(-7.7)), true ? injectionSwitch.x : _GLF_FUZZED(round(-7.7))))) - 0.0))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y)) || false)))))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY((injectionSwitch[1]), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY((injectionSwitch[1]), min((injectionSwitch[1]), (injectionSwitch[1]))), 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, abs(0.0), sin(0.0), 0.0, 1.0, 1.0, exp(0.0), 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(float(mat4(_GLF_IDENTITY((injectionSwitch[1]), min((injectionSwitch[1]), (injectionSwitch[1]))), 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, abs(0.0), sin(0.0), 0.0, 1.0, 1.0, exp(0.0), 0.0, 0.0, 0.0)), mix(float(float(mat4(_GLF_IDENTITY((injectionSwitch[1]), min((injectionSwitch[1]), (injectionSwitch[1]))), 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, abs(0.0), sin(0.0), 0.0, 1.0, 1.0, exp(0.0), 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-1577.5384)), bool(false)))), bool(true)))) - 0.0))).y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
}
