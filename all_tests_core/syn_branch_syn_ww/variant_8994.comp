#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_32 {
 bvec3 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 ivec4 _f3;
 ivec2 _f4;
 ivec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_31 {
 vec2 _f0;
 ivec2 _f1;
 mat2x3 _f2;
 bvec3 _f3;
 int _f4;
 bvec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_30 {
 uint _f0;
 mat4x2 _f1;
 uint _f2;
 bool _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_29 {
 bvec4 _f0;
 mat2x3 _f1;
 ivec4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_33 {
 _GLF_struct_29 _f0;
 uvec4 _f1;
 float _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
 _GLF_struct_32 _f5;
} ;

struct _GLF_struct_34 {
 uint workgroup_size;
 _GLF_struct_33 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_27 {
 mat4x2 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_25 {
 vec4 _f0;
 mat3 _f1;
 ivec4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_24 {
 mat4x2 _f0;
} ;

struct _GLF_struct_23 {
 mat4x3 _f0;
 ivec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_26 {
 _GLF_struct_23 _f0;
 uint subgroup_size;
 mat3x2 _f1;
 mat2x4 _f2;
 _GLF_struct_24 _f3;
 ivec3 _f4;
 uint _f5;
 _GLF_struct_25 _f6;
} ;

struct _GLF_struct_21 {
 uint _f0;
 uvec2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_22 {
 vec3 _f0;
 _GLF_struct_21 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
} ;

struct _GLF_struct_28 {
 _GLF_struct_20 _f0;
 bool _f1;
 mat2 _f2;
 _GLF_struct_22 _f3;
 _GLF_struct_26 _f4;
 _GLF_struct_27 _f5;
} ;

struct _GLF_struct_17 {
 ivec4 _f0;
 float _f1;
} ;

struct _GLF_struct_18 {
 uvec3 _f0;
 _GLF_struct_17 _f1;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
 mat4x3 _f1;
 uint _f2;
 mat3 _f3;
 bool _f4;
 bvec4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 vec4 _f1;
 ivec2 _f2;
 uint subgroup_local_id;
 mat4 _f3;
} ;

struct _GLF_struct_16 {
 bvec4 _f0;
 bvec2 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
 uvec3 _f1;
 vec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 ivec4 _f1;
 ivec4 _f2;
 _GLF_struct_12 _f3;
} ;

struct _GLF_struct_19 {
 _GLF_struct_13 _f0;
 mat4 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_18 _f3;
 vec3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 ivec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 uvec3 _f1;
 ivec3 _f2;
 mat3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 mat3x2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_3 {
 int _f0;
 mat3 _f1;
 uvec4 _f2;
 ivec4 _f3;
 bvec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_8 {
 mat3 _f0;
 float _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_1 {
 int i;
 mat3x4 _f0;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 bvec2 _f1;
 mat2x4 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat4x2 _f1;
 _GLF_struct_1 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_11 {
 mat3x4 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_10 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = (0 & -71137); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) | 0), 2)), _GLF_IDENTITY(2, clamp(2, 2, 2))))), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.2))) > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
           do
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          return;
                         barrier();
                        }
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))))
                          barrier();
                         return;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                    barrier();
                   barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(699.578), _GLF_FUZZED(-6247.7747)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(vec2(1.4, -6804.9214)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1))), (false ? _GLF_FUZZED(5956) : _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1))), (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1)))) << 0)))) >> 0) | 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -73193) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
            {
             return;
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_20(mat2x4(1.0)), true, mat2(1.0), _GLF_struct_22(vec3(1.0), _GLF_struct_21(1u, _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), vec2(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0))))), mat2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(-67.63))))), _GLF_struct_26(_GLF_struct_23(mat4x3(1.0), ivec4(1), mat2x3(1.0)), gl_SubgroupSize, mat3x2(1.0), mat2x4(1.0), _GLF_struct_24(mat4x2(1.0)), ivec3(1), 1u, _GLF_struct_25(vec4(1.0), mat3(1.0), ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, min(1, 1))), 0 | ((1) | (_GLF_IDENTITY(1, min(1, 1))))))), mat3(1.0))), _GLF_struct_27(mat4x2(1.0), mat3x2(1.0), mat2x3(1.0)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))), true, false)))))
  {
   do
    {
     for(int _injected_loop_counter = (0 & 9547); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), _GLF_IDENTITY(bool(bvec3(! (bool(false)), false, false)), false || (bool(bvec3(! (bool(false)), false, false)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_13(bvec2(true), ivec4(1), ivec4(1), _GLF_struct_12(ivec4(1), uvec3(1u), vec3(1.0), mat3(1.0))), mat4(1.0), _GLF_struct_16(bvec4(true), bvec2(true), _GLF_struct_14(mat4(1.0), vec4(1.0), ivec2(1), gl_SubgroupInvocationID, mat4(1.0)), _GLF_struct_15(bvec3(true), mat4x3(1.0), _GLF_IDENTITY(1u, (1u) | (1u)), mat3(1.0), true, bvec4(true), mat2x3(1.0))), _GLF_struct_18(uvec3(1u), _GLF_struct_17(ivec4(1), 1.0)), vec3(1.0), mat3(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * ((gl_NumWorkGroups))) | (gl_NumWorkGroups)) : _GLF_FUZZED(uvec3(22758u, 123224u, 18454u)))).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(93.93, -7.0)))).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), false, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))), (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false))))) || false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       continue;
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, false)), ! (! (bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, false)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 _GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(gl_WorkGroupSize.x, _GLF_struct_33(_GLF_struct_29(bvec4(true), mat2x3(1.0), ivec4(1), _GLF_IDENTITY(vec2(1.0), mix(vec2((vec2(1.0))[0], (vec2(1.0))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(-4.3, _GLF_IDENTITY((-4.3), clamp((-4.3), (-4.3), (_GLF_IDENTITY(-4.3, min(-4.3, -4.3))))) - 0.0)), _GLF_FUZZED(-921.482)), max(vec2(_GLF_FUZZED(_GLF_IDENTITY(-4.3, _GLF_IDENTITY((-4.3), clamp((-4.3), (-4.3), (_GLF_IDENTITY(-4.3, min(-4.3, -4.3))))) - 0.0)), _GLF_FUZZED(-921.482)), _GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(-4.3, _GLF_IDENTITY((-4.3), clamp((-4.3), (-4.3), (_GLF_IDENTITY(-4.3, min(-4.3, -4.3))))) - 0.0)), _GLF_FUZZED(-921.482)), vec2(vec2(vec2(_GLF_FUZZED(_GLF_IDENTITY(-4.3, _GLF_IDENTITY((-4.3), clamp((-4.3), (-4.3), (_GLF_IDENTITY(-4.3, min(-4.3, -4.3))))) - 0.0)), _GLF_FUZZED(-921.482))))))), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0)))) / vec2(1.0, 1.0)))).x > injectionSwitch.y)), false)))), uvec4(1u), 1.0, _GLF_struct_30(1u, mat4x2(1.0), 1u, true, ivec4(1)), _GLF_struct_31(vec2(1.0), ivec2(1), mat2x3(1.0), bvec3(true), 1, bvec4(true), mat3x2(1.0)), _GLF_struct_32(bvec3(true), _GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0)), mat3x2(1.0), ivec4(1), ivec2(1), ivec2(1), ivec4(1))), mat2x3(1.0));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
  }
 uint workgroup_base = _GLF_struct_replacement_34.workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_28._f4.subgroup_size, (subgroup_id * _GLF_struct_replacement_28._f4.subgroup_size) + _GLF_IDENTITY(0u, 0u ^ (0u))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, clamp(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), 1u * (uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)))) : _GLF_FUZZED(51323u)))) + 0u)), _GLF_struct_replacement_19._f2._f2.subgroup_local_id)), clamp(_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, clamp(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), 1u * (uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)))) : _GLF_FUZZED(51323u)))) + 0u)), _GLF_struct_replacement_19._f2._f2.subgroup_local_id)), _GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, clamp(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), 1u * (uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)))) : _GLF_FUZZED(51323u)))) + 0u)), _GLF_struct_replacement_19._f2._f2.subgroup_local_id)), _GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, clamp(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)), 1u * (uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u)))))), (uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, min(_GLF_struct_replacement_19._f2._f2.subgroup_local_id, _GLF_struct_replacement_19._f2._f2.subgroup_local_id))) * 1u, ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id) * 1u) >> _GLF_IDENTITY(0u, uint(uint(0u))))))) >> 0u)))) : _GLF_FUZZED(51323u)))) + 0u)), _GLF_struct_replacement_19._f2._f2.subgroup_local_id))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_28._f4.subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_28._f4.subgroup_size, ~ (~ (subgroup_id * _GLF_struct_replacement_28._f4.subgroup_size)))))) + ((_GLF_struct_replacement_19._f2._f2.subgroup_local_id + 1) % _GLF_struct_replacement_28._f4.subgroup_size);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || false)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 ^ 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(_injected_loop_counter)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)) && true)))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true, true), bvec3(bvec4(bvec3(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true, true), true)))))) && true)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 return;
                }
               else
                {
                }
              }
             return;
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_struct_replacement_19._f2._f2.subgroup_local_id + 1 < _GLF_struct_replacement_28._f4.subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-4.4, 87.95)))))).x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(mat3x4(1.0), _GLF_struct_2(_GLF_struct_0(bvec2(true), bvec2(true), mat2x4(1.0), ivec4(1)), mat4x2(1.0), _GLF_struct_1(0, mat3x4(1.0)), bvec4(true)), _GLF_struct_8(mat3(1.0), 1.0, _GLF_struct_3(1, mat3(1.0), uvec4(1u), ivec4(1), bvec4(_GLF_IDENTITY(true, bool(bool(true)))), bvec2(true)), _GLF_struct_4(_GLF_IDENTITY(uvec3(1u), max(uvec3(1u), uvec3(1u))), mat3x2(1.0), bvec2(true)), _GLF_struct_5(mat2x3(1.0), uvec3(1u), _GLF_IDENTITY(ivec3(1), (ivec3(1)) - (ivec3(0, 0, 0) ^ ivec3(0, 0, 0))), mat3(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0)))), uvec3(1u)), _GLF_struct_6(bvec3(true), ivec3(1), mat2(1.0)), _GLF_struct_7(bvec3(true), mat4(1.0))), _GLF_struct_10(_GLF_struct_9(bvec3(true), mat3x4(1.0))));
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), ((0 >> _GLF_IDENTITY(int(6), int(6)))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))))), injectionSwitch.x)), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0))) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y)))), ! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)))), (false ? _GLF_FUZZED(mat3x4(6.4, 8145.4481, -42.15, -6.0, -663.989, -3.6, 2321.5613, 3.2, 6.5, -7135.5413, -66.46, -4.6)) : mat3x4((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))))), vec2(mat4(vec2(_GLF_IDENTITY(mat3x4((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)))), (false ? _GLF_FUZZED(mat3x4(6.4, 8145.4481, -42.15, -6.0, -663.989, -3.6, 2321.5613, 3.2, 6.5, -7135.5413, -66.46, -4.6)) : mat3x4((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))[0]) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), (injectionSwitch)[_GLF_IDENTITY(1, 0 + (1))]), bvec2(true, true))).y)))))))))), bool(bvec2(! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), bvec2(true, true))).y)))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), min(((injectionSwitch)[0]), _GLF_IDENTITY(((injectionSwitch)[0]), (_GLF_IDENTITY(((injectionSwitch)[0]), min(((injectionSwitch)[0]), ((injectionSwitch)[0])))) - 0.0))) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), min(((injectionSwitch)[0]), _GLF_IDENTITY(((injectionSwitch)[0]), (_GLF_IDENTITY(((injectionSwitch)[0]), min(((injectionSwitch)[0]), ((injectionSwitch)[0])))) - 0.0))) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y)))), bool(bvec3(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), min(((injectionSwitch)[0]), _GLF_IDENTITY(((injectionSwitch)[0]), (_GLF_IDENTITY(((injectionSwitch)[0]), min(((injectionSwitch)[0]), ((injectionSwitch)[0])))) - 0.0))) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y)))), false, true)))))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(888.514), _GLF_FUZZED(-58.68)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED((90.04))), bool(false)))) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y)))))))))), false)))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
