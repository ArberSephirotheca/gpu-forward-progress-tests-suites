#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 65:
     {
     }
     case 0:
     case 76:
     case 58:
     case 57:
     case 60:
     case 96:
     int i = 0;
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 11:
     (- ivec2(-49864, -76300));
     case 0:
     case 79:
     case 1:
     case 57:
     case 54:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     case 91:
     for(     (-4550.1271 + (+ mat4(5.0, -4978.0195, 716.599, 5.0, 5564.5509, 1.8, 0.4, 9.8, 3973.6534, 1.3, 37.54, -2.1, -3173.8135, 19.28, 50.03, 3.5)));
 (ivec3(-68585, 4647, -76542) != ivec3(-48757, -41300, -83972)); (ivec2(67882, 30299) - ivec2(-48844, 80850).g))
      {
       if(true)
        {
         do
          {
           bvec4 _GLF_SWITCH_1_0v;
           ivec3 _GLF_SWITCH_1_1v;
           clamp(vec4(-8.9, -4.2, 78.75, 2.7), -3021.8594, -5899.4016);
           mat2x3(-9.3, 0.5, 9.3, -392.940, -971.784, -365.147);
           uvec4 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v;
           float _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v;
          }
         while(false);
         ;
         do
          {
          }
         while(true);
         mat3 _GLF_SWITCH_1_6v, _GLF_SWITCH_1_7v;
         (ivec3(-11195, -74570, -47994) ^ 58914);
         bool _GLF_SWITCH_1_8v;
        }
       mat2(-80.52, -2.6, 69.89, 8865.6401);
       mat4(mat2x4(81.24, 5.8, 37.24, 618.671, -3.1, -6160.4639, -66.35, -8651.1302));
       int _GLF_SWITCH_1_9v[62], _GLF_SWITCH_1_10v;
       bvec2(false, false);
       bool _GLF_SWITCH_1_11v[70], _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v;
       mat3x4 _GLF_SWITCH_1_14v;
      }
     case 96:
     mat4x2 _GLF_SWITCH_1_15v[97];
     default:
     1;
    }
  }
}
