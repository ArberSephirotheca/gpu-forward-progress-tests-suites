#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 mat4 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_2 {
 float _f0;
 bvec4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 float _f1;
 vec3 _f2;
 int i;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 _GLF_struct_0 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
 vec4 _f2;
 _GLF_struct_5 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   do
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))), int(int(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), false))))))))), true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), false))))))))), true, true, true)), (bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), false))))))))), true, true, true))) && true)))))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, _GLF_IDENTITY(true, ! (! (true))), false)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || (true)), false)))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))))
        return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupID), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) + (_GLF_IDENTITY(~ (gl_WorkGroupID), max(~ (gl_WorkGroupID), ~ (gl_WorkGroupID))))), (true ? ~ _GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | _GLF_IDENTITY(((gl_WorkGroupID)), clamp(((gl_WorkGroupID)), ((gl_WorkGroupID)), ((gl_WorkGroupID)))))) * uvec3(1u, 1u, 1u)) : _GLF_FUZZED(uvec3(153297u, 92383u, 133379u)))))).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id) | 0u, min(_GLF_IDENTITY((workgroup_size * workgroup_id), (_GLF_IDENTITY((workgroup_size * workgroup_id), max(_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | ((workgroup_size * workgroup_id))), (workgroup_size * workgroup_id)))) << 0u) | 0u, (workgroup_size * workgroup_id) | 0u))), _GLF_IDENTITY(1u, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) | (1u))), ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) | (1u)))) << _GLF_IDENTITY(0u, 0u ^ (0u)))), 0u)));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) || false), true, false, true)))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, clamp((subgroup_id) - 0u, (subgroup_id) - 0u, _GLF_IDENTITY((subgroup_id) - 0u, uint(uvec3((subgroup_id) - 0u, 1u, 1u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u))) - 0u) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))) ^ 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u))) - 0u) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))) ^ 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)))) + 0u)))) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))) ^ 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - _GLF_IDENTITY(0u, (0u) * 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)))) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))))) ^ 0u)))), max(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u))), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))) ^ 0u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), (_GLF_IDENTITY(true ? subgroup_id : _GLF_FUZZED(workgroup_size), uint(uvec3(_GLF_IDENTITY(true ? subgroup_id : _GLF_FUZZED(workgroup_size), (true ? true ? subgroup_id : _GLF_FUZZED(workgroup_size) : _GLF_FUZZED(subgroup_id))), 1u, 1u))))), (subgroup_id) - 0u)) / 1u)), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))), 0u + (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))), uint(uvec2((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))), 0u))))) ^ 0u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), 0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_size))), (subgroup_id) - 0u)) / 1u)), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u))))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) / 1u)))))))) >> 0u) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(167987u, 146705u, 132463u)[1]) : _GLF_IDENTITY(0u, (0u) >> 0u)))))))) + 0u)))), subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), cos(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), sqrt(0.0))))) - 0.0), _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.83)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(0.0, 1.0)), min(float(vec2(0.0, 1.0)), _GLF_IDENTITY(float(vec2(0.0, 1.0)), (false ? _GLF_FUZZED(sign(-2.8)) : float(vec2(0.0, 1.0)))))), min(float(vec2(0.0, 1.0)), float(vec2(0.0, 1.0))))), 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(54.45)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2808.0354)), float(1.0), bool(true)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(703.288))))), abs(0.0), 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), 1.0)), 1.0 * (float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))))) < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, abs(1.0)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         do
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))), 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))).x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))), (true ? vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))) : _GLF_FUZZED(vec2(7.1, -8.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))), (true ? vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))) : _GLF_FUZZED(vec2(7.1, -8.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y), float(_GLF_FUZZED(vec2(-2.6, -7362.7674).t)), bool(false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))), (true ? vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, (1.0) - 0.0), sqrt(0.0), 1.0, sin(0.0))) : _GLF_FUZZED(vec2(7.1, -8.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))), (true ? vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))) : _GLF_FUZZED(vec2(7.1, -8.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)) || false), false)), ! (! (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))), (true ? vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), min(normalize(vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), vec3(1.0, 1.0, 1.0) * (normalize(vec3(1.0, 1.0, 1.0)))))))), 1.0, sqrt(0.0), 1.0, sin(0.0))) : _GLF_FUZZED(vec2(7.1, -8.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))), (true ? vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0))), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 1.0, sin(0.0))) : _GLF_FUZZED(vec2(7.1, -8.0))))), injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(injectionSwitch, injectionSwitch)))).y)) || false), false)))))), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), true))))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).y))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), false || (bool(bool(_GLF_IDENTITY(false, (false) && true))))))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (89604 & int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
                        return;
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false))));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, injectionSwitch.x)), min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))) / 1.0))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) && true))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (25776 & 0)); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), true))), false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY((subgroup_size) * 1u, min((subgroup_size) * 1u, (subgroup_size) * 1u))), 0u, 0u, 0u)), max(uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, clamp(_GLF_IDENTITY((subgroup_size) * 1u, ((subgroup_size) * 1u) * 1u), (subgroup_size) * 1u, _GLF_IDENTITY((subgroup_size) * 1u, ((subgroup_size) * 1u) / 1u))), (subgroup_size) * 1u)), (_GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, clamp(_GLF_IDENTITY((subgroup_size) * 1u, ((subgroup_size) * 1u) * 1u), (subgroup_size) * 1u, _GLF_IDENTITY((subgroup_size) * 1u, ((subgroup_size) * 1u) / _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))))), (subgroup_size) * 1u))) << 0u)), 0u, 0u, 0u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min((subgroup_size) * 1u, (subgroup_size) * 1u))), 0u, 0u, 0u)), max(uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min((subgroup_size) * 1u, (subgroup_size) * _GLF_IDENTITY(1u, (1u) | (1u))))), 0u, 0u, 0u)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (_GLF_IDENTITY(~ ((subgroup_size) * 1u), (~ ((subgroup_size) * 1u)) << 0u))), (subgroup_size) * _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (~ (_GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))), max(~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))), _GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))), (~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))))) ^ 0u))))) * 1u))), (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))))) * 1u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (~ ((subgroup_size) * 1u))), (subgroup_size) * 1u))), max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (_GLF_IDENTITY(~ ((subgroup_size) * 1u), 0u | (~ ((subgroup_size) * 1u))))), (subgroup_size) * 1u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (~ ((subgroup_size) * 1u))), (subgroup_size) * 1u))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (~ ((subgroup_size) * 1u))), (subgroup_size) * 1u)))) ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (~ ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) * 1u))), (subgroup_size) * 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (~ ((subgroup_size) * 1u))), (subgroup_size) * 1u)))), (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, min(_GLF_IDENTITY((subgroup_size) * 1u, ~ (~ ((subgroup_size) * 1u))), (subgroup_size) * 1u))))) | 0u))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u)))))))) ^ 0u) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) ^ 0u)))) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), 0u + ((subgroup_local_id + 1))) % subgroup_size), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) / 1u)))) % subgroup_size))))) << 0u);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, 1 * (3)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(3, 1 * (3))), (~ (_GLF_IDENTITY(3, 1 * (3)))) + 0)))), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(ivec3(_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), ~ (~ (~ (3)))))), _GLF_IDENTITY(1, 0 + (1)), 0)))), (int(_GLF_IDENTITY(3, int(ivec3(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), ~ (~ (~ (~ (3)))))), 1, 0))))) - 0), (int(3)) >> 0))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (1 | 0), 1, 1)), min(int(ivec4(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (1 | 0), 1, 1)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) / (0 ^ 1)), _injected_loop_counter, _injected_loop_counter)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))))))), (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(1, 1)))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) >> 0)), 1, 1))))) > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), mix(float(_GLF_FUZZED(351.491)), float(clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), bool(true))))), false, false)), true && (bool(bvec3(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))), _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x)), false, false)))))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))) || (_GLF_DEAD(false))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   break;
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_FUZZED(findMSB(_GLF_IDENTITY(bitfieldExtract(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter))), min(bitfieldExtract(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), bitfieldExtract(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))) : 4, ~ (~ (false ? _GLF_FUZZED(findMSB(_GLF_IDENTITY(bitfieldExtract(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter))), min(bitfieldExtract(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), bitfieldExtract(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))) : 4))))), _GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), ~ (~ (64))), 4);
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  return;
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(false, ! (! (false)))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, exp(0.0)))).x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))))))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false))))) || false), true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false))))) || false), true))))), false, false), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false))))) || false), true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false))))) || false), true))))), false, false), true))))))))) || false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 & 79626); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(1.8, 44.80)), max(_GLF_IDENTITY(_GLF_FUZZED(vec2(1.8, 44.80)), min(_GLF_FUZZED(vec2(1.8, 44.80)), _GLF_FUZZED(vec2(1.8, 44.80)))), _GLF_FUZZED(vec2(1.8, 44.80)))) : injectionSwitch)).y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> (1u ^ 1u)) < subgroup_size)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_1(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)), _GLF_struct_0(uvec3(1u), _GLF_IDENTITY(1.0, (1.0) + determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), vec3(1.0), 0), vec4(1.0)), _GLF_struct_3(_GLF_struct_2(1.0, bvec4(true), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) + 0.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(37.39)), (float(_GLF_FUZZED(37.39))) / 1.0), bool(false)))))), _GLF_IDENTITY(max((1.0), (1.0)), min(_GLF_IDENTITY(max((1.0), (1.0)), max(max((1.0), (1.0)), max((1.0), (1.0)))), _GLF_IDENTITY(max((1.0), (1.0)), (_GLF_IDENTITY(max((1.0), (1.0)), mix(float(max((1.0), (1.0))), float(_GLF_FUZZED(5.0)), bool(false)))) / 1.0)))) * 1.0)), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0), (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)) / abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0), float(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0), 0.0, 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_IDENTITY(_GLF_FUZZED(-1518.0489), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-1518.0489), (false ? _GLF_FUZZED(8541.9780) : _GLF_FUZZED(-1518.0489)))))), (false ? _GLF_FUZZED((- _GLF_IDENTITY(-8.3, (-8.3) / 1.0))) : (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_IDENTITY(_GLF_FUZZED(-1518.0489), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-1518.0489), (false ? _GLF_FUZZED(8541.9780) : _GLF_FUZZED(-1518.0489)))))))))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), 0.0, 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, cos(0.0), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, 1.0)))), min(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(379.461))) : _GLF_FUZZED(-3.6))), 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max(_GLF_IDENTITY((1.0), min((1.0), (1.0))), (1.0))) * 1.0), max(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), (false ? _GLF_FUZZED(-81.50) : (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))))))) * 1.0), clamp((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) * 1.0), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)))), 0.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), 0.0, 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), 0.0, 1.0, 1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, abs(0.0), 0.0))), 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-47.94)), bool(false))), 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0), (false ? _GLF_FUZZED(2721.5427) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-61.86)), bool(false))))), 1.0)), _GLF_IDENTITY((1.0), _GLF_IDENTITY(max((_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(dot(acosh(vec3(-5.5, -1.3, -5.4)), vec3(-9196.9198, -8.1, 95.51))) : 1.0))), (1.0)), (max((1.0), (1.0))) - 0.0)) * 1.0)))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((0.1 / 1945.3371))), float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-60.97)), bool(false)))), bool(true)))) - 0.0), 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(dot(vec2(2458.1839, -8.8), cosh(vec2(-272.021, -70.20))))))), mix(float(_GLF_FUZZED((-8634.1535))), float((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(dot(vec2(2458.1839, -8.8), cosh(vec2(-272.021, -70.20)))))))), bool(true))), max((1.0), (1.0))) * 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), min(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))) ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), min(max((1.0), (1.0)), max((1.0), (1.0))))) * _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec4(1.0, round(length(normalize(1.0))), 0.0, 1.0))))))), 0.0, 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) - 0.0), 0.0, 0.0)), (false ? _GLF_FUZZED(-24.45) : _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) - 0.0), 0.0, 0.0)), (true ? float(vec3(_GLF_IDENTITY(float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) - 0.0), 0.0, 0.0)) : _GLF_FUZZED(-5543.7564))))))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), 0.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), 0.0, 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 1.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))) / _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1869.0060)), bool(false))), (false ? _GLF_FUZZED(-7792.5516) : 1.0)), _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / abs(1.0)))))))))) * 1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489))), mix(float(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))), float(_GLF_FUZZED(0.4)), bool(false))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-1518.0489)))))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), _GLF_IDENTITY(float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) / 1.0))), clamp(_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), _GLF_IDENTITY(float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) / 1.0))), _GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), _GLF_IDENTITY(float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), _GLF_IDENTITY(float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) / 1.0))), (_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), _GLF_IDENTITY(float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(vec4(max((1.0), (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) / 1.0)))) / 1.0))) * 1.0))))))), vec4(1.0), _GLF_struct_5(_GLF_struct_4(mat4(1.0))));
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
                  continue;
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), true, true)), (bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true, _GLF_IDENTITY(true, ! (! (true)))))) || false))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (false) && true), false), true, false))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, false, true)))), false || ((! (_GLF_DEAD(false))))) || false))))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, false), false))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, false), false)), true))), true, false))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(-48637))) < 1), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4(65.45, 8.2, 547.050, -70.52, -6.9, 2940.7608, -948.929, -141.174, 12.30, 401.165, 792.147, 1510.0260, 960.392, -9.4, 69.26, 59.68)) : mat4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))), min(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))))))), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))), 0.0, 1.0, abs(0.0), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), (_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(5.2)), bool(false)))) - 0.0), 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0))).x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), ! (! (_GLF_IDENTITY(true, (true) || false))))))), false, false))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(float(68318)), _GLF_FUZZED(2887.4782)), bvec2(false, false)))).x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-402.181))), injectionSwitch.y)), injectionSwitch.y))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) || false)) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) || false)) || false))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) || false)) || false)))) || false)))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.8), _GLF_FUZZED(-467.429)), bvec2(false, false))).x > injectionSwitch.y)), false, true))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), true)), true))))))))))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -3724.1235)) : injectionSwitch)).y))))
                  return;
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (_injected_loop_counter ++)))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (0 & 28089))))); _injected_loop_counter ++)
                  {
                   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, max(2, 2)), 2))), 4, 64, _GLF_IDENTITY(4, (4) / _GLF_IDENTITY(1, (1) | (1))));
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(95.49), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-90.32)), bvec2(true, false))).y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                    break;
                   break;
                  }
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           continue;
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))), true && (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true && (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))))))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))) || false), (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) && true) && (true))))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), false)), bool(bvec2(bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), false)), true))))) && true))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch.x : _GLF_FUZZED(1.1))) > injectionSwitch.y)) || (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2287.6374)), float(injectionSwitch.y), bool(true)))))) || false)) && true), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-68.71)), _GLF_IDENTITY(vec2(_GLF_FUZZED(486.586), ((injectionSwitch) * mat2(1.0))[1]), clamp(vec2(_GLF_FUZZED(486.586), ((injectionSwitch) * mat2(1.0))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(486.586), ((injectionSwitch) * mat2(1.0))[1]), (_GLF_IDENTITY(vec2(_GLF_FUZZED(486.586), ((injectionSwitch) * mat2(1.0))[1]), vec2(mat2x4(vec2(_GLF_FUZZED(486.586), ((injectionSwitch) * mat2(1.0))[1]), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) / abs(vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(_GLF_FUZZED(486.586), ((injectionSwitch) * mat2(1.0))[1]), vec2(mat3x4(vec2(_GLF_FUZZED(486.586), ((injectionSwitch) * mat2(1.0))[1]), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))), bvec2(false, true)))).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
    return;
  }
}
