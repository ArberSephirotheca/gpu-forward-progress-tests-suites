#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat4x3 _f0;
 bvec4 _f1;
 bvec2 _f2;
 vec4 _f3;
 bvec2 _f4;
 uint subgroup_size;
} ;

struct _GLF_struct_1 {
 bool _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 _GLF_struct_1 _f1;
 vec4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat4(1.0), _GLF_struct_1(true, _GLF_struct_0(mat4x3(1.0), bvec4(true), bvec2(true), vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2634.4914) : 1.0))), bvec2(true), gl_SubgroupSize)), vec4(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_2._f1._f1.subgroup_size;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y = subgroup_base;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base, max(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base, ~ (~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base))))).y + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y + ((subgroup_local_id + 1) % _GLF_struct_replacement_2._f1._f1.subgroup_size);
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.x = next_virtual_gid;
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if((subgroup_local_id % 2) == 0)
    {
     atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.x], uint(2), 4, 64, 4);
    }
   else
    {
     atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.x], uint(2), 4, 64, 4);
    }
  }
}
