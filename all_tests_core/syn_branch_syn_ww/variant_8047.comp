#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(919.384)), bool(false))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)))), 1.0, 0.0, exp(0.0)), clamp(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)))), 1.0, 0.0, exp(0.0)), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)))), 1.0, 0.0, exp(0.0)), _GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)))), 1.0, 0.0, exp(0.0)), (vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.0549) : injectionSwitch.y)))), 1.0, 0.0, exp(0.0))) - vec4(0.0, 0.0, 0.0, 0.0)))))))))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, true, true))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, 0.2)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -85391)); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(872.280)))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, 0u, 1u)), min(uint(uvec4(subgroup_size, 0u, 0u, 1u)), uint(uvec4(subgroup_size, 0u, 0u, 1u)))))) | (subgroup_size)), (subgroup_size) | 0u)) - (1u ^ 1u));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, 0u ^ (workgroup_base + subgroup_base)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u))) + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + 0u)) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), true, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, sqrt(0.0), 0.0, sqrt(1.0)))).x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), false)))) || false))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))), (_GLF_IDENTITY(false, true && (false))) || false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
   if((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))))), (subgroup_local_id) - 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))))), min(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)))))))) ^ (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (subgroup_local_id) - 0u))))))) | (subgroup_local_id)) % 2) == 0)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) > injectionSwitch.y)), true))))))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))
          return;
         do
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), 0u ^ (_GLF_IDENTITY(uint(2), max(uint(2), uint(2))))), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           do
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, false))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false, false, false))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, true && (false)))), ! (! (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, true && (false)))), ! (! (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), _GLF_IDENTITY(true, (true) && true), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, true && (false)))), ! (! (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), _GLF_IDENTITY(true, (true) && true), false)))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))) && true)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       return;
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         return;
                        }
                      }
                     else
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6918.3368), _GLF_FUZZED(vec2(3614.1202, 6.4).s)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1)), (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-35552) : 1, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-35552) : 1) | 0)))))) | (0 << _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             return;
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || false)))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
                          return;
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 1))) != (1 | 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(acosh(68.79)) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, clamp(1, 1, 1)) & 1)); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((464.301 + 9.1)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.6)), bvec2(true, false))).x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.8)), float(0.0), bool(true))) : _GLF_FUZZED(-5.9))))), injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), (~ (int(2))) >> 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))) >> 0)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))), max((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | 0))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-76178) : int(2))), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(0, (-50766 & 0) | (0)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 0 | (0)) : _GLF_FUZZED(_injected_loop_counter))) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 0, 1))))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 0), ivec4(0, 0, 0, 0) + (ivec4(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 0))))), _GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), max((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED((_injected_loop_counter)) : int(2)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((+ -99603)) : _GLF_IDENTITY(2, int(ivec3(2, 0, 0)))))), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), max((int(2)), (int(2)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2), int(2))), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec2(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2), int(2))), int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0)), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) - (0 | 0))), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(15.47)), vec2(_GLF_FUZZED(3.5), (injectionSwitch)[1]), bvec2(false, true))).x)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ~ (~ ((_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))) | _GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), clamp(_GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0)))), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (2) * 1))) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 0, 1)))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) - 0), 2, _GLF_IDENTITY(2, (2) | 0)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)) ^ (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (-35294 & 0), 1, 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (2) / int(_GLF_ONE(1.0, injectionSwitch.y))))) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0))), injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.0))))))))))) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0)) >> 0))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), _GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), (1 ^ 0) * ((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), injectionSwitch.x))))))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 | (int(2))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (min(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (min(_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | 0), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 0, 1))))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))) ^ 0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))).x)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(ivec4(_GLF_IDENTITY((int(2)), 0 ^ ((int(2)))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), min(_GLF_IDENTITY(max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), clamp(max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), _GLF_IDENTITY(max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) + 0)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) << 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 0, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY(0, (0) | (0))) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, int(ivec3(2, 1, 0))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.5)), vec2(_GLF_FUZZED(-55.50), (injectionSwitch)[1]), bvec2(false, true))).x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))) | 0))), 0 ^ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(91400) : 2))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(2), (int(2)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 0, 1)))))) << 0)) ^ 0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) & 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ -3.0))), bool(false))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ -3.0))), bool(false))), _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) + 0.0))))))) & 1)), false, true, false))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, 0 + (64)), 4);
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         break;
                        }
                       continue;
                      }
                     continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y))));
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  {
                   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), cos(0.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, tan(0.0), 1.0, 0.0), (true ? mat3x2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), cos(0.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, tan(0.0), 1.0, 0.0) : _GLF_FUZZED(mat3x2(40.71, -12.03, -7485.2019, -709.586, -8.3, -33.50)))))), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec2(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), true)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          break;
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
