#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 uint _f0;
 mat4x3 _f1;
 uvec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_5 {
 bool _f0;
 uint subgroup_base;
 _GLF_struct_4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 uvec3 _f1;
 uvec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 mat3x4 _f1;
 ivec2 _f2;
 mat4x2 _f3;
 ivec2 _f4;
 _GLF_struct_1 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 ivec4 _f1;
 vec2 _f2;
 vec2 _f3;
 float _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_3 {
 uint workgroup_base;
 _GLF_struct_0 _f0;
 _GLF_struct_2 _f1;
 int _f2;
 mat3x4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(workgroup_size * workgroup_id, _GLF_struct_0(mat2(1.0), ivec4(1), vec2(1.0), vec2(1.0), 1.0, mat2x3(1.0)), _GLF_struct_2(uvec3(1u), mat3x4(1.0), ivec2(1), mat4x2(1.0), ivec2(1), _GLF_struct_1(bvec3(true), uvec3(1u), uvec4(1u), bvec2(true)), ivec2(1)), 1, mat3x4(1.0));
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_5(true, subgroup_id * subgroup_size, _GLF_struct_4(1u, mat4x3(1.0), uvec2(1u), vec4(1.0)), mat4x3(1.0)));
 uint virtual_gid = _GLF_struct_replacement_3.workgroup_base + _GLF_struct_replacement_6._f0.subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_3.workgroup_base + _GLF_struct_replacement_6._f0.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if((subgroup_local_id % 2) == 0)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
