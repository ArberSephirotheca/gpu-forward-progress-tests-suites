#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -34096)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), 1.0, 0.0, tan(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), (float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))), (max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))) - determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0)))), 1.0, 0.0, tan(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))) / 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6.3), mix(float(_GLF_FUZZED(-8740.8040)), float(_GLF_FUZZED(-6.3)), bool(true)))), float(injectionSwitch[1]), bool(true))))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6680.1626)), vec2(_GLF_FUZZED(52.44), (injectionSwitch)[1]), bvec2(false, true))).y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6680.1626)), vec2(_GLF_FUZZED(52.44), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6680.1626)), vec2(_GLF_FUZZED(52.44), (injectionSwitch)[1]), bvec2(false, true))).y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6680.1626)), vec2(_GLF_FUZZED(52.44), (injectionSwitch)[1]), bvec2(false, true))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6680.1626)), vec2(_GLF_FUZZED(52.44), (injectionSwitch)[1]), bvec2(false, true))).y)) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6680.1626)), vec2(_GLF_FUZZED(52.44), (injectionSwitch)[1]), bvec2(false, true))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6680.1626)), vec2(_GLF_FUZZED(52.44), (injectionSwitch)[1]), bvec2(false, true))).y)) || false), true, false)))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), sin(vec2(0.0, 0.0)) + (mat2(1.0) * (injectionSwitch)))).y))))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-17.95))) < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || _GLF_IDENTITY((false || _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), false || (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true)))))), bool(bvec4((false || (false)), false, true, false)))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 0), (ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 0)) / ivec3(1, 1, 1)))), _GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(44090) : 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
        }
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, exp(0.0), exp(0.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, exp(0.0), exp(0.0)))).x : _GLF_FUZZED(3.4))) > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec2(! (_GLF_IDENTITY(true, false || (true))), false))))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (44992 & 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true), true)), false || (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true), true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), true))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! _GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_DEAD(false))) && true), (bool(((_GLF_DEAD(false))) && true)) || false))), false))))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_DEAD(false))) && true), (bool(((_GLF_DEAD(false))) && true)) || false))), false))))) || false)), false || ((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_DEAD(false))) && true), (bool(((_GLF_DEAD(false))) && true)) || false))), false))))) || false))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_DEAD(false))) && true), (bool(((_GLF_DEAD(false))) && true)) || false))), false))))) || false)), false || ((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_DEAD(false))) && true), (bool(((_GLF_DEAD(false))) && true)) || false))), false))))) || false)))))), ! (! (bool(! (_GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_DEAD(false))) && true), (bool(((_GLF_DEAD(false))) && true)) || false))), false))))) || false)), false || ((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY(((_GLF_DEAD(false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_DEAD(false))) && true), (bool(((_GLF_DEAD(false))) && true)) || false))), false))))) || false)))))))))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((int((_GLF_IDENTITY(false ? false : true, (false ? false : true) && true))) & 0), ((int((_GLF_IDENTITY(false ? false : true, (false ? false : true) && true))) & 0)) | ((int((_GLF_IDENTITY(false ? false : true, (false ? false : true) && true))) & 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (_GLF_IDENTITY(4, max(4, 4))))), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), int(3))) >> _GLF_IDENTITY(int(3), int(3))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (_GLF_IDENTITY(4, max(4, 4))))), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
          {
           return;
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(asinh(acos(vec2(-9.5, 3.7)))))).x, float(float(injectionSwitch.x))) : _GLF_FUZZED(5349.0054))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3728.9928)), bool(false))))), (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3728.9928)), bool(false)))))) && true), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true)), bool(bvec4(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) && true), false, true, true)))))));
 for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))) ^ 0), max(0, 0))))), (false ? _GLF_FUZZED(15835) : (0 ^ _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, max(0, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(56680) : _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec3(int(3), 1, 1))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       barrier();
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-9479)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-9479))) / 1)), (_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-9479)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-9479))) / 1))) || false)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))), true)))))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5689.9040)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))) > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false)))))))))
          continue;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(13960u, clamp(13960u, 13960u, _GLF_IDENTITY(13960u, min(13960u, 13960u))))) : _GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), true))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u)) / 1u) + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (~ ((subgroup_local_id + 1))) | (~ ((subgroup_local_id + 1)))))))) % subgroup_size), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u), workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) / 1u, clamp(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) / 1u, (true ? (((subgroup_local_id + 1) % subgroup_size)) / 1u : _GLF_FUZZED(workgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u, (((subgroup_local_id + 1) % subgroup_size)) / 1u)))))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), max(clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u), workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) / 1u, clamp(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) / 1u, (true ? (((subgroup_local_id + 1) % subgroup_size)) / 1u : _GLF_FUZZED(workgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u, (((subgroup_local_id + 1) % subgroup_size)) / 1u)))))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u), workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) / 1u, clamp(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) / 1u, (true ? (((subgroup_local_id + 1) % subgroup_size)) / 1u : _GLF_FUZZED(workgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u, (((subgroup_local_id + 1) % subgroup_size)) / 1u)))))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u)))))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), min((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : ((subgroup_local_id + 1) % subgroup_size))) - 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) / ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)))), clamp((_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u)))))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), min((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : ((subgroup_local_id + 1) % subgroup_size))) - 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) / ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)))), (_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u)))))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), min((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : ((subgroup_local_id + 1) % subgroup_size))) - 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) / ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u)))))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), min((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : ((subgroup_local_id + 1) % subgroup_size))) - 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) / ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)))), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u)))))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), clamp(uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)), uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, _GLF_IDENTITY(0u, (0u ^ 0u) | (0u))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), min((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : ((subgroup_local_id + 1) % subgroup_size))) - 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) / ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)))))))) | (_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (-22825 & (0 << _GLF_IDENTITY(int(2), int(2))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (-22825 & (0 << _GLF_IDENTITY(int(2), int(2))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (-22825 & (0 << _GLF_IDENTITY(int(2), int(2))))), true, false, false))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY(1, (1) / (1 & 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (true ? _GLF_IDENTITY(1, (1) << 0) : _GLF_FUZZED(52203))), _GLF_IDENTITY((1) ^ 0, (_GLF_IDENTITY((1) ^ 0, clamp((1) ^ 0, (1) ^ 0, (1) ^ 0))) >> 0))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u)), (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u)), min(uint(uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u)), uint(uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u))))) | (uint(uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) + 0u), uint(4u))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (1) ^ 0)))))), _GLF_IDENTITY(4, (4) ^ (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2))))))), _GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(26633, 48255), (ivec2(_GLF_IDENTITY(26633, clamp(26633, 26633, 26633)), 48255)) | (ivec2(26633, 48255))), ivec2(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-89979) : 0))) | (ivec2(26633, 48255))).t), min(true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(26633, 48255), (ivec2(26633, 48255)) | (ivec2(26633, 48255))), ivec2(0, 0) | (ivec2(26633, 48255))).t), true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(26633, _GLF_IDENTITY(48255, min(_GLF_IDENTITY(48255, max(48255, 48255)), 48255))), (ivec2(26633, 48255)) | (ivec2(26633, 48255))), ivec2(0, 0) | (ivec2(26633, 48255))).t))))), 4);
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && (false)), true, true))))))) || false)));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)), _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base))))) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), min(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (subgroup_local_id % 2)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(workgroup_base, (1u | 0u), 1u, 0u)), (uint(uvec4(workgroup_base, (1u | 0u), 1u, 0u))) | (uint(uvec4(workgroup_base, (1u | 0u), 1u, 0u)))))) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), ~ (~ (_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), clamp(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), (_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))) ^ 0u), _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))))))), (_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))))) + 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)))) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), (_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))))) + 0u)), ~ (~ (min(_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, min((workgroup_base) | 0u, _GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) | 0u))))))) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) * 1), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))))) + 0u, uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))))) + 0u, 1u), (uvec2((_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))))) + 0u, 1u)) - uvec2(0u, 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) % 2, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(workgroup_size))) % 2, max(subgroup_local_id % _GLF_IDENTITY(2, (2) ^ 0), subgroup_local_id % 2)))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, 1u * (subgroup_local_id % 2)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4117) : 2))) ^ 0), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(max(subgroup_local_id % 2, subgroup_local_id % 2), (max(subgroup_local_id % 2, subgroup_local_id % 2)) ^ 0u)))), (_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))))) + 0u)))))) == 0)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), ! (! (_GLF_DEAD(false)))))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)), false || (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), true && ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)), false || (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))))), (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), false || (! (! (_GLF_DEAD(false))))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))))))))) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), true && (false)), false)))) && true))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true)), (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true))) && true))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) - 0) & 1)), true, true)))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true))))), false || ((bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), true, true))))))))))) && true)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           return;
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         do
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), ! (! (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))), (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), ! (! (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))))) || false)))));
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(29836) : ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), clamp(0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), 0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), 0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))))), (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), clamp(0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), 0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), 0u ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))) >> 0u))], uint(2), 4, 64, 4);
          }
         else
          {
          }
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), true, true, true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))));
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, bool(bool(true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-403.203)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = (0 & 95640); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(0 | (1), min(0 | (1), 0 | (1)))) | (0 << _GLF_IDENTITY(int(7), int(7))))), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(0 | (1), min(0 | (1), 0 | (1)))) | (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(0 | (1), min(0 | (1), 0 | (1)))) | (0 << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(0 | (1), min(0 | (1), 0 | (1)))) | (0 << _GLF_IDENTITY(int(7), int(7)))))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                  }
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) / 1)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && _GLF_IDENTITY(true, false || (true)))))
                  return;
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(32242) : _GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) - (1 ^ 1)))) ^ (_injected_loop_counter)), (0 | 0), 1), _GLF_IDENTITY((true ? _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), (0 | 0), 1), min(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) ^ 0)), (0 | 0), 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) : _GLF_FUZZED(92452))), (0 | 0), 1))) : _GLF_FUZZED(ivec3(20161, -95222, _GLF_IDENTITY(-97949, (false ? _GLF_FUZZED(94486) : -97949))))), ivec3(0, 0, 0) | ((true ? _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), (0 | 0), 1), min(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) ^ 0)), (0 | 0), 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) : _GLF_FUZZED(92452))), (0 | 0), 1))) : _GLF_FUZZED(ivec3(20161, -95222, _GLF_IDENTITY(-97949, (false ? _GLF_FUZZED(94486) : -97949)))))))))))) < ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (true ? 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), int(5)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5)))), clamp((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5))))))) : _GLF_FUZZED(-80824))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (true ? 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), int(5)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5)))), clamp((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), (true ? _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | 0))), min((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), ~ (~ (int(_GLF_IDENTITY(5, (5) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (true ? int(_GLF_IDENTITY(5, (5) | 0)) : _GLF_FUZZED(_injected_loop_counter)))), min((int(_GLF_IDENTITY(5, (5) | 0))), (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), clamp((5), (5), (5))) | 0))))))) : _GLF_FUZZED(_injected_loop_counter))) | 0), int(5))))))) : _GLF_FUZZED(-80824)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-62.27)))))));
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, sqrt(abs(0.0))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), vec2(vec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), 0.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))) * vec2(1.0, 1.0))) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), true))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
}
