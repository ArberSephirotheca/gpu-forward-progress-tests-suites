#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), mix(float(dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(-4.0)), bool(false)))), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), abs(0.0), 0.0))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! (! (injectionSwitch.x > injectionSwitch.y)), false))))))))), false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))), (injectionSwitch.x > injectionSwitch.y)), false))))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false))))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0), mat3x2(mat4x3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))))), false, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0), mat3x2(mat4x3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec3(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0), mat3x2(mat4x3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))))), false, false)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0), mat3x2(mat4x3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec3(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0), mat3x2(mat4x3(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))))), false, false)))), false)), true))))))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) | (int(1))), int(1))), int(1))) ^ (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((true ? int(1) : _GLF_FUZZED(20774)), ((true ? int(1) : _GLF_FUZZED(20774))) | ((true ? int(1) : _GLF_FUZZED(20774))))))), ~ (~ (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(20774))))))))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(5.7) : (injectionSwitch)[0])), _GLF_FUZZED(-4670.8757)), vec2(_GLF_FUZZED(-2.3), (injectionSwitch)[1]), bvec2(false, true))).y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : subgroup_size), min((false ? _GLF_FUZZED(subgroup_id) : subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))))))) | (subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 0u | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), max((subgroup_size) | (subgroup_size), (subgroup_size) | (subgroup_size)))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))) : _GLF_FUZZED(step(vec2(0.4, 3.5), vec2(-7.5, 8.2))))).x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0)))), 0.0), (mat4x3(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(abs(1.0), 1.0, sqrt(0.0))), dot(vec3(0.0, 0.0, 1.0), vec3(abs(1.0), 1.0, sqrt(0.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4x2(1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 1.0), (mat4x2(1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0, 0.0, abs(0.0), 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), (length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * _GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))))), 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), (float(0.0)) / 1.0), float(_GLF_FUZZED(0.8)), bool(false))), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(0.0), (float(0.0)) / 1.0), float(_GLF_FUZZED(0.8)), bool(false)), float(mat4x3(mix(_GLF_IDENTITY(float(0.0), (float(0.0)) / 1.0), float(_GLF_FUZZED(0.8)), bool(false)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, exp(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0, sqrt(determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0))))) * 1.0), 0.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(329.948)), bool(false)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))) || false)))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), (~ (gl_NumWorkGroups)) / uvec3(1u, 1u, 1u)))), gl_NumWorkGroups)), (gl_NumWorkGroups) | _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups)))), (_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups))))) << (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)))) / uvec3(1u, 1u, 1u))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), (~ (gl_NumWorkGroups)) / uvec3(1u, 1u, 1u)))), gl_NumWorkGroups)), (gl_NumWorkGroups) | _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups)))), (_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups))))) / uvec3(_GLF_IDENTITY(1u, (1u) - 0u), 1u, 1u))).x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), (~ (gl_NumWorkGroups)) / uvec3(1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(176205u, 29032u, 3297u)))))), (gl_NumWorkGroups) | _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups)))), _GLF_IDENTITY((_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u), ((_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ ((gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)) - uvec3(0u, 0u, 0u)))).x)), (0u >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) | (5u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))) | ((gl_NumWorkGroups))) | (gl_NumWorkGroups)).x), min((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x), 1u * ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(58492u, 81372u, 196153u)))))).x))))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))) | (gl_NumWorkGroups)).x) - _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ (0u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, ~ (~ (3u))))))), max(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ (0u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, ~ (~ (3u))))))), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ (0u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, ~ (~ (3u)))))))))) - 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x) / 1u)));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(986.650) : injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, true))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              continue;
             barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))).x;
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id) >> 0u)) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, abs(1.0), 0.0, 1.0, sqrt(0.0), 0.0, 1.0, sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, length(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(4.9, 3762.9232, 86.74).t)), vec2(_GLF_FUZZED(4.1), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(false, true))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), true && (! ((false) || false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          barrier();
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), true, false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w), uint(uvec4(uint(workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w), 0u, (0u ^ 0u), 0u)))), (uint(_GLF_IDENTITY(uint(workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w), uint(uvec4(uint(workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.w), 0u, (0u ^ 0u), 0u))))) * 1u)) : _GLF_FUZZED(subgroup_local_id)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 1u))) * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)).y;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uint(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) << 0u, ((subgroup_base) << 0u) | ((subgroup_base) << 0u)))))), _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) * 1u))))) | (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << _GLF_IDENTITY(0u, (0u) >> 0u)))), clamp(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) >> 0u), uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u + (_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u), subgroup_base))))) << 0u))), clamp(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) >> 0u), uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), uint(uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))) << 0u)))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), max(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch)))))))).x > injectionSwitch.y), false, true))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), clamp(_GLF_IDENTITY((0) | (0), ((0) | (0)) | 0), _GLF_IDENTITY((0) | (0), min((0) | (0), (0) | (0))), (0) | (0)))) | _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) >> 0)) | (0)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0), (mat4x3(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0)) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(6.3) : float(_GLF_IDENTITY(mat4x3(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0), (mat4x3(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0)) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), injectionSwitch[1])).x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9809.4187)), bool(false)))))))
        return;
      }
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(270.786, 5339.8358)))).y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec2(false || (false), true), bvec2(bvec4(bvec2(false || (false), true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-97.78) : injectionSwitch.y))))))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), false))))))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid), _GLF_IDENTITY(((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid)), (((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid))) ^ 0u) ^ 0u) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) - (1u ^ 1u)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, 0u ^ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u)), ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u))))))), 1u * (_GLF_IDENTITY(0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))) + 0u, 0u | _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u)))), ((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u))))) ^ 0u)))), ~ (~ _GLF_IDENTITY((0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), clamp(virtual_gid, virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), virtual_gid))) + 0u, 0u | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid), ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid))))))) + 0u)))))))), (_GLF_IDENTITY((0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), clamp(virtual_gid, virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), virtual_gid))) + 0u, 0u | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid), ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid))))))) + 0u)))))))), ((0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), clamp(virtual_gid, virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), virtual_gid))) + 0u, 0u | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid), ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid))))))) + 0u))))))))) ^ (0u | 0u))) ^ 0u))))), ~ (~ (0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, 0u | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) + 0u, ~ (~ ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid) | 0u)) + 0u)))))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false))))), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false))))), true, false)), true, true))))) && true)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & 61948), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > (0 & 61948), false || (_injected_loop_counter > (0 & 61948))), false)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) ^ 0)))) & (_GLF_IDENTITY(-20496 % -85289, (-20496 % -85289) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) ^ 0))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(min(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) * 1u)), (min(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) * 1u))) / 1u)), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), (workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) - 0u), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), (workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | 0u), workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base))), ((_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base)))) | ((_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base))))) * 1u))) : _GLF_FUZZED(83814u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(min(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) * 1u)), (min(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) * 1u))) / 1u)), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u))), (workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) - 0u), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), (workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | 0u), workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base + subgroup_base)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base), uint(_GLF_IDENTITY(uvec2(clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base), 0u), (_GLF_IDENTITY(uvec2(clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base), 0u), (uvec2(clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base), 0u)) | (uvec2(clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base), 0u)))) << uvec2(0u, 0u))))))) | ((_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base))))) * 1u))) : _GLF_FUZZED(_GLF_IDENTITY(83814u, (83814u) >> 0u)))))) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))))) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.y, 0u))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x = next_virtual_gid, (_GLF_IDENTITY(0u, 0u | (0u)) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x = next_virtual_gid, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x = _GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid)))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), (true ? _GLF_IDENTITY(int(0), int(int(int(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, (0) << 0), 0)))))) : _GLF_FUZZED(89029))), (_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), int(int(int(_GLF_IDENTITY(0, 0 ^ (0)))))) : _GLF_IDENTITY(_GLF_FUZZED(89029), clamp(_GLF_FUZZED(89029), _GLF_FUZZED(89029), _GLF_FUZZED(89029)))))) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), int(int(int(0)))) : _GLF_FUZZED(89029)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-49008) : (_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), int(int(int(0)))) : _GLF_FUZZED(89029)))), 1 * (false ? _GLF_FUZZED(-49008) : (_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), int(int(int(0)))) : _GLF_FUZZED(89029)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(int(0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(int(0)))), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY(int(0), int(int(int(0)))))), _GLF_IDENTITY(int(0), int(int(int(0)))))) : _GLF_FUZZED(89029)))), (false ? _GLF_FUZZED(-49008) : (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | 0)), (true ? _GLF_IDENTITY(int(0), int(int(int(0)))) : _GLF_FUZZED(89029))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << 0), int(int(int(0)))) : _GLF_FUZZED(89029)))), (false ? _GLF_FUZZED(-49008) : (_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), int(int(int(0)))) : _GLF_FUZZED(89029)))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << 0), int(int(int(0)))) : _GLF_FUZZED(89029)))), (false ? _GLF_FUZZED(-49008) : (_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), int(int(int(0)))) : _GLF_FUZZED(89029)))))) : _GLF_FUZZED(15343)))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(max(~ (_injected_loop_counter), ~ (_injected_loop_counter)), ~ (_GLF_IDENTITY(~ (max(~ (_injected_loop_counter), ~ (_injected_loop_counter))), int(ivec2(~ (max(~ (_injected_loop_counter), ~ (_injected_loop_counter))), 1)))))), (_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(max(~ (_injected_loop_counter), ~ (_injected_loop_counter)), ~ (_GLF_IDENTITY(~ (max(~ (_injected_loop_counter), ~ (_injected_loop_counter))), int(ivec2(~ (max(~ (_injected_loop_counter), ~ (_injected_loop_counter))), 1))))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))) > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id) - uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u))).z], _GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).x > injectionSwitch.y))) && true)));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
              continue;
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), false || (_GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) || false))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.9)), float(injectionSwitch.y), bool(true)))))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), true)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(0.5)), _GLF_IDENTITY(float(injectionSwitch.y), min(_GLF_IDENTITY(float(injectionSwitch.y), (false ? _GLF_FUZZED(-23.82) : float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), max(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) * 1.0), float(injectionSwitch.y)))), float(_GLF_FUZZED(-8.4)), bool(false))), (false ? _GLF_FUZZED(-9398.3823) : _GLF_IDENTITY(float(injectionSwitch.y), mix(_GLF_IDENTITY(float(float(injectionSwitch.y)), mix(float(float(float(injectionSwitch.y))), float(_GLF_FUZZED(-5.4)), bool(false))), float(_GLF_FUZZED(-8.4)), bool(false))))))), bool(true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_injected_loop_counter)) != 1)) && true); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (_GLF_IDENTITY(! ((_GLF_DEAD(false)) && true), bool(bvec4(! ((_GLF_DEAD(false)) && true), true, false, true)))))), false, true, false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) || false)))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((0 | (0 >> _GLF_IDENTITY(int(0), int(0)))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & 98484) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, false)))) || false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    break;
   if((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), (1u * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 0u)), subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, max(2, 2)), (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) >> (0u & 102294u))), subgroup_local_id, subgroup_local_id)) % 2) + 0u)) == 0)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id.x], uint(2), 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) * _GLF_IDENTITY(1, 0 | (1)))) << _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), (_GLF_IDENTITY(0 ^ (0), (0 ^ (0)) | (0 ^ (0)))) | (0 ^ (0)))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (! (_GLF_IDENTITY(false, (false) || false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))) || false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (! (_GLF_IDENTITY(false, (false) || false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))) || false))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))))))));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), true && (bool(_GLF_IDENTITY(false, (false) || false))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))))))))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, (false ? _GLF_FUZZED((++ GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id : _GLF_FUZZED(uvec4(116553u, 34288u, 159621u, 147290u)))))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)) | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), uvec4(0u, 0u, 0u, 0u) ^ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)))))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id))) >> (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(24072u, 111127u, 61521u, 21309u)) : (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)) | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), uvec4(0u, 0u, 0u, 0u) ^ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)))))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)) | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), uvec4(0u, 0u, 0u, 0u) ^ ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)))))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, ~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)) | uvec4(0u, 0u, 0u, 0u)))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id))) >> (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u))))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), ~ (~ (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id), (uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)) ^ uvec4(0u, 0u, 0u, 0u)))))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id))), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidsubgroup_sizevirtual_gidworkgroup_id)))).x], _GLF_IDENTITY(uint(2), 0u ^ (uint(2))), 4, 64, 4);
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false), false)))))), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) || false)))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-321.571) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            break;
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true))))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(cosh(injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.4)), bool(false))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
