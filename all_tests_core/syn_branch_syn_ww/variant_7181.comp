#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 vec3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_11 {
 int _f0;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 uint virtual_gid;
 _GLF_struct_11 _f1;
 ivec3 _f2;
 ivec4 _f3;
 mat2x4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
} ;

struct _GLF_struct_10 {
 mat3 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_15 {
 vec4 _f0;
 mat4 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_14 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_6 {
 float _f0;
 vec3 _f1;
 ivec2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_5 {
 uint _f0;
 ivec3 _f1;
 ivec3 _f2;
 uint _f3;
 mat4x3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 vec4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 mat3 _f1;
 vec4 _f2;
 mat4x2 _f3;
 ivec4 _f4;
 mat3x4 _f5;
 uint _f6;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 uint _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 ivec2 _f4;
 mat4x2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 vec3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_7 _f3;
 int i;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid;
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), false), bvec3(bvec3(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), false), bvec3(bvec3(bvec3(bvec2(false, true), false))))), false, false)))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_IDENTITY(false, bool(bvec2(false, true)))), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec2(false, true)))), true)))))), bvec3(bvec3(bvec3(bvec2(false, true), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(false, true), false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(false, true), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(false, true), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), true)))))), false)))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true), false)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(false, true), false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(false, true), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(false, true), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, true), false), true)), true)))))), false)))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true), false)))))))), _GLF_IDENTITY(false, bool(bvec3(false, false, false))), false)))), false)))))))), false, true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), true && ((! (true))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))))))), true && (false))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_base;
  }
 uvec4 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base) / uvec2(1u, 1u));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.2)), float(injectionSwitch.y), bool(true))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(0, 0) + (ivec2(1, 1)))))]), float(_GLF_FUZZED((6.2))), bool(false))))).y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(0, 0) + (ivec2(1, 1)))))]), float(_GLF_FUZZED((6.2))), bool(false))))).y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(0, 0) + (ivec2(1, 1)))))]), float(_GLF_FUZZED((6.2))), bool(false))))).y))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(0, 0) + (ivec2(1, 1)))))]), float(_GLF_FUZZED((6.2))), bool(false))))).y))))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(0, 0) + (ivec2(1, 1)))))]), float(_GLF_FUZZED((6.2))), bool(false))))).y)))))) || false)))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, cos(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0))) > injectionSwitch.y))))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, true, true))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_IDENTITY(false, false || (false)) || ((false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))), false || ((false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))) && true)))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false)))))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(984.197)), vec2(_GLF_FUZZED(90.46), (injectionSwitch)[1]), bvec2(false, true))).y))) || false), true, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, true)))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(float(float(injectionSwitch.x)), (float(float(injectionSwitch.x))) / 1.0), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x)))), float(float(injectionSwitch.x))))), clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(_GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x)))), float(float(injectionSwitch.x))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), float(float(float(injectionSwitch.x))))), min(_GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x)))), float(float(injectionSwitch.x))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(_GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x)))), float(float(injectionSwitch.x))))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y = subgroup_local_id;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)) && true));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false) || (true))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), true, false, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), true, false, true))), false), true, true)))))) || false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), false || (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, false || (false)), true, true)))))
    {
     return;
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.x = _GLF_IDENTITY(num_workgroup, min(num_workgroup, _GLF_IDENTITY(num_workgroup, 1u * (num_workgroup))));
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.y = GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    return;
   GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.w = GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.y;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) ^ 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))) && true)); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))))).y))))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z = workgroup_id;
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z, _GLF_IDENTITY(clamp(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z, GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z, GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z), (clamp(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z, GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z, GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z)) >> 0u));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))) && true)))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
  }
 GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z = workgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), false, false))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      return;
     return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), ~ (~ (_GLF_IDENTITY(max(int(4), int(4)), clamp(max(int(4), int(4)), max(int(4), int(4)), max(int(4), int(4)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0))) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y = _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z, max(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z, GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y = _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z, max(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z, GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z)), (false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.r) : GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y = _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.z, max(_GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid, (GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid) | (_GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid, min(_GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid, clamp(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid, GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid, GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid)), GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid)))).xyz.z, _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid, uvec4(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid[0], GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid[1], GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid[2], GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid[3])).xyz.z)))) : _GLF_FUZZED(workgroup_base)));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(1, max(1, 1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(1.8, (_GLF_IDENTITY(1.8, max(1.8, 1.8))) * 1.0))), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.8)), float(injectionSwitch.y), bool(true)))) + 0.0)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && true) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && true) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true)))), false))), true)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0), clamp(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0), (vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))), 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat4(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0), (vec3(0.0, 0.0, 1.0)) * vec3(1.0, 1.0, 1.0)), vec3(0.0, 0.0, 1.0))), 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), 1.0)), 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0))), 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / abs(1.0)), tan(0.0), 1.0, determinant(mat4(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), 1.0)), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2884.2522)), bool(false))), determinant(mat3(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0)), 1.0)))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false)))
          continue;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-586.794, min(-586.794, _GLF_IDENTITY(-586.794, 0.0 + (-586.794))))) : _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0)))))), (max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))) ? _GLF_FUZZED(_GLF_IDENTITY(-586.794, min(-586.794, -586.794))) : _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-474.136) : 1.0))) - 0.0))))) - 0.0))), mat4(1.0), _GLF_struct_10(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) * mat3(1.0))), (false ? _GLF_FUZZED(mat3x4(8.3, 8.1, 9441.7556, 64.72, 5.3, 5465.5911, 57.96, 1.3, -754.258, _GLF_IDENTITY(-10.84, clamp(-10.84, _GLF_IDENTITY(_GLF_IDENTITY(-10.84, mix(float(-10.84), float(_GLF_FUZZED(-1.1)), bool(false))), (-10.84) - log(1.0)), _GLF_IDENTITY(-10.84, min(-10.84, _GLF_IDENTITY(-10.84, (true ? -10.84 : _GLF_FUZZED(9.7))))))), 808.227, _GLF_IDENTITY(-3.4, (-3.4) + 0.0))) : mat3x4(mat3(1.0))))), (mat3(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) * mat3(1.0))), (false ? _GLF_FUZZED(mat3x4(8.3, 8.1, 9441.7556, 64.72, 5.3, 5465.5911, 57.96, 1.3, -754.258, _GLF_IDENTITY(-10.84, clamp(-10.84, _GLF_IDENTITY(_GLF_IDENTITY(-10.84, mix(float(-10.84), float(_GLF_FUZZED(-1.1)), bool(false))), (-10.84) - log(1.0)), _GLF_IDENTITY(-10.84, min(-10.84, _GLF_IDENTITY(-10.84, (true ? -10.84 : _GLF_FUZZED(9.7))))))), 808.227, _GLF_IDENTITY(-3.4, (-3.4) + 0.0))) : mat3x4(mat3(1.0)))))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_struct_9(ivec4(1))), _GLF_struct_12(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, clamp(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, clamp(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup) ^ uvec4(0u, 0u, 0u, 0u)).xy.y, GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y)), (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, clamp(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup) ^ uvec4(0u, 0u, 0u, 0u)).xy.y, GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_id * subgroup_size) | 0u) + GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y, _GLF_struct_11(1), ivec3(1), ivec4(1), mat2x4(1.0), vec3(1.0)), _GLF_struct_14(_GLF_struct_13(vec3(1.0), mat4x2(_GLF_IDENTITY(1.0, abs(1.0) * (1.0)))), vec3(1.0)), mat4x2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || false))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec2(bool(_GLF_IDENTITY(true, (true) && true)), true)))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec2(bool(_GLF_IDENTITY(true, (true) && true)), true)))), true)))))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))
        break;
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(29.60)), float(1.0), bool(true))), 1.0, 0.0, tan(0.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-58.02)), bool(false))), 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec2(1.0, 0.0)))), 1.0, 0.0, sqrt(1.0), exp(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-21.20)), bool(false))), 0.0)))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              continue;
             barrier();
            }
          }
        }
      }
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = _GLF_IDENTITY((((1 & 1) ^ 1) ^ (0 << _GLF_IDENTITY(int(5), int(5)))), ((((1 & 1) ^ 1) ^ (0 << _GLF_IDENTITY(int(5), int(5))))) | ((((1 & 1) ^ 1) ^ (0 << _GLF_IDENTITY(int(5), int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.0))))) > injectionSwitch.y))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.0))))) > injectionSwitch.y))))))))), true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0)).y))), true, false, false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      break;
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-1083.7072 + 2574.4090)), _GLF_FUZZED(-74.22)), bvec2(false, false))), injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), true && (false)), false))))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2248.4053), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(8564.2993), mix(float(_GLF_FUZZED(8564.2993)), float(_GLF_FUZZED(3262.1296)), bool(false)))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y))));
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              return;
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), true))))))))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, uvec4(0u, _GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u) + (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, uvec4(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[0], GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[1], GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[2], GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[3])))).xy.y + subgroup_id * subgroup_size + ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1) % subgroup_size), 0u | _GLF_IDENTITY((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))))) * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) % subgroup_size), min((_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) % subgroup_size)))), clamp(_GLF_IDENTITY((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size) / 1u))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), min(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))) + (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)) | (0u << _GLF_IDENTITY(uint(7u), uint(7u))))), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) % subgroup_size)), (true ? _GLF_IDENTITY((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, (1u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), (1u & 1u) * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))), (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))) ^ 0u) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size))) : _GLF_FUZZED(subgroup_local_id))))), ((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))), ~ (~ (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), ((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)) - 0u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), (false ? _GLF_FUZZED((~ workgroup_base)) : _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), (false ? _GLF_FUZZED((mat4x2(-89.94, 8.7, -75.25, 8191.5238, -5707.7618, -122.246, 97.15, 5.3) , workgroup_id)) : clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))))) / 1u)))) + (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * _GLF_IDENTITY(((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), (((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) | (((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))))) % subgroup_size))) / 1u) : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) >> 0u), max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : 0u)), clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))) : _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.g))) + (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) % subgroup_size)), (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_id * subgroup_size, 1u)), clamp(uint(uvec2(subgroup_id * subgroup_size, 1u)), uint(uvec2(subgroup_id * subgroup_size, 1u)), uint(uvec2(subgroup_id * subgroup_size, 1u))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), max((_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))))) ^ 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), 1u, 1u)) ^ uvec3(0u, 0u, 0u)))), max(subgroup_id, subgroup_id)) * subgroup_size)))) + (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), _GLF_IDENTITY(max((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), ~ (~ (max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), 1u, 1u)).y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id) / uvec3(1u, 1u, 1u)).y) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + 1), (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)))))), 1u * ((GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) % subgroup_size)))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-96.13), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.8)), bvec2(true, false))) : _GLF_FUZZED(injectionSwitch))).y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.w = next_virtual_gid;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  return;
 GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.x = GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.w;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0), mat3x2(mat4x3(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0)))))))).y, mix(float(_GLF_FUZZED(47.53)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-9404.7406 / -439.613)), _GLF_FUZZED(float(uvec2(43010u, 198542u).g))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(true, true))).y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)) || false, ! (! ((bool(false)) || false))))), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || false)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(5.2), max(_GLF_FUZZED(5.2), _GLF_IDENTITY(_GLF_FUZZED(5.2), max(_GLF_FUZZED(5.2), _GLF_FUZZED(5.2))))), _GLF_FUZZED(6.5)), bvec2(false, false)), clamp(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)))), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false)), cos(vec2(0.0, 0.0)) * (mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), max(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), max(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-4980.4691))), 1.0, 0.0, 1.0)))), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false)))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false))), clamp(max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false))), max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false))), max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(6.5)), bvec2(false, false))))))))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(47.53)), (true ? float(_GLF_FUZZED(47.53)) : _GLF_FUZZED(-403.359))), float(injectionSwitch.y), bool(true)))))))), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.y))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)))), injectionSwitch, injectionSwitch))) + abs(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))))) : vec2(vec4(injectionSwitch, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0))))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))))
      return;
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.z = GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.x;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), min(max(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), min(max(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))), max(float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2(2.3, -864.654, 7.3, -4629.9483)) : mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))))))))) > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || false)))))))
        continue;
       continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 & 34147); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 & (91248 >> 51441)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x = GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.z;
  }
 atomicStore(buf[_GLF_struct_replacement_15._f3.virtual_gid], uint(_GLF_IDENTITY(1, (1) / 1)), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), false))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))))
  {
   if(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ 0), 1)) < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) << 0u))), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) << 0u)))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | (_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY(max(uint(subgroup_size), uint(subgroup_size)), uint(uint(_GLF_IDENTITY(max(uint(subgroup_size), uint(subgroup_size)), (max(uint(subgroup_size), uint(subgroup_size))) | (max(uint(subgroup_size), uint(subgroup_size))))))))))) << 0u)), (uint(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | (_GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY(max(uint(subgroup_size), uint(subgroup_size)), uint(uint(_GLF_IDENTITY(max(uint(subgroup_size), uint(subgroup_size)), (max(uint(subgroup_size), uint(subgroup_size))) | (max(uint(subgroup_size), uint(subgroup_size))))))))))) << 0u))) - 0u)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), (_GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), 0u | (0u ^ _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))) | 0u), (false ? _GLF_FUZZED(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_14next_virtual_gidnum_workgroupworkgroup_basenext_virtual_gid.xyz.y) : 0u ^ (subgroup_size)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(vec3(1.0), _GLF_struct_0(mat2x3(1.0), vec3(1.0), mat3x4(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), _GLF_struct_4(mat2(1.0), 1u, _GLF_struct_1(mat4x3(1.0), mat3(1.0), vec4(1.0), mat4x2(_GLF_IDENTITY(1.0, (1.0) / 1.0)), ivec4(_GLF_IDENTITY(1, (1) >> 0)), mat3x4(1.0), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(88330u) : 1u))))), _GLF_struct_2(mat3x2(1.0)), ivec2(1), mat4x2(1.0), _GLF_struct_3(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) - mat2(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))))), mat2(mat3x2((mat2(1.0)) - _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (true ? _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), mat2(mat4x3(mat2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3494.4767)), float(0.0), bool(true))), 0.0, 0.0)))) : _GLF_FUZZED(mat2(-4.6, -1.5, -2673.5984, 3.4)))))))))), _GLF_struct_7(mat3x4(1.0), _GLF_IDENTITY(vec4(1.0), vec4(_GLF_IDENTITY(mat2(vec4(1.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(mat2(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((- 81.33))), float(1.0), bool(true))))), (true ? mat2(vec4(1.0)) : _GLF_FUZZED(mat2(-5.1, 875.699, -7.6, -60.30)))) : _GLF_FUZZED(mat2(-0.9, 67.03, -6.5, -13.94)), transpose(_GLF_IDENTITY(_GLF_IDENTITY(transpose(true ? _GLF_IDENTITY(mat2(vec4(1.0)), (true ? mat2(vec4(1.0)) : _GLF_FUZZED(mat2(_GLF_IDENTITY(-5.1, min(-5.1, -5.1)), 875.699, -7.6, -60.30)))) : _GLF_FUZZED(mat2(-0.9, 67.03, -6.5, -13.94))), (true ? transpose(true ? _GLF_IDENTITY(mat2(vec4(1.0)), (true ? mat2(vec4(1.0)) : _GLF_FUZZED(mat2(-5.1, 875.699, -7.6, -60.30)))) : _GLF_FUZZED(mat2(-0.9, 67.03, -6.5, -13.94))) : _GLF_FUZZED((mat2(-0.5, 9101.8024, 8166.8829, -3850.5376) / -7165.0933)))), (true ? _GLF_IDENTITY(transpose(true ? _GLF_IDENTITY(mat2(vec4(1.0)), (true ? mat2(vec4(1.0)) : _GLF_FUZZED(mat2(-5.1, 875.699, -7.6, -60.30)))) : _GLF_FUZZED(mat2(-0.9, 67.03, -6.5, -13.94))), (true ? transpose(true ? _GLF_IDENTITY(mat2(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(942.634)), bool(false))))), (true ? mat2(vec4(1.0)) : _GLF_FUZZED(mat2(-5.1, 875.699, -7.6, -60.30)))) : _GLF_FUZZED(mat2(-0.9, 67.03, -6.5, -13.94))) : _GLF_FUZZED(_GLF_IDENTITY((mat2(-0.5, 9101.8024, 8166.8829, -3850.5376) / -7165.0933), (false ? _GLF_FUZZED(mat2(-1.9, -5893.9973, -388.195, -34.72)) : (mat2(-0.5, 9101.8024, 8166.8829, -3850.5376) / -7165.0933)))))) : _GLF_FUZZED(mat2(7.1, -1.0, 5656.4629, 1.4)))))))))), _GLF_struct_5(1u, ivec3(1), ivec3(1), _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 1u))), mat4x3(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))))), bvec3(bvec3(bvec3(true)))), true)))), _GLF_struct_6(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(vec3(1.0), max(vec3(1.0), vec3(1.0))), ivec2(1), vec2(1.0))), 0);
     do
      {
       if(_GLF_DEAD(false))
        break;
       atomicStore(buf[GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x], uint(2), 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-618.099), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-7364.4357)), bvec2(true, false))))).x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(mat3x2(_GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), mix(vec2((vec2(vec4(injectionSwitch, 1.0, 0.0)))[0], _GLF_FUZZED(56.75)), vec2(_GLF_FUZZED(9.2), (vec2(vec4(injectionSwitch, 1.0, 0.0)))[1]), bvec2(false, true))), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))).x > injectionSwitch.y))), true, false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))))), true, false)))), false, false, true)), ! (! (bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))), false, false, true))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) && true)) || false))), false, _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(17993))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         atomicStore(buf[GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x], uint(2), 4, 64, 4);
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))), true && (! (false)))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))) && true)) || false)))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), min(float(float(0.0)), float(float(0.0))))), 0.0, tan(0.0), 0.0, 1.0), mat4x2(mat4(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0))))), max(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) : _GLF_FUZZED(-45.04))), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0), mat4x2(mat4(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0))))), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0), mat4x2(mat4(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0))))))))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), 1))) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (0 & -11835) ^ (int(5))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) || false)), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) || false)), false))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) || false)), true))))), false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(int(subgroup_local_id))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     barrier();
    }
   for(int _injected_loop_counter = (-26337 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         do
          {
           return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(-6.9)))) - 0.0))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      return;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))), ! (! (false)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-176.755)))))))) && true)))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.7))) > injectionSwitch.y, false, true, false)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), false || (! (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))))), bool(bool(! ((injectionSwitch.x < injectionSwitch.y)))))))))), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))))))), (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, false, true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, false, true))))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, false, true))))))))))))), (false) || false)))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, min(0, 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) | 0), _GLF_IDENTITY(int(5), min(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
}
