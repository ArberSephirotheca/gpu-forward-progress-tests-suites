#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), injectionSwitch.y)))) && true))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
      barrier();
     return;
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec4(_GLF_IDENTITY(int(0), int(0)), 0, 1, 0))))))) >> _GLF_IDENTITY(int(0), int(0))), 0 ^ (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) >> 0)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0))))), _GLF_IDENTITY((int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))) | (int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))), clamp(_GLF_IDENTITY((int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))) | (int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))), int(ivec4((int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))) | (int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))), 1, 1, 1))), (int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))) | (int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))), (int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))) | (int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, 0)))))))))) ^ 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false || (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    return;
   do
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), true)))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))))) || false)) && true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), true, true, false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-613.171)), vec2(_GLF_FUZZED(9.9), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
          return;
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(97.97), _GLF_FUZZED(_GLF_IDENTITY(float(false), mix(float(_GLF_FUZZED(-19.58)), float(_GLF_IDENTITY(float(false), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(false), clamp(float(false), float(false), float(false))) : _GLF_FUZZED(1743.7212)))), bool(true))))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))) || false)), true && (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))) || false)))))))
        return;
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-90.14)), float(injectionSwitch.y), bool(true))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (-38738 & 0)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((-38738 & 0), 0 | ((-38738 & 0)))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0), 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-21.66, 603.443)))).x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), false || (bool(bool(_GLF_DEAD(false)))))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0))))), ((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)))))) * 1.0) + 0.0) : _GLF_FUZZED(radians(-8582.1814))))), bool(true))))), float(_GLF_FUZZED(_GLF_IDENTITY((4.9 / 29.53), min((4.9 / 29.53), _GLF_IDENTITY((4.9 / 29.53), max((4.9 / 29.53), (4.9 / 29.53))))))), bool(false)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mix(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.4)), float(0.0), bool(true)))), float(_GLF_FUZZED((+ 8.6))), bool(false)))))), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY((dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0))))), ((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)))))) * 1.0) + 0.0) : _GLF_FUZZED(radians(-8582.1814))))), bool(true))))), float(_GLF_FUZZED(_GLF_IDENTITY((4.9 / 29.53), min((4.9 / 29.53), _GLF_IDENTITY((4.9 / 29.53), max((4.9 / _GLF_IDENTITY(29.53, clamp(29.53, _GLF_IDENTITY(29.53, min(29.53, _GLF_IDENTITY(29.53, clamp(29.53, 29.53, 29.53)))), 29.53))), (4.9 / 29.53))))))), bool(false)) : _GLF_FUZZED(1.8)))), min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0))))), ((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)))))) * 1.0) + 0.0) : _GLF_FUZZED(radians(-8582.1814))))), bool(true))))), float(_GLF_FUZZED(_GLF_IDENTITY((4.9 / 29.53), min((4.9 / 29.53), _GLF_IDENTITY((4.9 / 29.53), max((4.9 / 29.53), (4.9 / 29.53))))))), bool(false)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mix(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.4)), float(0.0), bool(true)))), float(_GLF_FUZZED((+ 8.6))), bool(false)))))), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY((dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0))))), ((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)))))) * 1.0) + 0.0) : _GLF_FUZZED(radians(-8582.1814))))), bool(true))))), float(_GLF_FUZZED(_GLF_IDENTITY((4.9 / 29.53), min((4.9 / 29.53), _GLF_IDENTITY((4.9 / 29.53), max((4.9 / _GLF_IDENTITY(29.53, clamp(29.53, _GLF_IDENTITY(29.53, min(29.53, _GLF_IDENTITY(29.53, clamp(29.53, 29.53, 29.53)))), 29.53))), (4.9 / 29.53))))))), bool(false)) : _GLF_FUZZED(1.8)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0))))), ((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)))))) * 1.0) + 0.0) : _GLF_FUZZED(radians(-8582.1814))))), bool(true))))), float(_GLF_FUZZED(_GLF_IDENTITY((4.9 / 29.53), min((4.9 / 29.53), _GLF_IDENTITY((4.9 / 29.53), max((4.9 / 29.53), (4.9 / 29.53))))))), bool(false)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mix(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.4)), float(0.0), bool(true)))), float(_GLF_FUZZED((+ 8.6))), bool(false)))))), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY((dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0))))), ((dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)))))) * 1.0) + 0.0) : _GLF_FUZZED(radians(-8582.1814))))), bool(true))))), float(_GLF_FUZZED(_GLF_IDENTITY((4.9 / 29.53), min((4.9 / 29.53), _GLF_IDENTITY((4.9 / 29.53), max((4.9 / _GLF_IDENTITY(29.53, clamp(29.53, _GLF_IDENTITY(29.53, min(29.53, _GLF_IDENTITY(29.53, clamp(29.53, 29.53, 29.53)))), 29.53))), (4.9 / 29.53))))))), bool(false)) : _GLF_FUZZED(1.8))))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))), false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), true, true))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)), clamp(int(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) / 1, (_GLF_IDENTITY((_injected_loop_counter) / 1, int(_GLF_IDENTITY(ivec3((_injected_loop_counter) / 1, 0, 1), min(ivec3((_injected_loop_counter) / 1, 0, 1), ivec3((_injected_loop_counter) / 1, 0, 1)))))) | (_GLF_IDENTITY((_injected_loop_counter) / 1, clamp(_GLF_IDENTITY((_injected_loop_counter) / 1, int(int((_injected_loop_counter) / 1))), (_injected_loop_counter) / 1, (_injected_loop_counter) / 1)))))), int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)), int(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)) << 0)))))) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false)))))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       else
        {
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat3(1.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-2.5), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(-8.9)), bvec2(true, false)))).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(vec3(9572.4076, 599.495, -3.9), vec3(-5.4, 207.084, 59.48)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 1, 1), clamp(_GLF_IDENTITY(ivec4(0, 0, 1, 1), (ivec4(0, 0, 1, 1)) | (ivec4(0, 0, 1, 1))), _GLF_IDENTITY(ivec4(0, 0, 1, 1), clamp(ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1), ivec4(0, 0, 1, 1))), ivec4(0, 0, 1, 1)))))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3510.1445)), bool(false))) > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         break;
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), mix(float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(9.1)), bool(false)))) > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 1.0)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)))) || false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false)))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))), sqrt(1.0)), mat3(1.0) * (mat4x3(injectionSwitch.x, 1.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))), sqrt(1.0)))))) > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) || false))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   break;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         else
          {
          }
         barrier();
        }
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0))) - sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y))))
  return;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, 1u, 1u)))))) | (subgroup_id * subgroup_size));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(vec3(17.11, 8.4, -5.3).x), (false ? _GLF_FUZZED(6404.0998) : _GLF_IDENTITY(_GLF_FUZZED(vec3(_GLF_IDENTITY(17.11, min(17.11, _GLF_IDENTITY(17.11, max(_GLF_IDENTITY(17.11, mix(float(_GLF_FUZZED(4.2)), float(17.11), bool(true))), 17.11)))), 8.4, -5.3).x), mix(float(_GLF_FUZZED(vec3(17.11, 8.4, -5.3).x)), float(_GLF_FUZZED(9.0)), bool(false)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), false)), ! (! (bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), false))))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), false)), ! (! (bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), false))))))))), false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.8)), vec2(_GLF_FUZZED((+ 854.483)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.8)), vec2(_GLF_FUZZED((+ 854.483)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x, float(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.8)), vec2(_GLF_FUZZED((+ 854.483)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))) : _GLF_FUZZED(-3.5))) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), true && ((! (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))))))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-62210)))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(atomicOr(workgroup_id, 103085u)) : _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), (false ? _GLF_FUZZED(atomicOr(workgroup_id, 103085u)) : _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) << 0u))))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((1.2 + -0.5))), bool(false))), injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)))) > injectionSwitch.y)))), bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec2((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, true)))) && _GLF_IDENTITY(true, ! (! (true)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false || ((_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))) || false))), _GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, ! (! (false))))), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))) || false))), _GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, ! (! (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))) || false))), _GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, ! (! (false))))), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))) || false))), _GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, ! (! (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))) || false))), _GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, ! (! (false))))), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))) || false))), _GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, ! (! (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && true)))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(250.256), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(250.256) : _GLF_FUZZED(93.74))), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), float(injectionSwitch.x), bool(true)), min(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_IDENTITY(_GLF_FUZZED(250.256), float(mat2x3(_GLF_FUZZED(250.256), 0.0, 1.0, 0.0, 1.0, 1.0))), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (false) && true)))))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), min(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256)))), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), clamp(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x))) + 0.0), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(_GLF_IDENTITY(936.654, clamp(936.654, 936.654, 936.654)))), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)), min(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)), float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)))))))), float(injectionSwitch.x), bool(true)), clamp(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(_GLF_IDENTITY(250.256, (true ? 250.256 : _GLF_FUZZED(inversesqrt(intBitsToFloat(_injected_loop_counter))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), max(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), min(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), max(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)))))))))), 0.0, 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(_GLF_IDENTITY(936.654, clamp(936.654, 936.654, 936.654)))), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)), min(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)), float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)))))))), float(injectionSwitch.x), bool(true)), clamp(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(_GLF_IDENTITY(250.256, (true ? 250.256 : _GLF_FUZZED(inversesqrt(intBitsToFloat(_injected_loop_counter))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), max(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), min(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), max(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)))))))))), 0.0, 0.0, 0.0)), float(mat2x4(float(vec4(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(_GLF_IDENTITY(936.654, clamp(936.654, 936.654, 936.654)))), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)), min(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)), float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0)))))))), float(injectionSwitch.x), bool(true)), clamp(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(_GLF_IDENTITY(250.256, (true ? 250.256 : _GLF_FUZZED(inversesqrt(intBitsToFloat(_injected_loop_counter))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), max(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), min(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), max(mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), (_GLF_IDENTITY(float(_GLF_FUZZED(250.256)), clamp(float(_GLF_FUZZED(250.256)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(250.256), mix(float(_GLF_FUZZED(936.654)), float(_GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_IDENTITY(_GLF_FUZZED(250.256), clamp(_GLF_FUZZED(250.256), _GLF_FUZZED(250.256), _GLF_FUZZED(250.256))), _GLF_FUZZED(250.256)))), bool(true)))), float(mat2x3(float(_GLF_FUZZED(250.256)), 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(250.256))))) - _GLF_ZERO(0.0, injectionSwitch.x)), float(injectionSwitch.x), bool(true)))))))))), 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))))))) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   continue;
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           barrier();
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5.2)))))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, sqrt(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, sqrt(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat4x2(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, sqrt(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), mix(float(_GLF_FUZZED(186.894)), float(float(_GLF_IDENTITY(mat4x2(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, sqrt(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat4x2(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, sqrt(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))), bool(true))))))) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-713.120)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.1) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), log(1.0), 1.0)), clamp(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), log(1.0), 1.0)), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), log(1.0), 1.0)), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), log(1.0), 1.0)))))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-4.7)), vec2(_GLF_FUZZED(vec3(-64.70, -9674.7094, -6.6).s), ((injectionSwitch))[1]), bvec2(false, true)))[0], _GLF_FUZZED(697.708)), bvec2(true, false))).x > injectionSwitch.y), false, true, false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-4.7)), vec2(_GLF_FUZZED(vec3(-64.70, -9674.7094, -6.6).s), ((injectionSwitch))[1]), bvec2(false, true)))[0], _GLF_FUZZED(697.708)), bvec2(true, false))).x > injectionSwitch.y), false, true, false)), (bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-4.7)), vec2(_GLF_FUZZED(vec3(-64.70, -9674.7094, -6.6).s), ((injectionSwitch))[1]), bvec2(false, true)))[0], _GLF_FUZZED(697.708)), bvec2(true, false))).x > injectionSwitch.y), false, true, false))) && true), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-4.7)), vec2(_GLF_FUZZED(vec3(-64.70, -9674.7094, -6.6).s), ((injectionSwitch))[1]), bvec2(false, true)))[0], _GLF_FUZZED(697.708)), bvec2(true, false))).x > injectionSwitch.y), false, true, false)), (bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-4.7)), vec2(_GLF_FUZZED(vec3(-64.70, -9674.7094, -6.6).s), ((injectionSwitch))[1]), bvec2(false, true)))[0], _GLF_FUZZED(697.708)), bvec2(true, false))).x > injectionSwitch.y), false, true, false))) && true), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6878.2477)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), false, true, false))))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.1) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), (vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1])) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(697.708)), bvec2(true, false))).x > injectionSwitch.y), false, true, false))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false, true, false))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.1) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-97.81), _GLF_FUZZED(-62.10)), bvec2(false, false))).y) - 0.0)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(697.708)), bvec2(true, false))).x > injectionSwitch.y), false, true, false))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, (4) - 0), 64, _GLF_IDENTITY(4, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-48800), (false ? _GLF_FUZZED(-72435) : _GLF_IDENTITY(_GLF_FUZZED(-48800), (_GLF_FUZZED(-48800)) << 0))) : _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-27462))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | (1))))))), (false ? _GLF_FUZZED(88065) : (1))) | _GLF_IDENTITY((1), 0 | ((1)))) * _GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((_GLF_IDENTITY(4, (4) - 0)), int(_GLF_IDENTITY(ivec2((4), 0), ivec2(1, 1) * (_GLF_IDENTITY(ivec2((4), 0), ivec2(0, 0) | _GLF_IDENTITY((ivec2((4), 0)), min((ivec2((4), 0)), _GLF_IDENTITY((ivec2((4), 0)), (ivec2(0, 0) | ivec2(0, 0)) + ((ivec2((4), 0))))))))))), _GLF_IDENTITY((4), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((4), 1, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4))) * (0)))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) - 0), 1))), clamp(ivec4((4), 1, 0, 1), ivec4((4), 1, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) + 0)), ivec4((_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(62870) : 4))))), 1, 0, 1)))), (int(_GLF_IDENTITY(ivec4((4), 1, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4))) * (0)))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) - 0), 1))), clamp(ivec4((4), 1, 0, 1), ivec4((4), 1, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) + 0)), ivec4((_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(62870) : 4))))), 1, 0, 1))))) << 0)))), int(ivec4(_GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((_GLF_IDENTITY(4, (4) - 0)), int(_GLF_IDENTITY(ivec2((4), 0), ivec2(1, 1) * (_GLF_IDENTITY(ivec2((4), 0), ivec2(0, 0) | (ivec2((4), 0))))))), _GLF_IDENTITY((4), int(_GLF_IDENTITY(ivec4((4), 1, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-78008)))) * (0)))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) - 0), 1))), clamp(ivec4((4), 1, 0, 1), ivec4((4), 1, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) + 0)), ivec4((_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(62870) : 4))))), 1, 0, 1))))))), _GLF_IDENTITY(0, (0) - 0), 1, 1)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)), false, true, false)))), true, false, true)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(-68.96, -7772.1516, -75.46).g)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3093.4925)), vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))));
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, sqrt(1.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, abs(1.0)))), min(injectionSwitch.y, injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, sqrt(1.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - sqrt(0.0)))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))) - 0.0)), 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, abs(1.0)))), min(injectionSwitch.y, injectionSwitch.y))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
