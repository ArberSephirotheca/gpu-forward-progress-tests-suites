#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_24 {
 uint _f0;
 uint _f1;
} ;

struct _GLF_struct_23 {
 mat4 _f0;
 mat3 _f1;
 mat3x4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_25 {
 uint _f0;
 _GLF_struct_23 _f1;
 vec3 _f2;
 mat3x2 _f3;
 bvec2 _f4;
 vec3 _f5;
 _GLF_struct_24 _f6;
} ;

struct _GLF_struct_21 {
 mat2x4 _f0;
 ivec2 _f1;
 vec4 _f2;
 bvec4 _f3;
 bool _f4;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
} ;

struct _GLF_struct_18 {
 ivec2 _f0;
 mat4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_20 {
 mat3x2 _f0;
 _GLF_struct_18 _f1;
 uvec3 _f2;
 _GLF_struct_19 _f3;
} ;

struct _GLF_struct_26 {
 _GLF_struct_20 _f0;
 bvec3 _f1;
 uint next_virtual_gid;
 mat3x4 _f2;
 _GLF_struct_22 _f3;
 ivec4 _f4;
 _GLF_struct_25 _f5;
 uint _f6;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 mat4x2 _f1;
 int _f2;
 vec2 _f3;
 mat3 _f4;
 vec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
 bool _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_11 {
 mat4x2 _f0;
 mat3x2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_14 {
 uvec4 _f0;
 _GLF_struct_11 _f1;
 bvec3 _f2;
 vec2 _f3;
 _GLF_struct_12 _f4;
 _GLF_struct_13 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_14 _f0;
 uint workgroup_id;
 ivec2 _f1;
 _GLF_struct_16 _f2;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 ivec4 _f1;
 uvec3 _f2;
 uvec2 _f3;
 ivec2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_9 {
 int _f0;
 _GLF_struct_8 _f1;
 bvec4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 vec3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 uvec2 _f1;
 _GLF_struct_6 _f2;
 mat3x2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
 ivec2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_5 _f2;
 mat2x3 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_9 _f5;
 uint virtual_gid;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 ivec2 _f1;
 bvec3 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint num_workgroup;
 mat2 _f1;
 mat4x2 _f2;
 vec4 _f3;
 mat4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)), (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, abs(1.0) * (injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-77.54, -3.2)) : injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))) ? _GLF_FUZZED(vec2(-77.54, -3.2)) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-77.54, -3.2)) : injectionSwitch)).x)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-77.54, -3.2)) : injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))) ? _GLF_FUZZED(vec2(-77.54, -3.2)) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-77.54, -3.2)), vec2(mat4x3(_GLF_FUZZED(vec2(-77.54, -3.2)), 1.0, 0.0, abs(1.0), determinant(mat3(0.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, cos(0.0), tan(0.0), 1.0))) : injectionSwitch)).x))), float(_GLF_FUZZED(-1122.5140)), bool(false))) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)))))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), ! (! (bool(bvec4(false, false, false, true)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
      }
     else
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), (int(7)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) - 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))) || false)) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_ONE(1.0, injectionSwitch.y)))) < injectionSwitch.y)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 & -5069) ^ 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ! (_GLF_IDENTITY(! ((bool(bool(false)))), false || (! ((bool(bool(false)))))))), ((bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(false, false, false))))), false || _GLF_IDENTITY((bool(bool(false))), (_GLF_IDENTITY((bool(bool(false))), (_GLF_IDENTITY((bool(bool(false))), ! (! ((bool(bool(false))))))) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))), false || (! (_GLF_IDENTITY(bool(bool(false)), false || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true), (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(((bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((bool(bool(false)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, true && (true)))))))), (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(((bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), false || (((bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY(_GLF_IDENTITY(((bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), bool(bvec4(((bool(bool(_GLF_IDENTITY(false, (false) && true))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), false, true, _GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))), (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(((bool(bool(false)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), false || (((bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))) || false)) || false))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || _GLF_IDENTITY((bool(bool(false))), ((bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true, true && (true)) && (true))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, true && (true)))), (! (! (_GLF_IDENTITY(true, true && (true))))) || false), true)))))), true && ((! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bvec4(true, true, false, false))) && _GLF_IDENTITY((true), ! _GLF_IDENTITY((! (_GLF_IDENTITY((true), ! (! ((true)))))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY((true), ! (! ((true)))))), ! (! ((! (_GLF_IDENTITY((true), ! (! ((true))))))))))))))), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, true && (true)))), (! (! (_GLF_IDENTITY(true, true && (true))))) || false), true))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), false || _GLF_IDENTITY((bool(bool(false))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), ! (! (_GLF_IDENTITY(bool(false), false || (bool(false)))))))), _GLF_IDENTITY(true, false || (true)) && ((bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, true && (true)))), ! (! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))) && (true))))))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), bool(bvec2(! (bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ((bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec2(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, round(length(normalize(vec2(1.0, 1.0))))), transpose(transpose(mat2(injectionSwitch, 1.0, round(length(normalize(vec2(1.0, 1.0)))))))))), 0.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))), false)))))) && true)), true))))) && (true))) && true))))), (_GLF_IDENTITY((bool(bool(false))), ((bool(bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(true, true && (true))))))) || false)))))))))) || false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(mat4x2(1.0), _GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1)))), bvec3(true), bvec2(true))), _GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x)), mat2(1.0), mat4x2(1.0), vec4(1.0), mat4(1.0));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(4), int(4))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(143.522))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(60.97)), float(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))), bool(true))), abs(1.0), 1.0, sin(0.0), 1.0, 0.0))) > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false))))
      break;
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(bool(false)))) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true)))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        continue;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_14(uvec4(_GLF_IDENTITY(1u, min(1u, 1u))), _GLF_struct_11(mat4x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(49.90)))), mat3x2(1.0), uvec4(1u)), bvec3(true), vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), _GLF_struct_12(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 1, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(0, 0 + (0))), (true ? ivec4(1, 1, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), clamp(1 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) << 0), 1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), 0) : _GLF_FUZZED(ivec4(9817, -7938, -34199, -61676))))), ~ (~ (int(_GLF_IDENTITY(ivec4(1, 1, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0), (true ? ivec4(1, 1, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0) : _GLF_FUZZED(ivec4(9817, -7938, -34199, -61676)))))))))), true, mat3x4(1.0)), _GLF_struct_13(bvec2(true))), gl_WorkGroupID.x, ivec2(1), _GLF_struct_16(_GLF_struct_15(mat4x2(1.0), mat4x2(1.0), 1, vec2(1.0), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), 1.0 * (clamp(0.0, 0.0, 0.0)))), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(366.407))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), vec3(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(length(vec2(-6.9, 699.369)))))), vec3(1.0)), uvec3(1u)));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0))))), min(float(vec4(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(vec4(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0))))), (float(vec4(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(sqrt(1.0), 1.0, 1.0, 1.0)))))) - 0.0)))), injectionSwitch.x)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))))) > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x)), injectionSwitch.y))), true, false)))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(10.54)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))) > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = ((0 ^ 0) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), 0 ^ ((1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 ^ (6))), int(6)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), 0 ^ ((1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 ^ (6))), int(6)))), false, false))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false)))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(exp2(injectionSwitch)))).y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) || false)), (injectionSwitch.x > injectionSwitch.y)))))))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(66.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, true, true)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), true)), ! (! (bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), true)))))))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) && true) || (true))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(round(length(normalize(1.0))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(round(length(normalize(1.0))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0)), max(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(round(length(normalize(1.0))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(round(length(normalize(1.0))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0)), float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(round(length(normalize(1.0))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(round(length(normalize(1.0))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), determinant(mat4(1.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0))))) > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), (injectionSwitch)))).x < injectionSwitch.y))))
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0)))), max(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0)))), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0))))))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0)))), max(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0)))), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-764.595)), bvec2(false, false))), 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0))))))).x > injectionSwitch.y), false, true)))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)) && true)), true, false)))) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_17.workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (ivec4(1)) / ivec4(1, 1, 1, 1)), ivec4(0, 0, 0, 0) ^ (ivec4(1))), _GLF_struct_3(uvec3(1u), uvec4(1u)), _GLF_struct_5(_GLF_struct_4(mat3(1.0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 0, _GLF_IDENTITY(1, (1) | (1)))), max(int(_GLF_IDENTITY(ivec4(1, 1, 0, 1), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4(1, 1, 0, 1), max(_GLF_IDENTITY(ivec4(1, 1, 0, 1), min(ivec4(1, 1, 0, 1), _GLF_IDENTITY(ivec4(1, 1, 0, 1), (ivec4(1, 1, 0, 1)) / ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(1), ivec4(1))) >> _GLF_IDENTITY(ivec4(1), _GLF_IDENTITY(ivec4(1), ~ (~ (ivec4(1))))))))), ivec4(1, 1, 0, 1)))))), int(ivec4(1, 1, 0, 1)))))) | 0)), (true ? ivec2(1) : _GLF_FUZZED(ivec2(-20665, -52094)))), _GLF_IDENTITY(ivec3(1), (ivec3(1)) / ivec3(1, 1, 1))), mat4(1.0)), mat2x3(1.0), _GLF_struct_7(mat3x2(1.0), uvec2(1u), _GLF_struct_6(mat2x3(1.0), vec3(1.0), bvec2(true)), mat3x2(1.0), mat3x2(1.0)), _GLF_struct_9(1, _GLF_struct_8(vec4(1.0), ivec4(1), uvec3(1u), uvec2(1u), ivec2(1), mat4x3(1.0)), bvec4(true), ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), int(ivec3(~ ((1)), 0, (0 >> _GLF_IDENTITY(int(4), int(4)))))))) << 0))), 1, 1), (ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) << 0))), 1, 1)) ^ ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | 0), 0, _GLF_IDENTITY(0, (0) << 0)))), ~ (~ (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91154) : _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) - 0) ^ (1 ^ 1))))) << _GLF_IDENTITY(0, (0) / 1)))), 1, 1), (ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) << 0))), 1, 1)) ^ ivec3(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0, 0))))))))), workgroup_base + subgroup_base + subgroup_local_id);
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, int(int(1)))])).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false))))))), false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false))))))), false)))) || false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
  }
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_20(mat3x2(1.0), _GLF_struct_18(_GLF_IDENTITY(ivec2(1), (ivec2(1)) / ivec2(1, 1)), mat4(1.0), mat2(1.0)), uvec3(1u), _GLF_struct_19(vec4(1.0))), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), true))), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), mat3x4(1.0), _GLF_struct_22(_GLF_struct_21(mat2x4(1.0), ivec2(1), vec4(1.0), bvec4(true), true)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (0 | 0)), _GLF_IDENTITY(int(ivec4(1, _GLF_IDENTITY(0, (0) ^ 0), 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-19270) : (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1)))))) | 0), 0, 0, 0))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(0, 0)))), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), (int(ivec4(1, 0, 0, 0))) / (0 | 1)), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), int(_GLF_IDENTITY(ivec4(1, 0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1)), (ivec4(1, 0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1))) | ivec4(0, 0, 0, 0))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), 0, 0, 0)))), (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1))) >> 0)), 0, 0, 0))))) ^ ((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(2), int(2))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, _GLF_IDENTITY(0, (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-46116))))), 0))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY(int(ivec3(int(ivec4(1, 0, 0, 0)), 1, int(_GLF_ONE(1.0, injectionSwitch.y)))), (false ? _GLF_FUZZED(43630) : int(ivec3(int(ivec4(1, 0, 0, 0)), 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))) - 0), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, _GLF_IDENTITY(0, ~ (~ (0))), 0, 0)), _GLF_IDENTITY(min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))), ~ (~ (min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(_GLF_IDENTITY(int(0), 0 | (int(0))))), _GLF_IDENTITY(0, 0 | (0))), clamp(max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0))))), _GLF_IDENTITY(0, 0 | (0))), max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)), (true ? 0 : _GLF_FUZZED(ivec3(-78119, -68697, -88376).g)))))), _GLF_IDENTITY(max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) << 0) | (int(0))))), _GLF_IDENTITY(0, 0 | (0))), int(ivec3(max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(0), 0 | (int(0))) : _GLF_FUZZED(72215))), 1, 0, (1 & 1))), 0 + (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(0), 0 | (int(0))) : _GLF_FUZZED(72215))), 1, 0, (1 & 1)))))))), _GLF_IDENTITY(0, 0 | (0))), 0, 0)))))), 0)), int(ivec4(1, 0, 0, 0)))))))))), clamp(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (ivec4(1, 0, 0, 0))))) << ivec4(0, 0, 0, 0))), _GLF_IDENTITY(min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(max(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(_GLF_IDENTITY(1, (1) << 0), 0, 0, 0)))), min(max(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(_GLF_IDENTITY(1, (1) << 0), 0, 0, 0)))), max(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(_GLF_IDENTITY(1, (1) << 0), 0, 0, 0)))))))) | ivec4(0, 0, 0, 0))), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0)))), 0, 0, 0))), (_GLF_IDENTITY(min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), max(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(35948) : 0)), 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0)))))) | ivec4(0, 0, 0, 0))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) - 0) : _GLF_FUZZED(70586))), _GLF_IDENTITY(0, (0) / 1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0)), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0)), _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0)), _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0)))))), 0, _GLF_IDENTITY(0, (0) << 0), 0))), max(min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), max(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0)))))) | ivec4(0, 0, 0, 0))), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))))))) / _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0)))), 0, 0, 0))), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), max(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / (0 ^ 1))) | 0)) / 1), 0), (false ? _GLF_FUZZED(ivec4(-7670, -88017, -74525, 29473)) : ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) / 1), 0))), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0)))))), (false ? _GLF_FUZZED(ivec4(-97279, -17774, 72207, 63628)) : (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), max(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) / 1), 0), (false ? _GLF_FUZZED(ivec4(-7670, -88017, -74525, 29473)) : ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) / 1), 0))), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0)))))))) | ivec4(_GLF_IDENTITY(0, int(ivec2(0, 1))), 0, 0, 0))), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0)))), 0, 0, 0)))))) - 0))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY(int(ivec3(int(ivec4(1, 0, 0, 0)), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), min(int(ivec3(int(ivec4(1, 0, 0, 0)), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY(int(ivec3(int(ivec4(1, 0, 0, 0)), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))), (int(ivec3(int(ivec4(1, 0, 0, 0)), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))) | (int(ivec3(int(ivec4(1, 0, 0, 0)), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))))), int(ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(false, bool(bvec3(false, true, false))) ? _GLF_IDENTITY(_GLF_FUZZED(4380), 0 ^ (_GLF_FUZZED(4380))) : 0))) | 0), 0)))))), (max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(false, bool(bvec3(false, true, false))) ? _GLF_IDENTITY(_GLF_FUZZED(4380), 0 ^ _GLF_IDENTITY((_GLF_FUZZED(4380)), 0 | (_GLF_IDENTITY((_GLF_FUZZED(4380)), ((_GLF_FUZZED(4380))) | 0)))) : 0))) | 0), 0))))))) * 1))), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY((int(ivec4(1, 0, 0, 0))), ~ (~ ((int(ivec4(1, 0, 0, 0)))))) | (int(ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1)))) << 0), 0, 0, 0))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(1, (1) * 1), 0, 0, 0)), int(ivec4(1, 0, 0, 0))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, _GLF_IDENTITY(0, ~ (~ (0))), 0, 0)), int(ivec4(1, 0, 0, 0)))), (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), 0, 0)), int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) | ((0))))) + 0))), 0, 0), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) | ((0))))) + 0))), 0, 0), ivec4(0, 0, 0, 0) | (ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) | ((0))))) + 0))), 0, 0))))))))) + 0)), 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, _GLF_IDENTITY(0, ~ (~ (0))), 0, 0)), int(ivec4(1, 0, 0, 0)))), (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) + 0))), _GLF_IDENTITY(0, (0) - 0), 0))))) + 0))))))), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), min(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))), ivec4(1, 0, 0, 0)))), _GLF_IDENTITY(min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(1 * ((1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1 * ((1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(ivec3(ivec3(1 * ((1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (true ? int(ivec3(1 * ((1)), 0, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED((+ vec3(-699.082, -61.68, 6615.6348)).z)), bool(false)))))) : _GLF_FUZZED(-22520))))) / 1))), 0, 0, 0))), (_GLF_IDENTITY(min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), min((1), (1)))))) / 1))), 0, 0, 0))), max(min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), 0, 0, 0))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), 0, 0, 0)))))) << 0))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, _GLF_IDENTITY(0, int(int(0))))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))))))), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), int(ivec3(int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 0, 0, 0)), 0, 1)))) + 0), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), min(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))))), _GLF_IDENTITY(0, (0) << (-66121 & 0)), 0, 0))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) * ivec4(1, 1, 1, 1))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) | (_GLF_IDENTITY((1) / 1, clamp(_GLF_IDENTITY((1), ((1)) - 0) / 1, (1) / 1, (1) / 1))))))), 0, 0, 0))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 ^ (1))))) | 0), 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) ^ 0), 0, 0, 0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)), int(ivec4(1, 0, _GLF_IDENTITY(0, (0) | (0)), 0)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, _GLF_IDENTITY(0, 0 | (0)), 0)), int(ivec4(1, 0, 0, 0)))), 0 + _GLF_IDENTITY((_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(min(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)) >> ivec4(0, 0, 0, 0))), (min(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)) >> ivec4(0, 0, 0, 0)))) | ivec4(0, 0, 0, 0)))), int(ivec4(1, 0, 0, 0))))), min((_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(min(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)) >> ivec4(0, 0, 0, 0))), (min(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)) >> ivec4(0, 0, 0, 0)))) | ivec4(0, 0, 0, 0)))), int(ivec4(1, 0, 0, 0))))), (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(min(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)) >> ivec4(0, 0, 0, 0))), (min(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0), (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)) >> ivec4(0, 0, 0, 0)))) | ivec4(0, 0, 0, 0)))), int(ivec4(1, 0, 0, 0))))))))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0))))), 0, 0)), int(ivec4(1, 0, 0, 0)))), (false ? _GLF_FUZZED(-43825) : _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (0 & 30450) | (1)), 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), _GLF_IDENTITY(int(ivec4(1, 0, 0, _GLF_IDENTITY(0, max(0, 0)))), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(ivec4(1, 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, int(ivec3(1, 1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), 0, 0, 0), ivec4(0, 0, 0, 0) | (ivec4(1, 0, 0, 0)))))), int(ivec4(1, 0, 0, 0))))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(ivec4(1, 0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) * 1))), 0), _GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(2), ivec4(2))))))), _GLF_IDENTITY(min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, _GLF_IDENTITY(0, ~ (~ (0))), 0))), (min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))) << 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), 0, _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), clamp((0), (0), (0)))), 0))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ivec4(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), injectionSwitch.x), length(vec4(0.0, 0.0, 0.0, 0.0)) + (_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), clamp(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) >> ivec4(0, 0, 0, 0))))), (false ? _GLF_FUZZED(-43825) : _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(1, (0 & 30450) | (1)), 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, 0, 0)), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) | (0)))), 0, 0), ivec4(1, 1, 1, 1) * (ivec4(1, 0, 0, 0))), ivec4(1, 0, 0, 0)))), int(ivec4(1, 0, 0, 0))))))), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), _GLF_IDENTITY(ivec4(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), min(ivec4(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), ivec4(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ (ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(ivec4(1, 0, 0, 0)) : _GLF_FUZZED(46789))), min(int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), (true ? ivec3(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0) : _GLF_FUZZED(ivec3(64921, 58549, 29546)))))), 0, 0)), int(ivec4(1, 0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (true ? _GLF_IDENTITY(ivec4(1, 0, 0, 0), min(ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))) : _GLF_FUZZED(ivec4(38608, -87670, 35405, -78621))))), int(ivec4(1, 0, 0, 0)))), (false ? _GLF_FUZZED(-43825) : _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(_GLF_IDENTITY(1, (0 & 30450) | (1)), 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, 0, 0)), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ivec4(1, 1, 1, 1) * (ivec4(1, 0, 0, 0))), ivec4(1, 0, 0, 0)))), int(ivec4(1, 0, 0, 0))))))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(ivec4(1, 0, 0, 0), _GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(2), ivec4(2))))))), _GLF_IDENTITY(min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))), (min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))) << 0))))))) | 0) >> (0 >> _GLF_IDENTITY(int(1), int(1))))), clamp(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1))) / 1))))), 0, _GLF_IDENTITY(0, (0) - (0 >> _GLF_IDENTITY(int(0), int(0)))), 0))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, _GLF_IDENTITY(0, (0) | (0)))), _GLF_IDENTITY(min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, (1) - 0), 0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (0))))), 0))), (min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, (1) - 0), 0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (0))))), 0)))) ^ 0))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(4380) : 0))) | 0), 0)))))))), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (_GLF_IDENTITY(~ (ivec4(1, 0, 0, 0)), (true ? ~ _GLF_IDENTITY((ivec4(1, 0, 0, 0)), ivec4(0, 0, 0, 0) ^ ((ivec4(1, 0, 0, 0)))) : _GLF_FUZZED(ivec4(-94063, -31829, -38415, -39420)))))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (_GLF_IDENTITY(ivec4(1, 0, 0, 0), clamp(ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))))), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (1) / 1))), 0, 0, 0))))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), 0, 0, 0)), ((ivec4(1, 0, 0, 0))) << ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) / ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(7), ivec4(7))) >> _GLF_IDENTITY(ivec4(7), ivec4(7))))))), (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY(int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) + 0))), 0, _GLF_IDENTITY(0, 0 ^ (0)))), 0 ^ (int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) + 0))), 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0)))), ~ (~ (_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, min(0, 0))))))))))))))) + 0))), ~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) << ivec4(0, 0, 0, 0))) >> ivec4(0, 0, 0, 0)), (ivec4(1, 0, 0, 0)) ^ ivec4(_GLF_IDENTITY(0, min(0, 0)), 0, 0, 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, ~ (~ (0))), 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))))))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, max(0, 0)))))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) << ivec4(0, 0, 0, 0))) >> ivec4(0, 0, 0, 0)), (ivec4(1, 0, 0, 0)) ^ ivec4(_GLF_IDENTITY(0, min(0, 0)), 0, 0, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, _GLF_IDENTITY(0, max(0, 0)))) | (ivec4(1, 0, 0, 0))), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0)))), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0)))))), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, _GLF_IDENTITY(0, max(0, 0)))) | (ivec4(1, 0, 0, 0))), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0)))), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))))))))))))) / 1), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) + 0))), 0, 0))))) + 0))), ~ (~ (max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) + 0))), 0, 0))))) + 0, ((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY((int(ivec4(1, 0, 0, 0))) | (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), (int(ivec4(1, 0, 0, 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), min((int(ivec4(1, 0, 0, 0))) | (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), (int(ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, 0, 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec4(1, 0, 0, 0))) | (_GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), (int(ivec4(1, _GLF_IDENTITY(0, 1 * (0)), 0, 0))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), min(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY(int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) + 0))), 0, 0)), (_GLF_IDENTITY(int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) + 0))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)), 0)), (int(ivec4(1, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0) + 0, ((0) + 0) >> 0)))), 0, 0))) << 0)) >> 0)))) + 0) / (1 ^ 0))))))))))))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY(min(int(ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-50378) : 1)), 0, _GLF_IDENTITY(0, (0) | (0)), 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(sign(_GLF_IDENTITY(-32575, (_GLF_IDENTITY(-32575, 0 + (_GLF_IDENTITY(-32575, (-32575) | 0)))) ^ 0))))), 0))), (min(int(ivec4(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(70102) : 0, (false ? _GLF_FUZZED(70102) : 0) * 1))), 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), max(max(1, 1), _GLF_IDENTITY(max(1, 1), ~ (~ (max(1, 1))))))), (1) / 1))), _GLF_IDENTITY(0, 0 | (0)), 0, 0)))) << 0))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), (_GLF_IDENTITY(max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), (max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))))) << 0)) << 0), _GLF_IDENTITY(max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), min(max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)), 0, 0))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))))))))), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), _GLF_IDENTITY(min(int(ivec4(1, 0, 0, 0)), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(1 * (0 | (_GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1 * (0 | (_GLF_IDENTITY(1, (1) / 1))), (1 * (0 | (_GLF_IDENTITY(1, (1) / 1)))) ^ 0), 0, (27392 & (0 | 0)))), (int(ivec3(_GLF_IDENTITY(1 * (0 | (_GLF_IDENTITY(1, (1) / 1))), (1 * (0 | (_GLF_IDENTITY(1, (1) / 1)))) ^ 0), 0, (27392 & (0 | 0))))) | (int(ivec3(_GLF_IDENTITY(1 * (0 | (_GLF_IDENTITY(1, (1) / 1))), (1 * (0 | (_GLF_IDENTITY(1, (1) / 1)))) ^ 0), 0, (27392 & (0 | 0))))))))), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(sign(_GLF_IDENTITY(-32575, (_GLF_IDENTITY(-32575, 0 + (_GLF_IDENTITY(-32575, (-32575) | 0)))) ^ 0))))), 0))), (min(int(ivec4(1, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(70102) : _GLF_IDENTITY(0, (0) ^ 0))), 0)), int(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) / 1))), 0, 0, 0)))) << 0))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))))), _GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), _GLF_IDENTITY(min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))), (_GLF_IDENTITY(min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))), (min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))) | (_GLF_IDENTITY(min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))), (min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))) | (min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))))))) << ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), clamp(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), max(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), (false ? _GLF_FUZZED((42519 % ivec4(-49121, 7857, 90049, 7009))) : _GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), max(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))))))))))) | (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) / 1))))), 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), min(clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1, 0, 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(1, 0, 0, 0), _GLF_IDENTITY((ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0) & ivec4(10093, -90809, -33971, -48334)) | (_GLF_IDENTITY((ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0), ((ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0)) | ((ivec4(1, 0, 0, 0)) - ivec4(0, 0, 0, 0))))))))), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))))))))), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, _GLF_IDENTITY(0, _GLF_IDENTITY(max(_GLF_IDENTITY(0, (0) ^ 0), 0), ~ (~ (max(_GLF_IDENTITY(0, (0) ^ 0), 0))))), 0, _GLF_IDENTITY(0, (0) | 0)))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), min(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0))))))))) - ivec4(0, 0, 0, 0))))) << ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)), _GLF_struct_25(1u, _GLF_struct_23(mat4(1.0), mat3(1.0), mat3x4(1.0), bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, sin(0.0)))), 0.0)), injectionSwitch.x) + (injectionSwitch.y)))) && (true)))), vec3(1.0), mat3x2(1.0), bvec2(true), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * mat3(1.0)), _GLF_struct_24(1u, 1u)), 1u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (1 | _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, ((1) - 0) | ((1) - 0))), _GLF_IDENTITY(1, (1) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 atomicStore(buf[_GLF_struct_replacement_10.virtual_gid], _GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), 4, 64, 4);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))))))))))
                return;
              }
             continue;
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * vec2(1.0, 1.0)).x > injectionSwitch.y))));
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, ! (! (false))), true, true)), bool(bvec4(bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (true)))), true, false, false))))))
            continue;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(false, false, false), false)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))), false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), false)), true))))), false || (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))))))), false), bvec3(bvec4(bvec3(false, false, false), false)))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))))))), (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))))))))) || false))), false, false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2663.9976)), bool(false))), 1.0, sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat2(0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0, 0.0)), 0.0))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], 1.0 * ((injectionSwitch)[0]))) - 0.0), _GLF_FUZZED(-6.8)), vec2(_GLF_FUZZED(9273.9025), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))))).y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || false))))))))))
                    break;
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), max(dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 1.0, 0.0))).y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             return;
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) || false), true, false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) || false, bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) || false, false, true)))), true, false, false)))))) || false))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED((- pow(_GLF_IDENTITY(6.5, min(_GLF_IDENTITY(6.5, _GLF_IDENTITY(float(vec4(6.5, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0), mat3(mat3(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0)))))))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(float(vec4(6.5, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0), mat3(mat3(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0)))))))), (false ? _GLF_FUZZED(-61.38) : float(vec4(6.5, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0), mat3(mat3(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0)))))))))), 0.0, 1.0, 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, sqrt(cos(0.0)), determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), sqrt(1.0)), (mat3(_GLF_IDENTITY(float(vec4(6.5, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0), mat3(mat3(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0)))))))), (false ? _GLF_FUZZED(-61.38) : float(vec4(6.5, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0), mat3(mat3(mat3(0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 0.0)))))))))), 0.0, 1.0, 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, sqrt(cos(0.0)), determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), sqrt(1.0))) - mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), 6.5)), -4.6))) : injectionSwitch.x)) > injectionSwitch.y))))))));
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(19.27)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true))), injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)));
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))))), _injected_loop_counter)) != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec4((false) || false, false, _GLF_IDENTITY(false, ! (! (false))), true))))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((0 ^ 0) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(! (! (false))), bool(bvec4(bool(! (! (false))), false, true, false))))))))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, ! (! (false))))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(87030) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) - 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), (0 >> _GLF_IDENTITY(int(8), int(8))) >> 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true)), (bool(bvec4(bool(false), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1370.8084)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), true))) && true))) && true))))))))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     atomicStore(buf[_GLF_struct_replacement_26.next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) && _GLF_IDENTITY(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3864.4008, -4.7)))).x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && (((_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y))))))))))) || false)))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-634.546))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         break;
        }
       continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), (false ? _GLF_FUZZED((-3.0 - mat2(-287.431, -4123.4422, 3.1, -2236.3566))) : transpose(mat2(1.0))))))).x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         break;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 1.0)), tan(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0))).x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, 0))))); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), clamp(int(8), int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
}
