#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 vec2 _f0;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_9 {
 uint next_virtual_gid;
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_4 {
 int _f0;
 vec4 _f1;
 vec4 _f2;
 bvec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 ivec4 _f1;
 bool _f2;
 bvec4 _f3;
 int _f4;
 float _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 mat3x2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_5 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 bvec3 _f1;
 uint subgroup_size;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 _GLF_struct_0 _f1;
 mat2x3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(ivec2(1), _GLF_struct_0(mat4x2(1.0), bvec3(true), gl_SubgroupSize), mat2x3(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_1._f1.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_5(_GLF_struct_2(vec4(1.0), mat3x2(1.0), ivec2(1)), _GLF_struct_3(ivec4(1), ivec4(1), true, bvec4(true), 1, 1.0, uvec4(1u)), _GLF_struct_4(1, vec4(1.0), vec4(1.0), bvec2(true), true), mat3x2(1.0)), _GLF_struct_9(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_1._f1.subgroup_size), _GLF_struct_6(mat3x4(1.0), mat3(1.0)), _GLF_struct_7(mat2x3(1.0)), _GLF_struct_8(vec2(1.0))));
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   atomicStore(buf[_GLF_struct_replacement_10._f1.next_virtual_gid], uint(2), 4, 64, 4);
  }
}
