#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  {
   for(int _injected_loop_counter = (0 ^ (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.4) : injectionSwitch.x)) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), max(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0)))))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), max(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0)))))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), max(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0)))))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), max(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0)))))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), max(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-1.9, 741.068)) : vec2(1.0, 1.0)))))).x > injectionSwitch.y))))) && true)))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(63.13, 3.1)) : injectionSwitch)).x > injectionSwitch.y))));
                  }
                 return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     return;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, _GLF_IDENTITY(true, (true) || false))))))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                return;
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
      return;
     barrier();
    }
   do
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), false)))))) || false)));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true))), (_GLF_WRAPPED_IF_TRUE(true)) || false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5))))))))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9549.7813)))))))));
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 + (0)) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.6)), bool(false)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               continue;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.0)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, 1.0, 1.0, 1.0)), min(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, 1.0, 1.0, 1.0)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, 1.0, 1.0, 1.0))))).y, true, false, false))), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)))))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))), (injectionSwitch.x > injectionSwitch.y)), true)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - 0.0)) + 0.0)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - 0.0)) + 0.0)) > injectionSwitch.y)) || false) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - 0.0)) + 0.0)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - 0.0)) + 0.0)) > injectionSwitch.y)) || false) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - 0.0)) + 0.0)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, (_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - 0.0)) + 0.0)) > injectionSwitch.y)) || false) && true)))))) || false))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y) && true))))))))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) + 0.0))) > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 | 0))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), injectionSwitch)).x > injectionSwitch.y))))
                    continue;
                   barrier();
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))), bool(bvec2((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))), false))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(_GLF_IDENTITY(ivec2(1, 1), max(ivec2(1, 1), ivec2(1, 1))), 1)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * mat2(1.0)), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, abs(1.0), 0.0, 0.0, 0.0))))).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * mat2(1.0)), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, abs(1.0), 0.0, 0.0, 0.0))))).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * mat2(1.0)), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, abs(1.0), 0.0, 0.0, 0.0))))).x)) > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(bool(bvec2(false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))))))
                continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && ((false)))))), ((! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && ((false))))))) && true))))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))))))) || false), false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))))))) || false), false))), ! (! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), false, true))))))) || false), false))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
            barrier();
           continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)))) || false)), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))) || false))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        break;
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-7.0) : injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (! (injectionSwitch.x > injectionSwitch.y)))))))))), false, false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(361.887)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) || false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), false || ((injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_IDENTITY(false, ! (! (false)))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), false))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), true && (bool(bool(_GLF_IDENTITY(false, (false) || false)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), false || ((_GLF_IDENTITY(false, (false) || false)))))))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9.3 + 3837.1238)), _GLF_FUZZED(985.396)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
              barrier();
             return;
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, ! (! (true))), true))), false, true, true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) / 1u, 0u | ((gl_WorkGroupSize.x) / 1u)), (_GLF_IDENTITY((gl_WorkGroupSize.x) / 1u, min((gl_WorkGroupSize.x) / 1u, _GLF_IDENTITY((gl_WorkGroupSize.x) / 1u, 1u * ((gl_WorkGroupSize.x) / 1u))))) | ((gl_WorkGroupSize.x) / 1u)));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))) && (false)) || (false), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))) || _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)) || false)), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)) || false)), false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)) || false)), false, false), true)))))) && true)), false, false, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), false))))), false, false, false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) && (false)) || (false)), false, false, false)))) || false), _GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))), _GLF_IDENTITY(bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), false))))), false, false, false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) && (false)) || (false)), false, false, false)))) || false), _GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), false))))), false, false, false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) && (false)) || (false)), false, false, false)))) || false), _GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) || (false), bool(bvec2(_GLF_IDENTITY(false, true && (false)) || (false), false)))))), true)), false))))), false, false, false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) && (false)) || (false)), false, false, false)))) || false), _GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(false || (false), (false || (false)) && true)))), _GLF_IDENTITY(true, true && (true)), true, true)))), false, false, false))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) * 1.0))))))) && (_GLF_IDENTITY((false), ((false)) && true)))), false, false, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true))), ! (! (_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true))))))), false, false, false)))), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(false, true && (false)), false, false)))))), false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(false, (false) && true), false, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)) && true, (((false)) && true) && true))))))), _GLF_IDENTITY(false, true && (false)), false, false)))), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), (((false))) && true))) && true)))), false, false, false)))))), false, false, false)))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), _GLF_IDENTITY(false, bool(bool(false))), false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, true), bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)))))))) && (_GLF_IDENTITY((false), ((false)) && true)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)) && true, (((false)) && true) && true))))))), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false))))))) || false), false, false)))), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), (((false))) && true))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), (((false))) && true))) && true)))), ! (! (! (_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && _GLF_IDENTITY((_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), (((false))) && true))) && true)), ((_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), (((false))) && true))) && true))) && true))))))))), false, false, false)))))), false, false, false)))))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) || false), (false || (false)) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, true, true)))))) && true)))))))), true, true, true)))), false, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) || false), (false || (false)) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, true, true)))))) && true)))))))), true, true, true)))), false, false, false))), ! (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) || false), (false || (false)) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, true, true)))))) && true)))))))), true, true, true)))), false, false, false))), ! (! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) || false), (false || (false)) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, true, true)))))) && true)))))))), true, true, true)))), false, false, false)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), false, false, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), false, false, false)))), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), false, false, false)))))), false, false, false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(false, (false) && true), false, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)) && true, (((false)) && true) && true))))))), _GLF_IDENTITY(false, true && (false)), false, false)))), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), (((false))) && true))) && true)))), false, false, false)))))), false, false, false)))))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true))), false || (_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true))), false || (_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec3((false), true, true))), ((false)) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec3((false), true, true))), ((false)) && true))) && true))))))))))), false, false, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((false)) && true))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((false)) && true)))))))))), false, false, _GLF_IDENTITY(false, (false) && true))))), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ((false)) && true)))), false, false, false)))))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true)))))) || false), false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true))), false, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch + vec2(-482.068, -0.8))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)))).x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) && true)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)) && true, (((false)) && true) && true))))))), _GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, false || (false)), false)))), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || _GLF_IDENTITY((false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1])).y)))) && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), (((false))) && true))) && true)))), false, false, false)))))), false, false, false)))))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.32), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(exp2(vec2(7.1, -4.5))))).y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.32), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(exp2(vec2(7.1, -4.5))))).y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.32), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(exp2(vec2(7.1, -4.5))))).y))))), (bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.32), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(exp2(vec2(7.1, -4.5))))).y)))))) && true)))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
        barrier();
       barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), (int(0)) | (int(0))), int(0)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), (int(0)) | (int(0))), int(0)))), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0))), clamp(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0))), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0))), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0))), ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0))))))))) - 0)))), int(0)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))))).x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), max(int(0), int(0)))), clamp((int(0)), (int(0)), (_GLF_IDENTITY(int(0), (int(0)) | 0)))) | (int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | (ivec2(0, 1))))), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0))))))))), int(0))) ^ 0)))), ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), (int(0)) | (int(0))), int(0)), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0)))) - 0)))), int(0)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))))).x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), clamp((int(0)), (int(0)), (int(0)))) | (int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) | _GLF_IDENTITY((ivec2(0, 1)), max(_GLF_IDENTITY((ivec2(0, 1)), (false ? _GLF_FUZZED(clamp(ivec2(-329, -36714), 79157, 4971)) : (ivec2(0, 1)))), (ivec2(0, 1))))))), _GLF_IDENTITY(0, clamp(0, 0, 0))))))), int(0))) ^ 0))))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(_GLF_IDENTITY(3, (3) * 1)))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))), min(((1 << _GLF_IDENTITY(int(3), int(3)))), ((1 << _GLF_IDENTITY(int(3), int(3)))))) >> 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0) - 0), 0 | (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)) + 0))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED((mat4(-3.6, -8.9, -27.84, 0.6, -5.7, -835.674, -9.3, 5.2, -6734.2379, -568.854, -1193.2284, -19.91, -68.41, 2568.9538, -0.2, -1665.1644) , 55231))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))), (((1 << _GLF_IDENTITY(int(3), int(3))))) ^ 0) >> _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) << 0))), 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3)))) / 1))))) * 1)) >> 0, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, min(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 + (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), int(ivec3(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), 1, 1)))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), _GLF_IDENTITY(int(int(int(ivec2(0, 0)))), max(int(int(int(ivec2(0, 0)))), int(int(int(ivec2(0, 0))))))))))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) | ((1 << _GLF_IDENTITY(int(3), int(3)))))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((83439 % _injected_loop_counter))))), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), clamp(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3))))) / 1))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), max(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4))))) - 0), _GLF_IDENTITY(3, max(3, 3))))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-95298))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3)), 0 ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(3), int(3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 0 | (4)), 4))))) >> _GLF_IDENTITY(int(4), int(4)))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) << 0) | (_GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(0, (0) ^ 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(int(3), int(3)))), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(3)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), min((_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) >> 0)))))), (_GLF_IDENTITY(int(3), int(3)))))), 0, 0)))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), min(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))) << 0))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))))))))) >> 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)))), max(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(3, _GLF_IDENTITY(max(3, 3), (max(3, 3)) - 0))))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-95298))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, 3)))), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 | (0)))) ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))) - vec2(0.0, 0.0)).y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))))))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))))) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), min((_GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(int(3), int(3)))))), 0, 0)))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), min(_GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), (true ? float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) : _GLF_FUZZED(855.595))), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))) << 0)))) << 0)), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(_GLF_IDENTITY(3, (3) * 1)))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))), min(((1 << _GLF_IDENTITY(int(3), int(3)))), ((1 << _GLF_IDENTITY(int(3), int(3)))))) >> 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0) - 0), 0 | (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)) + 0))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED((mat4(-3.6, -8.9, -27.84, 0.6, -5.7, -835.674, -9.3, 5.2, -6734.2379, -568.854, -1193.2284, -19.91, -68.41, 2568.9538, -0.2, -1665.1644) , 55231))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))), (((1 << _GLF_IDENTITY(int(3), int(3))))) ^ 0) >> _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) << 0))), 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3)))) / 1))))) * 1)) >> 0, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, min(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 + (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), int(ivec3(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), 1, 1)))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), _GLF_IDENTITY(int(int(int(ivec2(0, 0)))), max(int(int(int(ivec2(0, 0)))), int(int(int(ivec2(0, 0))))))))))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) | ((1 << _GLF_IDENTITY(int(3), int(3)))))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((83439 % _injected_loop_counter))))), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), clamp(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3))))) / 1))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), max(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4))))) - 0), _GLF_IDENTITY(3, max(3, 3))))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-95298))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3)), 0 ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(3), int(3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 0 | (4)), 4))))) >> _GLF_IDENTITY(int(4), int(4)))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) << 0) | (_GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(0, (0) ^ 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(int(3), int(3)))), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(3)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), min((_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) >> 0)))))), (_GLF_IDENTITY(int(3), int(3)))))), 0, 0)))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), min(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))) << 0))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))))))))) >> 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)))), max(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(3, _GLF_IDENTITY(max(3, 3), (max(3, 3)) - 0))))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-95298))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, 3)))), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 | (0)))) ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))) - vec2(0.0, 0.0)).y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))))))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))))) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), min((_GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(int(3), int(3)))))), 0, 0)))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), min(_GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), (true ? float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) : _GLF_FUZZED(855.595))), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))) << 0)))) << 0))) | ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(_GLF_IDENTITY(3, (3) * 1)))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))), min(((1 << _GLF_IDENTITY(int(3), int(3)))), ((1 << _GLF_IDENTITY(int(3), int(3)))))) >> 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0) - 0), 0 | (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)) + 0))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED((mat4(-3.6, -8.9, -27.84, 0.6, -5.7, -835.674, -9.3, 5.2, -6734.2379, -568.854, -1193.2284, -19.91, -68.41, 2568.9538, -0.2, -1665.1644) , 55231))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))), (((1 << _GLF_IDENTITY(int(3), int(3))))) ^ 0) >> _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) << 0))), 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3)))) / 1))))) * 1)) >> 0, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, min(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 + (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), int(ivec3(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)), 1, 1)))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), _GLF_IDENTITY(int(int(int(ivec2(0, 0)))), max(int(int(int(ivec2(0, 0)))), int(int(int(ivec2(0, 0))))))))))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) | ((1 << _GLF_IDENTITY(int(3), int(3)))))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((83439 % _injected_loop_counter))))), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), clamp(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3))))) / 1))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), max(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4))))) - 0), _GLF_IDENTITY(3, max(3, 3))))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-95298))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3)), 0 ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(3), int(3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 0 | (4)), 4))))) >> _GLF_IDENTITY(int(4), int(4)))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) << 0) | (_GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(0, (0) ^ 0), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(int(3), int(3)))), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(3)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), min((_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) >> 0)))))), (_GLF_IDENTITY(int(3), int(3)))))), 0, 0)))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), min(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))) << 0))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))))))))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), 0 ^ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))) | ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, 0 | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, max(((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0, ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0)))))))))))))) >> 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-217.848)), bool(false))), 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))), injectionSwitch.y)))), max(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), (3))) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(3, _GLF_IDENTITY(max(3, 3), (max(3, 3)) - 0))))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-95298))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, 3)))), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 | (0)))) ^ (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))) - vec2(0.0, 0.0)).y)), int(ivec4(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(_GLF_IDENTITY(3, 0 ^ (3))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1, 0)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))))))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0, 0))))) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), min((_GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(int(3), int(3)))))), 0, 0)))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) & int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), min(_GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), (true ? float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) : _GLF_FUZZED(855.595))), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))) << 0)))) << 0))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (int(3)) ^ 0))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), min(workgroup_size, _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))) * workgroup_id, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), clamp(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-26.39))), injectionSwitch.y)))) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), min(workgroup_size, _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))) * workgroup_id, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), clamp(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-26.39))), injectionSwitch.y)))) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), min(workgroup_size, _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))) * workgroup_id, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), clamp(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-26.39))), injectionSwitch.y)))) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), min(workgroup_size, _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))) * workgroup_id, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), clamp(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-26.39))), injectionSwitch.y)))) * (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) | (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0)) > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, 1 ^ 0)))), 1 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), (_GLF_IDENTITY(1, int(int(1)))) / (1 & 1))))), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id))) - 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, int(int(1))), 0), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(1, int(int(1))), 0))))))))) | ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), 0 + (_GLF_IDENTITY(1, int(int(1)))))))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) && true), bool(bvec3((false), false, true)))), true && (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), _GLF_IDENTITY(bool(bvec2(false || (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), true)), (_GLF_IDENTITY(bool(bvec2(false || (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), true)), false || (bool(bvec2(false || (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), true))))) && true)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))))) && true)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), true, false, false))))))))
      return;
    }
   atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (1) - 0)), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (1 & 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y))))))), true, false)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
            break;
          }
        }
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(-94660))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true))))))))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (_GLF_IDENTITY(~ (~ (0)), clamp(~ (~ (0)), ~ (~ (0)), _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | (~ (~ (0))))))) ^ 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   break;
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               continue;
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, exp(0.0)), vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(0.0, exp(0.0)), vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, round(length(normalize(1.0))), 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, round(length(normalize(1.0))), 0.0, 0.0))), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(0.0), round(length(normalize(1.0)))), vec4(0.0, 0.0, 0.0, round(length(normalize(1.0))))), dot(vec4(0.0, 0.0, length(0.0), round(length(normalize(1.0)))), vec4(0.0, 0.0, 0.0, round(length(normalize(1.0)))))), 0.0, 1.0))).x, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, exp(0.0)), vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(0.0, exp(0.0)), vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, round(length(normalize(1.0))), 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, round(length(normalize(1.0))), 0.0, 0.0))), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(0.0), round(length(normalize(1.0)))), vec4(0.0, 0.0, 0.0, round(length(normalize(1.0))))), dot(vec4(0.0, 0.0, length(0.0), round(length(normalize(1.0)))), vec4(0.0, 0.0, 0.0, round(length(normalize(1.0)))))), 0.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, exp(0.0)), vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y))), dot(vec2(0.0, exp(0.0)), vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, round(length(normalize(1.0))), 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, round(length(normalize(1.0))), 0.0, 0.0))), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(0.0), round(length(normalize(1.0)))), vec4(0.0, 0.0, 0.0, round(length(normalize(1.0))))), dot(vec4(0.0, 0.0, length(0.0), round(length(normalize(1.0)))), vec4(0.0, 0.0, 0.0, round(length(normalize(1.0)))))), 0.0, 1.0))).x)) > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) / vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))).y, (false ? _GLF_FUZZED(fma((-1.4), 613.361, 8.2)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))).y) / 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(-120.975)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y : _GLF_FUZZED(-4.5)))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(-120.975)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y : _GLF_FUZZED(-4.5))))))) || false), _GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-79.78), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(-272.181)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) / vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(799.176) : 1.0)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), false || (! (! ((_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat2(length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-79.78), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(-272.181)), bvec2(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(799.176) : 1.0)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), max(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(799.176) : 1.0)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(799.176) : 1.0)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))), false, false))))) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true, true)))))))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(0, min(0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0 & -89297, ~ (_GLF_IDENTITY(~ (0 & -89297), (~ (0 & -89297)) / 1))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) * 1), 1)), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1, ((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1) * 1), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, _GLF_IDENTITY((0 & -89297) << 0, ((0 & -89297) << 0) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))))) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1, ((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1) - (-98803 & 0))) * 1), _GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1, (_GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)), 0 ^ ((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)))) / 1) * 1), _GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1, ((_GLF_IDENTITY(0 & -89297, (0 & _GLF_IDENTITY(-89297, max(-89297, _GLF_IDENTITY(-89297, 0 ^ (-89297))))) << 0)) / 1) * 1))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -89297, _GLF_IDENTITY((0 & -89297) << _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(0, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(0, max(0, 0)) : _GLF_FUZZED(-87440))))), max((0 & -89297) << 0, _GLF_IDENTITY((0 & -89297), clamp((0 & -89297), _GLF_IDENTITY((0 & -89297), ((0 & -89297)) >> 0), _GLF_IDENTITY((0 & -89297), ((0 & -89297)) / 1))) << 0)))) / 1, clamp((_GLF_IDENTITY(0 & -89297, _GLF_IDENTITY((0 & -89297) << _GLF_IDENTITY(0, 0 ^ (0)), 0 | _GLF_IDENTITY((_GLF_IDENTITY((0 & -89297) << 0, ((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), 0 | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) & -89297) << 0) ^ (1 ^ 1))), (_GLF_IDENTITY((_GLF_IDENTITY((0 & -89297) << 0, ((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), 0 | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) & -89297) << 0) ^ (1 ^ 1))), 0 | ((_GLF_IDENTITY((0 & -89297) << 0, ((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), 0 | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) & -89297) << 0) ^ (1 ^ 1)))))) * 1)))) / 1, (_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1, (_GLF_IDENTITY(0 & -89297, (0 & -89297) << 0)) / 1)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false)), bool(bool(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false)), bool(bool(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false))))), (_GLF_IDENTITY(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false)), bool(bool(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.7) : injectionSwitch.y)) : _GLF_FUZZED(-9.3))))), true, false, false)))))) && true))))), (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false)), bool(bool(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, _GLF_IDENTITY(false, bool(bool(false))), false)), bool(bool(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, false))))), (_GLF_IDENTITY(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7683.5317))), injectionSwitch.y)), true, false, false)), bool(_GLF_IDENTITY(bool(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.7) : injectionSwitch.y)) : _GLF_FUZZED(-9.3))))), true, false, false))), true && (bool(bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.7) : injectionSwitch.y)) : _GLF_FUZZED(-9.3))))), true, false, false)))))))) && _GLF_IDENTITY(true, ! (! (true))))))))) && true)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    continue;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4(! (_GLF_WRAPPED_IF_TRUE(true)), true, false, true))))), false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(ceil(injectionSwitch)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))), vec2(mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))), abs(0.0), 1.0, abs(sqrt(1.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, length(0.0), 1.0, 1.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5908.1919))), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true && ((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), ((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) && true), (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(85.44) : injectionSwitch.x)) > injectionSwitch.y)) && true)))))))), true && ((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), ((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! (! (injectionSwitch.x > injectionSwitch.y)), false)))))))))) && true)) && true))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), mix(float(_GLF_FUZZED((- _GLF_IDENTITY(-99.58, mix(float(_GLF_FUZZED(162.014)), float(-99.58), bool(true)))))), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)))))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2927.9139)), float(injectionSwitch.x), bool(true))), float(mat3x4(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, length(vec2(0.0, 0.0)), tan(0.0), 1.0, 0.0, 0.0))).y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.9), _GLF_FUZZED(-8024.8848)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))) || false))))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0), _GLF_IDENTITY(mat2(mat4x3(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))), transpose(transpose(mat2(mat4x3(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))))))), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))))), min(float(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.1)), bool(false))), exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), mat4(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8517.3553)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), bool(true))), exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))), (true ? mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.1)), bool(false))), exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), mat4(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8517.3553)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), bool(true))), exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))) : _GLF_FUZZED(mat2(0.7, 9.2, 66.48, -7.8)))))), float(_GLF_IDENTITY(mat2(injectionSwitch.y, _GLF_IDENTITY(exp(0.0), float(mat2x3(exp(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))))), 1.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(mat4(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) / 1.0) : _GLF_FUZZED(-9572.8196))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-99.44)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) / 1.0) : _GLF_FUZZED(-9572.8196))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-99.44)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) * mat4(1.0)) + (mat4(_GLF_IDENTITY(mat2(injectionSwitch.y, exp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.1) : 0.0))), 1.0, 1.0), (mat2(injectionSwitch.y, exp(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))))))))))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec2(bool(bvec3(false, true, false)), true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))))) && true)))) || false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && true), (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true, (true) || false) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2306.8659) : injectionSwitch.x)), 1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0), (true ? mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0) : _GLF_FUZZED(mat4(-5.0, -7130.3650, -4500.3258, 744.722, -3.5, -2.2, 355.584, -8709.6623, -9.2, -934.169, -0.2, -88.26, -7.8, -4013.8129, 7932.1582, 2.9))))), (float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0), (true ? mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0) : _GLF_FUZZED(mat4(-5.0, -7130.3650, -4500.3258, 744.722, -3.5, -2.2, 355.584, -8709.6623, -9.2, -934.169, -0.2, -88.26, -7.8, -4013.8129, 7932.1582, 2.9)))))) - 0.0)), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0), (true ? mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0) : _GLF_FUZZED(mat4(-5.0, -7130.3650, -4500.3258, 744.722, -3.5, -2.2, 355.584, -8709.6623, -9.2, -934.169, -0.2, -88.26, -7.8, -4013.8129, 7932.1582, 2.9))))), (float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0), (true ? mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 1.0, 0.0) : _GLF_FUZZED(mat4(-5.0, -7130.3650, -4500.3258, 744.722, -3.5, -2.2, 355.584, -8709.6623, -9.2, -934.169, -0.2, -88.26, -7.8, -4013.8129, 7932.1582, 2.9)))))) - 0.0)), 0.0))), vec2(1.0, 0.0))), min(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), cos(0.0), 0.0, 1.0, determinant(mat3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(9.4))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))))) > injectionSwitch.y))), _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true && (true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))))).x > injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))))) || false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(786.910)), vec2(_GLF_FUZZED(6.3), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))));
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true && (false))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) && true))))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, false))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(sin(0.0)), 1.0, 1.0))))), true, false, true)))))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true, false)))))))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))), 0.0, 1.0))), 0.0, 0.0))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 1.0))), 0.0, 0.0))).x > injectionSwitch.y), true, true))))), _GLF_IDENTITY(true, (true) || false) && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(6.3, clamp(6.3, 6.3, 6.3))) : float(1.0))))), 1.0))))), 0.0, 0.0))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(2062.3435, 2.6)) : _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))))), 0.0, 1.0))), 0.0, 0.0))).x > injectionSwitch.y), true, true))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))), 0.0, 1.0))), 0.0, 0.0))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 1.0))), 0.0, 0.0))).x > injectionSwitch.y), true, true))))), _GLF_IDENTITY(true, (true) || false) && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(6.3, clamp(6.3, 6.3, 6.3))) : float(1.0))))), 1.0))))), 0.0, 0.0))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(2062.3435, 2.6)) : _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))))), 0.0, 1.0))), 0.0, 0.0))).x > injectionSwitch.y), true, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))), int(7))), int(7))), (false ? _GLF_FUZZED(31039) : (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) >> 0))) >> _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(562.336)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - 0u)], uint(2), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), clamp(_GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), min(_GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(4, (4) | (4)))), _GLF_IDENTITY(4, (4) | (4)))));
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((6898.6166 * -32.59))), bool(false))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) || false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              continue;
             return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))) || (_GLF_IDENTITY(false, (false) && true)))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false)))), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), mix(float(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))), float(_GLF_FUZZED(-68.83)), bool(false))), 1.0, 1.0, 1.0, sin(0.0), 0.0))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 | (int(2))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1))) | (1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! _GLF_IDENTITY((true), ! (! ((true)))), false, false, _GLF_IDENTITY(true, true && (true)))))))))
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9005.7672), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5554.9914)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + _GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))) - (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), int(0))), (~ (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) - ivec2(0, 0))))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) * 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
