#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 bvec3 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 uint _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 bvec4 _f1;
 uvec3 _f2;
 int _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_12 {
 mat3x2 _f0;
 uint _f1;
 mat2x3 _f2;
 mat3 _f3;
 bool _f4;
 uvec4 _f5;
 int _f6;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 vec3 _f1;
 vec4 _f2;
 uint num_workgroup;
 _GLF_struct_15 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_10 {
 uint _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
 mat3x2 _f1;
 uvec4 _f2;
 mat3 _f3;
 mat4x3 _f4;
 mat3x2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 mat4x2 _f1;
 ivec4 _f2;
 mat3x2 _f3;
 mat2 _f4;
 vec3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_6 _f0;
 ivec3 _f1;
 _GLF_struct_7 _f2;
 uvec4 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 float _f1;
 _GLF_struct_10 _f2;
 ivec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 uint subgroup_size;
 uvec3 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_2 {
 int _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 vec4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 mat2x4 _f1;
 uvec3 _f2;
 vec4 _f3;
 uint _f4;
 int _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 mat3 _f1;
 bvec4 _f2;
 bvec2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 ivec4 _f1;
 bvec2 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 mat2x4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(_GLF_struct_0(vec3(1.0), mat3(1.0), bvec4(true), bvec2(true), bvec4(true)), ivec4(1), bvec2(true), _GLF_struct_1(mat2x3(1.0), mat2x4(1.0), uvec3(1u), vec4(1.0), 1u, 1, mat2x4(1.0)), _GLF_struct_2(1, mat4x3(1.0), mat2x4(1.0), vec4(1.0), mat3x2(1.0)), _GLF_struct_3(uvec3(1u), gl_SubgroupSize, uvec3(1u), uvec2(1u))), mat2x4(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(uvec3(1u), vec3(1.0), vec4(1.0), gl_NumWorkGroups.x, _GLF_struct_15(mat2x3(1.0), _GLF_struct_12(mat3x2(1.0), 1u, mat2x3(1.0), mat3(1.0), true, uvec4(1u), 1), _GLF_struct_13(mat2x3(1.0), bvec4(true), uvec3(1u), 1, ivec2(1)), _GLF_struct_14(bvec3(true), mat4x2(1.0), mat2x3(1.0), 1u, bvec3(true))), mat2x3(1.0));
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_9(_GLF_struct_6(mat4x3(1.0), mat4x2(1.0), ivec4(1), mat3x2(1.0), mat2(1.0), vec3(1.0), ivec3(1)), ivec3(1), _GLF_struct_7(mat4x3(1.0), mat4x3(1.0)), uvec4(1u), _GLF_struct_8(ivec3(1), mat3x2(1.0), uvec4(1u), mat3(1.0), mat4x3(1.0), mat3x2(1.0), ivec2(1))), 1.0, _GLF_struct_10(1u, gl_WorkGroupID.x), ivec2(1), bvec3(true));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_11._f2.workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_5._f0._f5.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_5._f0._f5.subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
}
