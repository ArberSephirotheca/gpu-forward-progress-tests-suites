#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 ivec2 _f0;
 mat4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_19 {
 vec3 _f0;
 bool _f1;
 mat3x2 _f2;
 bool _f3;
} ;

struct _GLF_struct_18 {
 uvec2 _f0;
 uint _f1;
 uint _f2;
 float _f3;
 mat4x2 _f4;
 uvec4 _f5;
 int _f6;
} ;

struct _GLF_struct_17 {
 mat2x4 _f0;
} ;

struct _GLF_struct_21 {
 mat2x4 _f0;
 _GLF_struct_17 _f1;
 float _f2;
 bvec2 _f3;
 _GLF_struct_18 _f4;
 _GLF_struct_19 _f5;
 _GLF_struct_20 _f6;
} ;

struct _GLF_struct_22 {
 uvec4 _f0;
 mat4x3 _f1;
 uvec4 _f2;
 vec3 _f3;
 uint workgroup_size;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 mat3x2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_13 {
 uvec3 _f0;
 bvec3 _f1;
 ivec3 _f2;
 mat4x3 _f3;
 int _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_12 {
 mat3x2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_14 _f0;
 mat3x2 _f1;
 _GLF_struct_15 _f2;
 uint subgroup_size;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 ivec3 _f1;
 mat3 _f2;
 ivec3 _f3;
 uvec3 _f4;
 float _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 mat3x2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 uvec2 _f1;
 mat3x4 _f2;
 mat4x2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 ivec2 _f1;
 vec2 _f2;
 uvec4 _f3;
 uvec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 uvec3 _f1;
 mat2 _f2;
 ivec2 _f3;
 mat2x4 _f4;
 _GLF_struct_3 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 float _f1;
 mat4x3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 uint _f3;
 vec2 _f4;
 bool _f5;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat4x3 _f1;
 _GLF_struct_0 _f2;
 mat3x4 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_2 _f0;
 _GLF_struct_5 _f1;
 uint virtual_gid;
 _GLF_struct_6 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_10 _f4;
 int _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true), true, true)))))))))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))), ! (! (_GLF_DEAD(false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) ^ 0) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-64649) : _injected_loop_counter))) << 0) != 1, false || (_injected_loop_counter != 1))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))))), bool(bvec2((_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))))), true)))) || false), ((_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)))))) || false)))); _injected_loop_counter ++)
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(452.849) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-55.09, 0.1, 65.82, 0.9)))) * (mat2(1.0))) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(452.849) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-55.09, 0.1, 65.82, 0.9)))) * (mat2(1.0))) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x)) > injectionSwitch.y))))));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(2.9), clamp(true ? injectionSwitch.x : _GLF_FUZZED(2.9), true ? injectionSwitch.x : _GLF_FUZZED(2.9), true ? injectionSwitch.x : _GLF_FUZZED(2.9))))) > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> (0 | 0))))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, (false) && true), true), bvec3(bvec3(bvec3(false, false, true))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))), true))))))), false)))))))), bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec4(bvec3(bvec3(false, false, true)), false))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, false, _GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(false, false, true)))), true)))), false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), false, true)), false)))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)), bvec3(bvec4(bvec3(bvec3(false, false, true)), false))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), false, true)), false)))))))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), true)), true)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))), false, true)), false))))))), false)))))))))))), (! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false)))), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false))), true))))))) && true), true))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0))).x > injectionSwitch.y))))), true, false))) || false))));
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), true && (bool(false))), false)))), ! (! (bool(_GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), true && (bool(false))), false))))))))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY((bool(bvec2(false, true))), ! (! ((bool(bvec2(false, true)))))) || false))))))
                  return;
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_14(_GLF_struct_12(mat3x2(1.0), ivec4(1)), _GLF_struct_13(uvec3(1u), bvec3(true), ivec3(1), mat4x3(1.0), 1, bvec4(true))), mat3x2(1.0), _GLF_struct_15(mat2x3(1.0), mat3x2(1.0), mat4x3(1.0)), gl_SubgroupSize);
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((93980 % 21650) & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 0, 1)))), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), (max(4, 4)) ^ 0)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))), (! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false, false))))) && true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-87011)), _GLF_FUZZED((-2.1))), vec2(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) : _GLF_FUZZED(mat4x2(628.473, -9.2, -5.2, -5.4, 862.122, 8473.3621, 9.8, -7.9)[1])))[0], (injectionSwitch)[1]), bvec2(true, true))).y, mix(float(_GLF_FUZZED(-75.62)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-87011)), _GLF_FUZZED((-2.1))), vec2(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) : _GLF_FUZZED(mat4x2(628.473, -9.2, -5.2, -5.4, 862.122, 8473.3621, 9.8, -7.9)[1])))[0], (injectionSwitch)[1]), bvec2(true, true))).y), bool(true)))))))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_IDENTITY(uvec4(1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(1u, 1u, 1u, 1u))), min(_GLF_IDENTITY((uvec4(1u)), max((uvec4(_GLF_IDENTITY(1u, 0u ^ (1u)))), (uvec4(1u)))), _GLF_IDENTITY((uvec4(1u)), clamp((uvec4(1u)), (uvec4(1u)), (uvec4(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))))) | uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 1))), (0) >> 0)], injectionSwitch[1])).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) >> 0)], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, ~ (~ (1)))))], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).x) * 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), mat4x3(1.0), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (_GLF_IDENTITY(uvec4(1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))))))), vec3(1.0), gl_WorkGroupSize.x, _GLF_struct_21(mat2x4(1.0), _GLF_struct_17(mat2x4(1.0)), 1.0, bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)), _GLF_struct_18(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) - uvec2(0u, 0u)), uvec2(uvec2(_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u)))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED((10230u & subgroup_local_id)) : 1u))), max(uvec2(1u), uvec2(1u)))), (true ? (_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u)))) : _GLF_FUZZED(uvec2(115597u, _GLF_IDENTITY(128830u, _GLF_IDENTITY((_GLF_IDENTITY(128830u, min(128830u, _GLF_IDENTITY(128830u, (128830u) | 0u)))), clamp((_GLF_IDENTITY(128830u, min(128830u, _GLF_IDENTITY(128830u, (128830u) | 0u)))), (_GLF_IDENTITY(128830u, min(128830u, _GLF_IDENTITY(128830u, (128830u) | 0u)))), (_GLF_IDENTITY(128830u, min(128830u, _GLF_IDENTITY(128830u, (128830u) | 0u)))))) >> 0u))))), (_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u)))), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec2(1u))), uvec2(1u))), uvec2(1u)))), uvec2(0u, 0u) ^ ((_GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec2(1u))), uvec2(1u))), uvec2(1u)))))))))), 1u, 1u, 1.0, mat4x2(1.0), uvec4(_GLF_IDENTITY(1u, 0u | (1u))), 1), _GLF_struct_19(vec3(1.0), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), mat3x2(1.0), true), _GLF_struct_20(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) ^ (0 | 0)))), mat4(1.0), mat2x4(1.0))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 uint workgroup_base = _GLF_struct_replacement_22.workgroup_size * workgroup_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), false || _GLF_IDENTITY((bool(true)), true && ((bool(true))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), true), bvec2(bvec2(bvec2(bool(bvec2(false, true)), true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), true, false))))), true), bvec2(bvec2(bvec2(bool(bvec2(false, true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), (true) && true), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, true && (false))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, ! (! (false)))), false, true))), false, false)))))))))), false, true, false)))), (bool(bvec2(false, true))) && _GLF_IDENTITY(true, false || (true)))) || (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)), true, false))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_16.subgroup_size;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_2(1.0, mat4x3(1.0), _GLF_struct_0(mat3x2(1.0), mat2x4(1.0), bvec3(_GLF_IDENTITY(true, false || (true))), 1u, vec2(1.0), true), mat3x4(1.0), _GLF_struct_1(mat2(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), mat4x3(1.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0))))), _GLF_struct_5(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uvec4(1u, 1u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), _GLF_IDENTITY(1u, (1u) ^ 0u)))))))), uvec3(1u), mat2(1.0), ivec2(1), mat2x4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(vec3(2.7, -6.7, -7.5)[2])))))), _GLF_struct_3(mat2(1.0), ivec2(1), vec2(1.0), uvec4(1u), _GLF_IDENTITY(uvec3(1u), max(_GLF_IDENTITY(uvec3(1u), ((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)), min((uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))))) + (uvec3(1u))), uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) | (1u))) | (1u))))), ivec2(1)), _GLF_struct_4(uvec4(1u), uvec2(1u), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0) + _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, abs(1.0), _GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0), 0.0, 1.0), (mat2x3(0.0, 1.0, abs(1.0), abs(0.0), 0.0, 1.0)) * mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))))), abs(0.0) + ((1.0) + 0.0)), (_GLF_IDENTITY((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0)) + 0.0, abs(0.0) + ((1.0) + _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9869.6944) : 0.0))))) / 1.0))), mat4x2(1.0), bvec2(true))), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_base + subgroup_local_id, _GLF_struct_6(mat3x2(1.0)), _GLF_struct_8(_GLF_struct_7(_GLF_IDENTITY(vec2(1.0), (true ? vec2(1.0) : _GLF_FUZZED(vec2(5928.7343, -9921.9794)))), _GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), cos(0.0), 1.0, 0.0))))), _GLF_struct_10(_GLF_struct_9(mat3(1.0), ivec3(1), mat3(1.0), ivec3(1), uvec3(1u), 1.0), mat3x2(1.0), ivec4(_GLF_IDENTITY(1, (1) | (0 ^ 0)))), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), (1) << _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-43175))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-43175))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-43175))) : _GLF_FUZZED(-4264)))) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-43175)))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), false || ((! _GLF_IDENTITY((true), false || ((true))))))), ! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), false || (_GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY((true), false || ((true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((! _GLF_IDENTITY((true), false || ((true)))))), false || (bool(bool((! _GLF_IDENTITY((true), false || ((true))))))))), ! (! (! (_GLF_IDENTITY(bool(bool((! _GLF_IDENTITY((true), false || ((true)))))), false || (bool(bool((! _GLF_IDENTITY((true), false || ((true)))))))))))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))))
            return;
          }
         else
          {
          }
         return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) >> 0u) + 1) % _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_size, (_GLF_struct_replacement_16.subgroup_size) - 0u));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), max((_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(clamp(~ (1), ~ (1), ~ (1)), int(ivec2(clamp(~ (1), ~ (1), ~ (1)), 0))))), ((_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), ~ (~ ((_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (_GLF_IDENTITY(1, int(ivec2(1, 0))))))))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(max(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6)))))) + 0), (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6)))))) + 0)) >> 0), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), (int(int(6))) | (int(int(6)))))))))), (max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 | (int(6))), (int(6)) | (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) >> 0)) | (6))))), int(6), int(6))), int(6)), 0 << _GLF_IDENTITY(int(6), int(6)))) / 1)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), (true ? _GLF_IDENTITY(6, max(6, 6)) : _GLF_FUZZED(_injected_loop_counter)))))), clamp(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))))), int(6)), ~ (_GLF_IDENTITY(~ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), ((int(6))) >> 0) | (int(6))), int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), ~ (~ (int(_GLF_IDENTITY(6, max(6, 6)))))))), int(6))), max(~ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | (int(6)), max((int(6)) | (int(6)), _GLF_IDENTITY((int(6)) | (int(6)), ((int(6)) | (int(6))) ^ 0)))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6))), ~ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6), int(_GLF_IDENTITY(6, max(6, 6))))), int(6))))))), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 | (int(6))), (int(6)) - 0), (0 << _GLF_IDENTITY(int(7), int(7)))), (ivec2(_GLF_IDENTITY(int(6), (int(6)) - 0), (0 << _GLF_IDENTITY(int(7), int(7))))) << ivec2(0, 0)))), int(6))), (max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | (int(6)))) | (int(6))), (int(6)) | (int(6))), int(6), int(6))), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), clamp(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))))) / 1)))))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true), bool(bvec3(bool(bool(_GLF_DEAD(false))), true, false)))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 73365)); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (true ? clamp(injectionSwitch, injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(253.498, 77.20))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)) || false))), false)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (true ? clamp(injectionSwitch, injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(253.498, 77.20))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)) || false))), false)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? clamp(injectionSwitch, injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(253.498, 77.20))), vec2(0.0, 0.0) + ((_GLF_IDENTITY(true, ! (! (true))) ? clamp(injectionSwitch, injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(253.498, 77.20))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.0), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), (true ? vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)) : _GLF_FUZZED(asin((vec2(-4880.0774, -64.45) / -35.17))))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true))))))) || false)) || false))), false))))) && true)))))
                          {
                           for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true)), mix(float(_GLF_FUZZED((-19.21))), float(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true)), mix(float(_GLF_FUZZED((-19.21))), float(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true)), mix(float(_GLF_FUZZED((-19.21))), float(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true)), mix(float(_GLF_FUZZED((-19.21))), float(mix(float(_GLF_FUZZED(784.997)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                              {
                               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   return;
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   return;
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                    }
                   else
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true)));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) || false))), false || (((false)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[_GLF_struct_replacement_11.virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), int(_GLF_IDENTITY(ivec4(4, (0 & -37964), _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 1))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-66151, max(-66151, -66151))) : 1)), (1 ^ 0)), ivec4(1, 1, 1, 1) * (ivec4(4, (0 & -37964), 1, _GLF_IDENTITY((1 ^ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, 0)), 0)), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(59034) : 0)), (false ? _GLF_FUZZED(60232) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(59034) : 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)) ? _GLF_FUZZED(59034) : 0))) | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(59034), _GLF_IDENTITY(int(ivec2(_GLF_FUZZED(59034), 1)), int(ivec2(int(ivec2(_GLF_FUZZED(59034), 1)), 0)))), clamp(_GLF_FUZZED(59034), _GLF_FUZZED(59034), _GLF_IDENTITY(_GLF_FUZZED(59034), (_GLF_FUZZED(59034)) ^ 0))) : 0))), ((_GLF_IDENTITY(0, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec2(! (_GLF_IDENTITY((false), bool(bool((false))))), false))))) && true) ? _GLF_IDENTITY(_GLF_FUZZED(59034), clamp(_GLF_FUZZED(59034), _GLF_FUZZED(59034), _GLF_IDENTITY(_GLF_FUZZED(59034), (_GLF_FUZZED(59034)) ^ 0))) : 0)))) | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_IDENTITY(_GLF_FUZZED(59034), clamp(_GLF_FUZZED(59034), _GLF_FUZZED(59034), _GLF_IDENTITY(_GLF_FUZZED(59034), (_GLF_FUZZED(59034)) ^ 0))) : 0))))))))), ((1 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(59034) : 0)), (false ? _GLF_FUZZED(60232) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(59034) : 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)) ? _GLF_FUZZED(59034) : 0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_IDENTITY(_GLF_FUZZED(59034), clamp(_GLF_FUZZED(59034), _GLF_IDENTITY(_GLF_FUZZED(59034), (_GLF_FUZZED(59034)) | (_GLF_IDENTITY(_GLF_FUZZED(59034), (_GLF_FUZZED(59034)) | 0))), _GLF_IDENTITY(_GLF_FUZZED(59034), (_GLF_FUZZED(59034)) ^ 0))) : 0)))))))) - 0)))))), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) | (clamp(4, 4, 4)))), 4)), min(4, 4)), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false)))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false))))) || false))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))))), 1.0, 1.0, 0.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y)))))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(step(-7.1, 18.36)))), clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), 1.0, 1.0, 0.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))), 1.0, 1.0, 0.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0)))) * abs(vec2(1.0, 1.0))).y))))))) && true))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
