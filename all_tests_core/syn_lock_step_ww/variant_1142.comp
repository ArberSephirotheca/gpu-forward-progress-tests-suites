#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))), false))), false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(6.7, 21.49, 7942.9721).s)), float(injectionSwitch.y), bool(true)))), false, false))))))
        {
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-888.628, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.7) : _GLF_IDENTITY(-888.628, (true ? _GLF_IDENTITY(-888.628, max(-888.628, -888.628)) : _GLF_FUZZED(-7.9))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-5.9), (_GLF_FUZZED(-5.9)) - sqrt(0.0))), float(-888.628), bool(true))))), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))) < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)))) && true)), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)))) && true))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || (false))))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)))))), false || (false))))), (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)))))), false || (false))))), (injectionSwitch.x > injectionSwitch.y)))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)))))), false || (false))))), (injectionSwitch.x > injectionSwitch.y)))), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)))))), false || (false))))), (injectionSwitch.x > injectionSwitch.y)))), false, true), false)))))))) && true))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bool(bool(_GLF_IDENTITY(false, false || (false))))))))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), (bool(bool(_GLF_IDENTITY(false, false || (false))))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), 0.0), (true ? mat4x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), 0.0) : _GLF_FUZZED(mat4x2(-0.2, -0.2, -3.2, -469.270, -2.3, -7578.3332, -74.60, 89.53))))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), ! _GLF_IDENTITY((! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), ! (! ((! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(injectionSwitch))))).x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (97356 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x))))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))) || false)), (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bool(! (_GLF_IDENTITY(false, false || (false)))))))), true)))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))))))))
              barrier();
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))), ((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))) || false))))), false, false, false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), true, true), true)))), (bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), true, true), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bool((false))))), false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true), bvec3(bvec4(bvec3(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true), false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true), bvec3(bvec4(bvec3(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true), false)))), true && (bool(_GLF_IDENTITY(bvec3(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true), bvec3(bvec4(bvec3(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true), false)))))))))))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true, ! (! (true))))))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), true, true), true)))), (bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, _GLF_IDENTITY(false, false || (false)), false)))))), true, true), true))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))))), false || (bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, false, true, true))) && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))))))))), false, false, _GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), false, false, false))))))))))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 + (_GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (1)), 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0) >> _GLF_IDENTITY(int(5), int(5))), min(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0) >> _GLF_IDENTITY(int(5), int(5))), (true ? (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0) >> _GLF_IDENTITY(int(5), int(5))) : _GLF_FUZZED(67724))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0) >> _GLF_IDENTITY(int(5), int(5)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
           return;
          }
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  continue;
                 break;
                }
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3.0, 1693.5225)))), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(asinh(-78.31))), float(vec2((true ? 1.0 : _GLF_FUZZED(asinh(-78.31))), 1.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3876.0566)), float(1.0), bool(true)))) / 1.0)))).x))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946), max(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946)))) - 0.0)), (false ? _GLF_FUZZED(dot(vec4(-52.48, 13.24, -87.66, 6.0), vec4(-1048.1341, 1723.8689, -6.9, 0.8))) : (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946), max(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946)))) - 0.0))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946))) > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), (float(float(injectionSwitch.x))) / 1.0)), max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946))) > injectionSwitch.y)), true), true, false)))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946))) > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.0)), bool(false))), injectionSwitch.y)))) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(210.946))) > injectionSwitch.y)), true), _GLF_IDENTITY(true, true && (true)), false))))))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! _GLF_IDENTITY((false), ((false)) && true))))))))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-937.999) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))), true && ((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       break;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) || false)))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) && true)) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
            {
             barrier();
            }
           else
            {
            }
          }
         continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((true ? 22388 : int(4.9)) & 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(injectionSwitch[0], 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0)))), injectionSwitch[1])).x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))), (! (! (false))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6)))))) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - 0.0) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(acosh(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), (gl_WorkGroupSize.x) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), min(0u, _GLF_IDENTITY(0u, ~ (~ (0u))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), min(0u, _GLF_IDENTITY(0u, ~ (~ (0u))))), 0u))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.4)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x) >> 0u, (_GLF_IDENTITY((gl_WorkGroupID.x) >> 0u, ((gl_WorkGroupID.x) >> 0u) | ((gl_WorkGroupID.x) >> 0u))) | (_GLF_IDENTITY((gl_WorkGroupID.x) >> 0u, min((gl_WorkGroupID.x) >> 0u, (gl_WorkGroupID.x) >> 0u)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))) || false)) || false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), bool(bvec2(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), bool(bvec2(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), false)))))))))))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(467.421)), float(injectionSwitch[0]), bool(true))), injectionSwitch[0])), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u, (0u) | (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) << (0u << _GLF_IDENTITY(uint(3u), uint(3u))))))) | (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), uint(uvec2((workgroup_size), 0u))) | (workgroup_size)))))) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))) && true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0))), mix(vec2(_GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0))))[0], min((vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0))))[0], (vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0))))[0])), _GLF_FUZZED(-2399.5357)), vec2(_GLF_FUZZED(63.99), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0))))[1]), bvec2(false, true)))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0)) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec4(_GLF_DEAD(false), true, true, true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(-46857))), bool(false))) > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))) || false))))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x < injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), true && (false || (false))), true && (_GLF_IDENTITY(false || (false), true && (false || (false)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false, false, true)), ! (! (bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false, _GLF_IDENTITY(false, (false) || false), true))))))) && true))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false))))))), true && (_GLF_IDENTITY(false, (false) || false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))), bool(_GLF_IDENTITY(bvec2(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))), false), bvec2(bvec3(bvec2(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))), false), true))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), false || (((injectionSwitch.x > injectionSwitch.y))))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              return;
             return;
            }
          }
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9111.9070)), bool(false))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, false || (true)))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-7.4, 4.4)), max(_GLF_FUZZED(vec2(-7.4, 4.4)), _GLF_FUZZED(vec2(-7.4, 4.4)))))).x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     return;
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), true, false)))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.5)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.5)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))))))) || false)), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (true ? mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0) : _GLF_FUZZED(mat4(-59.32, -3.3, -4.5, 48.60, -1.1, 373.200, 287.386, 75.32, -514.189, -4.7, 15.99, -5.7, 1.5, -2.7, 8.2, -464.470)))))), injectionSwitch)).x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8.5, mix(float(_GLF_FUZZED(379.634)), float(-8.5), bool(true))))), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (false ? _GLF_FUZZED(-4.9) : _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))))), bool(true))))))) || false))))))))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.5)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.5)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))))))) || false)), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (true ? mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0) : _GLF_FUZZED(mat4(-59.32, -3.3, -4.5, 48.60, -1.1, 373.200, 287.386, 75.32, -514.189, -4.7, 15.99, -5.7, 1.5, -2.7, 8.2, -464.470)))))), injectionSwitch)).x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8.5, mix(float(_GLF_FUZZED(379.634)), float(-8.5), bool(true))))), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (false ? _GLF_FUZZED(-4.9) : _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))))), bool(true))))))) || false))))))))))))))))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true)))))))))))
                      continue;
                    }
                   else
                    {
                     barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, true && (false)))), false, true, false)))))))));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, true), true)))))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
                return;
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 & 26602)) < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) | (int(2))))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(_GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), (int(2)) | 0))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * int(_GLF_ONE(1.0, injectionSwitch.y))))
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          continue;
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), 1 * (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) - 0))), min(int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) - 0))), int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) - 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) << 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) + 0), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 & -46863, (0 & -46863) | 0))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.78)), vec2(_GLF_FUZZED(-1115.8790), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, mix(float(_GLF_FUZZED(13.30)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.78)), vec2(_GLF_IDENTITY(_GLF_FUZZED(-1115.8790), float(mat2x3(_GLF_FUZZED(-1115.8790), 1.0, cos(0.0), 1.0, 0.0, 1.0))), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))).x), bool(true))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? 0 : _GLF_FUZZED(_GLF_IDENTITY(46836, (46836) - 0))))], _GLF_FUZZED(_GLF_IDENTITY(-7.0, min(-7.0, -7.0)))), vec2(_GLF_FUZZED(7963.3174), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))))))))))))).y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, true), bvec3(bvec4(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, true), true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))))), bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, true), bvec3(bvec4(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, true), true)))))))), true && (! (_GLF_WRAPPED_IF_FALSE(false)))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 & 33020); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(30245)))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-16651) : _injected_loop_counter)) > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(virtual_gid) : virtual_gid)), (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(virtual_gid) : virtual_gid))) | (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(virtual_gid) : virtual_gid))))], _GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) - 0u), uint(1))), _GLF_IDENTITY(4, _GLF_IDENTITY((true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(_injected_loop_counter)), (_GLF_IDENTITY((true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(_injected_loop_counter)), max((true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(_injected_loop_counter)), (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(_injected_loop_counter))))) >> (1 ^ 1))), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      continue;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), true, true)))))))
        break;
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-75278) : 1))], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), false || (bool(true)))), true && (! (_GLF_IDENTITY(bool(true), false || (bool(true)))))))))))).x), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), mix(float(_GLF_FUZZED(float(188636u))), float(float(_GLF_FUZZED(70.00))), bool(true))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) << 0)], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), (_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), clamp(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x)))) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))), vec3(vec4(vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) + 0.0)) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) - 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true)))))), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))) * mat2(1.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x)) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))), 0.0)))))) < injectionSwitch.y))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-75278) : 1))], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), false || (bool(true)))), true && (! (_GLF_IDENTITY(bool(true), false || (bool(true)))))))))))).x), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), mix(float(_GLF_FUZZED(float(188636u))), float(float(_GLF_FUZZED(70.00))), bool(true))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) << 0)], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), (_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), clamp(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x)))) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))), vec3(vec4(vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) + 0.0)) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) - 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true)))))), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))) * mat2(1.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x)) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))), 0.0)))))) < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-75278) : 1))], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * abs(1.0)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(70.00, float(mat3(70.00, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 1.0))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (_GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))), ! (! (bool(true)))))))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), false || (bool(true)))), true && (! (_GLF_IDENTITY(bool(true), false || (bool(true)))))))))))).x), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), mix(float(_GLF_FUZZED(float(188636u))), float(float(_GLF_FUZZED(70.00))), bool(true))), min(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), mix(float(_GLF_FUZZED(float(188636u))), float(float(_GLF_FUZZED(70.00))), bool(true))), _GLF_IDENTITY(float(_GLF_FUZZED(70.00)), mix(float(_GLF_FUZZED(float(188636u))), float(float(_GLF_FUZZED(70.00))), bool(true))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) << 0)], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), (_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), clamp(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 0 | (1)), 0, 0, 1)))], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), bool(bvec3(_GLF_IDENTITY(bool(true), false || (bool(true))), true, false))))))).x), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(bool(true), false || (bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))).x) / 1.0))))))) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, _GLF_IDENTITY(0.0, float(float(0.0))))), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))), vec3(vec4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), vec4(mat4x3(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), abs(1.0), abs(0.0), 0.0, sin(0.0), exp(0.0), 1.0, 1.0, 0.0)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0))), mix(float(_GLF_FUZZED(-794.240)), float(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0)))), bool(true))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), _GLF_IDENTITY(float(injectionSwitch[1]), float(mat2(float(injectionSwitch[1]), 0.0, 1.0, 0.0))), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) + 0.0)) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) >> 0))], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(70.00, float(mat4x3(_GLF_IDENTITY(70.00, min(70.00, 70.00)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true)), (false ? _GLF_FUZZED(exp2(-1757.5797)) : mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(_GLF_IDENTITY(70.00, min(70.00, 70.00)))), bool(true))))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(vec2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(mat2x3(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0)))) * 1.0), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false || (bool(true))))))).x) - 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), max(float(_GLF_FUZZED(70.00)), _GLF_IDENTITY(float(_GLF_FUZZED(70.00)), (float(_GLF_FUZZED(70.00))) - 0.0))), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false || (bool(true)), ! (! (false || (bool(true)))))))))).x), (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true)))))), (vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, determinant(mat3(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0)), length(0.0), 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1)], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))) * mat2(1.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), clamp(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))).x)) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))), mix(vec3((vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), vec4(mat4x3(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), abs(1.0), abs(0.0), 0.0, sin(0.0), exp(0.0), 1.0, 1.0, 0.0)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0))), mix(float(_GLF_FUZZED(-794.240)), float(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0)))), bool(true))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), _GLF_IDENTITY(float(injectionSwitch[1]), float(mat2(float(injectionSwitch[1]), 0.0, 1.0, 0.0))), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) + 0.0)) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) >> 0))], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(70.00, float(mat4x3(_GLF_IDENTITY(70.00, min(70.00, 70.00)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true)), (false ? _GLF_FUZZED(exp2(-1757.5797)) : mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(_GLF_IDENTITY(70.00, min(70.00, 70.00)))), bool(true))))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(vec2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(mat2x3(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0)))) * 1.0), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false || (bool(true))))))).x) - 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), max(float(_GLF_FUZZED(70.00)), _GLF_IDENTITY(float(_GLF_FUZZED(70.00)), (float(_GLF_FUZZED(70.00))) - 0.0))), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false || (bool(true)), ! (! (false || (bool(true)))))))))).x), (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true)))))), (vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, determinant(mat3(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0)), length(0.0), 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1)], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))) * mat2(1.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), clamp(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))).x)) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))))[0], _GLF_FUZZED((594.465 + 54.44)), (vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), vec4(mat4x3(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), abs(1.0), abs(0.0), 0.0, sin(0.0), exp(0.0), 1.0, 1.0, 0.0)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0))), mix(float(_GLF_FUZZED(-794.240)), float(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0)))), bool(true))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), _GLF_IDENTITY(float(injectionSwitch[1]), float(mat2(float(injectionSwitch[1]), 0.0, 1.0, 0.0))), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) + 0.0)) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) >> 0))], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(70.00, float(mat4x3(_GLF_IDENTITY(70.00, min(70.00, 70.00)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true)), (false ? _GLF_FUZZED(exp2(-1757.5797)) : mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(_GLF_IDENTITY(70.00, min(70.00, 70.00)))), bool(true))))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(vec2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(mat2x3(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0)))) * 1.0), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false || (bool(true))))))).x) - 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), max(float(_GLF_FUZZED(70.00)), _GLF_IDENTITY(float(_GLF_FUZZED(70.00)), (float(_GLF_FUZZED(70.00))) - 0.0))), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false || (bool(true)), ! (! (false || (bool(true)))))))))).x), (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true)))))), (vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, determinant(mat3(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0)), length(0.0), 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1)], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))) * mat2(1.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), clamp(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))).x)) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))))[2]), vec3(_GLF_FUZZED(-76.14), (vec3(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), vec4(mat4x3(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6668.8672), max(_GLF_FUZZED(-6668.8672), _GLF_FUZZED(-6668.8672))), 0.0, 0.0, 0.0), abs(1.0), abs(0.0), 0.0, sin(0.0), exp(0.0), 1.0, 1.0, 0.0)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0))), mix(float(_GLF_FUZZED(-794.240)), float(float(mat4(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, log(1.0)))), bool(true))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), _GLF_IDENTITY(float(injectionSwitch[1]), float(mat2(float(injectionSwitch[1]), 0.0, 1.0, 0.0))), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x) + 0.0)) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) >> 0))], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(70.00, float(mat4x3(_GLF_IDENTITY(70.00, min(70.00, 70.00)), 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(70.00)), bool(true)), (false ? _GLF_FUZZED(exp2(-1757.5797)) : mix(float(_GLF_FUZZED(-6668.8672)), float(_GLF_FUZZED(_GLF_IDENTITY(70.00, min(70.00, 70.00)))), bool(true))))), _GLF_FUZZED(70.00)))))), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(vec2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), float(mat2x3(float(_GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_FUZZED(70.00), _GLF_IDENTITY(_GLF_FUZZED(70.00), max(_GLF_IDENTITY(_GLF_FUZZED(70.00), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6668.8672, _GLF_IDENTITY(float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)), (true ? float(mat4(-6668.8672, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0)) : _GLF_FUZZED(0.5)))))), float(_GLF_FUZZED(70.00)), bool(true))), _GLF_FUZZED(70.00)))))), 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0)))) * 1.0), float(injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false || (bool(true))))))).x) - 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(_GLF_IDENTITY(float(_GLF_FUZZED(70.00)), max(float(_GLF_FUZZED(70.00)), _GLF_IDENTITY(float(_GLF_FUZZED(70.00)), (float(_GLF_FUZZED(70.00))) - 0.0))), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false || (bool(true)), ! (! (false || (bool(true)))))))))).x), (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true)))))), (vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, determinant(mat3(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0)), length(0.0), 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1)], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))))) * mat2(1.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), clamp(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x2(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(70.00)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(true), false || (bool(true))))), 1.0, 0.0, 0.0, 1.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))).x)) - 0.0), 0.0, _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)))))[1], _GLF_FUZZED(-224.170)), bvec3(false, true, false))), 0.0)))))) < injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, (false) || false)))), bool(bvec3(! (bool(bool(_GLF_IDENTITY(false, (false) || false)))), true, false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (false) || false)), true && ((_GLF_IDENTITY(false, (false) || false))))) || false) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))) || false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(10.46)))) - 0.0))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-48.06), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(1.0), clamp(((injectionSwitch)) * mat2(1.0), ((injectionSwitch)) * mat2(1.0), ((injectionSwitch)) * mat2(1.0))))[_GLF_IDENTITY(1, max(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.4)), bvec2(true, false)))) / abs(vec2(1.0, 1.0))), 0.0, abs(1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), mix(vec4(_GLF_FUZZED(-68.93), (vec4(1.0, 0.0, 0.0, 0.0))[1], _GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 0.0))[2], ((vec4(1.0, 0.0, 0.0, 0.0))[2]) - 0.0), _GLF_FUZZED(-9118.9693)), vec4((vec4(1.0, 0.0, 0.0, 0.0))[0], _GLF_FUZZED((- 5.0)), _GLF_FUZZED(-0.0), (vec4(1.0, 0.0, 0.0, 0.0))[3]), bvec4(true, false, false, true)))), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))))), mix(vec2(_GLF_FUZZED(-808.295), _GLF_FUZZED(-585.797)), vec2((vec2(mat4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-48.06), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.4)), bvec2(true, false)))) / abs(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec3(-0.8, 16.03, 907.608), vec3(-8.1, 59.71, 6.1))) : _GLF_IDENTITY(1.0, (1.0) - 0.0))), exp(0.0)), (vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec3(-0.8, 16.03, 907.608), vec3(-8.1, 59.71, 6.1))) : _GLF_IDENTITY(1.0, (1.0) - 0.0))), exp(0.0))) * vec2(1.0, 1.0)))), 1.0))), 0.0, abs(1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))))))[_GLF_IDENTITY(0, ~ (~ (0)))], (vec2(mat4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-48.06), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-48.06), (injectionSwitch)[1])) * vec2(1.0, 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.4)), bvec2(true, false)))) / abs(vec2(1.0, 1.0))), 0.0, abs(1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))))))[1]), bvec2(true, true)))).y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)), false || (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, false, false))))))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), true, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), true, false)))))))))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))))) + vec2(0.0, 0.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0)))))) + vec2(0.0, 0.0)).y : _GLF_FUZZED(718.131)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, _GLF_IDENTITY(~ (~ (2)), int(int(~ (~ (2))))))), 4, 64, 4);
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, ~ (~ (0)))], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(8.6)), float((injectionSwitch)[0]), bool(true))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(496.614), _GLF_FUZZED(-754.000)), bvec2(false, false))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(8.6)), _GLF_IDENTITY(float((injectionSwitch)[0]), min(_GLF_IDENTITY(float((injectionSwitch)[0]), (float((injectionSwitch)[0])) / exp(0.0)), float((injectionSwitch)[0]))), bool(true))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(496.614), _GLF_FUZZED(-754.000)), bvec2(false, false))).y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), ! (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, true && (false))), true, _GLF_IDENTITY(true, ! (! (true))))), ! (! (bool(bvec3((_GLF_IDENTITY(false, true && (false))), true, _GLF_IDENTITY(true, ! (! (true))))))))) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7758.6696), _GLF_FUZZED(5731.6080)), bvec2(false, false)))))) - log(vec2(1.0, 1.0))).x > injectionSwitch.y), true, false, true))))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, 0.0))))) > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)))))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
}
