#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), ! (! (bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))))))), ! (! ((injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true, false, false)))), ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), false || (! (true)))), ! (! (! (_GLF_IDENTITY(! (true), false || (! (true)))))))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 0.0))))).y)) || ((! ((injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false))))))), true, false, false)))), ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), false || (! (true)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) || false), false || (! (true))))))))))))) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) || false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (false))) || false), (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (false))) || false), bool(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (false))) || false), bool(bvec3(! ((_GLF_IDENTITY(false, true && (false))) || false), false, false))), true)))) && true), (! ((_GLF_IDENTITY(false, true && (false))) || false)) || false))))))
          return;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec4(false, true, true, true)))));
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (0 << _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, false || (false))), bvec3(bvec4(bvec3(false, false, false), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))) || false)) || false), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))), bvec3(bvec4(bvec3(false, false, false), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))), false))), true))))) || false)) || false)))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) && true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)) || false), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)) < injectionSwitch.y)), false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))), (true && (_GLF_DEAD(false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), true && (_GLF_IDENTITY(! (true), ! (! (! (true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))))), false)))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)) && _GLF_IDENTITY(true, true && (true)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))), min(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec4(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u, 1u, 1u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec4(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u, 1u, 1u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)).x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), (clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u)), (true ? (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u)) : _GLF_FUZZED(subgroup_id)))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) >> 0u)))))), gl_NumWorkGroups.x)) ^ _GLF_IDENTITY(0u, (0u) << ((1u ^ 1u) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), _GLF_IDENTITY((clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u, (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), (uvec2(0u, (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))) * uvec2(1u, 1u))), min(uint(_GLF_IDENTITY(uvec2(0u, (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), (uvec2(0u, (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))) * uvec2(1u, 1u))), uint(_GLF_IDENTITY(uvec2(0u, (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), (uvec2(0u, (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))) * uvec2(1u, 1u)))))) + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u))), 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u)))), gl_NumWorkGroups.x)) - 0u, (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y)))), max(_GLF_IDENTITY(uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0u), uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u + (0u)), (false ? _GLF_FUZZED(105378u) : _GLF_IDENTITY(0u, 0u + (0u))))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), ~ (~ (clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(9937u, 94379u, 132652u)))).x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u))))))), _GLF_IDENTITY(max((uvec2(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), gl_NumWorkGroups)).x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u))), (max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) | uvec2(0u, 0u))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x))))) - 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x), (max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x)) | (max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x))))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), 0u + (_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y)))), max(uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (~ (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))) / uvec3(1u, 1u, 1u))))).x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u), (true ? _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), clamp(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))), uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), min(uvec2(gl_NumWorkGroups.x, 1u), uvec2(gl_NumWorkGroups.x, 1u))))))))))) - uvec2(0u, 0u) : _GLF_FUZZED(uvec2(1655u, 13188u))))))), gl_NumWorkGroups.x), min(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 0u), (uvec2(gl_NumWorkGroups.x, 0u)) / uvec2(1u, 1u)))), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uvec3(uint(3u), 0u, 1u))))), 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(1u, (1u) | 0u), 1u, 1u) * (gl_NumWorkGroups)).x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))), (_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u))))) | uvec2(0u, 0u))) >> uvec2(0u, 0u)) - uvec2(0u, 0u)))), gl_NumWorkGroups.x))))))), _GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u))), (true ? uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u))) : _GLF_FUZZED(subgroup_local_id)))), gl_NumWorkGroups.x)) - 0u, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))).x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), ~ (~ (clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))) : _GLF_FUZZED(subgroup_size))), min(1u, 1u)))), _GLF_IDENTITY(max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, 1u))), (max(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), ((uvec2(gl_NumWorkGroups.x, 1u))) | uvec2(0u, 0u)), (uvec2(gl_NumWorkGroups.x, 1u)))) | uvec2(0u, 0u))) - uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), gl_NumWorkGroups.x)))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))).x, 1u)))) - uvec2(0u, 0u)))), gl_NumWorkGroups.x), ~ (~ (clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (0u))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))) : _GLF_FUZZED(subgroup_size))), min(1u, 1u)))), _GLF_IDENTITY(max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x, 1u))), (max(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), ((uvec2(gl_NumWorkGroups.x, 1u))) | uvec2(0u, 0u)), (uvec2(gl_NumWorkGroups.x, 1u)))) | uvec2(0u, 0u))) - uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), gl_NumWorkGroups.x))))) | 0u)) - 0u)))))), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) - _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), uint(uvec3(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u)))) ^ 0u)))) ^ 0u)))), uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u), (_GLF_IDENTITY((uvec2(gl_NumWorkGroups.x, 1u)), max((uvec2(gl_NumWorkGroups.x, 1u)), (uvec2(gl_NumWorkGroups.x, 1u)))) - uvec2(0u, 0u)) | uvec2(0u, 0u))) ^ uvec2(0u, 0u))))), gl_NumWorkGroups.x))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), 0u ^ (_GLF_IDENTITY(uint(2u), (uint(2u)) | 0u))))))))), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, 0u ^ (1u)), 1u)) * ((subgroup_id) | (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (2u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), 0u ^ (_GLF_IDENTITY(uint(2u), (uint(2u)) | 0u)))))))))))), _GLF_IDENTITY(subgroup_id, (subgroup_id) - _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 0u)), subgroup_id)) * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u), ((workgroup_base) | _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), max((workgroup_base), (workgroup_base)))) / 1u)) >> 0u)) + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), (subgroup_local_id) << 0u);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, false || (true))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, false || (true)))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, false || (true))))))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || false))));
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4.9)), bool(false))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-11.71)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-11.71)))))))))
            return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, cos(0.0)))).x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true))))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(uvec3(subgroup_base, 0u, 0u))) + ((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), 0u + (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)) + ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), max((false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) | (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size)))))), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_size))) % subgroup_size)), ((false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size))) | ((false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))))))), workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (int(1)) << 0)), min(int(_GLF_IDENTITY(int(1), (int(1)) << 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (int(1)) << 0)), 0 ^ (int(_GLF_IDENTITY(int(1), (int(1)) << 0)))))))) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.8) : injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)) || false))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1.8)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), true && (false || (_GLF_DEAD(false))))), true, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false))) || false))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (! (false)))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + 0.0), injectionSwitch.x)), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0), injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, log(cos(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), (_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, log(cos(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), (false ? _GLF_FUZZED(mat4x3(9190.6937, 70.50, -681.457, 0.3, -3.8, 7162.5817, 4.2, -5.9, -967.098, -1358.1070, -9.6, 51.01)) : mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, log(cos(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0)))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), mix(float(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, log(cos(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-63.31)), bool(false))), 0.0, 1.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(982.436)), bool(false))), 0.0, 0.0, 0.0, 0.0)), 0.0), (_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, log(cos(0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), clamp(determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0), (false ? _GLF_FUZZED(mat4x3(_GLF_IDENTITY(9190.6937, mix(float(_GLF_FUZZED(1429.0924)), float(_GLF_IDENTITY(9190.6937, 1.0 * (9190.6937))), bool(true))), _GLF_IDENTITY(70.50, clamp(70.50, 70.50, 70.50)), -681.457, 0.3, -3.8, 7162.5817, 4.2, -5.9, -967.098, -1358.1070, -9.6, 51.01)) : mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, log(cos(0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0)))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-2604.6850)), bool(false)))))) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), min(~ (_GLF_IDENTITY(4, (4) - 0)), ~ (_GLF_IDENTITY(4, (4) - 0)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), min(~ (_GLF_IDENTITY(4, (4) - 0)), ~ (_GLF_IDENTITY(4, (4) - 0)))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) - 0)), min(~ (_GLF_IDENTITY(4, (4) - 0)), ~ (_GLF_IDENTITY(4, (4) - 0))))))))))), 64, 4);
}
