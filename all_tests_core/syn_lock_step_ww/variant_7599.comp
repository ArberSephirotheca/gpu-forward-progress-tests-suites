#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, true)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, true))))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(443.984)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(_GLF_IDENTITY(sqrt(0.0), 0.0 + (sqrt(0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(sqrt(0.0), 0.0 + (sqrt(0.0))), max(_GLF_IDENTITY(sqrt(0.0), 0.0 + (sqrt(0.0))), _GLF_IDENTITY(sqrt(0.0), 0.0 + (sqrt(0.0)))))) - sqrt(0.0))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false, false))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), false || (bool(_GLF_IDENTITY(false, ! (! (false))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(false, true && (false)), true)))))), false || (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), ((! (false))) && true))))), false, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), min(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), _GLF_IDENTITY(max(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(((injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), vec2(mat2(((injectionSwitch) * mat2(1.0)), cos(0.0), 1.0))))), ((injectionSwitch) * mat2(1.0))), mix(vec2((max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[0], _GLF_FUZZED(-35.67)), vec2(_GLF_FUZZED(1.0), (max(((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0))), ((injectionSwitch) * mat2(1.0))))[1]), bvec2(false, true)))))) * mat2(1.0))).x, mix(float(_GLF_FUZZED(1.5)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), min(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), _GLF_IDENTITY(max(((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.5))))), ((injectionSwitch) * mat2(1.0))), mix(vec2((max(((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch))) * mat2(1.0)), (_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))) * mat2(1.0))))[0], _GLF_FUZZED(-35.67)), vec2(_GLF_FUZZED(1.0), (max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[1]), bvec2(false, true)))))) * mat2(1.0))).x, float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(max(((injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), mix(vec2((((injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED(34.04)), vec2(_GLF_FUZZED(6570.9998), _GLF_IDENTITY((((injectionSwitch) * mat2(1.0)))[1], ((((injectionSwitch) * mat2(1.0)))[1]) * cos(0.0))), bvec2(false, true)))), min(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), _GLF_IDENTITY(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), mix(vec2((max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[0], _GLF_FUZZED(-35.67)), vec2(_GLF_FUZZED(1.0), (max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[1]), bvec2(false, true)))))) * mat2(1.0))).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), min(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))))))), _GLF_IDENTITY(max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))), mix(vec2((max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[0], _GLF_FUZZED(-35.67)), vec2(_GLF_FUZZED(1.0), (max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))) * 1)]), bvec2(false, true)))))) * _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), mat2(mat2x4(_GLF_IDENTITY(transpose(mat2(1.0)), (false ? _GLF_FUZZED(mat2(-7.4, -8687.6912, -0.9, -83.99)) : transpose(mat2(1.0))))))))))).x) - 0.0), 1.0, 1.0, 1.0, 1.0, 1.0)))), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true), (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.5) : injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), ! (! (! ((false) && true)))))))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)) || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false))) || false)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(min(injectionSwitch, injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(min(injectionSwitch, injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(min(injectionSwitch, injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(min(injectionSwitch, injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true)))))) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], 0u | (gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))) || false)), ! (! (! (_GLF_IDENTITY(false, false || (false))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(22815u, 106202u, 106885u)) : gl_WorkGroupID)), (gl_WorkGroupID) | (gl_WorkGroupID))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), clamp(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), (false ? _GLF_FUZZED(uvec3(96266u, 31129u, 132542u)) : _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(0u, 0u, 0u)))) | (gl_WorkGroupID)), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))))), (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))) | uvec3(0u, 0u, 0u)), ~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | _GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))), min((gl_WorkGroupID), (_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))), gl_WorkGroupID))))), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uint(1u << _GLF_IDENTITY(uint(7u), uint(7u)))), (uint(uint(1u << _GLF_IDENTITY(uint(7u), uint(7u))))) | (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) / 1u)) >> 0u)), ~ (~ (uint(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) / 1u)) >> 0u)))))))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))))), ~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u))) ^ (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4((gl_WorkGroupID), 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4((gl_WorkGroupID), 0u)))), clamp(uvec3(_GLF_IDENTITY(uvec4((gl_WorkGroupID), 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4((gl_WorkGroupID), 0u)))), uvec3(_GLF_IDENTITY(uvec4((gl_WorkGroupID), 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4((_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))), 0u)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(0u, 0u, 0u)), 0u), min(uvec4(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(0u, 0u, 0u)), 0u), uvec4(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) - uvec3(0u, 0u, 0u)), 0u))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4((gl_WorkGroupID), 0u)))), (uvec3(_GLF_IDENTITY(uvec4((gl_WorkGroupID), 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4((gl_WorkGroupID), 0u))))) * uvec3(1u, 1u, 1u))))))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(516.980, -18.85)))).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0)))), injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), uint(uvec3(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), 1u, 1u))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))))) * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_size) : _GLF_FUZZED(workgroup_base))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u | (subgroup_id * subgroup_size), (0u | (subgroup_id * subgroup_size)) | 0u))), 0u ^ ((false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))))) * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_size) : _GLF_FUZZED(workgroup_base))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u | (subgroup_id * subgroup_size), (0u | (subgroup_id * subgroup_size)) | 0u))))), ((false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_size) : _GLF_FUZZED(workgroup_base))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (subgroup_id * subgroup_size)))) >> 0u)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u | (subgroup_id * subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (subgroup_id * subgroup_size)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (subgroup_id * subgroup_size))))) | 0u, (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u ^ (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.8, 333.210)) : injectionSwitch)), 0.0, 0.0))).x))), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), 0u | (subgroup_id * subgroup_size))))) | 0u))))), (true ? _GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))) * 1u)))) >> uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).x))), 0u | (subgroup_id * subgroup_size)))), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec3(subgroup_id, 1u, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(8u), uint(8u)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (~ (uvec3(subgroup_id, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))))) * subgroup_size), (0u | (subgroup_id * subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (subgroup_id * subgroup_size)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (_GLF_IDENTITY(subgroup_id, uint(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))) * subgroup_size))))) | 0u))) : _GLF_FUZZED((workgroup_base * num_workgroup)))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-14.53), _GLF_FUZZED(vec2(7.1, 34.90).r)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, true), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + (0u & 153u))), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))), true && (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))))) ? _GLF_FUZZED(workgroup_id) : 0u)), _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u, (0u) - 0u) ^ _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u))))) >> _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)))), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))), _GLF_IDENTITY((0u ^ 0u), ((0u ^ _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED((packUnorm4x8(vec4(-7.8, 80.35, -33.70, 208.787)))))), 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (0u) << 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), (false ? _GLF_FUZZED(uvec2(79313u, 56950u)) : uvec2(_GLF_IDENTITY(0u, (0u) << 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), clamp(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec2(_GLF_IDENTITY(uint(6u), uint(6u)), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (true ? _GLF_IDENTITY(uint(6u), uint(6u)) : _GLF_FUZZED(workgroup_size)))))))))))))) * 1u))))) >> 0u)), ~ (_GLF_IDENTITY(~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (_GLF_IDENTITY(0u ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u ^ 0u))))), (_GLF_IDENTITY(~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (_GLF_IDENTITY(0u ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u ^ 0u))))), ~ (~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (_GLF_IDENTITY(0u ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u ^ 0u))))))))) | (_GLF_IDENTITY(~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (_GLF_IDENTITY(0u ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u ^ 0u))))), max(~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (_GLF_IDENTITY(0u ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u ^ 0u))))), ~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (_GLF_IDENTITY(0u ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u ^ 0u)))))))))))))) << 0u), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u)))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))), min(_GLF_IDENTITY((~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))), ((~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u)))))))) - uvec4(0u, 0u, 0u, 0u)), (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u)))))))))))))), (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u)))))), (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | (uvec4(0u, 0u, 0u, 0u) ^ uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u, (0u) << 0u) ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) - 0u))))))), min(_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))), max((~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))), (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))))) | (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ _GLF_IDENTITY((~ (uvec4(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), 0u, (0u ^ 0u)))), max(_GLF_IDENTITY((~ (uvec4(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), 0u, (0u ^ 0u)))), ~ (~ ((~ (uvec4(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), 0u, (0u ^ 0u))))))), (~ (uvec4(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), 0u, (0u ^ 0u))))))))), ((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u, ~ (~ (0u))) ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (_GLF_IDENTITY(0u, min(0u, 0u)) ^ 0u))))))) | (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u)))))))) - uvec4(0u, 0u, 0u, 0u)), (~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u)))))), ((_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))) | ((_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)), ~ (~ (uvec4(subgroup_id * subgroup_size, 0u, 0u, (0u ^ 0u))))))))) ^ uvec4(0u, 0u, 0u, 0u))))))))))))) >> ((0u | 0u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, 0u ^ (4u)), min(_GLF_IDENTITY(4u, 0u ^ (4u)), _GLF_IDENTITY(4u, 0u ^ (4u))))), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(4u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)))), min((~ (_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)))), (~ (_GLF_IDENTITY(4u, clamp(4u, 4u, 4u))))))))))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 0, 1, 1), ~ (~ (ivec4(4, 0, 1, 1))))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, _GLF_IDENTITY(4, (4) | 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false, false, false))))))))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4((! ((injectionSwitch.x > injectionSwitch.y))), false, false, true))))))))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(624.002)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))) * 1.0)))) / 1.0) > injectionSwitch.y))))
  barrier();
}
