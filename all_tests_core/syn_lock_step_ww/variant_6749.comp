#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), ((false)) || false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, true, true))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u))) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u)))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (_injected_loop_counter)) > (0 ^ 0)); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + int(_GLF_ZERO(0.0, injectionSwitch.x))))) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id))), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) ? subgroup_size : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))), clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), clamp(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))) * subgroup_size)))), (~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))), _GLF_IDENTITY(0u | ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), min(0u | ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), 0u | ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))))), (~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), workgroup_base + subgroup_id * subgroup_size))))) * 1u))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, 0u, 0u))), subgroup_id * subgroup_size)))))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))) + subgroup_id * subgroup_size))))))) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), clamp(~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))))) + subgroup_local_id, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (subgroup_size)), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), clamp(~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), (false ? _GLF_FUZZED((subgroup_local_id >> subgroup_size)) : (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size))))))) + subgroup_local_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) + subgroup_local_id))) - 0u);
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)))), clamp(~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)))), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-5134) : 1, max(_GLF_IDENTITY(false ? _GLF_FUZZED(-5134) : 1, int(int(_GLF_IDENTITY(false ? _GLF_FUZZED(-5134) : 1, ~ (~ (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-5134) : 1)))))), false ? _GLF_FUZZED(-5134) : 1)))))), ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)))))), (_GLF_IDENTITY(true ? ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)))) : _GLF_FUZZED(abs(-46736)), 1 * (true ? ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)))) : _GLF_FUZZED(abs(-46736))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | 0)))) | (1))), max(~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, min(1, 1))))), ~ (1)))), 0 | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | 0)))) | (1))), max(~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, min(1, 1))))), ~ (1)))))))), clamp((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5134), 0 ^ (_GLF_FUZZED(-5134)))), (_GLF_IDENTITY((_GLF_FUZZED(-5134)), ((_GLF_FUZZED(-5134))) | ((_GLF_FUZZED(-5134))))) | ((_GLF_FUZZED(-5134)))) | (_GLF_FUZZED(-5134)))) - 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))), ((_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134))))) | ((_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(_GLF_IDENTITY(-5134, int(ivec2(-5134, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))) / 1) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), max(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_IDENTITY(_GLF_FUZZED(-5134), clamp(_GLF_FUZZED(-5134), _GLF_FUZZED(-5134), _GLF_FUZZED(-5134)))))) - 0), _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0)))) - 0)), 0 + (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), max(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-5134, ~ (~ (-5134)))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-5134, 1 * (_GLF_IDENTITY(-5134, (-5134) - 0)))), ~ (~ (_GLF_FUZZED(-5134))))) << 0), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0)))) - 0)))))) : 1)))), ((~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), _GLF_IDENTITY((_GLF_FUZZED(-5134)), (_GLF_IDENTITY((_GLF_FUZZED(-5134)), ((_GLF_FUZZED(-5134))) | ((_GLF_IDENTITY(_GLF_FUZZED(-5134), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_FUZZED(-5134), (false ? _GLF_FUZZED(-25381) : _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) - 0))), 0, 0), clamp(ivec3(_GLF_IDENTITY(_GLF_FUZZED(-5134), (false ? _GLF_FUZZED(-25381) : _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) - 0))), 0, 0), ivec3(_GLF_IDENTITY(_GLF_FUZZED(-5134), (false ? _GLF_FUZZED(-25381) : _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) - 0))), 0, 0), ivec3(_GLF_IDENTITY(_GLF_FUZZED(-5134), (false ? _GLF_FUZZED(-25381) : _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) - 0))), 0, 0))))))))) | ((_GLF_FUZZED(-5134)))) | (_GLF_FUZZED(-5134)))) - 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-5134, clamp(-5134, -5134, _GLF_IDENTITY(-5134, (-5134) | (_GLF_IDENTITY(-5134, (-5134) | (-5134))))))), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) ^ 0), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134))))) | ((_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134))))))) / 1) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), min(_GLF_FUZZED(-5134), _GLF_FUZZED(-5134))), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_IDENTITY(_GLF_FUZZED(-5134), clamp(_GLF_FUZZED(_GLF_IDENTITY(-5134, max(-5134, _GLF_IDENTITY(-5134, min(-5134, -5134))))), _GLF_FUZZED(-5134), _GLF_FUZZED(-5134)))))) - 0), _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0)))) - 0)), 0 + (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), max(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), ~ (~ (_GLF_FUZZED(-5134))))) << 0), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0), _GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_IDENTITY(_GLF_FUZZED(-5134), (_GLF_FUZZED(-5134)) | (_GLF_FUZZED(-5134)))) - 0)))) - 0)))))) : 1))))) + 0)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), clamp((_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) | (1))), (_GLF_IDENTITY(1, (1) | (1))))), max(_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))), ~ (1)))), 0 ^ ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(clamp((_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, (1) | (1)))), (false ? _GLF_FUZZED(53120) : clamp((_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, (1) | (1))))))), max(_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))), ~ (1)))))))), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-5134, max(-5134, -5134)), int(int(-5134)))) : 1)))), (false ? _GLF_FUZZED(85900) : (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-5134, int(int(-5134)))) : 1))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), int(ivec4((1), (1 | 1), 1, 0))) | (1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0))) ^ ((1) | (1)))))) >> 0)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0))) ^ ((1) | (1)))))) >> 0))) - 0) ^ 0)) / 1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY(~ (~ (~ (1))), (~ (~ (~ (1)))) - 0)), ~ (1))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((1), ((1)) ^ 0), 1, 1), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY((1), ((1)) ^ 0), 1, 1)))), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((1), ((1)) ^ 0), 1, 1), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY((1), ((1)) ^ 0), 1, 1))))) / 1)) | (1))))))), (_GLF_IDENTITY(true ? clamp(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) << 0)) >> 0) | (1))), ~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) / (0 | (1 | 1)))) | (1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (~ (~ (_GLF_IDENTITY(1, (1) | (1))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1))))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1))))))), ~ (~ ((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (~ (~ (_GLF_IDENTITY(1, (1) | (1))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1))))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))))))))) : _GLF_FUZZED(65346), ~ (~ (true ? clamp(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) << 0)) >> 0) | (1))), ~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) / (0 | (1 | 1)))) | (1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (~ (~ (_GLF_IDENTITY(1, (1) | (1))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1))))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1))))))), ~ (~ ((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (~ (~ (_GLF_IDENTITY(1, (1) | (1))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1))))))) | (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))))))))) : _GLF_FUZZED(65346)))))), (clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) >> 0)), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))))) ^ 0)), max(~ (1), _GLF_IDENTITY(~ (1), _GLF_IDENTITY((false ? _GLF_FUZZED((-25054 | -19799)) : ~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (1) | (1))))) / 1))), 0 | ((false ? _GLF_FUZZED((-25054 | -19799)) : ~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))) / 1))))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(-23912)))) << 0))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))) + 0)), ~ (1))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1))))), 0 | (~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1))))))), ~ (_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(81094) : 1))) | _GLF_IDENTITY((1), (0 << _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), ((1)) | ((1)))))))))))))))), max(~ (1), ~ (1)))))), int(_GLF_IDENTITY(ivec4(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))) | (1))), max(~ (1), ~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))) | (1))), max(~ (1), ~ (1))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))) | (1))), max(~ (1), ~ (1))))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), ((1)) - 0), (1))))), clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), max(~ _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), min((_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), min((_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(1, (1) | (1))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) / 1)))), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))))), max(~ (1), ~ (1)))))), _GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, 0), (ivec4(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), max(~ (1), ~ (1))), _GLF_IDENTITY(0, max(0, 0)) + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), clamp((1) | (1), (1) | (1), (1) | (1))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))))), max(~ (1), ~ (1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), max(~ (1), ~ (1))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (1) | (1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))))), max(~ (1), ~ (1))))))) << (0 | (0 | 0))), 1, 0, 0)) | (ivec4(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), (_GLF_IDENTITY((1), 0 | ((1)))) | (_GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), 1 * ((1))))))))), _GLF_IDENTITY(max(~ (1), ~ (1)), (max(~ (1), ~ (1))) | (_GLF_IDENTITY(max(~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((+ 48856))))), ~ (1)), 1 * (max(~ (1), ~ (1))))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), clamp(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), ~ (~ (~ (_GLF_IDENTITY(1, (1) | (1))))))) ^ 0))), ~ (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))), ((_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), int(int((1))))))) + 0), ~ (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ~ (~ ((1) | (1)))))))))))))), max(~ (1), ~ (1)))))), 1, 0, 0)))))) ^ 0))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << (0 | (0 | 0)), clamp((1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)))))))), max(~ (1), ~ (1)))), (false ? _GLF_FUZZED(96624) : (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << (0 | (0 | 0)), clamp((1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)))))))), max(~ (1), ~ (1))))))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << (0 | (0 | 0)), clamp((1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)))))))), max(~ (1), ~ (1)))), (false ? _GLF_FUZZED(96624) : (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << (0 | (0 | 0)), clamp((1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)))))))), max(~ (1), ~ (1))))))), (true ? subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5134) : 1))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << (0 | (0 | 0)), clamp((1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)))))))), max(~ (1), ~ (1)))), (false ? _GLF_FUZZED(96624) : (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << (0 | (0 | 0)), clamp((1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)), (1) << (0 | (0 | 0)))))))), max(~ (1), ~ (1))))))) : _GLF_FUZZED(126856u)))) << 0u)))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 0) | 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))), bool(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
            barrier();
           continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) / _GLF_IDENTITY(1, clamp(1, 1, 1))), 0 + (4)), 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             break;
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))), false || (false)))) || false))), false, false)))))))), ! _GLF_IDENTITY((! ((! (false)))), ((! ((! (false))))) && true)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(-7.0) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), min(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0)), max(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(403.987) : injectionSwitch[0])), injectionSwitch[1])).y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false))))), (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_injected_loop_counter != 1)))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, false || (true)), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY((false), bool(bvec3((false), true, false))))), ! (! (! (bool(_GLF_IDENTITY((false), bool(bvec3((false), true, false))))))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), false || (bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), false || (bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false))))))))))
  return;
}
